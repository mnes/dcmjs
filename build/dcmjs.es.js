var __create = Object.create;
var __defProp = Object.defineProperty;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __commonJS = (callback, module) => () => {
  if (!module) {
    module = {exports: {}};
    callback(module.exports, module);
  }
  return module.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};
var __exportStar = (target, module, desc) => {
  if (module && typeof module === "object" || typeof module === "function") {
    for (let key of __getOwnPropNames(module))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, {get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable});
  }
  return target;
};
var __toModule = (module) => {
  return __exportStar(__markAsModule(__defProp(module != null ? __create(__getProtoOf(module)) : {}, "default", module && module.__esModule && "default" in module ? {get: () => module.default, enumerable: true} : {value: module, enumerable: true})), module);
};

// node_modules/loglevelnext/lib/factory/MethodFactory.js
var require_MethodFactory = __commonJS((exports, module) => {
  var noop = () => {
  };
  var levels = Symbol("log-levels");
  var instance = Symbol("log-instance");
  module.exports = class MethodFactory {
    constructor(logger) {
      this[instance] = logger;
      this[levels] = {
        TRACE: 0,
        DEBUG: 1,
        INFO: 2,
        WARN: 3,
        ERROR: 4,
        SILENT: 5
      };
    }
    get levels() {
      return this[levels];
    }
    get logger() {
      return this[instance];
    }
    set logger(logger) {
      this[instance] = logger;
    }
    get methods() {
      return Object.keys(this.levels).map((key) => key.toLowerCase()).filter((key) => key !== "silent");
    }
    bindMethod(obj, methodName) {
      const method = obj[methodName];
      if (typeof method.bind === "function") {
        return method.bind(obj);
      }
      try {
        return Function.prototype.bind.call(method, obj);
      } catch (e) {
        return function result() {
          return Function.prototype.apply.apply(method, [obj, arguments]);
        };
      }
    }
    distillLevel(level) {
      let result = level;
      if (typeof result === "string" && typeof this.levels[result.toUpperCase()] !== "undefined") {
        result = this.levels[result.toUpperCase()];
      }
      if (this.levelValid(result)) {
        return result;
      }
      return false;
    }
    levelValid(level) {
      if (typeof level === "number" && level >= 0 && level <= this.levels.SILENT) {
        return true;
      }
      return false;
    }
    make(methodName) {
      if (methodName === "debug") {
        methodName = "log";
      }
      if (typeof console[methodName] !== "undefined") {
        return this.bindMethod(console, methodName);
      } else if (typeof console.log !== "undefined") {
        return this.bindMethod(console, "log");
      }
      return noop;
    }
    replaceMethods(logLevel) {
      const level = this.distillLevel(logLevel);
      if (level == null) {
        throw new Error(`loglevelnext: replaceMethods() called with invalid level: ${logLevel}`);
      }
      if (!this.logger || this.logger.type !== "LogLevel") {
        throw new TypeError("loglevelnext: Logger is undefined or invalid. Please specify a valid Logger instance.");
      }
      this.methods.forEach((methodName) => {
        const {[methodName.toUpperCase()]: methodLevel} = this.levels;
        this.logger[methodName] = methodLevel < level ? noop : this.make(methodName);
      });
      this.logger.log = this.logger.debug;
    }
  };
});

// node_modules/loglevelnext/lib/factory/PrefixFactory.js
var require_PrefixFactory = __commonJS((exports, module) => {
  var MethodFactory = require_MethodFactory();
  var defaults = {
    level: (opts) => `[${opts.level}]`,
    name: (opts) => opts.logger.name,
    template: "{{time}} {{level}} ",
    time: () => new Date().toTimeString().split(" ")[0]
  };
  module.exports = class PrefixFactory extends MethodFactory {
    constructor(logger, options) {
      super(logger);
      this.options = Object.assign({}, defaults, options);
    }
    interpolate(level) {
      return this.options.template.replace(/{{([^{}]*)}}/g, (stache, prop) => {
        const fn = this.options[prop];
        if (fn) {
          return fn({level, logger: this.logger});
        }
        return stache;
      });
    }
    make(methodName) {
      const og = super.make(methodName);
      return (...args) => {
        const output = this.interpolate(methodName);
        const [first] = args;
        if (typeof first === "string") {
          args[0] = output + first;
        } else {
          args.unshift(output);
        }
        og(...args);
      };
    }
  };
});

// node_modules/loglevelnext/lib/LogLevel.js
var require_LogLevel = __commonJS((exports, module) => {
  var PrefixFactory = require_PrefixFactory();
  var MethodFactory = require_MethodFactory();
  var defaults = {
    factory: null,
    level: "warn",
    name: +new Date(),
    prefix: null
  };
  module.exports = class LogLevel {
    constructor(options) {
      this.type = "LogLevel";
      this.options = Object.assign({}, defaults, options);
      this.methodFactory = options.factory;
      if (!this.methodFactory) {
        const factory = options.prefix ? new PrefixFactory(this, options.prefix) : new MethodFactory(this);
        this.methodFactory = factory;
      }
      if (!this.methodFactory.logger) {
        this.methodFactory.logger = this;
      }
      this.name = options.name || "<unknown>";
      this.level = this.options.level;
    }
    get factory() {
      return this.methodFactory;
    }
    set factory(factory) {
      factory.logger = this;
      this.methodFactory = factory;
      this.methodFactory.replaceMethods(this.level);
    }
    disable() {
      this.level = this.levels.SILENT;
    }
    enable() {
      this.level = this.levels.TRACE;
    }
    get level() {
      return this.currentLevel;
    }
    set level(logLevel) {
      const level = this.methodFactory.distillLevel(logLevel);
      if (level === false || level == null) {
        throw new RangeError(`loglevelnext: setLevel() called with invalid level: ${logLevel}`);
      }
      this.currentLevel = level;
      this.methodFactory.replaceMethods(level);
      if (typeof console === "undefined" && level < this.levels.SILENT) {
        console.warn("loglevelnext: console is undefined. The log will produce no output.");
      }
    }
    get levels() {
      return this.methodFactory.levels;
    }
  };
});

// node_modules/loglevelnext/lib/index.js
var require_lib = __commonJS((exports, module) => {
  var LogLevel = require_LogLevel();
  var MethodFactory = require_MethodFactory();
  var PrefixFactory = require_PrefixFactory();
  var factories = Symbol("log-factories");
  var DefaultLogger = class extends LogLevel {
    constructor() {
      super({name: "default"});
      this.cache = {default: this};
      this[factories] = {MethodFactory, PrefixFactory};
    }
    get factories() {
      return this[factories];
    }
    get loggers() {
      return this.cache;
    }
    create(opts) {
      let options;
      if (typeof opts === "string") {
        options = {name: opts};
      } else {
        options = Object.assign({}, opts);
      }
      if (!options.id) {
        options.id = options.name;
      }
      const {name, id} = options;
      const defaults = {level: this.level};
      if (typeof name !== "string" || !name || !name.length) {
        throw new TypeError("You must supply a name when creating a logger.");
      }
      let logger = this.cache[id];
      if (!logger) {
        logger = new LogLevel(Object.assign({}, defaults, options));
        this.cache[id] = logger;
      }
      return logger;
    }
  };
  module.exports = new DefaultLogger();
  module.exports.default = module.exports;
});

// node_modules/iota-array/iota.js
var require_iota = __commonJS((exports, module) => {
  "use strict";
  function iota(n) {
    var result = new Array(n);
    for (var i = 0; i < n; ++i) {
      result[i] = i;
    }
    return result;
  }
  module.exports = iota;
});

// node_modules/is-buffer/index.js
var require_is_buffer = __commonJS((exports, module) => {
  /*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  module.exports = function(obj) {
    return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer);
  };
  function isBuffer(obj) {
    return !!obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
  }
  function isSlowBuffer(obj) {
    return typeof obj.readFloatLE === "function" && typeof obj.slice === "function" && isBuffer(obj.slice(0, 0));
  }
});

// node_modules/ndarray/ndarray.js
var require_ndarray = __commonJS((exports, module) => {
  var iota = require_iota();
  var isBuffer = require_is_buffer();
  var hasTypedArrays = typeof Float64Array !== "undefined";
  function compare1st(a, b) {
    return a[0] - b[0];
  }
  function order() {
    var stride = this.stride;
    var terms = new Array(stride.length);
    var i;
    for (i = 0; i < terms.length; ++i) {
      terms[i] = [Math.abs(stride[i]), i];
    }
    terms.sort(compare1st);
    var result = new Array(terms.length);
    for (i = 0; i < result.length; ++i) {
      result[i] = terms[i][1];
    }
    return result;
  }
  function compileConstructor(dtype, dimension) {
    var className = ["View", dimension, "d", dtype].join("");
    if (dimension < 0) {
      className = "View_Nil" + dtype;
    }
    var useGetters = dtype === "generic";
    if (dimension === -1) {
      var code = "function " + className + "(a){this.data=a;};var proto=" + className + ".prototype;proto.dtype='" + dtype + "';proto.index=function(){return -1};proto.size=0;proto.dimension=-1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function(){return new " + className + "(this.data);};proto.get=proto.set=function(){};proto.pick=function(){return null};return function construct_" + className + "(a){return new " + className + "(a);}";
      var procedure = new Function(code);
      return procedure();
    } else if (dimension === 0) {
      var code = "function " + className + "(a,d) {this.data = a;this.offset = d};var proto=" + className + ".prototype;proto.dtype='" + dtype + "';proto.index=function(){return this.offset};proto.dimension=0;proto.size=1;proto.shape=proto.stride=proto.order=[];proto.lo=proto.hi=proto.transpose=proto.step=function " + className + "_copy() {return new " + className + "(this.data,this.offset)};proto.pick=function " + className + "_pick(){return TrivialArray(this.data);};proto.valueOf=proto.get=function " + className + "_get(){return " + (useGetters ? "this.data.get(this.offset)" : "this.data[this.offset]") + "};proto.set=function " + className + "_set(v){return " + (useGetters ? "this.data.set(this.offset,v)" : "this.data[this.offset]=v") + "};return function construct_" + className + "(a,b,c,d){return new " + className + "(a,d)}";
      var procedure = new Function("TrivialArray", code);
      return procedure(CACHED_CONSTRUCTORS[dtype][0]);
    }
    var code = ["'use strict'"];
    var indices = iota(dimension);
    var args = indices.map(function(i2) {
      return "i" + i2;
    });
    var index_str = "this.offset+" + indices.map(function(i2) {
      return "this.stride[" + i2 + "]*i" + i2;
    }).join("+");
    var shapeArg = indices.map(function(i2) {
      return "b" + i2;
    }).join(",");
    var strideArg = indices.map(function(i2) {
      return "c" + i2;
    }).join(",");
    code.push("function " + className + "(a," + shapeArg + "," + strideArg + ",d){this.data=a", "this.shape=[" + shapeArg + "]", "this.stride=[" + strideArg + "]", "this.offset=d|0}", "var proto=" + className + ".prototype", "proto.dtype='" + dtype + "'", "proto.dimension=" + dimension);
    code.push("Object.defineProperty(proto,'size',{get:function " + className + "_size(){return " + indices.map(function(i2) {
      return "this.shape[" + i2 + "]";
    }).join("*"), "}})");
    if (dimension === 1) {
      code.push("proto.order=[0]");
    } else {
      code.push("Object.defineProperty(proto,'order',{get:");
      if (dimension < 4) {
        code.push("function " + className + "_order(){");
        if (dimension === 2) {
          code.push("return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})");
        } else if (dimension === 3) {
          code.push("var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);if(s0>s1){if(s1>s2){return [2,1,0];}else if(s0>s2){return [1,2,0];}else{return [1,0,2];}}else if(s0>s2){return [2,0,1];}else if(s2>s1){return [0,1,2];}else{return [0,2,1];}}})");
        }
      } else {
        code.push("ORDER})");
      }
    }
    code.push("proto.set=function " + className + "_set(" + args.join(",") + ",v){");
    if (useGetters) {
      code.push("return this.data.set(" + index_str + ",v)}");
    } else {
      code.push("return this.data[" + index_str + "]=v}");
    }
    code.push("proto.get=function " + className + "_get(" + args.join(",") + "){");
    if (useGetters) {
      code.push("return this.data.get(" + index_str + ")}");
    } else {
      code.push("return this.data[" + index_str + "]}");
    }
    code.push("proto.index=function " + className + "_index(", args.join(), "){return " + index_str + "}");
    code.push("proto.hi=function " + className + "_hi(" + args.join(",") + "){return new " + className + "(this.data," + indices.map(function(i2) {
      return ["(typeof i", i2, "!=='number'||i", i2, "<0)?this.shape[", i2, "]:i", i2, "|0"].join("");
    }).join(",") + "," + indices.map(function(i2) {
      return "this.stride[" + i2 + "]";
    }).join(",") + ",this.offset)}");
    var a_vars = indices.map(function(i2) {
      return "a" + i2 + "=this.shape[" + i2 + "]";
    });
    var c_vars = indices.map(function(i2) {
      return "c" + i2 + "=this.stride[" + i2 + "]";
    });
    code.push("proto.lo=function " + className + "_lo(" + args.join(",") + "){var b=this.offset,d=0," + a_vars.join(",") + "," + c_vars.join(","));
    for (var i = 0; i < dimension; ++i) {
      code.push("if(typeof i" + i + "==='number'&&i" + i + ">=0){d=i" + i + "|0;b+=c" + i + "*d;a" + i + "-=d}");
    }
    code.push("return new " + className + "(this.data," + indices.map(function(i2) {
      return "a" + i2;
    }).join(",") + "," + indices.map(function(i2) {
      return "c" + i2;
    }).join(",") + ",b)}");
    code.push("proto.step=function " + className + "_step(" + args.join(",") + "){var " + indices.map(function(i2) {
      return "a" + i2 + "=this.shape[" + i2 + "]";
    }).join(",") + "," + indices.map(function(i2) {
      return "b" + i2 + "=this.stride[" + i2 + "]";
    }).join(",") + ",c=this.offset,d=0,ceil=Math.ceil");
    for (var i = 0; i < dimension; ++i) {
      code.push("if(typeof i" + i + "==='number'){d=i" + i + "|0;if(d<0){c+=b" + i + "*(a" + i + "-1);a" + i + "=ceil(-a" + i + "/d)}else{a" + i + "=ceil(a" + i + "/d)}b" + i + "*=d}");
    }
    code.push("return new " + className + "(this.data," + indices.map(function(i2) {
      return "a" + i2;
    }).join(",") + "," + indices.map(function(i2) {
      return "b" + i2;
    }).join(",") + ",c)}");
    var tShape = new Array(dimension);
    var tStride = new Array(dimension);
    for (var i = 0; i < dimension; ++i) {
      tShape[i] = "a[i" + i + "]";
      tStride[i] = "b[i" + i + "]";
    }
    code.push("proto.transpose=function " + className + "_transpose(" + args + "){" + args.map(function(n, idx) {
      return n + "=(" + n + "===undefined?" + idx + ":" + n + "|0)";
    }).join(";"), "var a=this.shape,b=this.stride;return new " + className + "(this.data," + tShape.join(",") + "," + tStride.join(",") + ",this.offset)}");
    code.push("proto.pick=function " + className + "_pick(" + args + "){var a=[],b=[],c=this.offset");
    for (var i = 0; i < dimension; ++i) {
      code.push("if(typeof i" + i + "==='number'&&i" + i + ">=0){c=(c+this.stride[" + i + "]*i" + i + ")|0}else{a.push(this.shape[" + i + "]);b.push(this.stride[" + i + "])}");
    }
    code.push("var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}");
    code.push("return function construct_" + className + "(data,shape,stride,offset){return new " + className + "(data," + indices.map(function(i2) {
      return "shape[" + i2 + "]";
    }).join(",") + "," + indices.map(function(i2) {
      return "stride[" + i2 + "]";
    }).join(",") + ",offset)}");
    var procedure = new Function("CTOR_LIST", "ORDER", code.join("\n"));
    return procedure(CACHED_CONSTRUCTORS[dtype], order);
  }
  function arrayDType(data2) {
    if (isBuffer(data2)) {
      return "buffer";
    }
    if (hasTypedArrays) {
      switch (Object.prototype.toString.call(data2)) {
        case "[object Float64Array]":
          return "float64";
        case "[object Float32Array]":
          return "float32";
        case "[object Int8Array]":
          return "int8";
        case "[object Int16Array]":
          return "int16";
        case "[object Int32Array]":
          return "int32";
        case "[object Uint8Array]":
          return "uint8";
        case "[object Uint16Array]":
          return "uint16";
        case "[object Uint32Array]":
          return "uint32";
        case "[object Uint8ClampedArray]":
          return "uint8_clamped";
        case "[object BigInt64Array]":
          return "bigint64";
        case "[object BigUint64Array]":
          return "biguint64";
      }
    }
    if (Array.isArray(data2)) {
      return "array";
    }
    return "generic";
  }
  var CACHED_CONSTRUCTORS = {
    float32: [],
    float64: [],
    int8: [],
    int16: [],
    int32: [],
    uint8: [],
    uint16: [],
    uint32: [],
    array: [],
    uint8_clamped: [],
    bigint64: [],
    biguint64: [],
    buffer: [],
    generic: []
  };
  function wrappedNDArrayCtor(data2, shape, stride, offset) {
    if (data2 === void 0) {
      var ctor = CACHED_CONSTRUCTORS.array[0];
      return ctor([]);
    } else if (typeof data2 === "number") {
      data2 = [data2];
    }
    if (shape === void 0) {
      shape = [data2.length];
    }
    var d = shape.length;
    if (stride === void 0) {
      stride = new Array(d);
      for (var i = d - 1, sz = 1; i >= 0; --i) {
        stride[i] = sz;
        sz *= shape[i];
      }
    }
    if (offset === void 0) {
      offset = 0;
      for (var i = 0; i < d; ++i) {
        if (stride[i] < 0) {
          offset -= (shape[i] - 1) * stride[i];
        }
      }
    }
    var dtype = arrayDType(data2);
    var ctor_list = CACHED_CONSTRUCTORS[dtype];
    while (ctor_list.length <= d + 1) {
      ctor_list.push(compileConstructor(dtype, ctor_list.length - 1));
    }
    var ctor = ctor_list[d + 1];
    return ctor(data2, shape, stride, offset);
  }
  module.exports = wrappedNDArrayCtor;
});

// node_modules/gl-matrix/cjs/common.js
var require_common = __commonJS((exports) => {
  "use strict";
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.setMatrixArrayType = setMatrixArrayType;
  exports.toRadian = toRadian;
  exports.equals = equals;
  exports.RANDOM = exports.ARRAY_TYPE = exports.EPSILON = void 0;
  var EPSILON2 = 1e-6;
  exports.EPSILON = EPSILON2;
  var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
  exports.ARRAY_TYPE = ARRAY_TYPE;
  var RANDOM = Math.random;
  exports.RANDOM = RANDOM;
  function setMatrixArrayType(type) {
    exports.ARRAY_TYPE = ARRAY_TYPE = type;
  }
  var degree = Math.PI / 180;
  function toRadian(a) {
    return a * degree;
  }
  function equals(a, b) {
    return Math.abs(a - b) <= EPSILON2 * Math.max(1, Math.abs(a), Math.abs(b));
  }
  if (!Math.hypot)
    Math.hypot = function() {
      var y = 0, i = arguments.length;
      while (i--) {
        y += arguments[i] * arguments[i];
      }
      return Math.sqrt(y);
    };
});

// node_modules/gl-matrix/cjs/mat2.js
var require_mat2 = __commonJS((exports) => {
  "use strict";
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.copy = copy;
  exports.identity = identity;
  exports.fromValues = fromValues;
  exports.set = set;
  exports.transpose = transpose;
  exports.invert = invert;
  exports.adjoint = adjoint;
  exports.determinant = determinant;
  exports.multiply = multiply;
  exports.rotate = rotate;
  exports.scale = scale;
  exports.fromRotation = fromRotation;
  exports.fromScaling = fromScaling;
  exports.str = str;
  exports.frob = frob;
  exports.LDU = LDU;
  exports.add = add;
  exports.subtract = subtract2;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.multiplyScalar = multiplyScalar;
  exports.multiplyScalarAndAdd = multiplyScalarAndAdd;
  exports.sub = exports.mul = void 0;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(4);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
    }
    out[0] = 1;
    out[3] = 1;
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function fromValues(m00, m01, m10, m11) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
  }
  function set(out, m00, m01, m10, m11) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m10;
    out[3] = m11;
    return out;
  }
  function transpose(out, a) {
    if (out === a) {
      var a1 = a[1];
      out[1] = a[2];
      out[2] = a1;
    } else {
      out[0] = a[0];
      out[1] = a[2];
      out[2] = a[1];
      out[3] = a[3];
    }
    return out;
  }
  function invert(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var det = a0 * a3 - a2 * a1;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = a3 * det;
    out[1] = -a1 * det;
    out[2] = -a2 * det;
    out[3] = a0 * det;
    return out;
  }
  function adjoint(out, a) {
    var a0 = a[0];
    out[0] = a[3];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a0;
    return out;
  }
  function determinant(a) {
    return a[0] * a[3] - a[2] * a[1];
  }
  function multiply(out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    return out;
  }
  function rotate(out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    return out;
  }
  function scale(out, a, v2) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var v0 = v2[0], v1 = v2[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    return out;
  }
  function fromRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    return out;
  }
  function fromScaling(out, v2) {
    out[0] = v2[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v2[1];
    return out;
  }
  function str(a) {
    return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
  }
  function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3]);
  }
  function LDU(L, D, U, a) {
    L[2] = a[2] / a[0];
    U[0] = a[0];
    U[1] = a[1];
    U[3] = a[3] - L[2] * U[1];
    return [L, D, U];
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
  }
  function subtract2(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
  }
  function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
  }
  function multiplyScalarAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    out[3] = a[3] + b[3] * scale2;
    return out;
  }
  var mul = multiply;
  exports.mul = mul;
  var sub = subtract2;
  exports.sub = sub;
});

// node_modules/gl-matrix/cjs/mat2d.js
var require_mat2d = __commonJS((exports) => {
  "use strict";
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.copy = copy;
  exports.identity = identity;
  exports.fromValues = fromValues;
  exports.set = set;
  exports.invert = invert;
  exports.determinant = determinant;
  exports.multiply = multiply;
  exports.rotate = rotate;
  exports.scale = scale;
  exports.translate = translate;
  exports.fromRotation = fromRotation;
  exports.fromScaling = fromScaling;
  exports.fromTranslation = fromTranslation;
  exports.str = str;
  exports.frob = frob;
  exports.add = add;
  exports.subtract = subtract2;
  exports.multiplyScalar = multiplyScalar;
  exports.multiplyScalarAndAdd = multiplyScalarAndAdd;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.sub = exports.mul = void 0;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(6);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[4] = 0;
      out[5] = 0;
    }
    out[0] = 1;
    out[3] = 1;
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    return out;
  }
  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    return out;
  }
  function fromValues(a, b, c, d, tx, ty) {
    var out = new glMatrix.ARRAY_TYPE(6);
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
  }
  function set(out, a, b, c, d, tx, ty) {
    out[0] = a;
    out[1] = b;
    out[2] = c;
    out[3] = d;
    out[4] = tx;
    out[5] = ty;
    return out;
  }
  function invert(out, a) {
    var aa = a[0], ab = a[1], ac = a[2], ad = a[3];
    var atx = a[4], aty = a[5];
    var det = aa * ad - ab * ac;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = ad * det;
    out[1] = -ab * det;
    out[2] = -ac * det;
    out[3] = aa * det;
    out[4] = (ac * aty - ad * atx) * det;
    out[5] = (ab * atx - aa * aty) * det;
    return out;
  }
  function determinant(a) {
    return a[0] * a[3] - a[1] * a[2];
  }
  function multiply(out, a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    out[0] = a0 * b0 + a2 * b1;
    out[1] = a1 * b0 + a3 * b1;
    out[2] = a0 * b2 + a2 * b3;
    out[3] = a1 * b2 + a3 * b3;
    out[4] = a0 * b4 + a2 * b5 + a4;
    out[5] = a1 * b4 + a3 * b5 + a5;
    return out;
  }
  function rotate(out, a, rad) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = a0 * c + a2 * s;
    out[1] = a1 * c + a3 * s;
    out[2] = a0 * -s + a2 * c;
    out[3] = a1 * -s + a3 * c;
    out[4] = a4;
    out[5] = a5;
    return out;
  }
  function scale(out, a, v2) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var v0 = v2[0], v1 = v2[1];
    out[0] = a0 * v0;
    out[1] = a1 * v0;
    out[2] = a2 * v1;
    out[3] = a3 * v1;
    out[4] = a4;
    out[5] = a5;
    return out;
  }
  function translate(out, a, v2) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var v0 = v2[0], v1 = v2[1];
    out[0] = a0;
    out[1] = a1;
    out[2] = a2;
    out[3] = a3;
    out[4] = a0 * v0 + a2 * v1 + a4;
    out[5] = a1 * v0 + a3 * v1 + a5;
    return out;
  }
  function fromRotation(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = -s;
    out[3] = c;
    out[4] = 0;
    out[5] = 0;
    return out;
  }
  function fromScaling(out, v2) {
    out[0] = v2[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = v2[1];
    out[4] = 0;
    out[5] = 0;
    return out;
  }
  function fromTranslation(out, v2) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = v2[0];
    out[5] = v2[1];
    return out;
  }
  function str(a) {
    return "mat2d(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")";
  }
  function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    return out;
  }
  function subtract2(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    return out;
  }
  function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    return out;
  }
  function multiplyScalarAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    out[3] = a[3] + b[3] * scale2;
    out[4] = a[4] + b[4] * scale2;
    out[5] = a[5] + b[5] * scale2;
    return out;
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5));
  }
  var mul = multiply;
  exports.mul = mul;
  var sub = subtract2;
  exports.sub = sub;
});

// node_modules/gl-matrix/cjs/mat3.js
var require_mat3 = __commonJS((exports) => {
  "use strict";
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.fromMat4 = fromMat4;
  exports.clone = clone;
  exports.copy = copy;
  exports.fromValues = fromValues;
  exports.set = set;
  exports.identity = identity;
  exports.transpose = transpose;
  exports.invert = invert;
  exports.adjoint = adjoint;
  exports.determinant = determinant;
  exports.multiply = multiply;
  exports.translate = translate;
  exports.rotate = rotate;
  exports.scale = scale;
  exports.fromTranslation = fromTranslation;
  exports.fromRotation = fromRotation;
  exports.fromScaling = fromScaling;
  exports.fromMat2d = fromMat2d;
  exports.fromQuat = fromQuat;
  exports.normalFromMat4 = normalFromMat4;
  exports.projection = projection;
  exports.str = str;
  exports.frob = frob;
  exports.add = add;
  exports.subtract = subtract2;
  exports.multiplyScalar = multiplyScalar;
  exports.multiplyScalarAndAdd = multiplyScalarAndAdd;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.sub = exports.mul = void 0;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(9);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[5] = 0;
      out[6] = 0;
      out[7] = 0;
    }
    out[0] = 1;
    out[4] = 1;
    out[8] = 1;
    return out;
  }
  function fromMat4(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[4];
    out[4] = a[5];
    out[5] = a[6];
    out[6] = a[8];
    out[7] = a[9];
    out[8] = a[10];
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  }
  function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    var out = new glMatrix.ARRAY_TYPE(9);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
  }
  function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m10;
    out[4] = m11;
    out[5] = m12;
    out[6] = m20;
    out[7] = m21;
    out[8] = m22;
    return out;
  }
  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  }
  function transpose(out, a) {
    if (out === a) {
      var a01 = a[1], a02 = a[2], a12 = a[5];
      out[1] = a[3];
      out[2] = a[6];
      out[3] = a01;
      out[5] = a[7];
      out[6] = a02;
      out[7] = a12;
    } else {
      out[0] = a[0];
      out[1] = a[3];
      out[2] = a[6];
      out[3] = a[1];
      out[4] = a[4];
      out[5] = a[7];
      out[6] = a[2];
      out[7] = a[5];
      out[8] = a[8];
    }
    return out;
  }
  function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    var b01 = a22 * a11 - a12 * a21;
    var b11 = -a22 * a10 + a12 * a20;
    var b21 = a21 * a10 - a11 * a20;
    var det = a00 * b01 + a01 * b11 + a02 * b21;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = b01 * det;
    out[1] = (-a22 * a01 + a02 * a21) * det;
    out[2] = (a12 * a01 - a02 * a11) * det;
    out[3] = b11 * det;
    out[4] = (a22 * a00 - a02 * a20) * det;
    out[5] = (-a12 * a00 + a02 * a10) * det;
    out[6] = b21 * det;
    out[7] = (-a21 * a00 + a01 * a20) * det;
    out[8] = (a11 * a00 - a01 * a10) * det;
    return out;
  }
  function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    out[0] = a11 * a22 - a12 * a21;
    out[1] = a02 * a21 - a01 * a22;
    out[2] = a01 * a12 - a02 * a11;
    out[3] = a12 * a20 - a10 * a22;
    out[4] = a00 * a22 - a02 * a20;
    out[5] = a02 * a10 - a00 * a12;
    out[6] = a10 * a21 - a11 * a20;
    out[7] = a01 * a20 - a00 * a21;
    out[8] = a00 * a11 - a01 * a10;
    return out;
  }
  function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
  }
  function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2];
    var a10 = a[3], a11 = a[4], a12 = a[5];
    var a20 = a[6], a21 = a[7], a22 = a[8];
    var b00 = b[0], b01 = b[1], b02 = b[2];
    var b10 = b[3], b11 = b[4], b12 = b[5];
    var b20 = b[6], b21 = b[7], b22 = b[8];
    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
    return out;
  }
  function translate(out, a, v2) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], x = v2[0], y = v2[1];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a10;
    out[4] = a11;
    out[5] = a12;
    out[6] = x * a00 + y * a10 + a20;
    out[7] = x * a01 + y * a11 + a21;
    out[8] = x * a02 + y * a12 + a22;
    return out;
  }
  function rotate(out, a, rad) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a10 = a[3], a11 = a[4], a12 = a[5], a20 = a[6], a21 = a[7], a22 = a[8], s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c * a00 + s * a10;
    out[1] = c * a01 + s * a11;
    out[2] = c * a02 + s * a12;
    out[3] = c * a10 - s * a00;
    out[4] = c * a11 - s * a01;
    out[5] = c * a12 - s * a02;
    out[6] = a20;
    out[7] = a21;
    out[8] = a22;
    return out;
  }
  function scale(out, a, v2) {
    var x = v2[0], y = v2[1];
    out[0] = x * a[0];
    out[1] = x * a[1];
    out[2] = x * a[2];
    out[3] = y * a[3];
    out[4] = y * a[4];
    out[5] = y * a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    return out;
  }
  function fromTranslation(out, v2) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 1;
    out[5] = 0;
    out[6] = v2[0];
    out[7] = v2[1];
    out[8] = 1;
    return out;
  }
  function fromRotation(out, rad) {
    var s = Math.sin(rad), c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = -s;
    out[4] = c;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  }
  function fromScaling(out, v2) {
    out[0] = v2[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = v2[1];
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 1;
    return out;
  }
  function fromMat2d(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = 0;
    out[3] = a[2];
    out[4] = a[3];
    out[5] = 0;
    out[6] = a[4];
    out[7] = a[5];
    out[8] = 1;
    return out;
  }
  function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - yy - zz;
    out[3] = yx - wz;
    out[6] = zx + wy;
    out[1] = yx + wz;
    out[4] = 1 - xx - zz;
    out[7] = zy - wx;
    out[2] = zx - wy;
    out[5] = zy + wx;
    out[8] = 1 - xx - yy;
    return out;
  }
  function normalFromMat4(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32;
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    return out;
  }
  function projection(out, width, height) {
    out[0] = 2 / width;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = -2 / height;
    out[5] = 0;
    out[6] = -1;
    out[7] = 1;
    out[8] = 1;
    return out;
  }
  function str(a) {
    return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
  }
  function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    return out;
  }
  function subtract2(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    return out;
  }
  function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    return out;
  }
  function multiplyScalarAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    out[3] = a[3] + b[3] * scale2;
    out[4] = a[4] + b[4] * scale2;
    out[5] = a[5] + b[5] * scale2;
    out[6] = a[6] + b[6] * scale2;
    out[7] = a[7] + b[7] * scale2;
    out[8] = a[8] + b[8] * scale2;
    return out;
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8));
  }
  var mul = multiply;
  exports.mul = mul;
  var sub = subtract2;
  exports.sub = sub;
});

// node_modules/gl-matrix/cjs/mat4.js
var require_mat4 = __commonJS((exports) => {
  "use strict";
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.copy = copy;
  exports.fromValues = fromValues;
  exports.set = set;
  exports.identity = identity;
  exports.transpose = transpose;
  exports.invert = invert;
  exports.adjoint = adjoint;
  exports.determinant = determinant;
  exports.multiply = multiply;
  exports.translate = translate;
  exports.scale = scale;
  exports.rotate = rotate;
  exports.rotateX = rotateX;
  exports.rotateY = rotateY;
  exports.rotateZ = rotateZ;
  exports.fromTranslation = fromTranslation;
  exports.fromScaling = fromScaling;
  exports.fromRotation = fromRotation;
  exports.fromXRotation = fromXRotation;
  exports.fromYRotation = fromYRotation;
  exports.fromZRotation = fromZRotation;
  exports.fromRotationTranslation = fromRotationTranslation;
  exports.fromQuat2 = fromQuat2;
  exports.getTranslation = getTranslation;
  exports.getScaling = getScaling;
  exports.getRotation = getRotation;
  exports.fromRotationTranslationScale = fromRotationTranslationScale;
  exports.fromRotationTranslationScaleOrigin = fromRotationTranslationScaleOrigin;
  exports.fromQuat = fromQuat;
  exports.frustum = frustum;
  exports.perspectiveNO = perspectiveNO;
  exports.perspectiveZO = perspectiveZO;
  exports.perspectiveFromFieldOfView = perspectiveFromFieldOfView;
  exports.orthoNO = orthoNO;
  exports.orthoZO = orthoZO;
  exports.lookAt = lookAt;
  exports.targetTo = targetTo;
  exports.str = str;
  exports.frob = frob;
  exports.add = add;
  exports.subtract = subtract2;
  exports.multiplyScalar = multiplyScalar;
  exports.multiplyScalarAndAdd = multiplyScalarAndAdd;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.sub = exports.mul = exports.ortho = exports.perspective = void 0;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(16);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[11] = 0;
      out[12] = 0;
      out[13] = 0;
      out[14] = 0;
    }
    out[0] = 1;
    out[5] = 1;
    out[10] = 1;
    out[15] = 1;
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    var out = new glMatrix.ARRAY_TYPE(16);
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
    out[0] = m00;
    out[1] = m01;
    out[2] = m02;
    out[3] = m03;
    out[4] = m10;
    out[5] = m11;
    out[6] = m12;
    out[7] = m13;
    out[8] = m20;
    out[9] = m21;
    out[10] = m22;
    out[11] = m23;
    out[12] = m30;
    out[13] = m31;
    out[14] = m32;
    out[15] = m33;
    return out;
  }
  function identity(out) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function transpose(out, a) {
    if (out === a) {
      var a01 = a[1], a02 = a[2], a03 = a[3];
      var a12 = a[6], a13 = a[7];
      var a23 = a[11];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a01;
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a02;
      out[9] = a12;
      out[11] = a[14];
      out[12] = a03;
      out[13] = a13;
      out[14] = a23;
    } else {
      out[0] = a[0];
      out[1] = a[4];
      out[2] = a[8];
      out[3] = a[12];
      out[4] = a[1];
      out[5] = a[5];
      out[6] = a[9];
      out[7] = a[13];
      out[8] = a[2];
      out[9] = a[6];
      out[10] = a[10];
      out[11] = a[14];
      out[12] = a[3];
      out[13] = a[7];
      out[14] = a[11];
      out[15] = a[15];
    }
    return out;
  }
  function invert(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32;
    var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
    if (!det) {
      return null;
    }
    det = 1 / det;
    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
    return out;
  }
  function adjoint(out, a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
    out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
    out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
    out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
    out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
    out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
    out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
    out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
    out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
    out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
    out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
    out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
    out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
    return out;
  }
  function determinant(a) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b00 = a00 * a11 - a01 * a10;
    var b01 = a00 * a12 - a02 * a10;
    var b02 = a00 * a13 - a03 * a10;
    var b03 = a01 * a12 - a02 * a11;
    var b04 = a01 * a13 - a03 * a11;
    var b05 = a02 * a13 - a03 * a12;
    var b06 = a20 * a31 - a21 * a30;
    var b07 = a20 * a32 - a22 * a30;
    var b08 = a20 * a33 - a23 * a30;
    var b09 = a21 * a32 - a22 * a31;
    var b10 = a21 * a33 - a23 * a31;
    var b11 = a22 * a33 - a23 * a32;
    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
  }
  function multiply(out, a, b) {
    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];
    var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];
    var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];
    var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[4];
    b1 = b[5];
    b2 = b[6];
    b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[8];
    b1 = b[9];
    b2 = b[10];
    b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    b0 = b[12];
    b1 = b[13];
    b2 = b[14];
    b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
    return out;
  }
  function translate(out, a, v2) {
    var x = v2[0], y = v2[1], z = v2[2];
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    if (a === out) {
      out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
      out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
      out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
      out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
    } else {
      a00 = a[0];
      a01 = a[1];
      a02 = a[2];
      a03 = a[3];
      a10 = a[4];
      a11 = a[5];
      a12 = a[6];
      a13 = a[7];
      a20 = a[8];
      a21 = a[9];
      a22 = a[10];
      a23 = a[11];
      out[0] = a00;
      out[1] = a01;
      out[2] = a02;
      out[3] = a03;
      out[4] = a10;
      out[5] = a11;
      out[6] = a12;
      out[7] = a13;
      out[8] = a20;
      out[9] = a21;
      out[10] = a22;
      out[11] = a23;
      out[12] = a00 * x + a10 * y + a20 * z + a[12];
      out[13] = a01 * x + a11 * y + a21 * z + a[13];
      out[14] = a02 * x + a12 * y + a22 * z + a[14];
      out[15] = a03 * x + a13 * y + a23 * z + a[15];
    }
    return out;
  }
  function scale(out, a, v2) {
    var x = v2[0], y = v2[1], z = v2[2];
    out[0] = a[0] * x;
    out[1] = a[1] * x;
    out[2] = a[2] * x;
    out[3] = a[3] * x;
    out[4] = a[4] * y;
    out[5] = a[5] * y;
    out[6] = a[6] * y;
    out[7] = a[7] * y;
    out[8] = a[8] * z;
    out[9] = a[9] * z;
    out[10] = a[10] * z;
    out[11] = a[11] * z;
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
    return out;
  }
  function rotate(out, a, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len = Math.hypot(x, y, z);
    var s, c, t;
    var a00, a01, a02, a03;
    var a10, a11, a12, a13;
    var a20, a21, a22, a23;
    var b00, b01, b02;
    var b10, b11, b12;
    var b20, b21, b22;
    if (len < glMatrix.EPSILON) {
      return null;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    b00 = x * x * t + c;
    b01 = y * x * t + z * s;
    b02 = z * x * t - y * s;
    b10 = x * y * t - z * s;
    b11 = y * y * t + c;
    b12 = z * y * t + x * s;
    b20 = x * z * t + y * s;
    b21 = y * z * t - x * s;
    b22 = z * z * t + c;
    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
    if (a !== out) {
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    return out;
  }
  function rotateX(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
      out[0] = a[0];
      out[1] = a[1];
      out[2] = a[2];
      out[3] = a[3];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[4] = a10 * c + a20 * s;
    out[5] = a11 * c + a21 * s;
    out[6] = a12 * c + a22 * s;
    out[7] = a13 * c + a23 * s;
    out[8] = a20 * c - a10 * s;
    out[9] = a21 * c - a11 * s;
    out[10] = a22 * c - a12 * s;
    out[11] = a23 * c - a13 * s;
    return out;
  }
  function rotateY(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a20 = a[8];
    var a21 = a[9];
    var a22 = a[10];
    var a23 = a[11];
    if (a !== out) {
      out[4] = a[4];
      out[5] = a[5];
      out[6] = a[6];
      out[7] = a[7];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c - a20 * s;
    out[1] = a01 * c - a21 * s;
    out[2] = a02 * c - a22 * s;
    out[3] = a03 * c - a23 * s;
    out[8] = a00 * s + a20 * c;
    out[9] = a01 * s + a21 * c;
    out[10] = a02 * s + a22 * c;
    out[11] = a03 * s + a23 * c;
    return out;
  }
  function rotateZ(out, a, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    var a00 = a[0];
    var a01 = a[1];
    var a02 = a[2];
    var a03 = a[3];
    var a10 = a[4];
    var a11 = a[5];
    var a12 = a[6];
    var a13 = a[7];
    if (a !== out) {
      out[8] = a[8];
      out[9] = a[9];
      out[10] = a[10];
      out[11] = a[11];
      out[12] = a[12];
      out[13] = a[13];
      out[14] = a[14];
      out[15] = a[15];
    }
    out[0] = a00 * c + a10 * s;
    out[1] = a01 * c + a11 * s;
    out[2] = a02 * c + a12 * s;
    out[3] = a03 * c + a13 * s;
    out[4] = a10 * c - a00 * s;
    out[5] = a11 * c - a01 * s;
    out[6] = a12 * c - a02 * s;
    out[7] = a13 * c - a03 * s;
    return out;
  }
  function fromTranslation(out, v2) {
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = v2[0];
    out[13] = v2[1];
    out[14] = v2[2];
    out[15] = 1;
    return out;
  }
  function fromScaling(out, v2) {
    out[0] = v2[0];
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = v2[1];
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = v2[2];
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotation(out, rad, axis) {
    var x = axis[0], y = axis[1], z = axis[2];
    var len = Math.hypot(x, y, z);
    var s, c, t;
    if (len < glMatrix.EPSILON) {
      return null;
    }
    len = 1 / len;
    x *= len;
    y *= len;
    z *= len;
    s = Math.sin(rad);
    c = Math.cos(rad);
    t = 1 - c;
    out[0] = x * x * t + c;
    out[1] = y * x * t + z * s;
    out[2] = z * x * t - y * s;
    out[3] = 0;
    out[4] = x * y * t - z * s;
    out[5] = y * y * t + c;
    out[6] = z * y * t + x * s;
    out[7] = 0;
    out[8] = x * z * t + y * s;
    out[9] = y * z * t - x * s;
    out[10] = z * z * t + c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromXRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = 1;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = c;
    out[6] = s;
    out[7] = 0;
    out[8] = 0;
    out[9] = -s;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromYRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = c;
    out[1] = 0;
    out[2] = -s;
    out[3] = 0;
    out[4] = 0;
    out[5] = 1;
    out[6] = 0;
    out[7] = 0;
    out[8] = s;
    out[9] = 0;
    out[10] = c;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromZRotation(out, rad) {
    var s = Math.sin(rad);
    var c = Math.cos(rad);
    out[0] = c;
    out[1] = s;
    out[2] = 0;
    out[3] = 0;
    out[4] = -s;
    out[5] = c;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 1;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function fromRotationTranslation(out, q, v2) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - (yy + zz);
    out[1] = xy + wz;
    out[2] = xz - wy;
    out[3] = 0;
    out[4] = xy - wz;
    out[5] = 1 - (xx + zz);
    out[6] = yz + wx;
    out[7] = 0;
    out[8] = xz + wy;
    out[9] = yz - wx;
    out[10] = 1 - (xx + yy);
    out[11] = 0;
    out[12] = v2[0];
    out[13] = v2[1];
    out[14] = v2[2];
    out[15] = 1;
    return out;
  }
  function fromQuat2(out, a) {
    var translation = new glMatrix.ARRAY_TYPE(3);
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7];
    var magnitude = bx * bx + by * by + bz * bz + bw * bw;
    if (magnitude > 0) {
      translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
      translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
      translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
    } else {
      translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
      translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
      translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    }
    fromRotationTranslation(out, a, translation);
    return out;
  }
  function getTranslation(out, mat) {
    out[0] = mat[12];
    out[1] = mat[13];
    out[2] = mat[14];
    return out;
  }
  function getScaling(out, mat) {
    var m11 = mat[0];
    var m12 = mat[1];
    var m13 = mat[2];
    var m21 = mat[4];
    var m22 = mat[5];
    var m23 = mat[6];
    var m31 = mat[8];
    var m32 = mat[9];
    var m33 = mat[10];
    out[0] = Math.hypot(m11, m12, m13);
    out[1] = Math.hypot(m21, m22, m23);
    out[2] = Math.hypot(m31, m32, m33);
    return out;
  }
  function getRotation(out, mat) {
    var scaling = new glMatrix.ARRAY_TYPE(3);
    getScaling(scaling, mat);
    var is1 = 1 / scaling[0];
    var is2 = 1 / scaling[1];
    var is3 = 1 / scaling[2];
    var sm11 = mat[0] * is1;
    var sm12 = mat[1] * is2;
    var sm13 = mat[2] * is3;
    var sm21 = mat[4] * is1;
    var sm22 = mat[5] * is2;
    var sm23 = mat[6] * is3;
    var sm31 = mat[8] * is1;
    var sm32 = mat[9] * is2;
    var sm33 = mat[10] * is3;
    var trace = sm11 + sm22 + sm33;
    var S = 0;
    if (trace > 0) {
      S = Math.sqrt(trace + 1) * 2;
      out[3] = 0.25 * S;
      out[0] = (sm23 - sm32) / S;
      out[1] = (sm31 - sm13) / S;
      out[2] = (sm12 - sm21) / S;
    } else if (sm11 > sm22 && sm11 > sm33) {
      S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
      out[3] = (sm23 - sm32) / S;
      out[0] = 0.25 * S;
      out[1] = (sm12 + sm21) / S;
      out[2] = (sm31 + sm13) / S;
    } else if (sm22 > sm33) {
      S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
      out[3] = (sm31 - sm13) / S;
      out[0] = (sm12 + sm21) / S;
      out[1] = 0.25 * S;
      out[2] = (sm23 + sm32) / S;
    } else {
      S = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
      out[3] = (sm12 - sm21) / S;
      out[0] = (sm31 + sm13) / S;
      out[1] = (sm23 + sm32) / S;
      out[2] = 0.25 * S;
    }
    return out;
  }
  function fromRotationTranslationScale(out, q, v2, s) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    out[0] = (1 - (yy + zz)) * sx;
    out[1] = (xy + wz) * sx;
    out[2] = (xz - wy) * sx;
    out[3] = 0;
    out[4] = (xy - wz) * sy;
    out[5] = (1 - (xx + zz)) * sy;
    out[6] = (yz + wx) * sy;
    out[7] = 0;
    out[8] = (xz + wy) * sz;
    out[9] = (yz - wx) * sz;
    out[10] = (1 - (xx + yy)) * sz;
    out[11] = 0;
    out[12] = v2[0];
    out[13] = v2[1];
    out[14] = v2[2];
    out[15] = 1;
    return out;
  }
  function fromRotationTranslationScaleOrigin(out, q, v2, s, o) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var xy = x * y2;
    var xz = x * z2;
    var yy = y * y2;
    var yz = y * z2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    var sx = s[0];
    var sy = s[1];
    var sz = s[2];
    var ox = o[0];
    var oy = o[1];
    var oz = o[2];
    var out0 = (1 - (yy + zz)) * sx;
    var out1 = (xy + wz) * sx;
    var out2 = (xz - wy) * sx;
    var out4 = (xy - wz) * sy;
    var out5 = (1 - (xx + zz)) * sy;
    var out6 = (yz + wx) * sy;
    var out8 = (xz + wy) * sz;
    var out9 = (yz - wx) * sz;
    var out10 = (1 - (xx + yy)) * sz;
    out[0] = out0;
    out[1] = out1;
    out[2] = out2;
    out[3] = 0;
    out[4] = out4;
    out[5] = out5;
    out[6] = out6;
    out[7] = 0;
    out[8] = out8;
    out[9] = out9;
    out[10] = out10;
    out[11] = 0;
    out[12] = v2[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
    out[13] = v2[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
    out[14] = v2[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
    out[15] = 1;
    return out;
  }
  function fromQuat(out, q) {
    var x = q[0], y = q[1], z = q[2], w = q[3];
    var x2 = x + x;
    var y2 = y + y;
    var z2 = z + z;
    var xx = x * x2;
    var yx = y * x2;
    var yy = y * y2;
    var zx = z * x2;
    var zy = z * y2;
    var zz = z * z2;
    var wx = w * x2;
    var wy = w * y2;
    var wz = w * z2;
    out[0] = 1 - yy - zz;
    out[1] = yx + wz;
    out[2] = zx - wy;
    out[3] = 0;
    out[4] = yx - wz;
    out[5] = 1 - xx - zz;
    out[6] = zy + wx;
    out[7] = 0;
    out[8] = zx + wy;
    out[9] = zy - wx;
    out[10] = 1 - xx - yy;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
    out[15] = 1;
    return out;
  }
  function frustum(out, left, right, bottom, top, near, far) {
    var rl = 1 / (right - left);
    var tb = 1 / (top - bottom);
    var nf = 1 / (near - far);
    out[0] = near * 2 * rl;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = near * 2 * tb;
    out[6] = 0;
    out[7] = 0;
    out[8] = (right + left) * rl;
    out[9] = (top + bottom) * tb;
    out[10] = (far + near) * nf;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near * 2 * nf;
    out[15] = 0;
    return out;
  }
  function perspectiveNO(out, fovy, aspect, near, far) {
    var f = 1 / Math.tan(fovy / 2), nf;
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      nf = 1 / (near - far);
      out[10] = (far + near) * nf;
      out[14] = 2 * far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -2 * near;
    }
    return out;
  }
  var perspective = perspectiveNO;
  exports.perspective = perspective;
  function perspectiveZO(out, fovy, aspect, near, far) {
    var f = 1 / Math.tan(fovy / 2), nf;
    out[0] = f / aspect;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = f;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[15] = 0;
    if (far != null && far !== Infinity) {
      nf = 1 / (near - far);
      out[10] = far * nf;
      out[14] = far * near * nf;
    } else {
      out[10] = -1;
      out[14] = -near;
    }
    return out;
  }
  function perspectiveFromFieldOfView(out, fov, near, far) {
    var upTan = Math.tan(fov.upDegrees * Math.PI / 180);
    var downTan = Math.tan(fov.downDegrees * Math.PI / 180);
    var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
    var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
    var xScale = 2 / (leftTan + rightTan);
    var yScale = 2 / (upTan + downTan);
    out[0] = xScale;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = yScale;
    out[6] = 0;
    out[7] = 0;
    out[8] = -((leftTan - rightTan) * xScale * 0.5);
    out[9] = (upTan - downTan) * yScale * 0.5;
    out[10] = far / (near - far);
    out[11] = -1;
    out[12] = 0;
    out[13] = 0;
    out[14] = far * near / (near - far);
    out[15] = 0;
    return out;
  }
  function orthoNO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = 2 * nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = (far + near) * nf;
    out[15] = 1;
    return out;
  }
  var ortho = orthoNO;
  exports.ortho = ortho;
  function orthoZO(out, left, right, bottom, top, near, far) {
    var lr = 1 / (left - right);
    var bt = 1 / (bottom - top);
    var nf = 1 / (near - far);
    out[0] = -2 * lr;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[5] = -2 * bt;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[10] = nf;
    out[11] = 0;
    out[12] = (left + right) * lr;
    out[13] = (top + bottom) * bt;
    out[14] = near * nf;
    out[15] = 1;
    return out;
  }
  function lookAt(out, eye, center, up) {
    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
    var eyex = eye[0];
    var eyey = eye[1];
    var eyez = eye[2];
    var upx = up[0];
    var upy = up[1];
    var upz = up[2];
    var centerx = center[0];
    var centery = center[1];
    var centerz = center[2];
    if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {
      return identity(out);
    }
    z0 = eyex - centerx;
    z1 = eyey - centery;
    z2 = eyez - centerz;
    len = 1 / Math.hypot(z0, z1, z2);
    z0 *= len;
    z1 *= len;
    z2 *= len;
    x0 = upy * z2 - upz * z1;
    x1 = upz * z0 - upx * z2;
    x2 = upx * z1 - upy * z0;
    len = Math.hypot(x0, x1, x2);
    if (!len) {
      x0 = 0;
      x1 = 0;
      x2 = 0;
    } else {
      len = 1 / len;
      x0 *= len;
      x1 *= len;
      x2 *= len;
    }
    y0 = z1 * x2 - z2 * x1;
    y1 = z2 * x0 - z0 * x2;
    y2 = z0 * x1 - z1 * x0;
    len = Math.hypot(y0, y1, y2);
    if (!len) {
      y0 = 0;
      y1 = 0;
      y2 = 0;
    } else {
      len = 1 / len;
      y0 *= len;
      y1 *= len;
      y2 *= len;
    }
    out[0] = x0;
    out[1] = y0;
    out[2] = z0;
    out[3] = 0;
    out[4] = x1;
    out[5] = y1;
    out[6] = z1;
    out[7] = 0;
    out[8] = x2;
    out[9] = y2;
    out[10] = z2;
    out[11] = 0;
    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
    out[15] = 1;
    return out;
  }
  function targetTo(out, eye, target, up) {
    var eyex = eye[0], eyey = eye[1], eyez = eye[2], upx = up[0], upy = up[1], upz = up[2];
    var z0 = eyex - target[0], z1 = eyey - target[1], z2 = eyez - target[2];
    var len = z0 * z0 + z1 * z1 + z2 * z2;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
      z0 *= len;
      z1 *= len;
      z2 *= len;
    }
    var x0 = upy * z2 - upz * z1, x1 = upz * z0 - upx * z2, x2 = upx * z1 - upy * z0;
    len = x0 * x0 + x1 * x1 + x2 * x2;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
      x0 *= len;
      x1 *= len;
      x2 *= len;
    }
    out[0] = x0;
    out[1] = x1;
    out[2] = x2;
    out[3] = 0;
    out[4] = z1 * x2 - z2 * x1;
    out[5] = z2 * x0 - z0 * x2;
    out[6] = z0 * x1 - z1 * x0;
    out[7] = 0;
    out[8] = z0;
    out[9] = z1;
    out[10] = z2;
    out[11] = 0;
    out[12] = eyex;
    out[13] = eyey;
    out[14] = eyez;
    out[15] = 1;
    return out;
  }
  function str(a) {
    return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
  }
  function frob(a) {
    return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    out[8] = a[8] + b[8];
    out[9] = a[9] + b[9];
    out[10] = a[10] + b[10];
    out[11] = a[11] + b[11];
    out[12] = a[12] + b[12];
    out[13] = a[13] + b[13];
    out[14] = a[14] + b[14];
    out[15] = a[15] + b[15];
    return out;
  }
  function subtract2(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    out[4] = a[4] - b[4];
    out[5] = a[5] - b[5];
    out[6] = a[6] - b[6];
    out[7] = a[7] - b[7];
    out[8] = a[8] - b[8];
    out[9] = a[9] - b[9];
    out[10] = a[10] - b[10];
    out[11] = a[11] - b[11];
    out[12] = a[12] - b[12];
    out[13] = a[13] - b[13];
    out[14] = a[14] - b[14];
    out[15] = a[15] - b[15];
    return out;
  }
  function multiplyScalar(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    out[8] = a[8] * b;
    out[9] = a[9] * b;
    out[10] = a[10] * b;
    out[11] = a[11] * b;
    out[12] = a[12] * b;
    out[13] = a[13] * b;
    out[14] = a[14] * b;
    out[15] = a[15] * b;
    return out;
  }
  function multiplyScalarAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    out[3] = a[3] + b[3] * scale2;
    out[4] = a[4] + b[4] * scale2;
    out[5] = a[5] + b[5] * scale2;
    out[6] = a[6] + b[6] * scale2;
    out[7] = a[7] + b[7] * scale2;
    out[8] = a[8] + b[8] * scale2;
    out[9] = a[9] + b[9] * scale2;
    out[10] = a[10] + b[10] * scale2;
    out[11] = a[11] + b[11] * scale2;
    out[12] = a[12] + b[12] * scale2;
    out[13] = a[13] + b[13] * scale2;
    out[14] = a[14] + b[14] * scale2;
    out[15] = a[15] + b[15] * scale2;
    return out;
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
    var a8 = a[8], a9 = a[9], a10 = a[10], a11 = a[11];
    var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    var b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
    var b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11];
    var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15));
  }
  var mul = multiply;
  exports.mul = mul;
  var sub = subtract2;
  exports.sub = sub;
});

// node_modules/gl-matrix/cjs/vec3.js
var require_vec3 = __commonJS((exports) => {
  "use strict";
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.length = length;
  exports.fromValues = fromValues;
  exports.copy = copy;
  exports.set = set;
  exports.add = add;
  exports.subtract = subtract2;
  exports.multiply = multiply;
  exports.divide = divide;
  exports.ceil = ceil;
  exports.floor = floor;
  exports.min = min;
  exports.max = max;
  exports.round = round;
  exports.scale = scale;
  exports.scaleAndAdd = scaleAndAdd;
  exports.distance = distance;
  exports.squaredDistance = squaredDistance;
  exports.squaredLength = squaredLength;
  exports.negate = negate;
  exports.inverse = inverse;
  exports.normalize = normalize2;
  exports.dot = dot;
  exports.cross = cross2;
  exports.lerp = lerp;
  exports.hermite = hermite;
  exports.bezier = bezier;
  exports.random = random;
  exports.transformMat4 = transformMat4;
  exports.transformMat3 = transformMat3;
  exports.transformQuat = transformQuat;
  exports.rotateX = rotateX;
  exports.rotateY = rotateY;
  exports.rotateZ = rotateZ;
  exports.angle = angle;
  exports.zero = zero2;
  exports.str = str;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = void 0;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(3);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  }
  function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return Math.hypot(x, y, z);
  }
  function fromValues(x, y, z) {
    var out = new glMatrix.ARRAY_TYPE(3);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    return out;
  }
  function set(out, x, y, z) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    return out;
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    return out;
  }
  function subtract2(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
  }
  function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    return out;
  }
  function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    return out;
  }
  function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    return out;
  }
  function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    return out;
  }
  function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    return out;
  }
  function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    return out;
  }
  function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    return out;
  }
  function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    return out;
  }
  function scaleAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    return out;
  }
  function distance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return Math.hypot(x, y, z);
  }
  function squaredDistance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    return x * x + y * y + z * z;
  }
  function squaredLength(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    return x * x + y * y + z * z;
  }
  function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    return out;
  }
  function inverse(out, a) {
    out[0] = 1 / a[0];
    out[1] = 1 / a[1];
    out[2] = 1 / a[2];
    return out;
  }
  function normalize2(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var len2 = x * x + y * y + z * z;
    if (len2 > 0) {
      len2 = 1 / Math.sqrt(len2);
    }
    out[0] = a[0] * len2;
    out[1] = a[1] * len2;
    out[2] = a[2] * len2;
    return out;
  }
  function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  function cross2(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2];
    var bx = b[0], by = b[1], bz = b[2];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  function lerp(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    return out;
  }
  function hermite(out, a, b, c, d, t) {
    var factorTimes2 = t * t;
    var factor1 = factorTimes2 * (2 * t - 3) + 1;
    var factor2 = factorTimes2 * (t - 2) + t;
    var factor3 = factorTimes2 * (t - 1);
    var factor4 = factorTimes2 * (3 - 2 * t);
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  }
  function bezier(out, a, b, c, d, t) {
    var inverseFactor = 1 - t;
    var inverseFactorTimesTwo = inverseFactor * inverseFactor;
    var factorTimes2 = t * t;
    var factor1 = inverseFactorTimesTwo * inverseFactor;
    var factor2 = 3 * t * inverseFactorTimesTwo;
    var factor3 = 3 * factorTimes2 * inverseFactor;
    var factor4 = factorTimes2 * t;
    out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
    out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
    out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
    return out;
  }
  function random(out, scale2) {
    scale2 = scale2 || 1;
    var r = glMatrix.RANDOM() * 2 * Math.PI;
    var z = glMatrix.RANDOM() * 2 - 1;
    var zScale = Math.sqrt(1 - z * z) * scale2;
    out[0] = Math.cos(r) * zScale;
    out[1] = Math.sin(r) * zScale;
    out[2] = z * scale2;
    return out;
  }
  function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    var w = m[3] * x + m[7] * y + m[11] * z + m[15];
    w = w || 1;
    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
    return out;
  }
  function transformMat3(out, a, m) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x * m[0] + y * m[3] + z * m[6];
    out[1] = x * m[1] + y * m[4] + z * m[7];
    out[2] = x * m[2] + y * m[5] + z * m[8];
    return out;
  }
  function transformQuat(out, a, q) {
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
    var x = a[0], y = a[1], z = a[2];
    var uvx = qy * z - qz * y, uvy = qz * x - qx * z, uvz = qx * y - qy * x;
    var uuvx = qy * uvz - qz * uvy, uuvy = qz * uvx - qx * uvz, uuvz = qx * uvy - qy * uvx;
    var w2 = qw * 2;
    uvx *= w2;
    uvy *= w2;
    uvz *= w2;
    uuvx *= 2;
    uuvy *= 2;
    uuvz *= 2;
    out[0] = x + uvx + uuvx;
    out[1] = y + uvy + uuvy;
    out[2] = z + uvz + uuvz;
    return out;
  }
  function rotateX(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0];
    r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
    r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function rotateY(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
    r[1] = p[1];
    r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function rotateZ(out, a, b, rad) {
    var p = [], r = [];
    p[0] = a[0] - b[0];
    p[1] = a[1] - b[1];
    p[2] = a[2] - b[2];
    r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
    r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
    r[2] = p[2];
    out[0] = r[0] + b[0];
    out[1] = r[1] + b[1];
    out[2] = r[2] + b[2];
    return out;
  }
  function angle(a, b) {
    var ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2], mag1 = Math.sqrt(ax * ax + ay * ay + az * az), mag2 = Math.sqrt(bx * bx + by * by + bz * bz), mag = mag1 * mag2, cosine = mag && dot(a, b) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero2(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    return out;
  }
  function str(a) {
    return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2];
    var b0 = b[0], b1 = b[1], b2 = b[2];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2));
  }
  var sub = subtract2;
  exports.sub = sub;
  var mul = multiply;
  exports.mul = mul;
  var div = divide;
  exports.div = div;
  var dist = distance;
  exports.dist = dist;
  var sqrDist = squaredDistance;
  exports.sqrDist = sqrDist;
  var len = length;
  exports.len = len;
  var sqrLen = squaredLength;
  exports.sqrLen = sqrLen;
  var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
      var i, l;
      if (!stride) {
        stride = 3;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min(count * stride + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
      }
      return a;
    };
  }();
  exports.forEach = forEach;
});

// node_modules/gl-matrix/cjs/vec4.js
var require_vec4 = __commonJS((exports) => {
  "use strict";
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.fromValues = fromValues;
  exports.copy = copy;
  exports.set = set;
  exports.add = add;
  exports.subtract = subtract2;
  exports.multiply = multiply;
  exports.divide = divide;
  exports.ceil = ceil;
  exports.floor = floor;
  exports.min = min;
  exports.max = max;
  exports.round = round;
  exports.scale = scale;
  exports.scaleAndAdd = scaleAndAdd;
  exports.distance = distance;
  exports.squaredDistance = squaredDistance;
  exports.length = length;
  exports.squaredLength = squaredLength;
  exports.negate = negate;
  exports.inverse = inverse;
  exports.normalize = normalize2;
  exports.dot = dot;
  exports.cross = cross2;
  exports.lerp = lerp;
  exports.random = random;
  exports.transformMat4 = transformMat4;
  exports.transformQuat = transformQuat;
  exports.zero = zero2;
  exports.str = str;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.forEach = exports.sqrLen = exports.len = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = void 0;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(4);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
    }
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function fromValues(x, y, z, w) {
    var out = new glMatrix.ARRAY_TYPE(4);
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    return out;
  }
  function set(out, x, y, z, w) {
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = w;
    return out;
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    return out;
  }
  function subtract2(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    out[3] = a[3] - b[3];
    return out;
  }
  function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    out[2] = a[2] * b[2];
    out[3] = a[3] * b[3];
    return out;
  }
  function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    out[2] = a[2] / b[2];
    out[3] = a[3] / b[3];
    return out;
  }
  function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    out[2] = Math.ceil(a[2]);
    out[3] = Math.ceil(a[3]);
    return out;
  }
  function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    out[2] = Math.floor(a[2]);
    out[3] = Math.floor(a[3]);
    return out;
  }
  function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    out[2] = Math.min(a[2], b[2]);
    out[3] = Math.min(a[3], b[3]);
    return out;
  }
  function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    out[2] = Math.max(a[2], b[2]);
    out[3] = Math.max(a[3], b[3]);
    return out;
  }
  function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    out[2] = Math.round(a[2]);
    out[3] = Math.round(a[3]);
    return out;
  }
  function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    return out;
  }
  function scaleAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    out[2] = a[2] + b[2] * scale2;
    out[3] = a[3] + b[3] * scale2;
    return out;
  }
  function distance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    var w = b[3] - a[3];
    return Math.hypot(x, y, z, w);
  }
  function squaredDistance(a, b) {
    var x = b[0] - a[0];
    var y = b[1] - a[1];
    var z = b[2] - a[2];
    var w = b[3] - a[3];
    return x * x + y * y + z * z + w * w;
  }
  function length(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return Math.hypot(x, y, z, w);
  }
  function squaredLength(a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    return x * x + y * y + z * z + w * w;
  }
  function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = -a[3];
    return out;
  }
  function inverse(out, a) {
    out[0] = 1 / a[0];
    out[1] = 1 / a[1];
    out[2] = 1 / a[2];
    out[3] = 1 / a[3];
    return out;
  }
  function normalize2(out, a) {
    var x = a[0];
    var y = a[1];
    var z = a[2];
    var w = a[3];
    var len2 = x * x + y * y + z * z + w * w;
    if (len2 > 0) {
      len2 = 1 / Math.sqrt(len2);
    }
    out[0] = x * len2;
    out[1] = y * len2;
    out[2] = z * len2;
    out[3] = w * len2;
    return out;
  }
  function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
  }
  function cross2(out, u, v2, w) {
    var A = v2[0] * w[1] - v2[1] * w[0], B = v2[0] * w[2] - v2[2] * w[0], C = v2[0] * w[3] - v2[3] * w[0], D = v2[1] * w[2] - v2[2] * w[1], E = v2[1] * w[3] - v2[3] * w[1], F = v2[2] * w[3] - v2[3] * w[2];
    var G = u[0];
    var H = u[1];
    var I = u[2];
    var J = u[3];
    out[0] = H * F - I * E + J * D;
    out[1] = -(G * F) + I * C - J * B;
    out[2] = G * E - H * C + J * A;
    out[3] = -(G * D) + H * B - I * A;
    return out;
  }
  function lerp(out, a, b, t) {
    var ax = a[0];
    var ay = a[1];
    var az = a[2];
    var aw = a[3];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    out[2] = az + t * (b[2] - az);
    out[3] = aw + t * (b[3] - aw);
    return out;
  }
  function random(out, scale2) {
    scale2 = scale2 || 1;
    var v1, v2, v3, v4;
    var s1, s2;
    do {
      v1 = glMatrix.RANDOM() * 2 - 1;
      v2 = glMatrix.RANDOM() * 2 - 1;
      s1 = v1 * v1 + v2 * v2;
    } while (s1 >= 1);
    do {
      v3 = glMatrix.RANDOM() * 2 - 1;
      v4 = glMatrix.RANDOM() * 2 - 1;
      s2 = v3 * v3 + v4 * v4;
    } while (s2 >= 1);
    var d = Math.sqrt((1 - s1) / s2);
    out[0] = scale2 * v1;
    out[1] = scale2 * v2;
    out[2] = scale2 * v3 * d;
    out[3] = scale2 * v4 * d;
    return out;
  }
  function transformMat4(out, a, m) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
    return out;
  }
  function transformQuat(out, a, q) {
    var x = a[0], y = a[1], z = a[2];
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3];
    var ix = qw * x + qy * z - qz * y;
    var iy = qw * y + qz * x - qx * z;
    var iz = qw * z + qx * y - qy * x;
    var iw = -qx * x - qy * y - qz * z;
    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    out[3] = a[3];
    return out;
  }
  function zero2(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    return out;
  }
  function str(a) {
    return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
  }
  var sub = subtract2;
  exports.sub = sub;
  var mul = multiply;
  exports.mul = mul;
  var div = divide;
  exports.div = div;
  var dist = distance;
  exports.dist = dist;
  var sqrDist = squaredDistance;
  exports.sqrDist = sqrDist;
  var len = length;
  exports.len = len;
  var sqrLen = squaredLength;
  exports.sqrLen = sqrLen;
  var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
      var i, l;
      if (!stride) {
        stride = 4;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min(count * stride + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        vec[2] = a[i + 2];
        vec[3] = a[i + 3];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
        a[i + 2] = vec[2];
        a[i + 3] = vec[3];
      }
      return a;
    };
  }();
  exports.forEach = forEach;
});

// node_modules/gl-matrix/cjs/quat.js
var require_quat = __commonJS((exports) => {
  "use strict";
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.identity = identity;
  exports.setAxisAngle = setAxisAngle;
  exports.getAxisAngle = getAxisAngle;
  exports.getAngle = getAngle;
  exports.multiply = multiply;
  exports.rotateX = rotateX;
  exports.rotateY = rotateY;
  exports.rotateZ = rotateZ;
  exports.calculateW = calculateW;
  exports.exp = exp;
  exports.ln = ln;
  exports.pow = pow;
  exports.slerp = slerp;
  exports.random = random;
  exports.invert = invert;
  exports.conjugate = conjugate;
  exports.fromMat3 = fromMat3;
  exports.fromEuler = fromEuler;
  exports.str = str;
  exports.setAxes = exports.sqlerp = exports.rotationTo = exports.equals = exports.exactEquals = exports.normalize = exports.sqrLen = exports.squaredLength = exports.len = exports.length = exports.lerp = exports.dot = exports.scale = exports.mul = exports.add = exports.set = exports.copy = exports.fromValues = exports.clone = void 0;
  var glMatrix = _interopRequireWildcard(require_common());
  var mat3 = _interopRequireWildcard(require_mat3());
  var vec33 = _interopRequireWildcard(require_vec3());
  var vec4 = _interopRequireWildcard(require_vec4());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(4);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
    }
    out[3] = 1;
    return out;
  }
  function identity(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    return out;
  }
  function setAxisAngle(out, axis, rad) {
    rad = rad * 0.5;
    var s = Math.sin(rad);
    out[0] = s * axis[0];
    out[1] = s * axis[1];
    out[2] = s * axis[2];
    out[3] = Math.cos(rad);
    return out;
  }
  function getAxisAngle(out_axis, q) {
    var rad = Math.acos(q[3]) * 2;
    var s = Math.sin(rad / 2);
    if (s > glMatrix.EPSILON) {
      out_axis[0] = q[0] / s;
      out_axis[1] = q[1] / s;
      out_axis[2] = q[2] / s;
    } else {
      out_axis[0] = 1;
      out_axis[1] = 0;
      out_axis[2] = 0;
    }
    return rad;
  }
  function getAngle(a, b) {
    var dotproduct = dot(a, b);
    return Math.acos(2 * dotproduct * dotproduct - 1);
  }
  function multiply(out, a, b) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = b[0], by = b[1], bz = b[2], bw = b[3];
    out[0] = ax * bw + aw * bx + ay * bz - az * by;
    out[1] = ay * bw + aw * by + az * bx - ax * bz;
    out[2] = az * bw + aw * bz + ax * by - ay * bx;
    out[3] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function rotateX(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + aw * bx;
    out[1] = ay * bw + az * bx;
    out[2] = az * bw - ay * bx;
    out[3] = aw * bw - ax * bx;
    return out;
  }
  function rotateY(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var by = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw - az * by;
    out[1] = ay * bw + aw * by;
    out[2] = az * bw + ax * by;
    out[3] = aw * bw - ay * by;
    return out;
  }
  function rotateZ(out, a, rad) {
    rad *= 0.5;
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bz = Math.sin(rad), bw = Math.cos(rad);
    out[0] = ax * bw + ay * bz;
    out[1] = ay * bw - ax * bz;
    out[2] = az * bw + aw * bz;
    out[3] = aw * bw - az * bz;
    return out;
  }
  function calculateW(out, a) {
    var x = a[0], y = a[1], z = a[2];
    out[0] = x;
    out[1] = y;
    out[2] = z;
    out[3] = Math.sqrt(Math.abs(1 - x * x - y * y - z * z));
    return out;
  }
  function exp(out, a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    var r = Math.sqrt(x * x + y * y + z * z);
    var et = Math.exp(w);
    var s = r > 0 ? et * Math.sin(r) / r : 0;
    out[0] = x * s;
    out[1] = y * s;
    out[2] = z * s;
    out[3] = et * Math.cos(r);
    return out;
  }
  function ln(out, a) {
    var x = a[0], y = a[1], z = a[2], w = a[3];
    var r = Math.sqrt(x * x + y * y + z * z);
    var t = r > 0 ? Math.atan2(r, w) / r : 0;
    out[0] = x * t;
    out[1] = y * t;
    out[2] = z * t;
    out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
    return out;
  }
  function pow(out, a, b) {
    ln(out, a);
    scale(out, out, b);
    exp(out, out);
    return out;
  }
  function slerp(out, a, b, t) {
    var ax = a[0], ay = a[1], az = a[2], aw = a[3];
    var bx = b[0], by = b[1], bz = b[2], bw = b[3];
    var omega, cosom, sinom, scale0, scale1;
    cosom = ax * bx + ay * by + az * bz + aw * bw;
    if (cosom < 0) {
      cosom = -cosom;
      bx = -bx;
      by = -by;
      bz = -bz;
      bw = -bw;
    }
    if (1 - cosom > glMatrix.EPSILON) {
      omega = Math.acos(cosom);
      sinom = Math.sin(omega);
      scale0 = Math.sin((1 - t) * omega) / sinom;
      scale1 = Math.sin(t * omega) / sinom;
    } else {
      scale0 = 1 - t;
      scale1 = t;
    }
    out[0] = scale0 * ax + scale1 * bx;
    out[1] = scale0 * ay + scale1 * by;
    out[2] = scale0 * az + scale1 * bz;
    out[3] = scale0 * aw + scale1 * bw;
    return out;
  }
  function random(out) {
    var u1 = glMatrix.RANDOM();
    var u2 = glMatrix.RANDOM();
    var u3 = glMatrix.RANDOM();
    var sqrt1MinusU1 = Math.sqrt(1 - u1);
    var sqrtU1 = Math.sqrt(u1);
    out[0] = sqrt1MinusU1 * Math.sin(2 * Math.PI * u2);
    out[1] = sqrt1MinusU1 * Math.cos(2 * Math.PI * u2);
    out[2] = sqrtU1 * Math.sin(2 * Math.PI * u3);
    out[3] = sqrtU1 * Math.cos(2 * Math.PI * u3);
    return out;
  }
  function invert(out, a) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
    var dot2 = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
    var invDot = dot2 ? 1 / dot2 : 0;
    out[0] = -a0 * invDot;
    out[1] = -a1 * invDot;
    out[2] = -a2 * invDot;
    out[3] = a3 * invDot;
    return out;
  }
  function conjugate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    return out;
  }
  function fromMat3(out, m) {
    var fTrace = m[0] + m[4] + m[8];
    var fRoot;
    if (fTrace > 0) {
      fRoot = Math.sqrt(fTrace + 1);
      out[3] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[0] = (m[5] - m[7]) * fRoot;
      out[1] = (m[6] - m[2]) * fRoot;
      out[2] = (m[1] - m[3]) * fRoot;
    } else {
      var i = 0;
      if (m[4] > m[0])
        i = 1;
      if (m[8] > m[i * 3 + i])
        i = 2;
      var j = (i + 1) % 3;
      var k = (i + 2) % 3;
      fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);
      out[i] = 0.5 * fRoot;
      fRoot = 0.5 / fRoot;
      out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
      out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
      out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
    }
    return out;
  }
  function fromEuler(out, x, y, z) {
    var halfToRad = 0.5 * Math.PI / 180;
    x *= halfToRad;
    y *= halfToRad;
    z *= halfToRad;
    var sx = Math.sin(x);
    var cx = Math.cos(x);
    var sy = Math.sin(y);
    var cy = Math.cos(y);
    var sz = Math.sin(z);
    var cz = Math.cos(z);
    out[0] = sx * cy * cz - cx * sy * sz;
    out[1] = cx * sy * cz + sx * cy * sz;
    out[2] = cx * cy * sz - sx * sy * cz;
    out[3] = cx * cy * cz + sx * sy * sz;
    return out;
  }
  function str(a) {
    return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
  }
  var clone = vec4.clone;
  exports.clone = clone;
  var fromValues = vec4.fromValues;
  exports.fromValues = fromValues;
  var copy = vec4.copy;
  exports.copy = copy;
  var set = vec4.set;
  exports.set = set;
  var add = vec4.add;
  exports.add = add;
  var mul = multiply;
  exports.mul = mul;
  var scale = vec4.scale;
  exports.scale = scale;
  var dot = vec4.dot;
  exports.dot = dot;
  var lerp = vec4.lerp;
  exports.lerp = lerp;
  var length = vec4.length;
  exports.length = length;
  var len = length;
  exports.len = len;
  var squaredLength = vec4.squaredLength;
  exports.squaredLength = squaredLength;
  var sqrLen = squaredLength;
  exports.sqrLen = sqrLen;
  var normalize2 = vec4.normalize;
  exports.normalize = normalize2;
  var exactEquals = vec4.exactEquals;
  exports.exactEquals = exactEquals;
  var equals = vec4.equals;
  exports.equals = equals;
  var rotationTo = function() {
    var tmpvec3 = vec33.create();
    var xUnitVec3 = vec33.fromValues(1, 0, 0);
    var yUnitVec3 = vec33.fromValues(0, 1, 0);
    return function(out, a, b) {
      var dot2 = vec33.dot(a, b);
      if (dot2 < -0.999999) {
        vec33.cross(tmpvec3, xUnitVec3, a);
        if (vec33.len(tmpvec3) < 1e-6)
          vec33.cross(tmpvec3, yUnitVec3, a);
        vec33.normalize(tmpvec3, tmpvec3);
        setAxisAngle(out, tmpvec3, Math.PI);
        return out;
      } else if (dot2 > 0.999999) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 1;
        return out;
      } else {
        vec33.cross(tmpvec3, a, b);
        out[0] = tmpvec3[0];
        out[1] = tmpvec3[1];
        out[2] = tmpvec3[2];
        out[3] = 1 + dot2;
        return normalize2(out, out);
      }
    };
  }();
  exports.rotationTo = rotationTo;
  var sqlerp = function() {
    var temp1 = create();
    var temp2 = create();
    return function(out, a, b, c, d, t) {
      slerp(temp1, a, d, t);
      slerp(temp2, b, c, t);
      slerp(out, temp1, temp2, 2 * t * (1 - t));
      return out;
    };
  }();
  exports.sqlerp = sqlerp;
  var setAxes = function() {
    var matr = mat3.create();
    return function(out, view, right, up) {
      matr[0] = right[0];
      matr[3] = right[1];
      matr[6] = right[2];
      matr[1] = up[0];
      matr[4] = up[1];
      matr[7] = up[2];
      matr[2] = -view[0];
      matr[5] = -view[1];
      matr[8] = -view[2];
      return normalize2(out, fromMat3(out, matr));
    };
  }();
  exports.setAxes = setAxes;
});

// node_modules/gl-matrix/cjs/quat2.js
var require_quat2 = __commonJS((exports) => {
  "use strict";
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.fromValues = fromValues;
  exports.fromRotationTranslationValues = fromRotationTranslationValues;
  exports.fromRotationTranslation = fromRotationTranslation;
  exports.fromTranslation = fromTranslation;
  exports.fromRotation = fromRotation;
  exports.fromMat4 = fromMat4;
  exports.copy = copy;
  exports.identity = identity;
  exports.set = set;
  exports.getDual = getDual;
  exports.setDual = setDual;
  exports.getTranslation = getTranslation;
  exports.translate = translate;
  exports.rotateX = rotateX;
  exports.rotateY = rotateY;
  exports.rotateZ = rotateZ;
  exports.rotateByQuatAppend = rotateByQuatAppend;
  exports.rotateByQuatPrepend = rotateByQuatPrepend;
  exports.rotateAroundAxis = rotateAroundAxis;
  exports.add = add;
  exports.multiply = multiply;
  exports.scale = scale;
  exports.lerp = lerp;
  exports.invert = invert;
  exports.conjugate = conjugate;
  exports.normalize = normalize2;
  exports.str = str;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.sqrLen = exports.squaredLength = exports.len = exports.length = exports.dot = exports.mul = exports.setReal = exports.getReal = void 0;
  var glMatrix = _interopRequireWildcard(require_common());
  var quat = _interopRequireWildcard(require_quat());
  var mat4 = _interopRequireWildcard(require_mat4());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var dq = new glMatrix.ARRAY_TYPE(8);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      dq[0] = 0;
      dq[1] = 0;
      dq[2] = 0;
      dq[4] = 0;
      dq[5] = 0;
      dq[6] = 0;
      dq[7] = 0;
    }
    dq[3] = 1;
    return dq;
  }
  function clone(a) {
    var dq = new glMatrix.ARRAY_TYPE(8);
    dq[0] = a[0];
    dq[1] = a[1];
    dq[2] = a[2];
    dq[3] = a[3];
    dq[4] = a[4];
    dq[5] = a[5];
    dq[6] = a[6];
    dq[7] = a[7];
    return dq;
  }
  function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {
    var dq = new glMatrix.ARRAY_TYPE(8);
    dq[0] = x1;
    dq[1] = y1;
    dq[2] = z1;
    dq[3] = w1;
    dq[4] = x2;
    dq[5] = y2;
    dq[6] = z2;
    dq[7] = w2;
    return dq;
  }
  function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
    var dq = new glMatrix.ARRAY_TYPE(8);
    dq[0] = x1;
    dq[1] = y1;
    dq[2] = z1;
    dq[3] = w1;
    var ax = x2 * 0.5, ay = y2 * 0.5, az = z2 * 0.5;
    dq[4] = ax * w1 + ay * z1 - az * y1;
    dq[5] = ay * w1 + az * x1 - ax * z1;
    dq[6] = az * w1 + ax * y1 - ay * x1;
    dq[7] = -ax * x1 - ay * y1 - az * z1;
    return dq;
  }
  function fromRotationTranslation(out, q, t) {
    var ax = t[0] * 0.5, ay = t[1] * 0.5, az = t[2] * 0.5, bx = q[0], by = q[1], bz = q[2], bw = q[3];
    out[0] = bx;
    out[1] = by;
    out[2] = bz;
    out[3] = bw;
    out[4] = ax * bw + ay * bz - az * by;
    out[5] = ay * bw + az * bx - ax * bz;
    out[6] = az * bw + ax * by - ay * bx;
    out[7] = -ax * bx - ay * by - az * bz;
    return out;
  }
  function fromTranslation(out, t) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = t[0] * 0.5;
    out[5] = t[1] * 0.5;
    out[6] = t[2] * 0.5;
    out[7] = 0;
    return out;
  }
  function fromRotation(out, q) {
    out[0] = q[0];
    out[1] = q[1];
    out[2] = q[2];
    out[3] = q[3];
    out[4] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    return out;
  }
  function fromMat4(out, a) {
    var outer = quat.create();
    mat4.getRotation(outer, a);
    var t = new glMatrix.ARRAY_TYPE(3);
    mat4.getTranslation(t, a);
    fromRotationTranslation(out, outer, t);
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    return out;
  }
  function identity(out) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 1;
    out[4] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
    return out;
  }
  function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {
    out[0] = x1;
    out[1] = y1;
    out[2] = z1;
    out[3] = w1;
    out[4] = x2;
    out[5] = y2;
    out[6] = z2;
    out[7] = w2;
    return out;
  }
  var getReal = quat.copy;
  exports.getReal = getReal;
  function getDual(out, a) {
    out[0] = a[4];
    out[1] = a[5];
    out[2] = a[6];
    out[3] = a[7];
    return out;
  }
  var setReal = quat.copy;
  exports.setReal = setReal;
  function setDual(out, q) {
    out[4] = q[0];
    out[5] = q[1];
    out[6] = q[2];
    out[7] = q[3];
    return out;
  }
  function getTranslation(out, a) {
    var ax = a[4], ay = a[5], az = a[6], aw = a[7], bx = -a[0], by = -a[1], bz = -a[2], bw = a[3];
    out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
    return out;
  }
  function translate(out, a, v2) {
    var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3], bx1 = v2[0] * 0.5, by1 = v2[1] * 0.5, bz1 = v2[2] * 0.5, ax2 = a[4], ay2 = a[5], az2 = a[6], aw2 = a[7];
    out[0] = ax1;
    out[1] = ay1;
    out[2] = az1;
    out[3] = aw1;
    out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
    out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
    out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
    out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
    return out;
  }
  function rotateX(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    quat.rotateX(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateY(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    quat.rotateY(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateZ(out, a, rad) {
    var bx = -a[0], by = -a[1], bz = -a[2], bw = a[3], ax = a[4], ay = a[5], az = a[6], aw = a[7], ax1 = ax * bw + aw * bx + ay * bz - az * by, ay1 = ay * bw + aw * by + az * bx - ax * bz, az1 = az * bw + aw * bz + ax * by - ay * bx, aw1 = aw * bw - ax * bx - ay * by - az * bz;
    quat.rotateZ(out, a, rad);
    bx = out[0];
    by = out[1];
    bz = out[2];
    bw = out[3];
    out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    return out;
  }
  function rotateByQuatAppend(out, a, q) {
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3], ax = a[0], ay = a[1], az = a[2], aw = a[3];
    out[0] = ax * qw + aw * qx + ay * qz - az * qy;
    out[1] = ay * qw + aw * qy + az * qx - ax * qz;
    out[2] = az * qw + aw * qz + ax * qy - ay * qx;
    out[3] = aw * qw - ax * qx - ay * qy - az * qz;
    ax = a[4];
    ay = a[5];
    az = a[6];
    aw = a[7];
    out[4] = ax * qw + aw * qx + ay * qz - az * qy;
    out[5] = ay * qw + aw * qy + az * qx - ax * qz;
    out[6] = az * qw + aw * qz + ax * qy - ay * qx;
    out[7] = aw * qw - ax * qx - ay * qy - az * qz;
    return out;
  }
  function rotateByQuatPrepend(out, q, a) {
    var qx = q[0], qy = q[1], qz = q[2], qw = q[3], bx = a[0], by = a[1], bz = a[2], bw = a[3];
    out[0] = qx * bw + qw * bx + qy * bz - qz * by;
    out[1] = qy * bw + qw * by + qz * bx - qx * bz;
    out[2] = qz * bw + qw * bz + qx * by - qy * bx;
    out[3] = qw * bw - qx * bx - qy * by - qz * bz;
    bx = a[4];
    by = a[5];
    bz = a[6];
    bw = a[7];
    out[4] = qx * bw + qw * bx + qy * bz - qz * by;
    out[5] = qy * bw + qw * by + qz * bx - qx * bz;
    out[6] = qz * bw + qw * bz + qx * by - qy * bx;
    out[7] = qw * bw - qx * bx - qy * by - qz * bz;
    return out;
  }
  function rotateAroundAxis(out, a, axis, rad) {
    if (Math.abs(rad) < glMatrix.EPSILON) {
      return copy(out, a);
    }
    var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
    rad = rad * 0.5;
    var s = Math.sin(rad);
    var bx = s * axis[0] / axisLength;
    var by = s * axis[1] / axisLength;
    var bz = s * axis[2] / axisLength;
    var bw = Math.cos(rad);
    var ax1 = a[0], ay1 = a[1], az1 = a[2], aw1 = a[3];
    out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
    out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
    out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
    out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
    var ax = a[4], ay = a[5], az = a[6], aw = a[7];
    out[4] = ax * bw + aw * bx + ay * bz - az * by;
    out[5] = ay * bw + aw * by + az * bx - ax * bz;
    out[6] = az * bw + aw * bz + ax * by - ay * bx;
    out[7] = aw * bw - ax * bx - ay * by - az * bz;
    return out;
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    out[2] = a[2] + b[2];
    out[3] = a[3] + b[3];
    out[4] = a[4] + b[4];
    out[5] = a[5] + b[5];
    out[6] = a[6] + b[6];
    out[7] = a[7] + b[7];
    return out;
  }
  function multiply(out, a, b) {
    var ax0 = a[0], ay0 = a[1], az0 = a[2], aw0 = a[3], bx1 = b[4], by1 = b[5], bz1 = b[6], bw1 = b[7], ax1 = a[4], ay1 = a[5], az1 = a[6], aw1 = a[7], bx0 = b[0], by0 = b[1], bz0 = b[2], bw0 = b[3];
    out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
    out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
    out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
    out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
    out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
    out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
    out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
    out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
    return out;
  }
  var mul = multiply;
  exports.mul = mul;
  function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    out[2] = a[2] * b;
    out[3] = a[3] * b;
    out[4] = a[4] * b;
    out[5] = a[5] * b;
    out[6] = a[6] * b;
    out[7] = a[7] * b;
    return out;
  }
  var dot = quat.dot;
  exports.dot = dot;
  function lerp(out, a, b, t) {
    var mt = 1 - t;
    if (dot(a, b) < 0)
      t = -t;
    out[0] = a[0] * mt + b[0] * t;
    out[1] = a[1] * mt + b[1] * t;
    out[2] = a[2] * mt + b[2] * t;
    out[3] = a[3] * mt + b[3] * t;
    out[4] = a[4] * mt + b[4] * t;
    out[5] = a[5] * mt + b[5] * t;
    out[6] = a[6] * mt + b[6] * t;
    out[7] = a[7] * mt + b[7] * t;
    return out;
  }
  function invert(out, a) {
    var sqlen = squaredLength(a);
    out[0] = -a[0] / sqlen;
    out[1] = -a[1] / sqlen;
    out[2] = -a[2] / sqlen;
    out[3] = a[3] / sqlen;
    out[4] = -a[4] / sqlen;
    out[5] = -a[5] / sqlen;
    out[6] = -a[6] / sqlen;
    out[7] = a[7] / sqlen;
    return out;
  }
  function conjugate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    out[2] = -a[2];
    out[3] = a[3];
    out[4] = -a[4];
    out[5] = -a[5];
    out[6] = -a[6];
    out[7] = a[7];
    return out;
  }
  var length = quat.length;
  exports.length = length;
  var len = length;
  exports.len = len;
  var squaredLength = quat.squaredLength;
  exports.squaredLength = squaredLength;
  var sqrLen = squaredLength;
  exports.sqrLen = sqrLen;
  function normalize2(out, a) {
    var magnitude = squaredLength(a);
    if (magnitude > 0) {
      magnitude = Math.sqrt(magnitude);
      var a0 = a[0] / magnitude;
      var a1 = a[1] / magnitude;
      var a2 = a[2] / magnitude;
      var a3 = a[3] / magnitude;
      var b0 = a[4];
      var b1 = a[5];
      var b2 = a[6];
      var b3 = a[7];
      var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
      out[0] = a0;
      out[1] = a1;
      out[2] = a2;
      out[3] = a3;
      out[4] = (b0 - a0 * a_dot_b) / magnitude;
      out[5] = (b1 - a1 * a_dot_b) / magnitude;
      out[6] = (b2 - a2 * a_dot_b) / magnitude;
      out[7] = (b3 - a3 * a_dot_b) / magnitude;
    }
    return out;
  }
  function str(a) {
    return "quat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ")";
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7];
    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7));
  }
});

// node_modules/gl-matrix/cjs/vec2.js
var require_vec2 = __commonJS((exports) => {
  "use strict";
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.create = create;
  exports.clone = clone;
  exports.fromValues = fromValues;
  exports.copy = copy;
  exports.set = set;
  exports.add = add;
  exports.subtract = subtract2;
  exports.multiply = multiply;
  exports.divide = divide;
  exports.ceil = ceil;
  exports.floor = floor;
  exports.min = min;
  exports.max = max;
  exports.round = round;
  exports.scale = scale;
  exports.scaleAndAdd = scaleAndAdd;
  exports.distance = distance;
  exports.squaredDistance = squaredDistance;
  exports.length = length;
  exports.squaredLength = squaredLength;
  exports.negate = negate;
  exports.inverse = inverse;
  exports.normalize = normalize2;
  exports.dot = dot;
  exports.cross = cross2;
  exports.lerp = lerp;
  exports.random = random;
  exports.transformMat2 = transformMat2;
  exports.transformMat2d = transformMat2d;
  exports.transformMat3 = transformMat3;
  exports.transformMat4 = transformMat4;
  exports.rotate = rotate;
  exports.angle = angle;
  exports.zero = zero2;
  exports.str = str;
  exports.exactEquals = exactEquals;
  exports.equals = equals;
  exports.forEach = exports.sqrLen = exports.sqrDist = exports.dist = exports.div = exports.mul = exports.sub = exports.len = void 0;
  var glMatrix = _interopRequireWildcard(require_common());
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
  function create() {
    var out = new glMatrix.ARRAY_TYPE(2);
    if (glMatrix.ARRAY_TYPE != Float32Array) {
      out[0] = 0;
      out[1] = 0;
    }
    return out;
  }
  function clone(a) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = a[0];
    out[1] = a[1];
    return out;
  }
  function fromValues(x, y) {
    var out = new glMatrix.ARRAY_TYPE(2);
    out[0] = x;
    out[1] = y;
    return out;
  }
  function copy(out, a) {
    out[0] = a[0];
    out[1] = a[1];
    return out;
  }
  function set(out, x, y) {
    out[0] = x;
    out[1] = y;
    return out;
  }
  function add(out, a, b) {
    out[0] = a[0] + b[0];
    out[1] = a[1] + b[1];
    return out;
  }
  function subtract2(out, a, b) {
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    return out;
  }
  function multiply(out, a, b) {
    out[0] = a[0] * b[0];
    out[1] = a[1] * b[1];
    return out;
  }
  function divide(out, a, b) {
    out[0] = a[0] / b[0];
    out[1] = a[1] / b[1];
    return out;
  }
  function ceil(out, a) {
    out[0] = Math.ceil(a[0]);
    out[1] = Math.ceil(a[1]);
    return out;
  }
  function floor(out, a) {
    out[0] = Math.floor(a[0]);
    out[1] = Math.floor(a[1]);
    return out;
  }
  function min(out, a, b) {
    out[0] = Math.min(a[0], b[0]);
    out[1] = Math.min(a[1], b[1]);
    return out;
  }
  function max(out, a, b) {
    out[0] = Math.max(a[0], b[0]);
    out[1] = Math.max(a[1], b[1]);
    return out;
  }
  function round(out, a) {
    out[0] = Math.round(a[0]);
    out[1] = Math.round(a[1]);
    return out;
  }
  function scale(out, a, b) {
    out[0] = a[0] * b;
    out[1] = a[1] * b;
    return out;
  }
  function scaleAndAdd(out, a, b, scale2) {
    out[0] = a[0] + b[0] * scale2;
    out[1] = a[1] + b[1] * scale2;
    return out;
  }
  function distance(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return Math.hypot(x, y);
  }
  function squaredDistance(a, b) {
    var x = b[0] - a[0], y = b[1] - a[1];
    return x * x + y * y;
  }
  function length(a) {
    var x = a[0], y = a[1];
    return Math.hypot(x, y);
  }
  function squaredLength(a) {
    var x = a[0], y = a[1];
    return x * x + y * y;
  }
  function negate(out, a) {
    out[0] = -a[0];
    out[1] = -a[1];
    return out;
  }
  function inverse(out, a) {
    out[0] = 1 / a[0];
    out[1] = 1 / a[1];
    return out;
  }
  function normalize2(out, a) {
    var x = a[0], y = a[1];
    var len2 = x * x + y * y;
    if (len2 > 0) {
      len2 = 1 / Math.sqrt(len2);
    }
    out[0] = a[0] * len2;
    out[1] = a[1] * len2;
    return out;
  }
  function dot(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  function cross2(out, a, b) {
    var z = a[0] * b[1] - a[1] * b[0];
    out[0] = out[1] = 0;
    out[2] = z;
    return out;
  }
  function lerp(out, a, b, t) {
    var ax = a[0], ay = a[1];
    out[0] = ax + t * (b[0] - ax);
    out[1] = ay + t * (b[1] - ay);
    return out;
  }
  function random(out, scale2) {
    scale2 = scale2 || 1;
    var r = glMatrix.RANDOM() * 2 * Math.PI;
    out[0] = Math.cos(r) * scale2;
    out[1] = Math.sin(r) * scale2;
    return out;
  }
  function transformMat2(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y;
    out[1] = m[1] * x + m[3] * y;
    return out;
  }
  function transformMat2d(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[2] * y + m[4];
    out[1] = m[1] * x + m[3] * y + m[5];
    return out;
  }
  function transformMat3(out, a, m) {
    var x = a[0], y = a[1];
    out[0] = m[0] * x + m[3] * y + m[6];
    out[1] = m[1] * x + m[4] * y + m[7];
    return out;
  }
  function transformMat4(out, a, m) {
    var x = a[0];
    var y = a[1];
    out[0] = m[0] * x + m[4] * y + m[12];
    out[1] = m[1] * x + m[5] * y + m[13];
    return out;
  }
  function rotate(out, a, b, rad) {
    var p0 = a[0] - b[0], p1 = a[1] - b[1], sinC = Math.sin(rad), cosC = Math.cos(rad);
    out[0] = p0 * cosC - p1 * sinC + b[0];
    out[1] = p0 * sinC + p1 * cosC + b[1];
    return out;
  }
  function angle(a, b) {
    var x1 = a[0], y1 = a[1], x2 = b[0], y2 = b[1], mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2), cosine = mag && (x1 * x2 + y1 * y2) / mag;
    return Math.acos(Math.min(Math.max(cosine, -1), 1));
  }
  function zero2(out) {
    out[0] = 0;
    out[1] = 0;
    return out;
  }
  function str(a) {
    return "vec2(" + a[0] + ", " + a[1] + ")";
  }
  function exactEquals(a, b) {
    return a[0] === b[0] && a[1] === b[1];
  }
  function equals(a, b) {
    var a0 = a[0], a1 = a[1];
    var b0 = b[0], b1 = b[1];
    return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1));
  }
  var len = length;
  exports.len = len;
  var sub = subtract2;
  exports.sub = sub;
  var mul = multiply;
  exports.mul = mul;
  var div = divide;
  exports.div = div;
  var dist = distance;
  exports.dist = dist;
  var sqrDist = squaredDistance;
  exports.sqrDist = sqrDist;
  var sqrLen = squaredLength;
  exports.sqrLen = sqrLen;
  var forEach = function() {
    var vec = create();
    return function(a, stride, offset, count, fn, arg) {
      var i, l;
      if (!stride) {
        stride = 2;
      }
      if (!offset) {
        offset = 0;
      }
      if (count) {
        l = Math.min(count * stride + offset, a.length);
      } else {
        l = a.length;
      }
      for (i = offset; i < l; i += stride) {
        vec[0] = a[i];
        vec[1] = a[i + 1];
        fn(vec, vec, arg);
        a[i] = vec[0];
        a[i + 1] = vec[1];
      }
      return a;
    };
  }();
  exports.forEach = forEach;
});

// node_modules/gl-matrix/cjs/index.js
var require_cjs = __commonJS((exports) => {
  "use strict";
  function _typeof(obj) {
    "@babel/helpers - typeof";
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function _typeof2(obj2) {
        return typeof obj2;
      };
    } else {
      _typeof = function _typeof2(obj2) {
        return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      };
    }
    return _typeof(obj);
  }
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.vec4 = exports.vec3 = exports.vec2 = exports.quat2 = exports.quat = exports.mat4 = exports.mat3 = exports.mat2d = exports.mat2 = exports.glMatrix = void 0;
  var glMatrix = _interopRequireWildcard(require_common());
  exports.glMatrix = glMatrix;
  var mat2 = _interopRequireWildcard(require_mat2());
  exports.mat2 = mat2;
  var mat2d = _interopRequireWildcard(require_mat2d());
  exports.mat2d = mat2d;
  var mat3 = _interopRequireWildcard(require_mat3());
  exports.mat3 = mat3;
  var mat4 = _interopRequireWildcard(require_mat4());
  exports.mat4 = mat4;
  var quat = _interopRequireWildcard(require_quat());
  exports.quat = quat;
  var quat2 = _interopRequireWildcard(require_quat2());
  exports.quat2 = quat2;
  var vec22 = _interopRequireWildcard(require_vec2());
  exports.vec2 = vec22;
  var vec33 = _interopRequireWildcard(require_vec3());
  exports.vec3 = vec33;
  var vec4 = _interopRequireWildcard(require_vec4());
  exports.vec4 = vec4;
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function")
      return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
      return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }
  function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }
    if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
      return {default: obj};
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj["default"] = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
});

// node_modules/lodash.clonedeep/index.js
var require_lodash = __commonJS((exports, module) => {
  var LARGE_ARRAY_SIZE = 200;
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var MAX_SAFE_INTEGER = 9007199254740991;
  var argsTag = "[object Arguments]";
  var arrayTag = "[object Array]";
  var boolTag = "[object Boolean]";
  var dateTag = "[object Date]";
  var errorTag = "[object Error]";
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var mapTag = "[object Map]";
  var numberTag = "[object Number]";
  var objectTag = "[object Object]";
  var promiseTag = "[object Promise]";
  var regexpTag = "[object RegExp]";
  var setTag = "[object Set]";
  var stringTag = "[object String]";
  var symbolTag = "[object Symbol]";
  var weakMapTag = "[object WeakMap]";
  var arrayBufferTag = "[object ArrayBuffer]";
  var dataViewTag = "[object DataView]";
  var float32Tag = "[object Float32Array]";
  var float64Tag = "[object Float64Array]";
  var int8Tag = "[object Int8Array]";
  var int16Tag = "[object Int16Array]";
  var int32Tag = "[object Int32Array]";
  var uint8Tag = "[object Uint8Array]";
  var uint8ClampedTag = "[object Uint8ClampedArray]";
  var uint16Tag = "[object Uint16Array]";
  var uint32Tag = "[object Uint32Array]";
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reFlags = /\w*$/;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
  var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
  var moduleExports = freeModule && freeModule.exports === freeExports;
  function addMapEntry(map, pair) {
    map.set(pair[0], pair[1]);
    return map;
  }
  function addSetEntry(set, value) {
    set.add(value);
    return set;
  }
  function arrayEach(array, iteratee) {
    var index = -1, length = array ? array.length : 0;
    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }
  function arrayPush(array, values) {
    var index = -1, length = values.length, offset = array.length;
    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1, length = array ? array.length : 0;
    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }
  function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }
  function getValue(object, key) {
    return object == null ? void 0 : object[key];
  }
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e) {
      }
    }
    return result;
  }
  function mapToArray(map) {
    var index = -1, result = Array(map.size);
    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }
  function setToArray(set) {
    var index = -1, result = Array(set.size);
    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }
  var arrayProto = Array.prototype;
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  var Buffer2 = moduleExports ? root.Buffer : void 0;
  var Symbol2 = root.Symbol;
  var Uint8Array2 = root.Uint8Array;
  var getPrototype = overArg(Object.getPrototypeOf, Object);
  var objectCreate = Object.create;
  var propertyIsEnumerable = objectProto.propertyIsEnumerable;
  var splice = arrayProto.splice;
  var nativeGetSymbols = Object.getOwnPropertySymbols;
  var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
  var nativeKeys = overArg(Object.keys, Object);
  var DataView2 = getNative(root, "DataView");
  var Map2 = getNative(root, "Map");
  var Promise2 = getNative(root, "Promise");
  var Set2 = getNative(root, "Set");
  var WeakMap2 = getNative(root, "WeakMap");
  var nativeCreate = getNative(Object, "create");
  var dataViewCtorString = toSource(DataView2);
  var mapCtorString = toSource(Map2);
  var promiseCtorString = toSource(Promise2);
  var setCtorString = toSource(Set2);
  var weakMapCtorString = toSource(WeakMap2);
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
  var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
  function Hash(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }
  function hashDelete(key) {
    return this.has(key) && delete this.__data__[key];
  }
  function hashGet(key) {
    var data2 = this.__data__;
    if (nativeCreate) {
      var result = data2[key];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty.call(data2, key) ? data2[key] : void 0;
  }
  function hashHas(key) {
    var data2 = this.__data__;
    return nativeCreate ? data2[key] !== void 0 : hasOwnProperty.call(data2, key);
  }
  function hashSet(key, value) {
    var data2 = this.__data__;
    data2[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
  }
  function listCacheDelete(key) {
    var data2 = this.__data__, index = assocIndexOf(data2, key);
    if (index < 0) {
      return false;
    }
    var lastIndex = data2.length - 1;
    if (index == lastIndex) {
      data2.pop();
    } else {
      splice.call(data2, index, 1);
    }
    return true;
  }
  function listCacheGet(key) {
    var data2 = this.__data__, index = assocIndexOf(data2, key);
    return index < 0 ? void 0 : data2[index][1];
  }
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }
  function listCacheSet(key, value) {
    var data2 = this.__data__, index = assocIndexOf(data2, key);
    if (index < 0) {
      data2.push([key, value]);
    } else {
      data2[index][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index = -1, length = entries ? entries.length : 0;
    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.__data__ = {
      hash: new Hash(),
      map: new (Map2 || ListCache)(),
      string: new Hash()
    };
  }
  function mapCacheDelete(key) {
    return getMapData(this, key)["delete"](key);
  }
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }
  function mapCacheSet(key, value) {
    getMapData(this, key).set(key, value);
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function Stack(entries) {
    this.__data__ = new ListCache(entries);
  }
  function stackClear() {
    this.__data__ = new ListCache();
  }
  function stackDelete(key) {
    return this.__data__["delete"](key);
  }
  function stackGet(key) {
    return this.__data__.get(key);
  }
  function stackHas(key) {
    return this.__data__.has(key);
  }
  function stackSet(key, value) {
    var cache = this.__data__;
    if (cache instanceof ListCache) {
      var pairs = cache.__data__;
      if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value]);
        return this;
      }
      cache = this.__data__ = new MapCache(pairs);
    }
    cache.set(key, value);
    return this;
  }
  Stack.prototype.clear = stackClear;
  Stack.prototype["delete"] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;
  function arrayLikeKeys(value, inherited) {
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for (var key in value) {
      if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
        result.push(key);
      }
    }
    return result;
  }
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
      object[key] = value;
    }
  }
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }
  function baseAssign(object, source) {
    return object && copyObject(source, keys(source), object);
  }
  function baseClone(value, isDeep, isFull, customizer, key, object, stack) {
    var result;
    if (customizer) {
      result = object ? customizer(value, key, object, stack) : customizer(value);
    }
    if (result !== void 0) {
      return result;
    }
    if (!isObject(value)) {
      return value;
    }
    var isArr = isArray(value);
    if (isArr) {
      result = initCloneArray(value);
      if (!isDeep) {
        return copyArray(value, result);
      }
    } else {
      var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
      if (isBuffer(value)) {
        return cloneBuffer(value, isDeep);
      }
      if (tag == objectTag || tag == argsTag || isFunc && !object) {
        if (isHostObject(value)) {
          return object ? value : {};
        }
        result = initCloneObject(isFunc ? {} : value);
        if (!isDeep) {
          return copySymbols(value, baseAssign(result, value));
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {};
        }
        result = initCloneByTag(value, tag, baseClone, isDeep);
      }
    }
    stack || (stack = new Stack());
    var stacked = stack.get(value);
    if (stacked) {
      return stacked;
    }
    stack.set(value, result);
    if (!isArr) {
      var props = isFull ? getAllKeys(value) : keys(value);
    }
    arrayEach(props || value, function(subValue, key2) {
      if (props) {
        key2 = subValue;
        subValue = value[key2];
      }
      assignValue(result, key2, baseClone(subValue, isDeep, isFull, customizer, key2, value, stack));
    });
    return result;
  }
  function baseCreate(proto) {
    return isObject(proto) ? objectCreate(proto) : {};
  }
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }
  function baseGetTag(value) {
    return objectToString.call(value);
  }
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty.call(object, key) && key != "constructor") {
        result.push(key);
      }
    }
    return result;
  }
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var result = new buffer.constructor(buffer.length);
    buffer.copy(result);
    return result;
  }
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array2(result).set(new Uint8Array2(arrayBuffer));
    return result;
  }
  function cloneDataView(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
    return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
  }
  function cloneMap(map, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);
    return arrayReduce(array, addMapEntry, new map.constructor());
  }
  function cloneRegExp(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
    result.lastIndex = regexp.lastIndex;
    return result;
  }
  function cloneSet(set, isDeep, cloneFunc) {
    var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);
    return arrayReduce(array, addSetEntry, new set.constructor());
  }
  function cloneSymbol(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
  }
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }
  function copyArray(source, array) {
    var index = -1, length = source.length;
    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }
  function copyObject(source, props, object, customizer) {
    object || (object = {});
    var index = -1, length = props.length;
    while (++index < length) {
      var key = props[index];
      var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
      assignValue(object, key, newValue === void 0 ? source[key] : newValue);
    }
    return object;
  }
  function copySymbols(source, object) {
    return copyObject(source, getSymbols(source), object);
  }
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }
  function getMapData(map, key) {
    var data2 = map.__data__;
    return isKeyable(key) ? data2[typeof key == "string" ? "string" : "hash"] : data2.map;
  }
  function getNative(object, key) {
    var value = getValue(object, key);
    return baseIsNative(value) ? value : void 0;
  }
  var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
  var getTag = baseGetTag;
  if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
    getTag = function(value) {
      var result = objectToString.call(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : void 0;
      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag;
          case mapCtorString:
            return mapTag;
          case promiseCtorString:
            return promiseTag;
          case setCtorString:
            return setTag;
          case weakMapCtorString:
            return weakMapTag;
        }
      }
      return result;
    };
  }
  function initCloneArray(array) {
    var length = array.length, result = array.constructor(length);
    if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
      result.index = array.index;
      result.input = array.input;
    }
    return result;
  }
  function initCloneObject(object) {
    return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
  }
  function initCloneByTag(object, tag, cloneFunc, isDeep) {
    var Ctor = object.constructor;
    switch (tag) {
      case arrayBufferTag:
        return cloneArrayBuffer(object);
      case boolTag:
      case dateTag:
        return new Ctor(+object);
      case dataViewTag:
        return cloneDataView(object, isDeep);
      case float32Tag:
      case float64Tag:
      case int8Tag:
      case int16Tag:
      case int32Tag:
      case uint8Tag:
      case uint8ClampedTag:
      case uint16Tag:
      case uint32Tag:
        return cloneTypedArray(object, isDeep);
      case mapTag:
        return cloneMap(object, isDeep, cloneFunc);
      case numberTag:
      case stringTag:
        return new Ctor(object);
      case regexpTag:
        return cloneRegExp(object);
      case setTag:
        return cloneSet(object, isDeep, cloneFunc);
      case symbolTag:
        return cloneSymbol(object);
    }
  }
  function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
  }
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
    return value === proto;
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  function cloneDeep2(value) {
    return baseClone(value, true, true);
  }
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  function isArguments(value) {
    return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
  }
  var isArray = Array.isArray;
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }
  var isBuffer = nativeIsBuffer || stubFalse;
  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : "";
    return tag == funcTag || tag == genTag;
  }
  function isLength(value) {
    return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }
  function stubArray() {
    return [];
  }
  function stubFalse() {
    return false;
  }
  module.exports = cloneDeep2;
});

// src/log.js
var import_loglevelnext = __toModule(require_lib());
var log = import_loglevelnext.default.create("dcmjs");
var validationLog = import_loglevelnext.default.create("validation.dcmjs");
var log_default = log;

// src/bitArray.js
var BitArray = {
  getBytesForBinaryFrame,
  pack,
  unpack
};
var bitArray_default = BitArray;
function getBytesForBinaryFrame(numPixels) {
  const remainder = numPixels % 8;
  let bytesRequired = Math.floor(numPixels / 8);
  if (remainder > 0) {
    bytesRequired++;
  }
  return bytesRequired;
}
function pack(pixelData) {
  const numPixels = pixelData.length;
  log_default.debug("numPixels: " + numPixels);
  const length = getBytesForBinaryFrame(numPixels);
  const bitPixelData = new Uint8Array(length);
  let bytePos = 0;
  for (let i = 0; i < numPixels; i++) {
    bytePos = Math.floor(i / 8);
    const pixValue = pixelData[i] !== 0;
    const bitPixelValue = pixValue << i % 8;
    bitPixelData[bytePos] |= bitPixelValue;
  }
  return bitPixelData;
}
function unpack(bitPixelArray) {
  const bitArray = new Uint8Array(bitPixelArray);
  const byteArray = new Uint8Array(8 * bitArray.length);
  for (let byteIndex = 0; byteIndex < byteArray.length; byteIndex++) {
    const bitIndex = byteIndex % 8;
    const bitByteIndex = Math.floor(byteIndex / 8);
    byteArray[byteIndex] = 255 * ((bitArray[bitByteIndex] & 1 << bitIndex) >> bitIndex);
  }
  return byteArray;
}

// node_modules/pako/dist/pako.esm.mjs
/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
var Z_FIXED$1 = 4;
var Z_BINARY = 0;
var Z_TEXT = 1;
var Z_UNKNOWN$1 = 2;
function zero$1(buf) {
  let len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
}
var STORED_BLOCK = 0;
var STATIC_TREES = 1;
var DYN_TREES = 2;
var MIN_MATCH$1 = 3;
var MAX_MATCH$1 = 258;
var LENGTH_CODES$1 = 29;
var LITERALS$1 = 256;
var L_CODES$1 = LITERALS$1 + 1 + LENGTH_CODES$1;
var D_CODES$1 = 30;
var BL_CODES$1 = 19;
var HEAP_SIZE$1 = 2 * L_CODES$1 + 1;
var MAX_BITS$1 = 15;
var Buf_size = 16;
var MAX_BL_BITS = 7;
var END_BLOCK = 256;
var REP_3_6 = 16;
var REPZ_3_10 = 17;
var REPZ_11_138 = 18;
var extra_lbits = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]);
var extra_dbits = new Uint8Array([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]);
var extra_blbits = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]);
var bl_order = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
var DIST_CODE_LEN = 512;
var static_ltree = new Array((L_CODES$1 + 2) * 2);
zero$1(static_ltree);
var static_dtree = new Array(D_CODES$1 * 2);
zero$1(static_dtree);
var _dist_code = new Array(DIST_CODE_LEN);
zero$1(_dist_code);
var _length_code = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
zero$1(_length_code);
var base_length = new Array(LENGTH_CODES$1);
zero$1(base_length);
var base_dist = new Array(D_CODES$1);
zero$1(base_dist);
function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {
  this.static_tree = static_tree;
  this.extra_bits = extra_bits;
  this.extra_base = extra_base;
  this.elems = elems;
  this.max_length = max_length;
  this.has_stree = static_tree && static_tree.length;
}
var static_l_desc;
var static_d_desc;
var static_bl_desc;
function TreeDesc(dyn_tree, stat_desc) {
  this.dyn_tree = dyn_tree;
  this.max_code = 0;
  this.stat_desc = stat_desc;
}
var d_code = (dist) => {
  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
};
var put_short = (s, w) => {
  s.pending_buf[s.pending++] = w & 255;
  s.pending_buf[s.pending++] = w >>> 8 & 255;
};
var send_bits = (s, value, length) => {
  if (s.bi_valid > Buf_size - length) {
    s.bi_buf |= value << s.bi_valid & 65535;
    put_short(s, s.bi_buf);
    s.bi_buf = value >> Buf_size - s.bi_valid;
    s.bi_valid += length - Buf_size;
  } else {
    s.bi_buf |= value << s.bi_valid & 65535;
    s.bi_valid += length;
  }
};
var send_code = (s, c, tree) => {
  send_bits(s, tree[c * 2], tree[c * 2 + 1]);
};
var bi_reverse = (code, len) => {
  let res = 0;
  do {
    res |= code & 1;
    code >>>= 1;
    res <<= 1;
  } while (--len > 0);
  return res >>> 1;
};
var bi_flush = (s) => {
  if (s.bi_valid === 16) {
    put_short(s, s.bi_buf);
    s.bi_buf = 0;
    s.bi_valid = 0;
  } else if (s.bi_valid >= 8) {
    s.pending_buf[s.pending++] = s.bi_buf & 255;
    s.bi_buf >>= 8;
    s.bi_valid -= 8;
  }
};
var gen_bitlen = (s, desc) => {
  const tree = desc.dyn_tree;
  const max_code = desc.max_code;
  const stree = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const extra = desc.stat_desc.extra_bits;
  const base = desc.stat_desc.extra_base;
  const max_length = desc.stat_desc.max_length;
  let h2;
  let n, m;
  let bits;
  let xbits;
  let f;
  let overflow = 0;
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    s.bl_count[bits] = 0;
  }
  tree[s.heap[s.heap_max] * 2 + 1] = 0;
  for (h2 = s.heap_max + 1; h2 < HEAP_SIZE$1; h2++) {
    n = s.heap[h2];
    bits = tree[tree[n * 2 + 1] * 2 + 1] + 1;
    if (bits > max_length) {
      bits = max_length;
      overflow++;
    }
    tree[n * 2 + 1] = bits;
    if (n > max_code) {
      continue;
    }
    s.bl_count[bits]++;
    xbits = 0;
    if (n >= base) {
      xbits = extra[n - base];
    }
    f = tree[n * 2];
    s.opt_len += f * (bits + xbits);
    if (has_stree) {
      s.static_len += f * (stree[n * 2 + 1] + xbits);
    }
  }
  if (overflow === 0) {
    return;
  }
  do {
    bits = max_length - 1;
    while (s.bl_count[bits] === 0) {
      bits--;
    }
    s.bl_count[bits]--;
    s.bl_count[bits + 1] += 2;
    s.bl_count[max_length]--;
    overflow -= 2;
  } while (overflow > 0);
  for (bits = max_length; bits !== 0; bits--) {
    n = s.bl_count[bits];
    while (n !== 0) {
      m = s.heap[--h2];
      if (m > max_code) {
        continue;
      }
      if (tree[m * 2 + 1] !== bits) {
        s.opt_len += (bits - tree[m * 2 + 1]) * tree[m * 2];
        tree[m * 2 + 1] = bits;
      }
      n--;
    }
  }
};
var gen_codes = (tree, max_code, bl_count) => {
  const next_code = new Array(MAX_BITS$1 + 1);
  let code = 0;
  let bits;
  let n;
  for (bits = 1; bits <= MAX_BITS$1; bits++) {
    code = code + bl_count[bits - 1] << 1;
    next_code[bits] = code;
  }
  for (n = 0; n <= max_code; n++) {
    let len = tree[n * 2 + 1];
    if (len === 0) {
      continue;
    }
    tree[n * 2] = bi_reverse(next_code[len]++, len);
  }
};
var tr_static_init = () => {
  let n;
  let bits;
  let length;
  let code;
  let dist;
  const bl_count = new Array(MAX_BITS$1 + 1);
  length = 0;
  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
    base_length[code] = length;
    for (n = 0; n < 1 << extra_lbits[code]; n++) {
      _length_code[length++] = code;
    }
  }
  _length_code[length - 1] = code;
  dist = 0;
  for (code = 0; code < 16; code++) {
    base_dist[code] = dist;
    for (n = 0; n < 1 << extra_dbits[code]; n++) {
      _dist_code[dist++] = code;
    }
  }
  dist >>= 7;
  for (; code < D_CODES$1; code++) {
    base_dist[code] = dist << 7;
    for (n = 0; n < 1 << extra_dbits[code] - 7; n++) {
      _dist_code[256 + dist++] = code;
    }
  }
  for (bits = 0; bits <= MAX_BITS$1; bits++) {
    bl_count[bits] = 0;
  }
  n = 0;
  while (n <= 143) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  while (n <= 255) {
    static_ltree[n * 2 + 1] = 9;
    n++;
    bl_count[9]++;
  }
  while (n <= 279) {
    static_ltree[n * 2 + 1] = 7;
    n++;
    bl_count[7]++;
  }
  while (n <= 287) {
    static_ltree[n * 2 + 1] = 8;
    n++;
    bl_count[8]++;
  }
  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);
  for (n = 0; n < D_CODES$1; n++) {
    static_dtree[n * 2 + 1] = 5;
    static_dtree[n * 2] = bi_reverse(n, 5);
  }
  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0, D_CODES$1, MAX_BITS$1);
  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0, BL_CODES$1, MAX_BL_BITS);
};
var init_block = (s) => {
  let n;
  for (n = 0; n < L_CODES$1; n++) {
    s.dyn_ltree[n * 2] = 0;
  }
  for (n = 0; n < D_CODES$1; n++) {
    s.dyn_dtree[n * 2] = 0;
  }
  for (n = 0; n < BL_CODES$1; n++) {
    s.bl_tree[n * 2] = 0;
  }
  s.dyn_ltree[END_BLOCK * 2] = 1;
  s.opt_len = s.static_len = 0;
  s.sym_next = s.matches = 0;
};
var bi_windup = (s) => {
  if (s.bi_valid > 8) {
    put_short(s, s.bi_buf);
  } else if (s.bi_valid > 0) {
    s.pending_buf[s.pending++] = s.bi_buf;
  }
  s.bi_buf = 0;
  s.bi_valid = 0;
};
var smaller = (tree, n, m, depth) => {
  const _n2 = n * 2;
  const _m2 = m * 2;
  return tree[_n2] < tree[_m2] || tree[_n2] === tree[_m2] && depth[n] <= depth[m];
};
var pqdownheap = (s, tree, k) => {
  const v2 = s.heap[k];
  let j = k << 1;
  while (j <= s.heap_len) {
    if (j < s.heap_len && smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
      j++;
    }
    if (smaller(tree, v2, s.heap[j], s.depth)) {
      break;
    }
    s.heap[k] = s.heap[j];
    k = j;
    j <<= 1;
  }
  s.heap[k] = v2;
};
var compress_block = (s, ltree, dtree) => {
  let dist;
  let lc;
  let sx = 0;
  let code;
  let extra;
  if (s.sym_next !== 0) {
    do {
      dist = s.pending_buf[s.sym_buf + sx++] & 255;
      dist += (s.pending_buf[s.sym_buf + sx++] & 255) << 8;
      lc = s.pending_buf[s.sym_buf + sx++];
      if (dist === 0) {
        send_code(s, lc, ltree);
      } else {
        code = _length_code[lc];
        send_code(s, code + LITERALS$1 + 1, ltree);
        extra = extra_lbits[code];
        if (extra !== 0) {
          lc -= base_length[code];
          send_bits(s, lc, extra);
        }
        dist--;
        code = d_code(dist);
        send_code(s, code, dtree);
        extra = extra_dbits[code];
        if (extra !== 0) {
          dist -= base_dist[code];
          send_bits(s, dist, extra);
        }
      }
    } while (sx < s.sym_next);
  }
  send_code(s, END_BLOCK, ltree);
};
var build_tree = (s, desc) => {
  const tree = desc.dyn_tree;
  const stree = desc.stat_desc.static_tree;
  const has_stree = desc.stat_desc.has_stree;
  const elems = desc.stat_desc.elems;
  let n, m;
  let max_code = -1;
  let node;
  s.heap_len = 0;
  s.heap_max = HEAP_SIZE$1;
  for (n = 0; n < elems; n++) {
    if (tree[n * 2] !== 0) {
      s.heap[++s.heap_len] = max_code = n;
      s.depth[n] = 0;
    } else {
      tree[n * 2 + 1] = 0;
    }
  }
  while (s.heap_len < 2) {
    node = s.heap[++s.heap_len] = max_code < 2 ? ++max_code : 0;
    tree[node * 2] = 1;
    s.depth[node] = 0;
    s.opt_len--;
    if (has_stree) {
      s.static_len -= stree[node * 2 + 1];
    }
  }
  desc.max_code = max_code;
  for (n = s.heap_len >> 1; n >= 1; n--) {
    pqdownheap(s, tree, n);
  }
  node = elems;
  do {
    n = s.heap[1];
    s.heap[1] = s.heap[s.heap_len--];
    pqdownheap(s, tree, 1);
    m = s.heap[1];
    s.heap[--s.heap_max] = n;
    s.heap[--s.heap_max] = m;
    tree[node * 2] = tree[n * 2] + tree[m * 2];
    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
    tree[n * 2 + 1] = tree[m * 2 + 1] = node;
    s.heap[1] = node++;
    pqdownheap(s, tree, 1);
  } while (s.heap_len >= 2);
  s.heap[--s.heap_max] = s.heap[1];
  gen_bitlen(s, desc);
  gen_codes(tree, max_code, s.bl_count);
};
var scan_tree = (s, tree, max_code) => {
  let n;
  let prevlen = -1;
  let curlen;
  let nextlen = tree[0 * 2 + 1];
  let count = 0;
  let max_count = 7;
  let min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  tree[(max_code + 1) * 2 + 1] = 65535;
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      s.bl_tree[curlen * 2] += count;
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        s.bl_tree[curlen * 2]++;
      }
      s.bl_tree[REP_3_6 * 2]++;
    } else if (count <= 10) {
      s.bl_tree[REPZ_3_10 * 2]++;
    } else {
      s.bl_tree[REPZ_11_138 * 2]++;
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};
var send_tree = (s, tree, max_code) => {
  let n;
  let prevlen = -1;
  let curlen;
  let nextlen = tree[0 * 2 + 1];
  let count = 0;
  let max_count = 7;
  let min_count = 4;
  if (nextlen === 0) {
    max_count = 138;
    min_count = 3;
  }
  for (n = 0; n <= max_code; n++) {
    curlen = nextlen;
    nextlen = tree[(n + 1) * 2 + 1];
    if (++count < max_count && curlen === nextlen) {
      continue;
    } else if (count < min_count) {
      do {
        send_code(s, curlen, s.bl_tree);
      } while (--count !== 0);
    } else if (curlen !== 0) {
      if (curlen !== prevlen) {
        send_code(s, curlen, s.bl_tree);
        count--;
      }
      send_code(s, REP_3_6, s.bl_tree);
      send_bits(s, count - 3, 2);
    } else if (count <= 10) {
      send_code(s, REPZ_3_10, s.bl_tree);
      send_bits(s, count - 3, 3);
    } else {
      send_code(s, REPZ_11_138, s.bl_tree);
      send_bits(s, count - 11, 7);
    }
    count = 0;
    prevlen = curlen;
    if (nextlen === 0) {
      max_count = 138;
      min_count = 3;
    } else if (curlen === nextlen) {
      max_count = 6;
      min_count = 3;
    } else {
      max_count = 7;
      min_count = 4;
    }
  }
};
var build_bl_tree = (s) => {
  let max_blindex;
  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);
  build_tree(s, s.bl_desc);
  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
    if (s.bl_tree[bl_order[max_blindex] * 2 + 1] !== 0) {
      break;
    }
  }
  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
  return max_blindex;
};
var send_all_trees = (s, lcodes, dcodes, blcodes) => {
  let rank2;
  send_bits(s, lcodes - 257, 5);
  send_bits(s, dcodes - 1, 5);
  send_bits(s, blcodes - 4, 4);
  for (rank2 = 0; rank2 < blcodes; rank2++) {
    send_bits(s, s.bl_tree[bl_order[rank2] * 2 + 1], 3);
  }
  send_tree(s, s.dyn_ltree, lcodes - 1);
  send_tree(s, s.dyn_dtree, dcodes - 1);
};
var detect_data_type = (s) => {
  let block_mask = 4093624447;
  let n;
  for (n = 0; n <= 31; n++, block_mask >>>= 1) {
    if (block_mask & 1 && s.dyn_ltree[n * 2] !== 0) {
      return Z_BINARY;
    }
  }
  if (s.dyn_ltree[9 * 2] !== 0 || s.dyn_ltree[10 * 2] !== 0 || s.dyn_ltree[13 * 2] !== 0) {
    return Z_TEXT;
  }
  for (n = 32; n < LITERALS$1; n++) {
    if (s.dyn_ltree[n * 2] !== 0) {
      return Z_TEXT;
    }
  }
  return Z_BINARY;
};
var static_init_done = false;
var _tr_init$1 = (s) => {
  if (!static_init_done) {
    tr_static_init();
    static_init_done = true;
  }
  s.l_desc = new TreeDesc(s.dyn_ltree, static_l_desc);
  s.d_desc = new TreeDesc(s.dyn_dtree, static_d_desc);
  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);
  s.bi_buf = 0;
  s.bi_valid = 0;
  init_block(s);
};
var _tr_stored_block$1 = (s, buf, stored_len, last) => {
  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);
  bi_windup(s);
  put_short(s, stored_len);
  put_short(s, ~stored_len);
  if (stored_len) {
    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
  }
  s.pending += stored_len;
};
var _tr_align$1 = (s) => {
  send_bits(s, STATIC_TREES << 1, 3);
  send_code(s, END_BLOCK, static_ltree);
  bi_flush(s);
};
var _tr_flush_block$1 = (s, buf, stored_len, last) => {
  let opt_lenb, static_lenb;
  let max_blindex = 0;
  if (s.level > 0) {
    if (s.strm.data_type === Z_UNKNOWN$1) {
      s.strm.data_type = detect_data_type(s);
    }
    build_tree(s, s.l_desc);
    build_tree(s, s.d_desc);
    max_blindex = build_bl_tree(s);
    opt_lenb = s.opt_len + 3 + 7 >>> 3;
    static_lenb = s.static_len + 3 + 7 >>> 3;
    if (static_lenb <= opt_lenb) {
      opt_lenb = static_lenb;
    }
  } else {
    opt_lenb = static_lenb = stored_len + 5;
  }
  if (stored_len + 4 <= opt_lenb && buf !== -1) {
    _tr_stored_block$1(s, buf, stored_len, last);
  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {
    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
    compress_block(s, static_ltree, static_dtree);
  } else {
    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
    compress_block(s, s.dyn_ltree, s.dyn_dtree);
  }
  init_block(s);
  if (last) {
    bi_windup(s);
  }
};
var _tr_tally$1 = (s, dist, lc) => {
  s.pending_buf[s.sym_buf + s.sym_next++] = dist;
  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
  s.pending_buf[s.sym_buf + s.sym_next++] = lc;
  if (dist === 0) {
    s.dyn_ltree[lc * 2]++;
  } else {
    s.matches++;
    dist--;
    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]++;
    s.dyn_dtree[d_code(dist) * 2]++;
  }
  return s.sym_next === s.sym_end;
};
var _tr_init_1 = _tr_init$1;
var _tr_stored_block_1 = _tr_stored_block$1;
var _tr_flush_block_1 = _tr_flush_block$1;
var _tr_tally_1 = _tr_tally$1;
var _tr_align_1 = _tr_align$1;
var trees = {
  _tr_init: _tr_init_1,
  _tr_stored_block: _tr_stored_block_1,
  _tr_flush_block: _tr_flush_block_1,
  _tr_tally: _tr_tally_1,
  _tr_align: _tr_align_1
};
var adler32 = (adler, buf, len, pos) => {
  let s1 = adler & 65535 | 0, s2 = adler >>> 16 & 65535 | 0, n = 0;
  while (len !== 0) {
    n = len > 2e3 ? 2e3 : len;
    len -= n;
    do {
      s1 = s1 + buf[pos++] | 0;
      s2 = s2 + s1 | 0;
    } while (--n);
    s1 %= 65521;
    s2 %= 65521;
  }
  return s1 | s2 << 16 | 0;
};
var adler32_1 = adler32;
var makeTable = () => {
  let c, table = [];
  for (var n = 0; n < 256; n++) {
    c = n;
    for (var k = 0; k < 8; k++) {
      c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;
    }
    table[n] = c;
  }
  return table;
};
var crcTable = new Uint32Array(makeTable());
var crc32 = (crc, buf, len, pos) => {
  const t = crcTable;
  const end = pos + len;
  crc ^= -1;
  for (let i = pos; i < end; i++) {
    crc = crc >>> 8 ^ t[(crc ^ buf[i]) & 255];
  }
  return crc ^ -1;
};
var crc32_1 = crc32;
var messages = {
  2: "need dictionary",
  1: "stream end",
  0: "",
  "-1": "file error",
  "-2": "stream error",
  "-3": "data error",
  "-4": "insufficient memory",
  "-5": "buffer error",
  "-6": "incompatible version"
};
var constants$2 = {
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  Z_MEM_ERROR: -4,
  Z_BUF_ERROR: -5,
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  Z_BINARY: 0,
  Z_TEXT: 1,
  Z_UNKNOWN: 2,
  Z_DEFLATED: 8
};
var {_tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align} = trees;
var {
  Z_NO_FLUSH: Z_NO_FLUSH$2,
  Z_PARTIAL_FLUSH,
  Z_FULL_FLUSH: Z_FULL_FLUSH$1,
  Z_FINISH: Z_FINISH$3,
  Z_BLOCK: Z_BLOCK$1,
  Z_OK: Z_OK$3,
  Z_STREAM_END: Z_STREAM_END$3,
  Z_STREAM_ERROR: Z_STREAM_ERROR$2,
  Z_DATA_ERROR: Z_DATA_ERROR$2,
  Z_BUF_ERROR: Z_BUF_ERROR$1,
  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
  Z_FILTERED,
  Z_HUFFMAN_ONLY,
  Z_RLE,
  Z_FIXED,
  Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
  Z_UNKNOWN,
  Z_DEFLATED: Z_DEFLATED$2
} = constants$2;
var MAX_MEM_LEVEL = 9;
var MAX_WBITS$1 = 15;
var DEF_MEM_LEVEL = 8;
var LENGTH_CODES = 29;
var LITERALS = 256;
var L_CODES = LITERALS + 1 + LENGTH_CODES;
var D_CODES = 30;
var BL_CODES = 19;
var HEAP_SIZE = 2 * L_CODES + 1;
var MAX_BITS = 15;
var MIN_MATCH = 3;
var MAX_MATCH = 258;
var MIN_LOOKAHEAD = MAX_MATCH + MIN_MATCH + 1;
var PRESET_DICT = 32;
var INIT_STATE = 42;
var GZIP_STATE = 57;
var EXTRA_STATE = 69;
var NAME_STATE = 73;
var COMMENT_STATE = 91;
var HCRC_STATE = 103;
var BUSY_STATE = 113;
var FINISH_STATE = 666;
var BS_NEED_MORE = 1;
var BS_BLOCK_DONE = 2;
var BS_FINISH_STARTED = 3;
var BS_FINISH_DONE = 4;
var OS_CODE = 3;
var err = (strm, errorCode) => {
  strm.msg = messages[errorCode];
  return errorCode;
};
var rank = (f) => {
  return f * 2 - (f > 4 ? 9 : 0);
};
var zero = (buf) => {
  let len = buf.length;
  while (--len >= 0) {
    buf[len] = 0;
  }
};
var slide_hash = (s) => {
  let n, m;
  let p;
  let wsize = s.w_size;
  n = s.hash_size;
  p = n;
  do {
    m = s.head[--p];
    s.head[p] = m >= wsize ? m - wsize : 0;
  } while (--n);
  n = wsize;
  p = n;
  do {
    m = s.prev[--p];
    s.prev[p] = m >= wsize ? m - wsize : 0;
  } while (--n);
};
var HASH_ZLIB = (s, prev, data2) => (prev << s.hash_shift ^ data2) & s.hash_mask;
var HASH = HASH_ZLIB;
var flush_pending = (strm) => {
  const s = strm.state;
  let len = s.pending;
  if (len > strm.avail_out) {
    len = strm.avail_out;
  }
  if (len === 0) {
    return;
  }
  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
  strm.next_out += len;
  s.pending_out += len;
  strm.total_out += len;
  strm.avail_out -= len;
  s.pending -= len;
  if (s.pending === 0) {
    s.pending_out = 0;
  }
};
var flush_block_only = (s, last) => {
  _tr_flush_block(s, s.block_start >= 0 ? s.block_start : -1, s.strstart - s.block_start, last);
  s.block_start = s.strstart;
  flush_pending(s.strm);
};
var put_byte = (s, b) => {
  s.pending_buf[s.pending++] = b;
};
var putShortMSB = (s, b) => {
  s.pending_buf[s.pending++] = b >>> 8 & 255;
  s.pending_buf[s.pending++] = b & 255;
};
var read_buf = (strm, buf, start, size) => {
  let len = strm.avail_in;
  if (len > size) {
    len = size;
  }
  if (len === 0) {
    return 0;
  }
  strm.avail_in -= len;
  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
  if (strm.state.wrap === 1) {
    strm.adler = adler32_1(strm.adler, buf, len, start);
  } else if (strm.state.wrap === 2) {
    strm.adler = crc32_1(strm.adler, buf, len, start);
  }
  strm.next_in += len;
  strm.total_in += len;
  return len;
};
var longest_match = (s, cur_match) => {
  let chain_length = s.max_chain_length;
  let scan = s.strstart;
  let match;
  let len;
  let best_len = s.prev_length;
  let nice_match = s.nice_match;
  const limit = s.strstart > s.w_size - MIN_LOOKAHEAD ? s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0;
  const _win = s.window;
  const wmask = s.w_mask;
  const prev = s.prev;
  const strend = s.strstart + MAX_MATCH;
  let scan_end1 = _win[scan + best_len - 1];
  let scan_end = _win[scan + best_len];
  if (s.prev_length >= s.good_match) {
    chain_length >>= 2;
  }
  if (nice_match > s.lookahead) {
    nice_match = s.lookahead;
  }
  do {
    match = cur_match;
    if (_win[match + best_len] !== scan_end || _win[match + best_len - 1] !== scan_end1 || _win[match] !== _win[scan] || _win[++match] !== _win[scan + 1]) {
      continue;
    }
    scan += 2;
    match++;
    do {
    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && _win[++scan] === _win[++match] && scan < strend);
    len = MAX_MATCH - (strend - scan);
    scan = strend - MAX_MATCH;
    if (len > best_len) {
      s.match_start = cur_match;
      best_len = len;
      if (len >= nice_match) {
        break;
      }
      scan_end1 = _win[scan + best_len - 1];
      scan_end = _win[scan + best_len];
    }
  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);
  if (best_len <= s.lookahead) {
    return best_len;
  }
  return s.lookahead;
};
var fill_window = (s) => {
  const _w_size = s.w_size;
  let n, more, str;
  do {
    more = s.window_size - s.lookahead - s.strstart;
    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {
      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
      s.match_start -= _w_size;
      s.strstart -= _w_size;
      s.block_start -= _w_size;
      if (s.insert > s.strstart) {
        s.insert = s.strstart;
      }
      slide_hash(s);
      more += _w_size;
    }
    if (s.strm.avail_in === 0) {
      break;
    }
    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
    s.lookahead += n;
    if (s.lookahead + s.insert >= MIN_MATCH) {
      str = s.strstart - s.insert;
      s.ins_h = s.window[str];
      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
      while (s.insert) {
        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
        s.prev[str & s.w_mask] = s.head[s.ins_h];
        s.head[s.ins_h] = str;
        str++;
        s.insert--;
        if (s.lookahead + s.insert < MIN_MATCH) {
          break;
        }
      }
    }
  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);
};
var deflate_stored = (s, flush) => {
  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;
  let len, left, have, last = 0;
  let used = s.strm.avail_in;
  do {
    len = 65535;
    have = s.bi_valid + 42 >> 3;
    if (s.strm.avail_out < have) {
      break;
    }
    have = s.strm.avail_out - have;
    left = s.strstart - s.block_start;
    if (len > left + s.strm.avail_in) {
      len = left + s.strm.avail_in;
    }
    if (len > have) {
      len = have;
    }
    if (len < min_block && (len === 0 && flush !== Z_FINISH$3 || flush === Z_NO_FLUSH$2 || len !== left + s.strm.avail_in)) {
      break;
    }
    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;
    _tr_stored_block(s, 0, 0, last);
    s.pending_buf[s.pending - 4] = len;
    s.pending_buf[s.pending - 3] = len >> 8;
    s.pending_buf[s.pending - 2] = ~len;
    s.pending_buf[s.pending - 1] = ~len >> 8;
    flush_pending(s.strm);
    if (left) {
      if (left > len) {
        left = len;
      }
      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
      s.strm.next_out += left;
      s.strm.avail_out -= left;
      s.strm.total_out += left;
      s.block_start += left;
      len -= left;
    }
    if (len) {
      read_buf(s.strm, s.strm.output, s.strm.next_out, len);
      s.strm.next_out += len;
      s.strm.avail_out -= len;
      s.strm.total_out += len;
    }
  } while (last === 0);
  used -= s.strm.avail_in;
  if (used) {
    if (used >= s.w_size) {
      s.matches = 2;
      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
      s.strstart = s.w_size;
      s.insert = s.strstart;
    } else {
      if (s.window_size - s.strstart <= used) {
        s.strstart -= s.w_size;
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) {
          s.matches++;
        }
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
      }
      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
      s.strstart += used;
      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
    }
    s.block_start = s.strstart;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }
  if (last) {
    return BS_FINISH_DONE;
  }
  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 && s.strm.avail_in === 0 && s.strstart === s.block_start) {
    return BS_BLOCK_DONE;
  }
  have = s.window_size - s.strstart;
  if (s.strm.avail_in > have && s.block_start >= s.w_size) {
    s.block_start -= s.w_size;
    s.strstart -= s.w_size;
    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
    if (s.matches < 2) {
      s.matches++;
    }
    have += s.w_size;
    if (s.insert > s.strstart) {
      s.insert = s.strstart;
    }
  }
  if (have > s.strm.avail_in) {
    have = s.strm.avail_in;
  }
  if (have) {
    read_buf(s.strm, s.window, s.strstart, have);
    s.strstart += have;
    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
  }
  if (s.high_water < s.strstart) {
    s.high_water = s.strstart;
  }
  have = s.bi_valid + 42 >> 3;
  have = s.pending_buf_size - have > 65535 ? 65535 : s.pending_buf_size - have;
  min_block = have > s.w_size ? s.w_size : have;
  left = s.strstart - s.block_start;
  if (left >= min_block || (left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 && s.strm.avail_in === 0 && left <= have) {
    len = left > have ? have : left;
    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 && len === left ? 1 : 0;
    _tr_stored_block(s, s.block_start, len, last);
    s.block_start += len;
    flush_pending(s.strm);
  }
  return last ? BS_FINISH_STARTED : BS_NEED_MORE;
};
var deflate_fast = (s, flush) => {
  let hash_head;
  let bflush;
  for (; ; ) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH) {
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    if (hash_head !== 0 && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      s.match_length = longest_match(s, hash_head);
    }
    if (s.match_length >= MIN_MATCH) {
      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      if (s.match_length <= s.max_lazy_match && s.lookahead >= MIN_MATCH) {
        s.match_length--;
        do {
          s.strstart++;
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        } while (--s.match_length !== 0);
        s.strstart++;
      } else {
        s.strstart += s.match_length;
        s.match_length = 0;
        s.ins_h = s.window[s.strstart];
        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);
      }
    } else {
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$3) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
var deflate_slow = (s, flush) => {
  let hash_head;
  let bflush;
  let max_insert;
  for (; ; ) {
    if (s.lookahead < MIN_LOOKAHEAD) {
      fill_window(s);
      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    hash_head = 0;
    if (s.lookahead >= MIN_MATCH) {
      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = s.strstart;
    }
    s.prev_length = s.match_length;
    s.prev_match = s.match_start;
    s.match_length = MIN_MATCH - 1;
    if (hash_head !== 0 && s.prev_length < s.max_lazy_match && s.strstart - hash_head <= s.w_size - MIN_LOOKAHEAD) {
      s.match_length = longest_match(s, hash_head);
      if (s.match_length <= 5 && (s.strategy === Z_FILTERED || s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096)) {
        s.match_length = MIN_MATCH - 1;
      }
    }
    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
      max_insert = s.strstart + s.lookahead - MIN_MATCH;
      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
      s.lookahead -= s.prev_length - 1;
      s.prev_length -= 2;
      do {
        if (++s.strstart <= max_insert) {
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
        }
      } while (--s.prev_length !== 0);
      s.match_available = 0;
      s.match_length = MIN_MATCH - 1;
      s.strstart++;
      if (bflush) {
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
      }
    } else if (s.match_available) {
      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
      if (bflush) {
        flush_block_only(s, false);
      }
      s.strstart++;
      s.lookahead--;
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    } else {
      s.match_available = 1;
      s.strstart++;
      s.lookahead--;
    }
  }
  if (s.match_available) {
    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);
    s.match_available = 0;
  }
  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
  if (flush === Z_FINISH$3) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
var deflate_rle = (s, flush) => {
  let bflush;
  let prev;
  let scan, strend;
  const _win = s.window;
  for (; ; ) {
    if (s.lookahead <= MAX_MATCH) {
      fill_window(s);
      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {
        return BS_NEED_MORE;
      }
      if (s.lookahead === 0) {
        break;
      }
    }
    s.match_length = 0;
    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
      scan = s.strstart - 1;
      prev = _win[scan];
      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
        strend = s.strstart + MAX_MATCH;
        do {
        } while (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan] && scan < strend);
        s.match_length = MAX_MATCH - (strend - scan);
        if (s.match_length > s.lookahead) {
          s.match_length = s.lookahead;
        }
      }
    }
    if (s.match_length >= MIN_MATCH) {
      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);
      s.lookahead -= s.match_length;
      s.strstart += s.match_length;
      s.match_length = 0;
    } else {
      bflush = _tr_tally(s, 0, s.window[s.strstart]);
      s.lookahead--;
      s.strstart++;
    }
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$3) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
var deflate_huff = (s, flush) => {
  let bflush;
  for (; ; ) {
    if (s.lookahead === 0) {
      fill_window(s);
      if (s.lookahead === 0) {
        if (flush === Z_NO_FLUSH$2) {
          return BS_NEED_MORE;
        }
        break;
      }
    }
    s.match_length = 0;
    bflush = _tr_tally(s, 0, s.window[s.strstart]);
    s.lookahead--;
    s.strstart++;
    if (bflush) {
      flush_block_only(s, false);
      if (s.strm.avail_out === 0) {
        return BS_NEED_MORE;
      }
    }
  }
  s.insert = 0;
  if (flush === Z_FINISH$3) {
    flush_block_only(s, true);
    if (s.strm.avail_out === 0) {
      return BS_FINISH_STARTED;
    }
    return BS_FINISH_DONE;
  }
  if (s.sym_next) {
    flush_block_only(s, false);
    if (s.strm.avail_out === 0) {
      return BS_NEED_MORE;
    }
  }
  return BS_BLOCK_DONE;
};
function Config(good_length, max_lazy, nice_length, max_chain, func) {
  this.good_length = good_length;
  this.max_lazy = max_lazy;
  this.nice_length = nice_length;
  this.max_chain = max_chain;
  this.func = func;
}
var configuration_table = [
  new Config(0, 0, 0, 0, deflate_stored),
  new Config(4, 4, 8, 4, deflate_fast),
  new Config(4, 5, 16, 8, deflate_fast),
  new Config(4, 6, 32, 32, deflate_fast),
  new Config(4, 4, 16, 16, deflate_slow),
  new Config(8, 16, 32, 32, deflate_slow),
  new Config(8, 16, 128, 128, deflate_slow),
  new Config(8, 32, 128, 256, deflate_slow),
  new Config(32, 128, 258, 1024, deflate_slow),
  new Config(32, 258, 258, 4096, deflate_slow)
];
var lm_init = (s) => {
  s.window_size = 2 * s.w_size;
  zero(s.head);
  s.max_lazy_match = configuration_table[s.level].max_lazy;
  s.good_match = configuration_table[s.level].good_length;
  s.nice_match = configuration_table[s.level].nice_length;
  s.max_chain_length = configuration_table[s.level].max_chain;
  s.strstart = 0;
  s.block_start = 0;
  s.lookahead = 0;
  s.insert = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  s.ins_h = 0;
};
function DeflateState() {
  this.strm = null;
  this.status = 0;
  this.pending_buf = null;
  this.pending_buf_size = 0;
  this.pending_out = 0;
  this.pending = 0;
  this.wrap = 0;
  this.gzhead = null;
  this.gzindex = 0;
  this.method = Z_DEFLATED$2;
  this.last_flush = -1;
  this.w_size = 0;
  this.w_bits = 0;
  this.w_mask = 0;
  this.window = null;
  this.window_size = 0;
  this.prev = null;
  this.head = null;
  this.ins_h = 0;
  this.hash_size = 0;
  this.hash_bits = 0;
  this.hash_mask = 0;
  this.hash_shift = 0;
  this.block_start = 0;
  this.match_length = 0;
  this.prev_match = 0;
  this.match_available = 0;
  this.strstart = 0;
  this.match_start = 0;
  this.lookahead = 0;
  this.prev_length = 0;
  this.max_chain_length = 0;
  this.max_lazy_match = 0;
  this.level = 0;
  this.strategy = 0;
  this.good_match = 0;
  this.nice_match = 0;
  this.dyn_ltree = new Uint16Array(HEAP_SIZE * 2);
  this.dyn_dtree = new Uint16Array((2 * D_CODES + 1) * 2);
  this.bl_tree = new Uint16Array((2 * BL_CODES + 1) * 2);
  zero(this.dyn_ltree);
  zero(this.dyn_dtree);
  zero(this.bl_tree);
  this.l_desc = null;
  this.d_desc = null;
  this.bl_desc = null;
  this.bl_count = new Uint16Array(MAX_BITS + 1);
  this.heap = new Uint16Array(2 * L_CODES + 1);
  zero(this.heap);
  this.heap_len = 0;
  this.heap_max = 0;
  this.depth = new Uint16Array(2 * L_CODES + 1);
  zero(this.depth);
  this.sym_buf = 0;
  this.lit_bufsize = 0;
  this.sym_next = 0;
  this.sym_end = 0;
  this.opt_len = 0;
  this.static_len = 0;
  this.matches = 0;
  this.insert = 0;
  this.bi_buf = 0;
  this.bi_valid = 0;
}
var deflateStateCheck = (strm) => {
  if (!strm) {
    return 1;
  }
  const s = strm.state;
  if (!s || s.strm !== strm || s.status !== INIT_STATE && s.status !== GZIP_STATE && s.status !== EXTRA_STATE && s.status !== NAME_STATE && s.status !== COMMENT_STATE && s.status !== HCRC_STATE && s.status !== BUSY_STATE && s.status !== FINISH_STATE) {
    return 1;
  }
  return 0;
};
var deflateResetKeep = (strm) => {
  if (deflateStateCheck(strm)) {
    return err(strm, Z_STREAM_ERROR$2);
  }
  strm.total_in = strm.total_out = 0;
  strm.data_type = Z_UNKNOWN;
  const s = strm.state;
  s.pending = 0;
  s.pending_out = 0;
  if (s.wrap < 0) {
    s.wrap = -s.wrap;
  }
  s.status = s.wrap === 2 ? GZIP_STATE : s.wrap ? INIT_STATE : BUSY_STATE;
  strm.adler = s.wrap === 2 ? 0 : 1;
  s.last_flush = -2;
  _tr_init(s);
  return Z_OK$3;
};
var deflateReset = (strm) => {
  const ret = deflateResetKeep(strm);
  if (ret === Z_OK$3) {
    lm_init(strm.state);
  }
  return ret;
};
var deflateSetHeader = (strm, head) => {
  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
    return Z_STREAM_ERROR$2;
  }
  strm.state.gzhead = head;
  return Z_OK$3;
};
var deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {
  if (!strm) {
    return Z_STREAM_ERROR$2;
  }
  let wrap = 1;
  if (level === Z_DEFAULT_COMPRESSION$1) {
    level = 6;
  }
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else if (windowBits > 15) {
    wrap = 2;
    windowBits -= 16;
  }
  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 || windowBits < 8 || windowBits > 15 || level < 0 || level > 9 || strategy < 0 || strategy > Z_FIXED || windowBits === 8 && wrap !== 1) {
    return err(strm, Z_STREAM_ERROR$2);
  }
  if (windowBits === 8) {
    windowBits = 9;
  }
  const s = new DeflateState();
  strm.state = s;
  s.strm = strm;
  s.status = INIT_STATE;
  s.wrap = wrap;
  s.gzhead = null;
  s.w_bits = windowBits;
  s.w_size = 1 << s.w_bits;
  s.w_mask = s.w_size - 1;
  s.hash_bits = memLevel + 7;
  s.hash_size = 1 << s.hash_bits;
  s.hash_mask = s.hash_size - 1;
  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);
  s.window = new Uint8Array(s.w_size * 2);
  s.head = new Uint16Array(s.hash_size);
  s.prev = new Uint16Array(s.w_size);
  s.lit_bufsize = 1 << memLevel + 6;
  s.pending_buf_size = s.lit_bufsize * 4;
  s.pending_buf = new Uint8Array(s.pending_buf_size);
  s.sym_buf = s.lit_bufsize;
  s.sym_end = (s.lit_bufsize - 1) * 3;
  s.level = level;
  s.strategy = strategy;
  s.method = method;
  return deflateReset(strm);
};
var deflateInit = (strm, level) => {
  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
};
var deflate$2 = (strm, flush) => {
  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {
    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
  }
  const s = strm.state;
  if (!strm.output || strm.avail_in !== 0 && !strm.input || s.status === FINISH_STATE && flush !== Z_FINISH$3) {
    return err(strm, strm.avail_out === 0 ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
  }
  const old_flush = s.last_flush;
  s.last_flush = flush;
  if (s.pending !== 0) {
    flush_pending(strm);
    if (strm.avail_out === 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) && flush !== Z_FINISH$3) {
    return err(strm, Z_BUF_ERROR$1);
  }
  if (s.status === FINISH_STATE && strm.avail_in !== 0) {
    return err(strm, Z_BUF_ERROR$1);
  }
  if (s.status === INIT_STATE && s.wrap === 0) {
    s.status = BUSY_STATE;
  }
  if (s.status === INIT_STATE) {
    let header = Z_DEFLATED$2 + (s.w_bits - 8 << 4) << 8;
    let level_flags = -1;
    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
      level_flags = 0;
    } else if (s.level < 6) {
      level_flags = 1;
    } else if (s.level === 6) {
      level_flags = 2;
    } else {
      level_flags = 3;
    }
    header |= level_flags << 6;
    if (s.strstart !== 0) {
      header |= PRESET_DICT;
    }
    header += 31 - header % 31;
    putShortMSB(s, header);
    if (s.strstart !== 0) {
      putShortMSB(s, strm.adler >>> 16);
      putShortMSB(s, strm.adler & 65535);
    }
    strm.adler = 1;
    s.status = BUSY_STATE;
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  }
  if (s.status === GZIP_STATE) {
    strm.adler = 0;
    put_byte(s, 31);
    put_byte(s, 139);
    put_byte(s, 8);
    if (!s.gzhead) {
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, 0);
      put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
      put_byte(s, OS_CODE);
      s.status = BUSY_STATE;
      flush_pending(strm);
      if (s.pending !== 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    } else {
      put_byte(s, (s.gzhead.text ? 1 : 0) + (s.gzhead.hcrc ? 2 : 0) + (!s.gzhead.extra ? 0 : 4) + (!s.gzhead.name ? 0 : 8) + (!s.gzhead.comment ? 0 : 16));
      put_byte(s, s.gzhead.time & 255);
      put_byte(s, s.gzhead.time >> 8 & 255);
      put_byte(s, s.gzhead.time >> 16 & 255);
      put_byte(s, s.gzhead.time >> 24 & 255);
      put_byte(s, s.level === 9 ? 2 : s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ? 4 : 0);
      put_byte(s, s.gzhead.os & 255);
      if (s.gzhead.extra && s.gzhead.extra.length) {
        put_byte(s, s.gzhead.extra.length & 255);
        put_byte(s, s.gzhead.extra.length >> 8 & 255);
      }
      if (s.gzhead.hcrc) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
      }
      s.gzindex = 0;
      s.status = EXTRA_STATE;
    }
  }
  if (s.status === EXTRA_STATE) {
    if (s.gzhead.extra) {
      let beg = s.pending;
      let left = (s.gzhead.extra.length & 65535) - s.gzindex;
      while (s.pending + left > s.pending_buf_size) {
        let copy = s.pending_buf_size - s.pending;
        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
        s.pending = s.pending_buf_size;
        if (s.gzhead.hcrc && s.pending > beg) {
          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
        }
        s.gzindex += copy;
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
        beg = 0;
        left -= copy;
      }
      let gzhead_extra = new Uint8Array(s.gzhead.extra);
      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
      s.pending += left;
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      s.gzindex = 0;
    }
    s.status = NAME_STATE;
  }
  if (s.status === NAME_STATE) {
    if (s.gzhead.name) {
      let beg = s.pending;
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        if (s.gzindex < s.gzhead.name.length) {
          val = s.gzhead.name.charCodeAt(s.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
      s.gzindex = 0;
    }
    s.status = COMMENT_STATE;
  }
  if (s.status === COMMENT_STATE) {
    if (s.gzhead.comment) {
      let beg = s.pending;
      let val;
      do {
        if (s.pending === s.pending_buf_size) {
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
          beg = 0;
        }
        if (s.gzindex < s.gzhead.comment.length) {
          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 255;
        } else {
          val = 0;
        }
        put_byte(s, val);
      } while (val !== 0);
      if (s.gzhead.hcrc && s.pending > beg) {
        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
      }
    }
    s.status = HCRC_STATE;
  }
  if (s.status === HCRC_STATE) {
    if (s.gzhead.hcrc) {
      if (s.pending + 2 > s.pending_buf_size) {
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
      }
      put_byte(s, strm.adler & 255);
      put_byte(s, strm.adler >> 8 & 255);
      strm.adler = 0;
    }
    s.status = BUSY_STATE;
    flush_pending(strm);
    if (s.pending !== 0) {
      s.last_flush = -1;
      return Z_OK$3;
    }
  }
  if (strm.avail_in !== 0 || s.lookahead !== 0 || flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE) {
    let bstate = s.level === 0 ? deflate_stored(s, flush) : s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) : s.strategy === Z_RLE ? deflate_rle(s, flush) : configuration_table[s.level].func(s, flush);
    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
      s.status = FINISH_STATE;
    }
    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
      if (strm.avail_out === 0) {
        s.last_flush = -1;
      }
      return Z_OK$3;
    }
    if (bstate === BS_BLOCK_DONE) {
      if (flush === Z_PARTIAL_FLUSH) {
        _tr_align(s);
      } else if (flush !== Z_BLOCK$1) {
        _tr_stored_block(s, 0, 0, false);
        if (flush === Z_FULL_FLUSH$1) {
          zero(s.head);
          if (s.lookahead === 0) {
            s.strstart = 0;
            s.block_start = 0;
            s.insert = 0;
          }
        }
      }
      flush_pending(strm);
      if (strm.avail_out === 0) {
        s.last_flush = -1;
        return Z_OK$3;
      }
    }
  }
  if (flush !== Z_FINISH$3) {
    return Z_OK$3;
  }
  if (s.wrap <= 0) {
    return Z_STREAM_END$3;
  }
  if (s.wrap === 2) {
    put_byte(s, strm.adler & 255);
    put_byte(s, strm.adler >> 8 & 255);
    put_byte(s, strm.adler >> 16 & 255);
    put_byte(s, strm.adler >> 24 & 255);
    put_byte(s, strm.total_in & 255);
    put_byte(s, strm.total_in >> 8 & 255);
    put_byte(s, strm.total_in >> 16 & 255);
    put_byte(s, strm.total_in >> 24 & 255);
  } else {
    putShortMSB(s, strm.adler >>> 16);
    putShortMSB(s, strm.adler & 65535);
  }
  flush_pending(strm);
  if (s.wrap > 0) {
    s.wrap = -s.wrap;
  }
  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
};
var deflateEnd = (strm) => {
  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }
  const status = strm.state.status;
  strm.state = null;
  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
};
var deflateSetDictionary = (strm, dictionary2) => {
  let dictLength = dictionary2.length;
  if (deflateStateCheck(strm)) {
    return Z_STREAM_ERROR$2;
  }
  const s = strm.state;
  const wrap = s.wrap;
  if (wrap === 2 || wrap === 1 && s.status !== INIT_STATE || s.lookahead) {
    return Z_STREAM_ERROR$2;
  }
  if (wrap === 1) {
    strm.adler = adler32_1(strm.adler, dictionary2, dictLength, 0);
  }
  s.wrap = 0;
  if (dictLength >= s.w_size) {
    if (wrap === 0) {
      zero(s.head);
      s.strstart = 0;
      s.block_start = 0;
      s.insert = 0;
    }
    let tmpDict = new Uint8Array(s.w_size);
    tmpDict.set(dictionary2.subarray(dictLength - s.w_size, dictLength), 0);
    dictionary2 = tmpDict;
    dictLength = s.w_size;
  }
  const avail = strm.avail_in;
  const next = strm.next_in;
  const input = strm.input;
  strm.avail_in = dictLength;
  strm.next_in = 0;
  strm.input = dictionary2;
  fill_window(s);
  while (s.lookahead >= MIN_MATCH) {
    let str = s.strstart;
    let n = s.lookahead - (MIN_MATCH - 1);
    do {
      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);
      s.prev[str & s.w_mask] = s.head[s.ins_h];
      s.head[s.ins_h] = str;
      str++;
    } while (--n);
    s.strstart = str;
    s.lookahead = MIN_MATCH - 1;
    fill_window(s);
  }
  s.strstart += s.lookahead;
  s.block_start = s.strstart;
  s.insert = s.lookahead;
  s.lookahead = 0;
  s.match_length = s.prev_length = MIN_MATCH - 1;
  s.match_available = 0;
  strm.next_in = next;
  strm.input = input;
  strm.avail_in = avail;
  s.wrap = wrap;
  return Z_OK$3;
};
var deflateInit_1 = deflateInit;
var deflateInit2_1 = deflateInit2;
var deflateReset_1 = deflateReset;
var deflateResetKeep_1 = deflateResetKeep;
var deflateSetHeader_1 = deflateSetHeader;
var deflate_2$1 = deflate$2;
var deflateEnd_1 = deflateEnd;
var deflateSetDictionary_1 = deflateSetDictionary;
var deflateInfo = "pako deflate (from Nodeca project)";
var deflate_1$2 = {
  deflateInit: deflateInit_1,
  deflateInit2: deflateInit2_1,
  deflateReset: deflateReset_1,
  deflateResetKeep: deflateResetKeep_1,
  deflateSetHeader: deflateSetHeader_1,
  deflate: deflate_2$1,
  deflateEnd: deflateEnd_1,
  deflateSetDictionary: deflateSetDictionary_1,
  deflateInfo
};
var _has = (obj, key) => {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
var assign = function(obj) {
  const sources = Array.prototype.slice.call(arguments, 1);
  while (sources.length) {
    const source = sources.shift();
    if (!source) {
      continue;
    }
    if (typeof source !== "object") {
      throw new TypeError(source + "must be non-object");
    }
    for (const p in source) {
      if (_has(source, p)) {
        obj[p] = source[p];
      }
    }
  }
  return obj;
};
var flattenChunks = (chunks) => {
  let len = 0;
  for (let i = 0, l = chunks.length; i < l; i++) {
    len += chunks[i].length;
  }
  const result = new Uint8Array(len);
  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
    let chunk = chunks[i];
    result.set(chunk, pos);
    pos += chunk.length;
  }
  return result;
};
var common = {
  assign,
  flattenChunks
};
var STR_APPLY_UIA_OK = true;
try {
  String.fromCharCode.apply(null, new Uint8Array(1));
} catch (__) {
  STR_APPLY_UIA_OK = false;
}
var _utf8len = new Uint8Array(256);
for (let q = 0; q < 256; q++) {
  _utf8len[q] = q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1;
}
_utf8len[254] = _utf8len[254] = 1;
var string2buf = (str) => {
  if (typeof TextEncoder === "function" && TextEncoder.prototype.encode) {
    return new TextEncoder().encode(str);
  }
  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;
  for (m_pos = 0; m_pos < str_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 64512) === 56320) {
        c = 65536 + (c - 55296 << 10) + (c2 - 56320);
        m_pos++;
      }
    }
    buf_len += c < 128 ? 1 : c < 2048 ? 2 : c < 65536 ? 3 : 4;
  }
  buf = new Uint8Array(buf_len);
  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
    c = str.charCodeAt(m_pos);
    if ((c & 64512) === 55296 && m_pos + 1 < str_len) {
      c2 = str.charCodeAt(m_pos + 1);
      if ((c2 & 64512) === 56320) {
        c = 65536 + (c - 55296 << 10) + (c2 - 56320);
        m_pos++;
      }
    }
    if (c < 128) {
      buf[i++] = c;
    } else if (c < 2048) {
      buf[i++] = 192 | c >>> 6;
      buf[i++] = 128 | c & 63;
    } else if (c < 65536) {
      buf[i++] = 224 | c >>> 12;
      buf[i++] = 128 | c >>> 6 & 63;
      buf[i++] = 128 | c & 63;
    } else {
      buf[i++] = 240 | c >>> 18;
      buf[i++] = 128 | c >>> 12 & 63;
      buf[i++] = 128 | c >>> 6 & 63;
      buf[i++] = 128 | c & 63;
    }
  }
  return buf;
};
var buf2binstring = (buf, len) => {
  if (len < 65534) {
    if (buf.subarray && STR_APPLY_UIA_OK) {
      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
    }
  }
  let result = "";
  for (let i = 0; i < len; i++) {
    result += String.fromCharCode(buf[i]);
  }
  return result;
};
var buf2string = (buf, max) => {
  const len = max || buf.length;
  if (typeof TextDecoder === "function" && TextDecoder.prototype.decode) {
    return new TextDecoder().decode(buf.subarray(0, max));
  }
  let i, out;
  const utf16buf = new Array(len * 2);
  for (out = 0, i = 0; i < len; ) {
    let c = buf[i++];
    if (c < 128) {
      utf16buf[out++] = c;
      continue;
    }
    let c_len = _utf8len[c];
    if (c_len > 4) {
      utf16buf[out++] = 65533;
      i += c_len - 1;
      continue;
    }
    c &= c_len === 2 ? 31 : c_len === 3 ? 15 : 7;
    while (c_len > 1 && i < len) {
      c = c << 6 | buf[i++] & 63;
      c_len--;
    }
    if (c_len > 1) {
      utf16buf[out++] = 65533;
      continue;
    }
    if (c < 65536) {
      utf16buf[out++] = c;
    } else {
      c -= 65536;
      utf16buf[out++] = 55296 | c >> 10 & 1023;
      utf16buf[out++] = 56320 | c & 1023;
    }
  }
  return buf2binstring(utf16buf, out);
};
var utf8border = (buf, max) => {
  max = max || buf.length;
  if (max > buf.length) {
    max = buf.length;
  }
  let pos = max - 1;
  while (pos >= 0 && (buf[pos] & 192) === 128) {
    pos--;
  }
  if (pos < 0) {
    return max;
  }
  if (pos === 0) {
    return max;
  }
  return pos + _utf8len[buf[pos]] > max ? pos : max;
};
var strings = {
  string2buf,
  buf2string,
  utf8border
};
function ZStream() {
  this.input = null;
  this.next_in = 0;
  this.avail_in = 0;
  this.total_in = 0;
  this.output = null;
  this.next_out = 0;
  this.avail_out = 0;
  this.total_out = 0;
  this.msg = "";
  this.state = null;
  this.data_type = 2;
  this.adler = 0;
}
var zstream = ZStream;
var toString$1 = Object.prototype.toString;
var {
  Z_NO_FLUSH: Z_NO_FLUSH$1,
  Z_SYNC_FLUSH,
  Z_FULL_FLUSH,
  Z_FINISH: Z_FINISH$2,
  Z_OK: Z_OK$2,
  Z_STREAM_END: Z_STREAM_END$2,
  Z_DEFAULT_COMPRESSION,
  Z_DEFAULT_STRATEGY,
  Z_DEFLATED: Z_DEFLATED$1
} = constants$2;
function Deflate$1(options) {
  this.options = common.assign({
    level: Z_DEFAULT_COMPRESSION,
    method: Z_DEFLATED$1,
    chunkSize: 16384,
    windowBits: 15,
    memLevel: 8,
    strategy: Z_DEFAULT_STRATEGY
  }, options || {});
  let opt = this.options;
  if (opt.raw && opt.windowBits > 0) {
    opt.windowBits = -opt.windowBits;
  } else if (opt.gzip && opt.windowBits > 0 && opt.windowBits < 16) {
    opt.windowBits += 16;
  }
  this.err = 0;
  this.msg = "";
  this.ended = false;
  this.chunks = [];
  this.strm = new zstream();
  this.strm.avail_out = 0;
  let status = deflate_1$2.deflateInit2(this.strm, opt.level, opt.method, opt.windowBits, opt.memLevel, opt.strategy);
  if (status !== Z_OK$2) {
    throw new Error(messages[status]);
  }
  if (opt.header) {
    deflate_1$2.deflateSetHeader(this.strm, opt.header);
  }
  if (opt.dictionary) {
    let dict;
    if (typeof opt.dictionary === "string") {
      dict = strings.string2buf(opt.dictionary);
    } else if (toString$1.call(opt.dictionary) === "[object ArrayBuffer]") {
      dict = new Uint8Array(opt.dictionary);
    } else {
      dict = opt.dictionary;
    }
    status = deflate_1$2.deflateSetDictionary(this.strm, dict);
    if (status !== Z_OK$2) {
      throw new Error(messages[status]);
    }
    this._dict_set = true;
  }
}
Deflate$1.prototype.push = function(data2, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  let status, _flush_mode;
  if (this.ended) {
    return false;
  }
  if (flush_mode === ~~flush_mode)
    _flush_mode = flush_mode;
  else
    _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;
  if (typeof data2 === "string") {
    strm.input = strings.string2buf(data2);
  } else if (toString$1.call(data2) === "[object ArrayBuffer]") {
    strm.input = new Uint8Array(data2);
  } else {
    strm.input = data2;
  }
  strm.next_in = 0;
  strm.avail_in = strm.input.length;
  for (; ; ) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }
    status = deflate_1$2.deflate(strm, _flush_mode);
    if (status === Z_STREAM_END$2) {
      if (strm.next_out > 0) {
        this.onData(strm.output.subarray(0, strm.next_out));
      }
      status = deflate_1$2.deflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return status === Z_OK$2;
    }
    if (strm.avail_out === 0) {
      this.onData(strm.output);
      continue;
    }
    if (_flush_mode > 0 && strm.next_out > 0) {
      this.onData(strm.output.subarray(0, strm.next_out));
      strm.avail_out = 0;
      continue;
    }
    if (strm.avail_in === 0)
      break;
  }
  return true;
};
Deflate$1.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};
Deflate$1.prototype.onEnd = function(status) {
  if (status === Z_OK$2) {
    this.result = common.flattenChunks(this.chunks);
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};
function deflate$1(input, options) {
  const deflator = new Deflate$1(options);
  deflator.push(input, true);
  if (deflator.err) {
    throw deflator.msg || messages[deflator.err];
  }
  return deflator.result;
}
function deflateRaw$1(input, options) {
  options = options || {};
  options.raw = true;
  return deflate$1(input, options);
}
function gzip$1(input, options) {
  options = options || {};
  options.gzip = true;
  return deflate$1(input, options);
}
var Deflate_1$1 = Deflate$1;
var deflate_2 = deflate$1;
var deflateRaw_1$1 = deflateRaw$1;
var gzip_1$1 = gzip$1;
var constants$1 = constants$2;
var deflate_1$1 = {
  Deflate: Deflate_1$1,
  deflate: deflate_2,
  deflateRaw: deflateRaw_1$1,
  gzip: gzip_1$1,
  constants: constants$1
};
var BAD$1 = 16209;
var TYPE$1 = 16191;
var inffast = function inflate_fast(strm, start) {
  let _in;
  let last;
  let _out;
  let beg;
  let end;
  let dmax;
  let wsize;
  let whave;
  let wnext;
  let s_window;
  let hold;
  let bits;
  let lcode;
  let dcode;
  let lmask;
  let dmask;
  let here;
  let op;
  let len;
  let dist;
  let from;
  let from_source;
  let input, output;
  const state = strm.state;
  _in = strm.next_in;
  input = strm.input;
  last = _in + (strm.avail_in - 5);
  _out = strm.next_out;
  output = strm.output;
  beg = _out - (start - strm.avail_out);
  end = _out + (strm.avail_out - 257);
  dmax = state.dmax;
  wsize = state.wsize;
  whave = state.whave;
  wnext = state.wnext;
  s_window = state.window;
  hold = state.hold;
  bits = state.bits;
  lcode = state.lencode;
  dcode = state.distcode;
  lmask = (1 << state.lenbits) - 1;
  dmask = (1 << state.distbits) - 1;
  top:
    do {
      if (bits < 15) {
        hold += input[_in++] << bits;
        bits += 8;
        hold += input[_in++] << bits;
        bits += 8;
      }
      here = lcode[hold & lmask];
      dolen:
        for (; ; ) {
          op = here >>> 24;
          hold >>>= op;
          bits -= op;
          op = here >>> 16 & 255;
          if (op === 0) {
            output[_out++] = here & 65535;
          } else if (op & 16) {
            len = here & 65535;
            op &= 15;
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & (1 << op) - 1;
              hold >>>= op;
              bits -= op;
            }
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];
            dodist:
              for (; ; ) {
                op = here >>> 24;
                hold >>>= op;
                bits -= op;
                op = here >>> 16 & 255;
                if (op & 16) {
                  dist = here & 65535;
                  op &= 15;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                    if (bits < op) {
                      hold += input[_in++] << bits;
                      bits += 8;
                    }
                  }
                  dist += hold & (1 << op) - 1;
                  if (dist > dmax) {
                    strm.msg = "invalid distance too far back";
                    state.mode = BAD$1;
                    break top;
                  }
                  hold >>>= op;
                  bits -= op;
                  op = _out - beg;
                  if (dist > op) {
                    op = dist - op;
                    if (op > whave) {
                      if (state.sane) {
                        strm.msg = "invalid distance too far back";
                        state.mode = BAD$1;
                        break top;
                      }
                    }
                    from = 0;
                    from_source = s_window;
                    if (wnext === 0) {
                      from += wsize - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;
                        from_source = output;
                      }
                    } else if (wnext < op) {
                      from += wsize + wnext - op;
                      op -= wnext;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = 0;
                        if (wnext < len) {
                          op = wnext;
                          len -= op;
                          do {
                            output[_out++] = s_window[from++];
                          } while (--op);
                          from = _out - dist;
                          from_source = output;
                        }
                      }
                    } else {
                      from += wnext - op;
                      if (op < len) {
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;
                        from_source = output;
                      }
                    }
                    while (len > 2) {
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      output[_out++] = from_source[from++];
                      len -= 3;
                    }
                    if (len) {
                      output[_out++] = from_source[from++];
                      if (len > 1) {
                        output[_out++] = from_source[from++];
                      }
                    }
                  } else {
                    from = _out - dist;
                    do {
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      output[_out++] = output[from++];
                      len -= 3;
                    } while (len > 2);
                    if (len) {
                      output[_out++] = output[from++];
                      if (len > 1) {
                        output[_out++] = output[from++];
                      }
                    }
                  }
                } else if ((op & 64) === 0) {
                  here = dcode[(here & 65535) + (hold & (1 << op) - 1)];
                  continue dodist;
                } else {
                  strm.msg = "invalid distance code";
                  state.mode = BAD$1;
                  break top;
                }
                break;
              }
          } else if ((op & 64) === 0) {
            here = lcode[(here & 65535) + (hold & (1 << op) - 1)];
            continue dolen;
          } else if (op & 32) {
            state.mode = TYPE$1;
            break top;
          } else {
            strm.msg = "invalid literal/length code";
            state.mode = BAD$1;
            break top;
          }
          break;
        }
    } while (_in < last && _out < end);
  len = bits >> 3;
  _in -= len;
  bits -= len << 3;
  hold &= (1 << bits) - 1;
  strm.next_in = _in;
  strm.next_out = _out;
  strm.avail_in = _in < last ? 5 + (last - _in) : 5 - (_in - last);
  strm.avail_out = _out < end ? 257 + (end - _out) : 257 - (_out - end);
  state.hold = hold;
  state.bits = bits;
  return;
};
var MAXBITS = 15;
var ENOUGH_LENS$1 = 852;
var ENOUGH_DISTS$1 = 592;
var CODES$1 = 0;
var LENS$1 = 1;
var DISTS$1 = 2;
var lbase = new Uint16Array([
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
]);
var lext = new Uint8Array([
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  16,
  72,
  78
]);
var dbase = new Uint16Array([
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577,
  0,
  0
]);
var dext = new Uint8Array([
  16,
  16,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  64,
  64
]);
var inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) => {
  const bits = opts.bits;
  let len = 0;
  let sym = 0;
  let min = 0, max = 0;
  let root = 0;
  let curr = 0;
  let drop = 0;
  let left = 0;
  let used = 0;
  let huff = 0;
  let incr;
  let fill;
  let low;
  let mask;
  let next;
  let base = null;
  let match;
  const count = new Uint16Array(MAXBITS + 1);
  const offs = new Uint16Array(MAXBITS + 1);
  let extra = null;
  let here_bits, here_op, here_val;
  for (len = 0; len <= MAXBITS; len++) {
    count[len] = 0;
  }
  for (sym = 0; sym < codes; sym++) {
    count[lens[lens_index + sym]]++;
  }
  root = bits;
  for (max = MAXBITS; max >= 1; max--) {
    if (count[max] !== 0) {
      break;
    }
  }
  if (root > max) {
    root = max;
  }
  if (max === 0) {
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    table[table_index++] = 1 << 24 | 64 << 16 | 0;
    opts.bits = 1;
    return 0;
  }
  for (min = 1; min < max; min++) {
    if (count[min] !== 0) {
      break;
    }
  }
  if (root < min) {
    root = min;
  }
  left = 1;
  for (len = 1; len <= MAXBITS; len++) {
    left <<= 1;
    left -= count[len];
    if (left < 0) {
      return -1;
    }
  }
  if (left > 0 && (type === CODES$1 || max !== 1)) {
    return -1;
  }
  offs[1] = 0;
  for (len = 1; len < MAXBITS; len++) {
    offs[len + 1] = offs[len] + count[len];
  }
  for (sym = 0; sym < codes; sym++) {
    if (lens[lens_index + sym] !== 0) {
      work[offs[lens[lens_index + sym]]++] = sym;
    }
  }
  if (type === CODES$1) {
    base = extra = work;
    match = 20;
  } else if (type === LENS$1) {
    base = lbase;
    extra = lext;
    match = 257;
  } else {
    base = dbase;
    extra = dext;
    match = 0;
  }
  huff = 0;
  sym = 0;
  len = min;
  next = table_index;
  curr = root;
  drop = 0;
  low = -1;
  used = 1 << root;
  mask = used - 1;
  if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
    return 1;
  }
  for (; ; ) {
    here_bits = len - drop;
    if (work[sym] + 1 < match) {
      here_op = 0;
      here_val = work[sym];
    } else if (work[sym] >= match) {
      here_op = extra[work[sym] - match];
      here_val = base[work[sym] - match];
    } else {
      here_op = 32 + 64;
      here_val = 0;
    }
    incr = 1 << len - drop;
    fill = 1 << curr;
    min = fill;
    do {
      fill -= incr;
      table[next + (huff >> drop) + fill] = here_bits << 24 | here_op << 16 | here_val | 0;
    } while (fill !== 0);
    incr = 1 << len - 1;
    while (huff & incr) {
      incr >>= 1;
    }
    if (incr !== 0) {
      huff &= incr - 1;
      huff += incr;
    } else {
      huff = 0;
    }
    sym++;
    if (--count[len] === 0) {
      if (len === max) {
        break;
      }
      len = lens[lens_index + work[sym]];
    }
    if (len > root && (huff & mask) !== low) {
      if (drop === 0) {
        drop = root;
      }
      next += min;
      curr = len - drop;
      left = 1 << curr;
      while (curr + drop < max) {
        left -= count[curr + drop];
        if (left <= 0) {
          break;
        }
        curr++;
        left <<= 1;
      }
      used += 1 << curr;
      if (type === LENS$1 && used > ENOUGH_LENS$1 || type === DISTS$1 && used > ENOUGH_DISTS$1) {
        return 1;
      }
      low = huff & mask;
      table[low] = root << 24 | curr << 16 | next - table_index | 0;
    }
  }
  if (huff !== 0) {
    table[next + huff] = len - drop << 24 | 64 << 16 | 0;
  }
  opts.bits = root;
  return 0;
};
var inftrees = inflate_table;
var CODES = 0;
var LENS = 1;
var DISTS = 2;
var {
  Z_FINISH: Z_FINISH$1,
  Z_BLOCK,
  Z_TREES,
  Z_OK: Z_OK$1,
  Z_STREAM_END: Z_STREAM_END$1,
  Z_NEED_DICT: Z_NEED_DICT$1,
  Z_STREAM_ERROR: Z_STREAM_ERROR$1,
  Z_DATA_ERROR: Z_DATA_ERROR$1,
  Z_MEM_ERROR: Z_MEM_ERROR$1,
  Z_BUF_ERROR,
  Z_DEFLATED
} = constants$2;
var HEAD = 16180;
var FLAGS = 16181;
var TIME = 16182;
var OS = 16183;
var EXLEN = 16184;
var EXTRA = 16185;
var NAME = 16186;
var COMMENT = 16187;
var HCRC = 16188;
var DICTID = 16189;
var DICT = 16190;
var TYPE = 16191;
var TYPEDO = 16192;
var STORED = 16193;
var COPY_ = 16194;
var COPY = 16195;
var TABLE = 16196;
var LENLENS = 16197;
var CODELENS = 16198;
var LEN_ = 16199;
var LEN = 16200;
var LENEXT = 16201;
var DIST = 16202;
var DISTEXT = 16203;
var MATCH = 16204;
var LIT = 16205;
var CHECK = 16206;
var LENGTH = 16207;
var DONE = 16208;
var BAD = 16209;
var MEM = 16210;
var SYNC = 16211;
var ENOUGH_LENS = 852;
var ENOUGH_DISTS = 592;
var MAX_WBITS = 15;
var DEF_WBITS = MAX_WBITS;
var zswap32 = (q) => {
  return (q >>> 24 & 255) + (q >>> 8 & 65280) + ((q & 65280) << 8) + ((q & 255) << 24);
};
function InflateState() {
  this.strm = null;
  this.mode = 0;
  this.last = false;
  this.wrap = 0;
  this.havedict = false;
  this.flags = 0;
  this.dmax = 0;
  this.check = 0;
  this.total = 0;
  this.head = null;
  this.wbits = 0;
  this.wsize = 0;
  this.whave = 0;
  this.wnext = 0;
  this.window = null;
  this.hold = 0;
  this.bits = 0;
  this.length = 0;
  this.offset = 0;
  this.extra = 0;
  this.lencode = null;
  this.distcode = null;
  this.lenbits = 0;
  this.distbits = 0;
  this.ncode = 0;
  this.nlen = 0;
  this.ndist = 0;
  this.have = 0;
  this.next = null;
  this.lens = new Uint16Array(320);
  this.work = new Uint16Array(288);
  this.lendyn = null;
  this.distdyn = null;
  this.sane = 0;
  this.back = 0;
  this.was = 0;
}
var inflateStateCheck = (strm) => {
  if (!strm) {
    return 1;
  }
  const state = strm.state;
  if (!state || state.strm !== strm || state.mode < HEAD || state.mode > SYNC) {
    return 1;
  }
  return 0;
};
var inflateResetKeep = (strm) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  strm.total_in = strm.total_out = state.total = 0;
  strm.msg = "";
  if (state.wrap) {
    strm.adler = state.wrap & 1;
  }
  state.mode = HEAD;
  state.last = 0;
  state.havedict = 0;
  state.flags = -1;
  state.dmax = 32768;
  state.head = null;
  state.hold = 0;
  state.bits = 0;
  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);
  state.sane = 1;
  state.back = -1;
  return Z_OK$1;
};
var inflateReset = (strm) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  state.wsize = 0;
  state.whave = 0;
  state.wnext = 0;
  return inflateResetKeep(strm);
};
var inflateReset2 = (strm, windowBits) => {
  let wrap;
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  if (windowBits < 0) {
    wrap = 0;
    windowBits = -windowBits;
  } else {
    wrap = (windowBits >> 4) + 5;
    if (windowBits < 48) {
      windowBits &= 15;
    }
  }
  if (windowBits && (windowBits < 8 || windowBits > 15)) {
    return Z_STREAM_ERROR$1;
  }
  if (state.window !== null && state.wbits !== windowBits) {
    state.window = null;
  }
  state.wrap = wrap;
  state.wbits = windowBits;
  return inflateReset(strm);
};
var inflateInit2 = (strm, windowBits) => {
  if (!strm) {
    return Z_STREAM_ERROR$1;
  }
  const state = new InflateState();
  strm.state = state;
  state.strm = strm;
  state.window = null;
  state.mode = HEAD;
  const ret = inflateReset2(strm, windowBits);
  if (ret !== Z_OK$1) {
    strm.state = null;
  }
  return ret;
};
var inflateInit = (strm) => {
  return inflateInit2(strm, DEF_WBITS);
};
var virgin = true;
var lenfix;
var distfix;
var fixedtables = (state) => {
  if (virgin) {
    lenfix = new Int32Array(512);
    distfix = new Int32Array(32);
    let sym = 0;
    while (sym < 144) {
      state.lens[sym++] = 8;
    }
    while (sym < 256) {
      state.lens[sym++] = 9;
    }
    while (sym < 280) {
      state.lens[sym++] = 7;
    }
    while (sym < 288) {
      state.lens[sym++] = 8;
    }
    inftrees(LENS, state.lens, 0, 288, lenfix, 0, state.work, {bits: 9});
    sym = 0;
    while (sym < 32) {
      state.lens[sym++] = 5;
    }
    inftrees(DISTS, state.lens, 0, 32, distfix, 0, state.work, {bits: 5});
    virgin = false;
  }
  state.lencode = lenfix;
  state.lenbits = 9;
  state.distcode = distfix;
  state.distbits = 5;
};
var updatewindow = (strm, src, end, copy) => {
  let dist;
  const state = strm.state;
  if (state.window === null) {
    state.wsize = 1 << state.wbits;
    state.wnext = 0;
    state.whave = 0;
    state.window = new Uint8Array(state.wsize);
  }
  if (copy >= state.wsize) {
    state.window.set(src.subarray(end - state.wsize, end), 0);
    state.wnext = 0;
    state.whave = state.wsize;
  } else {
    dist = state.wsize - state.wnext;
    if (dist > copy) {
      dist = copy;
    }
    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
    copy -= dist;
    if (copy) {
      state.window.set(src.subarray(end - copy, end), 0);
      state.wnext = copy;
      state.whave = state.wsize;
    } else {
      state.wnext += dist;
      if (state.wnext === state.wsize) {
        state.wnext = 0;
      }
      if (state.whave < state.wsize) {
        state.whave += dist;
      }
    }
  }
  return 0;
};
var inflate$2 = (strm, flush) => {
  let state;
  let input, output;
  let next;
  let put;
  let have, left;
  let hold;
  let bits;
  let _in, _out;
  let copy;
  let from;
  let from_source;
  let here = 0;
  let here_bits, here_op, here_val;
  let last_bits, last_op, last_val;
  let len;
  let ret;
  const hbuf = new Uint8Array(4);
  let opts;
  let n;
  const order = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);
  if (inflateStateCheck(strm) || !strm.output || !strm.input && strm.avail_in !== 0) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;
  if (state.mode === TYPE) {
    state.mode = TYPEDO;
  }
  put = strm.next_out;
  output = strm.output;
  left = strm.avail_out;
  next = strm.next_in;
  input = strm.input;
  have = strm.avail_in;
  hold = state.hold;
  bits = state.bits;
  _in = have;
  _out = left;
  ret = Z_OK$1;
  inf_leave:
    for (; ; ) {
      switch (state.mode) {
        case HEAD:
          if (state.wrap === 0) {
            state.mode = TYPEDO;
            break;
          }
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.wrap & 2 && hold === 35615) {
            if (state.wbits === 0) {
              state.wbits = 15;
            }
            state.check = 0;
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
            hold = 0;
            bits = 0;
            state.mode = FLAGS;
            break;
          }
          if (state.head) {
            state.head.done = false;
          }
          if (!(state.wrap & 1) || (((hold & 255) << 8) + (hold >> 8)) % 31) {
            strm.msg = "incorrect header check";
            state.mode = BAD;
            break;
          }
          if ((hold & 15) !== Z_DEFLATED) {
            strm.msg = "unknown compression method";
            state.mode = BAD;
            break;
          }
          hold >>>= 4;
          bits -= 4;
          len = (hold & 15) + 8;
          if (state.wbits === 0) {
            state.wbits = len;
          }
          if (len > 15 || len > state.wbits) {
            strm.msg = "invalid window size";
            state.mode = BAD;
            break;
          }
          state.dmax = 1 << state.wbits;
          state.flags = 0;
          strm.adler = state.check = 1;
          state.mode = hold & 512 ? DICTID : TYPE;
          hold = 0;
          bits = 0;
          break;
        case FLAGS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.flags = hold;
          if ((state.flags & 255) !== Z_DEFLATED) {
            strm.msg = "unknown compression method";
            state.mode = BAD;
            break;
          }
          if (state.flags & 57344) {
            strm.msg = "unknown header flags set";
            state.mode = BAD;
            break;
          }
          if (state.head) {
            state.head.text = hold >> 8 & 1;
          }
          if (state.flags & 512 && state.wrap & 4) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = TIME;
        case TIME:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.time = hold;
          }
          if (state.flags & 512 && state.wrap & 4) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            hbuf[2] = hold >>> 16 & 255;
            hbuf[3] = hold >>> 24 & 255;
            state.check = crc32_1(state.check, hbuf, 4, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = OS;
        case OS:
          while (bits < 16) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (state.head) {
            state.head.xflags = hold & 255;
            state.head.os = hold >> 8;
          }
          if (state.flags & 512 && state.wrap & 4) {
            hbuf[0] = hold & 255;
            hbuf[1] = hold >>> 8 & 255;
            state.check = crc32_1(state.check, hbuf, 2, 0);
          }
          hold = 0;
          bits = 0;
          state.mode = EXLEN;
        case EXLEN:
          if (state.flags & 1024) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length = hold;
            if (state.head) {
              state.head.extra_len = hold;
            }
            if (state.flags & 512 && state.wrap & 4) {
              hbuf[0] = hold & 255;
              hbuf[1] = hold >>> 8 & 255;
              state.check = crc32_1(state.check, hbuf, 2, 0);
            }
            hold = 0;
            bits = 0;
          } else if (state.head) {
            state.head.extra = null;
          }
          state.mode = EXTRA;
        case EXTRA:
          if (state.flags & 1024) {
            copy = state.length;
            if (copy > have) {
              copy = have;
            }
            if (copy) {
              if (state.head) {
                len = state.head.extra_len - state.length;
                if (!state.head.extra) {
                  state.head.extra = new Uint8Array(state.head.extra_len);
                }
                state.head.extra.set(input.subarray(next, next + copy), len);
              }
              if (state.flags & 512 && state.wrap & 4) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              state.length -= copy;
            }
            if (state.length) {
              break inf_leave;
            }
          }
          state.length = 0;
          state.mode = NAME;
        case NAME:
          if (state.flags & 2048) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              len = input[next + copy++];
              if (state.head && len && state.length < 65536) {
                state.head.name += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 512 && state.wrap & 4) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.name = null;
          }
          state.length = 0;
          state.mode = COMMENT;
        case COMMENT:
          if (state.flags & 4096) {
            if (have === 0) {
              break inf_leave;
            }
            copy = 0;
            do {
              len = input[next + copy++];
              if (state.head && len && state.length < 65536) {
                state.head.comment += String.fromCharCode(len);
              }
            } while (len && copy < have);
            if (state.flags & 512 && state.wrap & 4) {
              state.check = crc32_1(state.check, input, copy, next);
            }
            have -= copy;
            next += copy;
            if (len) {
              break inf_leave;
            }
          } else if (state.head) {
            state.head.comment = null;
          }
          state.mode = HCRC;
        case HCRC:
          if (state.flags & 512) {
            while (bits < 16) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.wrap & 4 && hold !== (state.check & 65535)) {
              strm.msg = "header crc mismatch";
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          if (state.head) {
            state.head.hcrc = state.flags >> 9 & 1;
            state.head.done = true;
          }
          strm.adler = state.check = 0;
          state.mode = TYPE;
          break;
        case DICTID:
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          strm.adler = state.check = zswap32(hold);
          hold = 0;
          bits = 0;
          state.mode = DICT;
        case DICT:
          if (state.havedict === 0) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            return Z_NEED_DICT$1;
          }
          strm.adler = state.check = 1;
          state.mode = TYPE;
        case TYPE:
          if (flush === Z_BLOCK || flush === Z_TREES) {
            break inf_leave;
          }
        case TYPEDO:
          if (state.last) {
            hold >>>= bits & 7;
            bits -= bits & 7;
            state.mode = CHECK;
            break;
          }
          while (bits < 3) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.last = hold & 1;
          hold >>>= 1;
          bits -= 1;
          switch (hold & 3) {
            case 0:
              state.mode = STORED;
              break;
            case 1:
              fixedtables(state);
              state.mode = LEN_;
              if (flush === Z_TREES) {
                hold >>>= 2;
                bits -= 2;
                break inf_leave;
              }
              break;
            case 2:
              state.mode = TABLE;
              break;
            case 3:
              strm.msg = "invalid block type";
              state.mode = BAD;
          }
          hold >>>= 2;
          bits -= 2;
          break;
        case STORED:
          hold >>>= bits & 7;
          bits -= bits & 7;
          while (bits < 32) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((hold & 65535) !== (hold >>> 16 ^ 65535)) {
            strm.msg = "invalid stored block lengths";
            state.mode = BAD;
            break;
          }
          state.length = hold & 65535;
          hold = 0;
          bits = 0;
          state.mode = COPY_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
        case COPY_:
          state.mode = COPY;
        case COPY:
          copy = state.length;
          if (copy) {
            if (copy > have) {
              copy = have;
            }
            if (copy > left) {
              copy = left;
            }
            if (copy === 0) {
              break inf_leave;
            }
            output.set(input.subarray(next, next + copy), put);
            have -= copy;
            next += copy;
            left -= copy;
            put += copy;
            state.length -= copy;
            break;
          }
          state.mode = TYPE;
          break;
        case TABLE:
          while (bits < 14) {
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          state.nlen = (hold & 31) + 257;
          hold >>>= 5;
          bits -= 5;
          state.ndist = (hold & 31) + 1;
          hold >>>= 5;
          bits -= 5;
          state.ncode = (hold & 15) + 4;
          hold >>>= 4;
          bits -= 4;
          if (state.nlen > 286 || state.ndist > 30) {
            strm.msg = "too many length or distance symbols";
            state.mode = BAD;
            break;
          }
          state.have = 0;
          state.mode = LENLENS;
        case LENLENS:
          while (state.have < state.ncode) {
            while (bits < 3) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.lens[order[state.have++]] = hold & 7;
            hold >>>= 3;
            bits -= 3;
          }
          while (state.have < 19) {
            state.lens[order[state.have++]] = 0;
          }
          state.lencode = state.lendyn;
          state.lenbits = 7;
          opts = {bits: state.lenbits};
          ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid code lengths set";
            state.mode = BAD;
            break;
          }
          state.have = 0;
          state.mode = CODELENS;
        case CODELENS:
          while (state.have < state.nlen + state.ndist) {
            for (; ; ) {
              here = state.lencode[hold & (1 << state.lenbits) - 1];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (here_val < 16) {
              hold >>>= here_bits;
              bits -= here_bits;
              state.lens[state.have++] = here_val;
            } else {
              if (here_val === 16) {
                n = here_bits + 2;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                if (state.have === 0) {
                  strm.msg = "invalid bit length repeat";
                  state.mode = BAD;
                  break;
                }
                len = state.lens[state.have - 1];
                copy = 3 + (hold & 3);
                hold >>>= 2;
                bits -= 2;
              } else if (here_val === 17) {
                n = here_bits + 3;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy = 3 + (hold & 7);
                hold >>>= 3;
                bits -= 3;
              } else {
                n = here_bits + 7;
                while (bits < n) {
                  if (have === 0) {
                    break inf_leave;
                  }
                  have--;
                  hold += input[next++] << bits;
                  bits += 8;
                }
                hold >>>= here_bits;
                bits -= here_bits;
                len = 0;
                copy = 11 + (hold & 127);
                hold >>>= 7;
                bits -= 7;
              }
              if (state.have + copy > state.nlen + state.ndist) {
                strm.msg = "invalid bit length repeat";
                state.mode = BAD;
                break;
              }
              while (copy--) {
                state.lens[state.have++] = len;
              }
            }
          }
          if (state.mode === BAD) {
            break;
          }
          if (state.lens[256] === 0) {
            strm.msg = "invalid code -- missing end-of-block";
            state.mode = BAD;
            break;
          }
          state.lenbits = 9;
          opts = {bits: state.lenbits};
          ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
          state.lenbits = opts.bits;
          if (ret) {
            strm.msg = "invalid literal/lengths set";
            state.mode = BAD;
            break;
          }
          state.distbits = 6;
          state.distcode = state.distdyn;
          opts = {bits: state.distbits};
          ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
          state.distbits = opts.bits;
          if (ret) {
            strm.msg = "invalid distances set";
            state.mode = BAD;
            break;
          }
          state.mode = LEN_;
          if (flush === Z_TREES) {
            break inf_leave;
          }
        case LEN_:
          state.mode = LEN;
        case LEN:
          if (have >= 6 && left >= 258) {
            strm.next_out = put;
            strm.avail_out = left;
            strm.next_in = next;
            strm.avail_in = have;
            state.hold = hold;
            state.bits = bits;
            inffast(strm, _out);
            put = strm.next_out;
            output = strm.output;
            left = strm.avail_out;
            next = strm.next_in;
            input = strm.input;
            have = strm.avail_in;
            hold = state.hold;
            bits = state.bits;
            if (state.mode === TYPE) {
              state.back = -1;
            }
            break;
          }
          state.back = 0;
          for (; ; ) {
            here = state.lencode[hold & (1 << state.lenbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if (here_op && (here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state.lencode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          state.length = here_val;
          if (here_op === 0) {
            state.mode = LIT;
            break;
          }
          if (here_op & 32) {
            state.back = -1;
            state.mode = TYPE;
            break;
          }
          if (here_op & 64) {
            strm.msg = "invalid literal/length code";
            state.mode = BAD;
            break;
          }
          state.extra = here_op & 15;
          state.mode = LENEXT;
        case LENEXT:
          if (state.extra) {
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.length += hold & (1 << state.extra) - 1;
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          state.was = state.length;
          state.mode = DIST;
        case DIST:
          for (; ; ) {
            here = state.distcode[hold & (1 << state.distbits) - 1];
            here_bits = here >>> 24;
            here_op = here >>> 16 & 255;
            here_val = here & 65535;
            if (here_bits <= bits) {
              break;
            }
            if (have === 0) {
              break inf_leave;
            }
            have--;
            hold += input[next++] << bits;
            bits += 8;
          }
          if ((here_op & 240) === 0) {
            last_bits = here_bits;
            last_op = here_op;
            last_val = here_val;
            for (; ; ) {
              here = state.distcode[last_val + ((hold & (1 << last_bits + last_op) - 1) >> last_bits)];
              here_bits = here >>> 24;
              here_op = here >>> 16 & 255;
              here_val = here & 65535;
              if (last_bits + here_bits <= bits) {
                break;
              }
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            hold >>>= last_bits;
            bits -= last_bits;
            state.back += last_bits;
          }
          hold >>>= here_bits;
          bits -= here_bits;
          state.back += here_bits;
          if (here_op & 64) {
            strm.msg = "invalid distance code";
            state.mode = BAD;
            break;
          }
          state.offset = here_val;
          state.extra = here_op & 15;
          state.mode = DISTEXT;
        case DISTEXT:
          if (state.extra) {
            n = state.extra;
            while (bits < n) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            state.offset += hold & (1 << state.extra) - 1;
            hold >>>= state.extra;
            bits -= state.extra;
            state.back += state.extra;
          }
          if (state.offset > state.dmax) {
            strm.msg = "invalid distance too far back";
            state.mode = BAD;
            break;
          }
          state.mode = MATCH;
        case MATCH:
          if (left === 0) {
            break inf_leave;
          }
          copy = _out - left;
          if (state.offset > copy) {
            copy = state.offset - copy;
            if (copy > state.whave) {
              if (state.sane) {
                strm.msg = "invalid distance too far back";
                state.mode = BAD;
                break;
              }
            }
            if (copy > state.wnext) {
              copy -= state.wnext;
              from = state.wsize - copy;
            } else {
              from = state.wnext - copy;
            }
            if (copy > state.length) {
              copy = state.length;
            }
            from_source = state.window;
          } else {
            from_source = output;
            from = put - state.offset;
            copy = state.length;
          }
          if (copy > left) {
            copy = left;
          }
          left -= copy;
          state.length -= copy;
          do {
            output[put++] = from_source[from++];
          } while (--copy);
          if (state.length === 0) {
            state.mode = LEN;
          }
          break;
        case LIT:
          if (left === 0) {
            break inf_leave;
          }
          output[put++] = state.length;
          left--;
          state.mode = LEN;
          break;
        case CHECK:
          if (state.wrap) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold |= input[next++] << bits;
              bits += 8;
            }
            _out -= left;
            strm.total_out += _out;
            state.total += _out;
            if (state.wrap & 4 && _out) {
              strm.adler = state.check = state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out);
            }
            _out = left;
            if (state.wrap & 4 && (state.flags ? hold : zswap32(hold)) !== state.check) {
              strm.msg = "incorrect data check";
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = LENGTH;
        case LENGTH:
          if (state.wrap && state.flags) {
            while (bits < 32) {
              if (have === 0) {
                break inf_leave;
              }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            if (state.wrap & 4 && hold !== (state.total & 4294967295)) {
              strm.msg = "incorrect length check";
              state.mode = BAD;
              break;
            }
            hold = 0;
            bits = 0;
          }
          state.mode = DONE;
        case DONE:
          ret = Z_STREAM_END$1;
          break inf_leave;
        case BAD:
          ret = Z_DATA_ERROR$1;
          break inf_leave;
        case MEM:
          return Z_MEM_ERROR$1;
        case SYNC:
        default:
          return Z_STREAM_ERROR$1;
      }
    }
  strm.next_out = put;
  strm.avail_out = left;
  strm.next_in = next;
  strm.avail_in = have;
  state.hold = hold;
  state.bits = bits;
  if (state.wsize || _out !== strm.avail_out && state.mode < BAD && (state.mode < CHECK || flush !== Z_FINISH$1)) {
    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out))
      ;
  }
  _in -= strm.avail_in;
  _out -= strm.avail_out;
  strm.total_in += _in;
  strm.total_out += _out;
  state.total += _out;
  if (state.wrap & 4 && _out) {
    strm.adler = state.check = state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out);
  }
  strm.data_type = state.bits + (state.last ? 64 : 0) + (state.mode === TYPE ? 128 : 0) + (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
  if ((_in === 0 && _out === 0 || flush === Z_FINISH$1) && ret === Z_OK$1) {
    ret = Z_BUF_ERROR;
  }
  return ret;
};
var inflateEnd = (strm) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  let state = strm.state;
  if (state.window) {
    state.window = null;
  }
  strm.state = null;
  return Z_OK$1;
};
var inflateGetHeader = (strm, head) => {
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  const state = strm.state;
  if ((state.wrap & 2) === 0) {
    return Z_STREAM_ERROR$1;
  }
  state.head = head;
  head.done = false;
  return Z_OK$1;
};
var inflateSetDictionary = (strm, dictionary2) => {
  const dictLength = dictionary2.length;
  let state;
  let dictid;
  let ret;
  if (inflateStateCheck(strm)) {
    return Z_STREAM_ERROR$1;
  }
  state = strm.state;
  if (state.wrap !== 0 && state.mode !== DICT) {
    return Z_STREAM_ERROR$1;
  }
  if (state.mode === DICT) {
    dictid = 1;
    dictid = adler32_1(dictid, dictionary2, dictLength, 0);
    if (dictid !== state.check) {
      return Z_DATA_ERROR$1;
    }
  }
  ret = updatewindow(strm, dictionary2, dictLength, dictLength);
  if (ret) {
    state.mode = MEM;
    return Z_MEM_ERROR$1;
  }
  state.havedict = 1;
  return Z_OK$1;
};
var inflateReset_1 = inflateReset;
var inflateReset2_1 = inflateReset2;
var inflateResetKeep_1 = inflateResetKeep;
var inflateInit_1 = inflateInit;
var inflateInit2_1 = inflateInit2;
var inflate_2$1 = inflate$2;
var inflateEnd_1 = inflateEnd;
var inflateGetHeader_1 = inflateGetHeader;
var inflateSetDictionary_1 = inflateSetDictionary;
var inflateInfo = "pako inflate (from Nodeca project)";
var inflate_1$2 = {
  inflateReset: inflateReset_1,
  inflateReset2: inflateReset2_1,
  inflateResetKeep: inflateResetKeep_1,
  inflateInit: inflateInit_1,
  inflateInit2: inflateInit2_1,
  inflate: inflate_2$1,
  inflateEnd: inflateEnd_1,
  inflateGetHeader: inflateGetHeader_1,
  inflateSetDictionary: inflateSetDictionary_1,
  inflateInfo
};
function GZheader() {
  this.text = 0;
  this.time = 0;
  this.xflags = 0;
  this.os = 0;
  this.extra = null;
  this.extra_len = 0;
  this.name = "";
  this.comment = "";
  this.hcrc = 0;
  this.done = false;
}
var gzheader = GZheader;
var toString = Object.prototype.toString;
var {
  Z_NO_FLUSH,
  Z_FINISH,
  Z_OK,
  Z_STREAM_END,
  Z_NEED_DICT,
  Z_STREAM_ERROR,
  Z_DATA_ERROR,
  Z_MEM_ERROR
} = constants$2;
function Inflate$1(options) {
  this.options = common.assign({
    chunkSize: 1024 * 64,
    windowBits: 15,
    to: ""
  }, options || {});
  const opt = this.options;
  if (opt.raw && opt.windowBits >= 0 && opt.windowBits < 16) {
    opt.windowBits = -opt.windowBits;
    if (opt.windowBits === 0) {
      opt.windowBits = -15;
    }
  }
  if (opt.windowBits >= 0 && opt.windowBits < 16 && !(options && options.windowBits)) {
    opt.windowBits += 32;
  }
  if (opt.windowBits > 15 && opt.windowBits < 48) {
    if ((opt.windowBits & 15) === 0) {
      opt.windowBits |= 15;
    }
  }
  this.err = 0;
  this.msg = "";
  this.ended = false;
  this.chunks = [];
  this.strm = new zstream();
  this.strm.avail_out = 0;
  let status = inflate_1$2.inflateInit2(this.strm, opt.windowBits);
  if (status !== Z_OK) {
    throw new Error(messages[status]);
  }
  this.header = new gzheader();
  inflate_1$2.inflateGetHeader(this.strm, this.header);
  if (opt.dictionary) {
    if (typeof opt.dictionary === "string") {
      opt.dictionary = strings.string2buf(opt.dictionary);
    } else if (toString.call(opt.dictionary) === "[object ArrayBuffer]") {
      opt.dictionary = new Uint8Array(opt.dictionary);
    }
    if (opt.raw) {
      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
      if (status !== Z_OK) {
        throw new Error(messages[status]);
      }
    }
  }
}
Inflate$1.prototype.push = function(data2, flush_mode) {
  const strm = this.strm;
  const chunkSize = this.options.chunkSize;
  const dictionary2 = this.options.dictionary;
  let status, _flush_mode, last_avail_out;
  if (this.ended)
    return false;
  if (flush_mode === ~~flush_mode)
    _flush_mode = flush_mode;
  else
    _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;
  if (toString.call(data2) === "[object ArrayBuffer]") {
    strm.input = new Uint8Array(data2);
  } else {
    strm.input = data2;
  }
  strm.next_in = 0;
  strm.avail_in = strm.input.length;
  for (; ; ) {
    if (strm.avail_out === 0) {
      strm.output = new Uint8Array(chunkSize);
      strm.next_out = 0;
      strm.avail_out = chunkSize;
    }
    status = inflate_1$2.inflate(strm, _flush_mode);
    if (status === Z_NEED_DICT && dictionary2) {
      status = inflate_1$2.inflateSetDictionary(strm, dictionary2);
      if (status === Z_OK) {
        status = inflate_1$2.inflate(strm, _flush_mode);
      } else if (status === Z_DATA_ERROR) {
        status = Z_NEED_DICT;
      }
    }
    while (strm.avail_in > 0 && status === Z_STREAM_END && strm.state.wrap > 0 && data2[strm.next_in] !== 0) {
      inflate_1$2.inflateReset(strm);
      status = inflate_1$2.inflate(strm, _flush_mode);
    }
    switch (status) {
      case Z_STREAM_ERROR:
      case Z_DATA_ERROR:
      case Z_NEED_DICT:
      case Z_MEM_ERROR:
        this.onEnd(status);
        this.ended = true;
        return false;
    }
    last_avail_out = strm.avail_out;
    if (strm.next_out) {
      if (strm.avail_out === 0 || status === Z_STREAM_END) {
        if (this.options.to === "string") {
          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);
          let tail = strm.next_out - next_out_utf8;
          let utf8str = strings.buf2string(strm.output, next_out_utf8);
          strm.next_out = tail;
          strm.avail_out = chunkSize - tail;
          if (tail)
            strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);
          this.onData(utf8str);
        } else {
          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
        }
      }
    }
    if (status === Z_OK && last_avail_out === 0)
      continue;
    if (status === Z_STREAM_END) {
      status = inflate_1$2.inflateEnd(this.strm);
      this.onEnd(status);
      this.ended = true;
      return true;
    }
    if (strm.avail_in === 0)
      break;
  }
  return true;
};
Inflate$1.prototype.onData = function(chunk) {
  this.chunks.push(chunk);
};
Inflate$1.prototype.onEnd = function(status) {
  if (status === Z_OK) {
    if (this.options.to === "string") {
      this.result = this.chunks.join("");
    } else {
      this.result = common.flattenChunks(this.chunks);
    }
  }
  this.chunks = [];
  this.err = status;
  this.msg = this.strm.msg;
};
function inflate$1(input, options) {
  const inflator = new Inflate$1(options);
  inflator.push(input);
  if (inflator.err)
    throw inflator.msg || messages[inflator.err];
  return inflator.result;
}
function inflateRaw$1(input, options) {
  options = options || {};
  options.raw = true;
  return inflate$1(input, options);
}
var Inflate_1$1 = Inflate$1;
var inflate_2 = inflate$1;
var inflateRaw_1$1 = inflateRaw$1;
var ungzip$1 = inflate$1;
var constants = constants$2;
var inflate_1$1 = {
  Inflate: Inflate_1$1,
  inflate: inflate_2,
  inflateRaw: inflateRaw_1$1,
  ungzip: ungzip$1,
  constants
};
var {Deflate, deflate, deflateRaw, gzip} = deflate_1$1;
var {Inflate, inflate, inflateRaw, ungzip} = inflate_1$1;
var Deflate_1 = Deflate;
var deflate_1 = deflate;
var deflateRaw_1 = deflateRaw;
var gzip_1 = gzip;
var Inflate_1 = Inflate;
var inflate_1 = inflate;
var inflateRaw_1 = inflateRaw;
var ungzip_1 = ungzip;
var constants_1 = constants$2;
var pako = {
  Deflate: Deflate_1,
  deflate: deflate_1,
  deflateRaw: deflateRaw_1,
  gzip: gzip_1,
  Inflate: Inflate_1,
  inflate: inflate_1,
  inflateRaw: inflateRaw_1,
  ungzip: ungzip_1,
  constants: constants_1
};

// src/BufferStream.js
function toInt(val) {
  if (isNaN(val)) {
    throw new Error("Not a number: " + val);
  } else if (typeof val == "string") {
    return parseInt(val);
  } else
    return val;
}
function toFloat(val) {
  if (isNaN(val)) {
    if (val instanceof ArrayBuffer) {
      if (val.byteLength > 0) {
        try {
          var view = new DataView(val);
          var intValue = view.getInt32(0);
          var floatValue = parseFloat(intValue);
          console.warn(val, " converted to ", floatValue);
          return floatValue;
        } catch (error) {
          console.error("Error in ArrayBuffer (int -> float)", error);
        }
      } else {
        console.warn("Empty ArrayBuffer", val);
        return 0;
      }
    } else {
      console.warn("toFloat val", val, typeof val);
      throw new Error("Not a number: " + val);
    }
  } else if (typeof val == "string") {
    return parseFloat(val);
  } else
    return val;
}
var BufferStream = class {
  constructor(sizeOrBuffer, littleEndian) {
    this.buffer = typeof sizeOrBuffer == "number" ? new ArrayBuffer(sizeOrBuffer) : sizeOrBuffer;
    if (!this.buffer) {
      this.buffer = new ArrayBuffer(0);
    }
    this.view = new DataView(this.buffer);
    this.offset = 0;
    this.isLittleEndian = littleEndian || false;
    this.size = 0;
    this.encoder = new TextEncoder("utf-8");
  }
  setEndian(isLittle) {
    this.isLittleEndian = isLittle;
  }
  writeUint8(value) {
    this.checkSize(1);
    this.view.setUint8(this.offset, toInt(value));
    return this.increment(1);
  }
  writeUint8Repeat(value, count) {
    const v2 = toInt(value);
    this.checkSize(count);
    for (let i = 0; i < count; i++) {
      this.view.setUint8(this.offset + i, v2);
    }
    return this.increment(count);
  }
  writeInt8(value) {
    this.checkSize(1);
    this.view.setInt8(this.offset, toInt(value));
    return this.increment(1);
  }
  writeUint16(value) {
    if (value instanceof ArrayBuffer) {
      if (value.byteLength < 4 && value.byteLength == 2) {
        var view = new DataView(value);
        try {
          var intValue = view.getUint16(0);
          value = intValue;
        } catch (error) {
          console.error("error in converting ArrayBuffer to int", error);
        }
      }
    }
    this.checkSize(2);
    this.view.setUint16(this.offset, toInt(value), this.isLittleEndian);
    return this.increment(2);
  }
  writeTwoUint16s(value) {
    this.checkSize(4);
    const first = value >> 16;
    const second = value & 65535;
    this.view.setUint16(this.offset, toInt(first), this.isLittleEndian);
    this.view.setUint16(this.offset + 2, toInt(second), this.isLittleEndian);
    return this.increment(4);
  }
  writeInt16(value) {
    this.checkSize(2);
    this.view.setInt16(this.offset, toInt(value), this.isLittleEndian);
    return this.increment(2);
  }
  writeUint32(value) {
    this.checkSize(4);
    this.view.setUint32(this.offset, toInt(value), this.isLittleEndian);
    return this.increment(4);
  }
  writeInt32(value) {
    this.checkSize(4);
    this.view.setInt32(this.offset, toInt(value), this.isLittleEndian);
    return this.increment(4);
  }
  writeFloat(value) {
    this.checkSize(4);
    this.view.setFloat32(this.offset, toFloat(value), this.isLittleEndian);
    return this.increment(4);
  }
  writeDouble(value) {
    this.checkSize(8);
    this.view.setFloat64(this.offset, toFloat(value), this.isLittleEndian);
    return this.increment(8);
  }
  writeUTF8String(value) {
    const encodedString = this.encoder.encode(value);
    this.checkSize(encodedString.byteLength);
    new Uint8Array(this.buffer).set(encodedString, this.offset);
    return this.increment(encodedString.byteLength);
  }
  writeAsciiString(value) {
    value = value || "";
    var len = value.length;
    this.checkSize(len);
    var startOffset = this.offset;
    for (let i = 0; i < len; i++) {
      var charcode = value.charCodeAt(i);
      this.view.setUint8(startOffset + i, charcode);
    }
    return this.increment(len);
  }
  readUint32() {
    var val = this.view.getUint32(this.offset, this.isLittleEndian);
    this.increment(4);
    return val;
  }
  readUint16() {
    var val = this.view.getUint16(this.offset, this.isLittleEndian);
    this.increment(2);
    return val;
  }
  readUint8() {
    var val = this.view.getUint8(this.offset);
    this.increment(1);
    return val;
  }
  peekUint8(offset) {
    return this.view.getUint8(this.offset + offset);
  }
  readUint8Array(length) {
    var arr = new Uint8Array(this.buffer, this.offset, length);
    this.increment(length);
    return arr;
  }
  readUint16Array(length) {
    var sixlen = length / 2, arr = new Uint16Array(sixlen), i = 0;
    while (i++ < sixlen) {
      arr[i] = this.view.getUint16(this.offset, this.isLittleEndian);
      this.offset += 2;
    }
    return arr;
  }
  readInt16() {
    var val = this.view.getInt16(this.offset, this.isLittleEndian);
    this.increment(2);
    return val;
  }
  readInt32() {
    var val = this.view.getInt32(this.offset, this.isLittleEndian);
    this.increment(4);
    return val;
  }
  readFloat() {
    var val = this.view.getFloat32(this.offset, this.isLittleEndian);
    this.increment(4);
    return val;
  }
  readDouble() {
    var val = this.view.getFloat64(this.offset, this.isLittleEndian);
    this.increment(8);
    return val;
  }
  readAsciiString(length) {
    var result = "";
    var start = this.offset;
    var end = this.offset + length;
    if (end >= this.buffer.byteLength) {
      end = this.buffer.byteLength;
    }
    for (let i = start; i < end; ++i) {
      result += String.fromCharCode(this.view.getUint8(i));
    }
    this.increment(end - start);
    return result;
  }
  readVR() {
    var vr = String.fromCharCode(this.view.getUint8(this.offset)) + String.fromCharCode(this.view.getUint8(this.offset + 1));
    this.increment(2);
    return vr;
  }
  readEncodedString(length) {
    if (this.offset + length >= this.buffer.byteLength) {
      length = this.buffer.byteLength - this.offset;
    }
    const view = new DataView(this.buffer, this.offset, length);
    const result = this.decoder.decode(view);
    this.increment(length);
    return result;
  }
  readHex(length) {
    var hexString = "";
    for (var i = 0; i < length; i++) {
      hexString += this.readUint8().toString(16);
    }
    return hexString;
  }
  checkSize(step) {
    if (this.offset + step > this.buffer.byteLength) {
      var dstSize = this.offset + step + this.buffer.byteLength;
      var dst = new ArrayBuffer(dstSize);
      new Uint8Array(dst).set(new Uint8Array(this.buffer));
      this.buffer = dst;
      this.view = new DataView(this.buffer);
    }
  }
  concat(stream) {
    var available = this.buffer.byteLength - this.offset;
    if (stream.size > available) {
      let newbuf = new ArrayBuffer(this.offset + stream.size);
      let int8 = new Uint8Array(newbuf);
      int8.set(new Uint8Array(this.getBuffer(0, this.offset)));
      int8.set(new Uint8Array(stream.getBuffer(0, stream.size)), this.offset);
      this.buffer = newbuf;
      this.view = new DataView(this.buffer);
    } else {
      let int8 = new Uint8Array(this.buffer);
      int8.set(new Uint8Array(stream.getBuffer(0, stream.size)), this.offset);
    }
    this.offset += stream.size;
    this.size = this.offset;
    return this.buffer.byteLength;
  }
  increment(step) {
    this.offset += step;
    if (this.offset > this.size) {
      this.size = this.offset;
    }
    return step;
  }
  getBuffer(start, end) {
    if (!start && !end) {
      start = 0;
      end = this.size;
    }
    return this.buffer.slice(start, end);
  }
  more(length) {
    if (this.offset + length > this.endOffset) {
      throw new Error("Request more than currently allocated buffer");
    }
    const newBuf = new ReadBufferStream(this.buffer, null, {
      start: this.offset,
      stop: this.offset + length
    });
    this.increment(length);
    return newBuf;
  }
  reset() {
    this.offset = 0;
    return this;
  }
  end() {
    return this.offset >= this.buffer.byteLength;
  }
  toEnd() {
    this.offset = this.buffer.byteLength;
  }
};
var ReadBufferStream = class extends BufferStream {
  constructor(buffer, littleEndian, options = {
    start: null,
    stop: null,
    noCopy: false
  }) {
    super(buffer, littleEndian);
    this.offset = options.start || 0;
    this.size = options.stop || this.buffer.byteLength;
    this.noCopy = options.noCopy;
    this.startOffset = this.offset;
    this.endOffset = this.size;
    this.decoder = new TextDecoder("latin1");
  }
  setDecoder(decoder) {
    this.decoder = decoder;
  }
  getBuffer(start, end) {
    if (this.noCopy) {
      return new Uint8Array(this.buffer, start, end - start);
    }
    if (!start && !end) {
      start = 0;
      end = this.size;
    }
    return this.buffer.slice(start, end);
  }
  reset() {
    this.offset = this.startOffset;
    return this;
  }
  end() {
    return this.offset >= this.endOffset;
  }
  toEnd() {
    this.offset = this.endOffset;
  }
  writeUint8(value) {
    throw new Error(value, "writeUint8 not implemented");
  }
  writeUint8Repeat(value, count) {
    throw new Error(value, "writeUint8Repeat not implemented");
  }
  writeInt8(value) {
    throw new Error(value, "writeInt8 not implemented");
  }
  writeUint16(value) {
    throw new Error(value, "writeUint16 not implemented");
  }
  writeTwoUint16s(value) {
    throw new Error(value, "writeTwoUint16s not implemented");
  }
  writeInt16(value) {
    throw new Error(value, "writeInt16 not implemented");
  }
  writeUint32(value) {
    throw new Error(value, "writeUint32 not implemented");
  }
  writeInt32(value) {
    throw new Error(value, "writeInt32 not implemented");
  }
  writeFloat(value) {
    throw new Error(value, "writeFloat not implemented");
  }
  writeDouble(value) {
    throw new Error(value, "writeDouble not implemented");
  }
  writeAsciiString(value) {
    throw new Error(value, "writeAsciiString not implemented");
  }
  writeUTF8String(value) {
    throw new Error(value, "writeUTF8String not implemented");
  }
  checkSize(step) {
    throw new Error(step, "checkSize not implemented");
  }
  concat(stream) {
    throw new Error(stream, "concat not implemented");
  }
};
var DeflatedReadBufferStream = class extends ReadBufferStream {
  constructor(stream, options) {
    const inflatedBuffer = pako.inflateRaw(stream.getBuffer(stream.offset, stream.size));
    super(inflatedBuffer.buffer, stream.littleEndian, options);
  }
};
var WriteBufferStream = class extends BufferStream {
  constructor(buffer, littleEndian) {
    super(buffer, littleEndian);
    this.size = 0;
  }
};

// src/constants/dicom.js
var IMPLICIT_LITTLE_ENDIAN = "1.2.840.10008.1.2";
var EXPLICIT_LITTLE_ENDIAN = "1.2.840.10008.1.2.1";
var DEFLATED_EXPLICIT_LITTLE_ENDIAN = "1.2.840.10008.1.2.1.99";
var EXPLICIT_BIG_ENDIAN = "1.2.840.10008.1.2.2";
var VM_DELIMITER = 92;
var PADDING_NULL = 0;
var PADDING_SPACE = 32;
var PN_COMPONENT_DELIMITER = 61;

// src/utilities/dicomJson.js
function pnStringToObject(value, multiple = true) {
  if (value == void 0) {
    return multiple ? [] : void 0;
  }
  if (typeof value === "string" || value instanceof String) {
    const values = value.split(String.fromCharCode(VM_DELIMITER)).filter(Boolean);
    const pnObj = values.map(function(v2) {
      const components = v2.split(String.fromCharCode(PN_COMPONENT_DELIMITER));
      return {
        ...components[0] ? {Alphabetic: components[0]} : {},
        ...components[1] ? {Ideographic: components[1]} : {},
        ...components[2] ? {Phonetic: components[2]} : {}
      };
    });
    return multiple ? pnObj : pnObj[0];
  } else {
    if (!Array.isArray(value) && multiple) {
      return [Object.assign({}, value)];
    }
    return value;
  }
}
function pnObjectToString(value) {
  if (typeof value === "string" || value instanceof String) {
    return value;
  }
  const pnDelim = String.fromCharCode(PN_COMPONENT_DELIMITER);
  if (!Array.isArray(value)) {
    value = [value];
  }
  return value.filter(Boolean).map(function(v2) {
    var _a, _b, _c;
    if (v2 === void 0 || typeof v2 === "string" || v2 instanceof String) {
      return v2;
    }
    return [(_a = v2.Alphabetic) != null ? _a : "", (_b = v2.Ideographic) != null ? _b : "", (_c = v2.Phonetic) != null ? _c : ""].join(pnDelim).replace(new RegExp(`${pnDelim}*$`), "");
  }).join(String.fromCharCode(VM_DELIMITER));
}
function pnAddValueAccessors(value) {
  if (!value.__hasValueAccessors) {
    Object.defineProperty(value, "__hasValueAccessors", {value: true});
    Object.defineProperty(value, "toJSON", {
      value: function() {
        if (Array.isArray(this)) {
          return this.filter(Boolean).map((x) => pnStringToObject(x, false));
        } else {
          return pnStringToObject(this);
        }
      }
    });
    Object.defineProperty(value, "toString", {
      value: function() {
        return pnObjectToString(value);
      }
    });
  }
  return value;
}
var dicomJson = {
  pnObjectToString,
  pnConvertToJsonObject: pnStringToObject,
  pnAddValueAccessors
};
var dicomJson_default = dicomJson;

// src/dictionary.js
var dictionary = {
  "(0000,0000)": {
    tag: "(0000,0000)",
    vr: "UL",
    name: "CommandGroupLength",
    vm: "1",
    version: "DICOM"
  },
  "(0000,0002)": {
    tag: "(0000,0002)",
    vr: "UI",
    name: "AffectedSOPClassUID",
    vm: "1",
    version: "DICOM"
  },
  "(0000,0003)": {
    tag: "(0000,0003)",
    vr: "UI",
    name: "RequestedSOPClassUID",
    vm: "1",
    version: "DICOM"
  },
  "(0000,0100)": {
    tag: "(0000,0100)",
    vr: "US",
    name: "CommandField",
    vm: "1",
    version: "DICOM"
  },
  "(0000,0110)": {
    tag: "(0000,0110)",
    vr: "US",
    name: "MessageID",
    vm: "1",
    version: "DICOM"
  },
  "(0000,0120)": {
    tag: "(0000,0120)",
    vr: "US",
    name: "MessageIDBeingRespondedTo",
    vm: "1",
    version: "DICOM"
  },
  "(0000,0600)": {
    tag: "(0000,0600)",
    vr: "AE",
    name: "MoveDestination",
    vm: "1",
    version: "DICOM"
  },
  "(0000,0700)": {
    tag: "(0000,0700)",
    vr: "US",
    name: "Priority",
    vm: "1",
    version: "DICOM"
  },
  "(0000,0800)": {
    tag: "(0000,0800)",
    vr: "US",
    name: "CommandDataSetType",
    vm: "1",
    version: "DICOM"
  },
  "(0000,0900)": {
    tag: "(0000,0900)",
    vr: "US",
    name: "Status",
    vm: "1",
    version: "DICOM"
  },
  "(0000,0901)": {
    tag: "(0000,0901)",
    vr: "AT",
    name: "OffendingElement",
    vm: "1-n",
    version: "DICOM"
  },
  "(0000,0902)": {
    tag: "(0000,0902)",
    vr: "LO",
    name: "ErrorComment",
    vm: "1",
    version: "DICOM"
  },
  "(0000,0903)": {
    tag: "(0000,0903)",
    vr: "US",
    name: "ErrorID",
    vm: "1",
    version: "DICOM"
  },
  "(0000,1000)": {
    tag: "(0000,1000)",
    vr: "UI",
    name: "AffectedSOPInstanceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0000,1001)": {
    tag: "(0000,1001)",
    vr: "UI",
    name: "RequestedSOPInstanceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0000,1002)": {
    tag: "(0000,1002)",
    vr: "US",
    name: "EventTypeID",
    vm: "1",
    version: "DICOM"
  },
  "(0000,1005)": {
    tag: "(0000,1005)",
    vr: "AT",
    name: "AttributeIdentifierList",
    vm: "1-n",
    version: "DICOM"
  },
  "(0000,1008)": {
    tag: "(0000,1008)",
    vr: "US",
    name: "ActionTypeID",
    vm: "1",
    version: "DICOM"
  },
  "(0000,1020)": {
    tag: "(0000,1020)",
    vr: "US",
    name: "NumberOfRemainingSuboperations",
    vm: "1",
    version: "DICOM"
  },
  "(0000,1021)": {
    tag: "(0000,1021)",
    vr: "US",
    name: "NumberOfCompletedSuboperations",
    vm: "1",
    version: "DICOM"
  },
  "(0000,1022)": {
    tag: "(0000,1022)",
    vr: "US",
    name: "NumberOfFailedSuboperations",
    vm: "1",
    version: "DICOM"
  },
  "(0000,1023)": {
    tag: "(0000,1023)",
    vr: "US",
    name: "NumberOfWarningSuboperations",
    vm: "1",
    version: "DICOM"
  },
  "(0000,1030)": {
    tag: "(0000,1030)",
    vr: "AE",
    name: "MoveOriginatorApplicationEntityTitle",
    vm: "1",
    version: "DICOM"
  },
  "(0000,1031)": {
    tag: "(0000,1031)",
    vr: "US",
    name: "MoveOriginatorMessageID",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0000)": {
    tag: "(0002,0000)",
    vr: "UL",
    name: "FileMetaInformationGroupLength",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0001)": {
    tag: "(0002,0001)",
    vr: "OB",
    name: "FileMetaInformationVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0002)": {
    tag: "(0002,0002)",
    vr: "UI",
    name: "MediaStorageSOPClassUID",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0003)": {
    tag: "(0002,0003)",
    vr: "UI",
    name: "MediaStorageSOPInstanceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0010)": {
    tag: "(0002,0010)",
    vr: "UI",
    name: "TransferSyntaxUID",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0012)": {
    tag: "(0002,0012)",
    vr: "UI",
    name: "ImplementationClassUID",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0013)": {
    tag: "(0002,0013)",
    vr: "SH",
    name: "ImplementationVersionName",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0016)": {
    tag: "(0002,0016)",
    vr: "AE",
    name: "SourceApplicationEntityTitle",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0017)": {
    tag: "(0002,0017)",
    vr: "AE",
    name: "SendingApplicationEntityTitle",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0018)": {
    tag: "(0002,0018)",
    vr: "AE",
    name: "ReceivingApplicationEntityTitle",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0100)": {
    tag: "(0002,0100)",
    vr: "UI",
    name: "PrivateInformationCreatorUID",
    vm: "1",
    version: "DICOM"
  },
  "(0002,0102)": {
    tag: "(0002,0102)",
    vr: "OB",
    name: "PrivateInformation",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1130)": {
    tag: "(0004,1130)",
    vr: "CS",
    name: "FileSetID",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1141)": {
    tag: "(0004,1141)",
    vr: "CS",
    name: "FileSetDescriptorFileID",
    vm: "1-8",
    version: "DICOM"
  },
  "(0004,1142)": {
    tag: "(0004,1142)",
    vr: "CS",
    name: "SpecificCharacterSetOfFileSetDescriptorFile",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1200)": {
    tag: "(0004,1200)",
    vr: "up",
    name: "OffsetOfTheFirstDirectoryRecordOfTheRootDirectoryEntity",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1202)": {
    tag: "(0004,1202)",
    vr: "up",
    name: "OffsetOfTheLastDirectoryRecordOfTheRootDirectoryEntity",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1212)": {
    tag: "(0004,1212)",
    vr: "US",
    name: "FileSetConsistencyFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1220)": {
    tag: "(0004,1220)",
    vr: "SQ",
    name: "DirectoryRecordSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1400)": {
    tag: "(0004,1400)",
    vr: "up",
    name: "OffsetOfTheNextDirectoryRecord",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1410)": {
    tag: "(0004,1410)",
    vr: "US",
    name: "RecordInUseFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1420)": {
    tag: "(0004,1420)",
    vr: "up",
    name: "OffsetOfReferencedLowerLevelDirectoryEntity",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1430)": {
    tag: "(0004,1430)",
    vr: "CS",
    name: "DirectoryRecordType",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1432)": {
    tag: "(0004,1432)",
    vr: "UI",
    name: "PrivateRecordUID",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1500)": {
    tag: "(0004,1500)",
    vr: "CS",
    name: "ReferencedFileID",
    vm: "1-8",
    version: "DICOM"
  },
  "(0004,1510)": {
    tag: "(0004,1510)",
    vr: "UI",
    name: "ReferencedSOPClassUIDInFile",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1511)": {
    tag: "(0004,1511)",
    vr: "UI",
    name: "ReferencedSOPInstanceUIDInFile",
    vm: "1",
    version: "DICOM"
  },
  "(0004,1512)": {
    tag: "(0004,1512)",
    vr: "UI",
    name: "ReferencedTransferSyntaxUIDInFile",
    vm: "1",
    version: "DICOM"
  },
  "(0004,151A)": {
    tag: "(0004,151A)",
    vr: "UI",
    name: "ReferencedRelatedGeneralSOPClassUIDInFile",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,0005)": {
    tag: "(0008,0005)",
    vr: "CS",
    name: "SpecificCharacterSet",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,0006)": {
    tag: "(0008,0006)",
    vr: "SQ",
    name: "LanguageCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0008)": {
    tag: "(0008,0008)",
    vr: "CS",
    name: "ImageType",
    vm: "2-n",
    version: "DICOM"
  },
  "(0008,0012)": {
    tag: "(0008,0012)",
    vr: "DA",
    name: "InstanceCreationDate",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0013)": {
    tag: "(0008,0013)",
    vr: "TM",
    name: "InstanceCreationTime",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0014)": {
    tag: "(0008,0014)",
    vr: "UI",
    name: "InstanceCreatorUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0015)": {
    tag: "(0008,0015)",
    vr: "DT",
    name: "InstanceCoercionDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0016)": {
    tag: "(0008,0016)",
    vr: "UI",
    name: "SOPClassUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0018)": {
    tag: "(0008,0018)",
    vr: "UI",
    name: "SOPInstanceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,001A)": {
    tag: "(0008,001A)",
    vr: "UI",
    name: "RelatedGeneralSOPClassUID",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,001B)": {
    tag: "(0008,001B)",
    vr: "UI",
    name: "OriginalSpecializedSOPClassUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0020)": {
    tag: "(0008,0020)",
    vr: "DA",
    name: "StudyDate",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0021)": {
    tag: "(0008,0021)",
    vr: "DA",
    name: "SeriesDate",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0022)": {
    tag: "(0008,0022)",
    vr: "DA",
    name: "AcquisitionDate",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0023)": {
    tag: "(0008,0023)",
    vr: "DA",
    name: "ContentDate",
    vm: "1",
    version: "DICOM"
  },
  "(0008,002A)": {
    tag: "(0008,002A)",
    vr: "DT",
    name: "AcquisitionDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0030)": {
    tag: "(0008,0030)",
    vr: "TM",
    name: "StudyTime",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0031)": {
    tag: "(0008,0031)",
    vr: "TM",
    name: "SeriesTime",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0032)": {
    tag: "(0008,0032)",
    vr: "TM",
    name: "AcquisitionTime",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0033)": {
    tag: "(0008,0033)",
    vr: "TM",
    name: "ContentTime",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0050)": {
    tag: "(0008,0050)",
    vr: "SH",
    name: "AccessionNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0051)": {
    tag: "(0008,0051)",
    vr: "SQ",
    name: "IssuerOfAccessionNumberSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0052)": {
    tag: "(0008,0052)",
    vr: "CS",
    name: "QueryRetrieveLevel",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0053)": {
    tag: "(0008,0053)",
    vr: "CS",
    name: "QueryRetrieveView",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0054)": {
    tag: "(0008,0054)",
    vr: "AE",
    name: "RetrieveAETitle",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,0055)": {
    tag: "(0008,0055)",
    vr: "AE",
    name: "StationAETitle",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0056)": {
    tag: "(0008,0056)",
    vr: "CS",
    name: "InstanceAvailability",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0058)": {
    tag: "(0008,0058)",
    vr: "UI",
    name: "FailedSOPInstanceUIDList",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,0060)": {
    tag: "(0008,0060)",
    vr: "CS",
    name: "Modality",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0061)": {
    tag: "(0008,0061)",
    vr: "CS",
    name: "ModalitiesInStudy",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,0062)": {
    tag: "(0008,0062)",
    vr: "UI",
    name: "SOPClassesInStudy",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,0063)": {
    tag: "(0008,0063)",
    vr: "SQ",
    name: "AnatomicRegionsInStudyCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0064)": {
    tag: "(0008,0064)",
    vr: "CS",
    name: "ConversionType",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0068)": {
    tag: "(0008,0068)",
    vr: "CS",
    name: "PresentationIntentType",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0070)": {
    tag: "(0008,0070)",
    vr: "LO",
    name: "Manufacturer",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0080)": {
    tag: "(0008,0080)",
    vr: "LO",
    name: "InstitutionName",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0081)": {
    tag: "(0008,0081)",
    vr: "ST",
    name: "InstitutionAddress",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0082)": {
    tag: "(0008,0082)",
    vr: "SQ",
    name: "InstitutionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0090)": {
    tag: "(0008,0090)",
    vr: "PN",
    name: "ReferringPhysicianName",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0092)": {
    tag: "(0008,0092)",
    vr: "ST",
    name: "ReferringPhysicianAddress",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0094)": {
    tag: "(0008,0094)",
    vr: "SH",
    name: "ReferringPhysicianTelephoneNumbers",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,0096)": {
    tag: "(0008,0096)",
    vr: "SQ",
    name: "ReferringPhysicianIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,009C)": {
    tag: "(0008,009C)",
    vr: "PN",
    name: "ConsultingPhysicianName",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,009D)": {
    tag: "(0008,009D)",
    vr: "SQ",
    name: "ConsultingPhysicianIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0100)": {
    tag: "(0008,0100)",
    vr: "SH",
    name: "CodeValue",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0101)": {
    tag: "(0008,0101)",
    vr: "LO",
    name: "ExtendedCodeValue",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(0008,0102)": {
    tag: "(0008,0102)",
    vr: "SH",
    name: "CodingSchemeDesignator",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0103)": {
    tag: "(0008,0103)",
    vr: "SH",
    name: "CodingSchemeVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0104)": {
    tag: "(0008,0104)",
    vr: "LO",
    name: "CodeMeaning",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0105)": {
    tag: "(0008,0105)",
    vr: "CS",
    name: "MappingResource",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0106)": {
    tag: "(0008,0106)",
    vr: "DT",
    name: "ContextGroupVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0107)": {
    tag: "(0008,0107)",
    vr: "DT",
    name: "ContextGroupLocalVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0108)": {
    tag: "(0008,0108)",
    vr: "LT",
    name: "ExtendedCodeMeaning",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(0008,0109)": {
    tag: "(0008,0109)",
    vr: "SQ",
    name: "CodingSchemeResourcesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,010A)": {
    tag: "(0008,010A)",
    vr: "CS",
    name: "CodingSchemeURLType",
    vm: "1",
    version: "DICOM"
  },
  "(0008,010B)": {
    tag: "(0008,010B)",
    vr: "CS",
    name: "ContextGroupExtensionFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0008,010C)": {
    tag: "(0008,010C)",
    vr: "UI",
    name: "CodingSchemeUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,010D)": {
    tag: "(0008,010D)",
    vr: "UI",
    name: "ContextGroupExtensionCreatorUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,010E)": {
    tag: "(0008,010E)",
    vr: "UR",
    name: "CodingSchemeURL",
    vm: "1",
    version: "DICOM"
  },
  "(0008,010F)": {
    tag: "(0008,010F)",
    vr: "CS",
    name: "ContextIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0110)": {
    tag: "(0008,0110)",
    vr: "SQ",
    name: "CodingSchemeIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0112)": {
    tag: "(0008,0112)",
    vr: "LO",
    name: "CodingSchemeRegistry",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0114)": {
    tag: "(0008,0114)",
    vr: "ST",
    name: "CodingSchemeExternalID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0115)": {
    tag: "(0008,0115)",
    vr: "ST",
    name: "CodingSchemeName",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0116)": {
    tag: "(0008,0116)",
    vr: "ST",
    name: "CodingSchemeResponsibleOrganization",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0117)": {
    tag: "(0008,0117)",
    vr: "UI",
    name: "ContextUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0118)": {
    tag: "(0008,0118)",
    vr: "UI",
    name: "MappingResourceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0119)": {
    tag: "(0008,0119)",
    vr: "UC",
    name: "LongCodeValue",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0120)": {
    tag: "(0008,0120)",
    vr: "UR",
    name: "URNCodeValue",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0121)": {
    tag: "(0008,0121)",
    vr: "SQ",
    name: "EquivalentCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0122)": {
    tag: "(0008,0122)",
    vr: "LO",
    name: "MappingResourceName",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0123)": {
    tag: "(0008,0123)",
    vr: "SQ",
    name: "ContextGroupIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0124)": {
    tag: "(0008,0124)",
    vr: "SQ",
    name: "MappingResourceIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0201)": {
    tag: "(0008,0201)",
    vr: "SH",
    name: "TimezoneOffsetFromUTC",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0220)": {
    tag: "(0008,0220)",
    vr: "SQ",
    name: "ResponsibleGroupCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0221)": {
    tag: "(0008,0221)",
    vr: "CS",
    name: "EquipmentModality",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0222)": {
    tag: "(0008,0222)",
    vr: "LO",
    name: "ManufacturerRelatedModelGroup",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0300)": {
    tag: "(0008,0300)",
    vr: "SQ",
    name: "PrivateDataElementCharacteristicsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0301)": {
    tag: "(0008,0301)",
    vr: "US",
    name: "PrivateGroupReference",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0302)": {
    tag: "(0008,0302)",
    vr: "LO",
    name: "PrivateCreatorReference",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0303)": {
    tag: "(0008,0303)",
    vr: "CS",
    name: "BlockIdentifyingInformationStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0304)": {
    tag: "(0008,0304)",
    vr: "US",
    name: "NonidentifyingPrivateElements",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,0305)": {
    tag: "(0008,0305)",
    vr: "SQ",
    name: "DeidentificationActionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0306)": {
    tag: "(0008,0306)",
    vr: "US",
    name: "IdentifyingPrivateElements",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,0307)": {
    tag: "(0008,0307)",
    vr: "CS",
    name: "DeidentificationAction",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0308)": {
    tag: "(0008,0308)",
    vr: "US",
    name: "PrivateDataElement",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0309)": {
    tag: "(0008,0309)",
    vr: "UL",
    name: "PrivateDataElementValueMultiplicity",
    vm: "1-3",
    version: "DICOM"
  },
  "(0008,030A)": {
    tag: "(0008,030A)",
    vr: "CS",
    name: "PrivateDataElementValueRepresentation",
    vm: "1",
    version: "DICOM"
  },
  "(0008,030B)": {
    tag: "(0008,030B)",
    vr: "UL",
    name: "PrivateDataElementNumberOfItems",
    vm: "1-2",
    version: "DICOM"
  },
  "(0008,030C)": {
    tag: "(0008,030C)",
    vr: "UC",
    name: "PrivateDataElementName",
    vm: "1",
    version: "DICOM"
  },
  "(0008,030D)": {
    tag: "(0008,030D)",
    vr: "UC",
    name: "PrivateDataElementKeyword",
    vm: "1",
    version: "DICOM"
  },
  "(0008,030E)": {
    tag: "(0008,030E)",
    vr: "UT",
    name: "PrivateDataElementDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0008,030F)": {
    tag: "(0008,030F)",
    vr: "UT",
    name: "PrivateDataElementEncoding",
    vm: "1",
    version: "DICOM"
  },
  "(0008,0310)": {
    tag: "(0008,0310)",
    vr: "SQ",
    name: "PrivateDataElementDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1010)": {
    tag: "(0008,1010)",
    vr: "SH",
    name: "StationName",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1030)": {
    tag: "(0008,1030)",
    vr: "LO",
    name: "StudyDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1032)": {
    tag: "(0008,1032)",
    vr: "SQ",
    name: "ProcedureCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,103E)": {
    tag: "(0008,103E)",
    vr: "LO",
    name: "SeriesDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0008,103F)": {
    tag: "(0008,103F)",
    vr: "SQ",
    name: "SeriesDescriptionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1040)": {
    tag: "(0008,1040)",
    vr: "LO",
    name: "InstitutionalDepartmentName",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1041)": {
    tag: "(0008,1041)",
    vr: "SQ",
    name: "InstitutionalDepartmentTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1048)": {
    tag: "(0008,1048)",
    vr: "PN",
    name: "PhysiciansOfRecord",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,1049)": {
    tag: "(0008,1049)",
    vr: "SQ",
    name: "PhysiciansOfRecordIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1050)": {
    tag: "(0008,1050)",
    vr: "PN",
    name: "PerformingPhysicianName",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,1052)": {
    tag: "(0008,1052)",
    vr: "SQ",
    name: "PerformingPhysicianIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1060)": {
    tag: "(0008,1060)",
    vr: "PN",
    name: "NameOfPhysiciansReadingStudy",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,1062)": {
    tag: "(0008,1062)",
    vr: "SQ",
    name: "PhysiciansReadingStudyIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1070)": {
    tag: "(0008,1070)",
    vr: "PN",
    name: "OperatorsName",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,1072)": {
    tag: "(0008,1072)",
    vr: "SQ",
    name: "OperatorIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1080)": {
    tag: "(0008,1080)",
    vr: "LO",
    name: "AdmittingDiagnosesDescription",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,1084)": {
    tag: "(0008,1084)",
    vr: "SQ",
    name: "AdmittingDiagnosesCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1090)": {
    tag: "(0008,1090)",
    vr: "LO",
    name: "ManufacturerModelName",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1110)": {
    tag: "(0008,1110)",
    vr: "SQ",
    name: "ReferencedStudySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1111)": {
    tag: "(0008,1111)",
    vr: "SQ",
    name: "ReferencedPerformedProcedureStepSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1115)": {
    tag: "(0008,1115)",
    vr: "SQ",
    name: "ReferencedSeriesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1120)": {
    tag: "(0008,1120)",
    vr: "SQ",
    name: "ReferencedPatientSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1125)": {
    tag: "(0008,1125)",
    vr: "SQ",
    name: "ReferencedVisitSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1134)": {
    tag: "(0008,1134)",
    vr: "SQ",
    name: "ReferencedStereometricInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,113A)": {
    tag: "(0008,113A)",
    vr: "SQ",
    name: "ReferencedWaveformSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1140)": {
    tag: "(0008,1140)",
    vr: "SQ",
    name: "ReferencedImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,114A)": {
    tag: "(0008,114A)",
    vr: "SQ",
    name: "ReferencedInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,114B)": {
    tag: "(0008,114B)",
    vr: "SQ",
    name: "ReferencedRealWorldValueMappingInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1150)": {
    tag: "(0008,1150)",
    vr: "UI",
    name: "ReferencedSOPClassUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1155)": {
    tag: "(0008,1155)",
    vr: "UI",
    name: "ReferencedSOPInstanceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1156)": {
    tag: "(0008,1156)",
    vr: "SQ",
    name: "DefinitionSourceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,115A)": {
    tag: "(0008,115A)",
    vr: "UI",
    name: "SOPClassesSupported",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,1160)": {
    tag: "(0008,1160)",
    vr: "IS",
    name: "ReferencedFrameNumber",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,1161)": {
    tag: "(0008,1161)",
    vr: "UL",
    name: "SimpleFrameList",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,1162)": {
    tag: "(0008,1162)",
    vr: "UL",
    name: "CalculatedFrameList",
    vm: "3-3n",
    version: "DICOM"
  },
  "(0008,1163)": {
    tag: "(0008,1163)",
    vr: "FD",
    name: "TimeRange",
    vm: "2",
    version: "DICOM"
  },
  "(0008,1164)": {
    tag: "(0008,1164)",
    vr: "SQ",
    name: "FrameExtractionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1167)": {
    tag: "(0008,1167)",
    vr: "UI",
    name: "MultiFrameSourceSOPInstanceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1190)": {
    tag: "(0008,1190)",
    vr: "UR",
    name: "RetrieveURL",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1195)": {
    tag: "(0008,1195)",
    vr: "UI",
    name: "TransactionUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1196)": {
    tag: "(0008,1196)",
    vr: "US",
    name: "WarningReason",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1197)": {
    tag: "(0008,1197)",
    vr: "US",
    name: "FailureReason",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1198)": {
    tag: "(0008,1198)",
    vr: "SQ",
    name: "FailedSOPSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1199)": {
    tag: "(0008,1199)",
    vr: "SQ",
    name: "ReferencedSOPSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,119A)": {
    tag: "(0008,119A)",
    vr: "SQ",
    name: "OtherFailuresSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1200)": {
    tag: "(0008,1200)",
    vr: "SQ",
    name: "StudiesContainingOtherReferencedInstancesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,1250)": {
    tag: "(0008,1250)",
    vr: "SQ",
    name: "RelatedSeriesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2111)": {
    tag: "(0008,2111)",
    vr: "ST",
    name: "DerivationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2112)": {
    tag: "(0008,2112)",
    vr: "SQ",
    name: "SourceImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2120)": {
    tag: "(0008,2120)",
    vr: "SH",
    name: "StageName",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2122)": {
    tag: "(0008,2122)",
    vr: "IS",
    name: "StageNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2124)": {
    tag: "(0008,2124)",
    vr: "IS",
    name: "NumberOfStages",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2127)": {
    tag: "(0008,2127)",
    vr: "SH",
    name: "ViewName",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2128)": {
    tag: "(0008,2128)",
    vr: "IS",
    name: "ViewNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2129)": {
    tag: "(0008,2129)",
    vr: "IS",
    name: "NumberOfEventTimers",
    vm: "1",
    version: "DICOM"
  },
  "(0008,212A)": {
    tag: "(0008,212A)",
    vr: "IS",
    name: "NumberOfViewsInStage",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2130)": {
    tag: "(0008,2130)",
    vr: "DS",
    name: "EventElapsedTimes",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,2132)": {
    tag: "(0008,2132)",
    vr: "LO",
    name: "EventTimerNames",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,2133)": {
    tag: "(0008,2133)",
    vr: "SQ",
    name: "EventTimerSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2134)": {
    tag: "(0008,2134)",
    vr: "FD",
    name: "EventTimeOffset",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2135)": {
    tag: "(0008,2135)",
    vr: "SQ",
    name: "EventCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2142)": {
    tag: "(0008,2142)",
    vr: "IS",
    name: "StartTrim",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2143)": {
    tag: "(0008,2143)",
    vr: "IS",
    name: "StopTrim",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2144)": {
    tag: "(0008,2144)",
    vr: "IS",
    name: "RecommendedDisplayFrameRate",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2218)": {
    tag: "(0008,2218)",
    vr: "SQ",
    name: "AnatomicRegionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2220)": {
    tag: "(0008,2220)",
    vr: "SQ",
    name: "AnatomicRegionModifierSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2228)": {
    tag: "(0008,2228)",
    vr: "SQ",
    name: "PrimaryAnatomicStructureSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2229)": {
    tag: "(0008,2229)",
    vr: "SQ",
    name: "AnatomicStructureSpaceOrRegionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,2230)": {
    tag: "(0008,2230)",
    vr: "SQ",
    name: "PrimaryAnatomicStructureModifierSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,3001)": {
    tag: "(0008,3001)",
    vr: "SQ",
    name: "AlternateRepresentationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,3002)": {
    tag: "(0008,3002)",
    vr: "UI",
    name: "AvailableTransferSyntaxUID",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,3010)": {
    tag: "(0008,3010)",
    vr: "UI",
    name: "IrradiationEventUID",
    vm: "1-n",
    version: "DICOM"
  },
  "(0008,3011)": {
    tag: "(0008,3011)",
    vr: "SQ",
    name: "SourceIrradiationEventSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,3012)": {
    tag: "(0008,3012)",
    vr: "UI",
    name: "RadiopharmaceuticalAdministrationEventUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9007)": {
    tag: "(0008,9007)",
    vr: "CS",
    name: "FrameType",
    vm: "4",
    version: "DICOM"
  },
  "(0008,9092)": {
    tag: "(0008,9092)",
    vr: "SQ",
    name: "ReferencedImageEvidenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9121)": {
    tag: "(0008,9121)",
    vr: "SQ",
    name: "ReferencedRawDataSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9123)": {
    tag: "(0008,9123)",
    vr: "UI",
    name: "CreatorVersionUID",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9124)": {
    tag: "(0008,9124)",
    vr: "SQ",
    name: "DerivationImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9154)": {
    tag: "(0008,9154)",
    vr: "SQ",
    name: "SourceImageEvidenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9205)": {
    tag: "(0008,9205)",
    vr: "CS",
    name: "PixelPresentation",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9206)": {
    tag: "(0008,9206)",
    vr: "CS",
    name: "VolumetricProperties",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9207)": {
    tag: "(0008,9207)",
    vr: "CS",
    name: "VolumeBasedCalculationTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9208)": {
    tag: "(0008,9208)",
    vr: "CS",
    name: "ComplexImageComponent",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9209)": {
    tag: "(0008,9209)",
    vr: "CS",
    name: "AcquisitionContrast",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9215)": {
    tag: "(0008,9215)",
    vr: "SQ",
    name: "DerivationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9237)": {
    tag: "(0008,9237)",
    vr: "SQ",
    name: "ReferencedPresentationStateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9410)": {
    tag: "(0008,9410)",
    vr: "SQ",
    name: "ReferencedOtherPlaneSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9458)": {
    tag: "(0008,9458)",
    vr: "SQ",
    name: "FrameDisplaySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9459)": {
    tag: "(0008,9459)",
    vr: "FL",
    name: "RecommendedDisplayFrameRateInFloat",
    vm: "1",
    version: "DICOM"
  },
  "(0008,9460)": {
    tag: "(0008,9460)",
    vr: "CS",
    name: "SkipFrameRangeFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0010)": {
    tag: "(0010,0010)",
    vr: "PN",
    name: "PatientName",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0020)": {
    tag: "(0010,0020)",
    vr: "LO",
    name: "PatientID",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0021)": {
    tag: "(0010,0021)",
    vr: "LO",
    name: "IssuerOfPatientID",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0022)": {
    tag: "(0010,0022)",
    vr: "CS",
    name: "TypeOfPatientID",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0024)": {
    tag: "(0010,0024)",
    vr: "SQ",
    name: "IssuerOfPatientIDQualifiersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0026)": {
    tag: "(0010,0026)",
    vr: "SQ",
    name: "SourcePatientGroupIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0027)": {
    tag: "(0010,0027)",
    vr: "SQ",
    name: "GroupOfPatientsIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0028)": {
    tag: "(0010,0028)",
    vr: "US",
    name: "SubjectRelativePositionInImage",
    vm: "3",
    version: "DICOM"
  },
  "(0010,0030)": {
    tag: "(0010,0030)",
    vr: "DA",
    name: "PatientBirthDate",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0032)": {
    tag: "(0010,0032)",
    vr: "TM",
    name: "PatientBirthTime",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0033)": {
    tag: "(0010,0033)",
    vr: "LO",
    name: "PatientBirthDateInAlternativeCalendar",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0034)": {
    tag: "(0010,0034)",
    vr: "LO",
    name: "PatientDeathDateInAlternativeCalendar",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0035)": {
    tag: "(0010,0035)",
    vr: "CS",
    name: "PatientAlternativeCalendar",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0040)": {
    tag: "(0010,0040)",
    vr: "CS",
    name: "PatientSex",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0050)": {
    tag: "(0010,0050)",
    vr: "SQ",
    name: "PatientInsurancePlanCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0101)": {
    tag: "(0010,0101)",
    vr: "SQ",
    name: "PatientPrimaryLanguageCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0102)": {
    tag: "(0010,0102)",
    vr: "SQ",
    name: "PatientPrimaryLanguageModifierCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0200)": {
    tag: "(0010,0200)",
    vr: "CS",
    name: "QualityControlSubject",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0201)": {
    tag: "(0010,0201)",
    vr: "SQ",
    name: "QualityControlSubjectTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0212)": {
    tag: "(0010,0212)",
    vr: "UC",
    name: "StrainDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0213)": {
    tag: "(0010,0213)",
    vr: "LO",
    name: "StrainNomenclature",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0214)": {
    tag: "(0010,0214)",
    vr: "LO",
    name: "StrainStockNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0215)": {
    tag: "(0010,0215)",
    vr: "SQ",
    name: "StrainSourceRegistryCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0216)": {
    tag: "(0010,0216)",
    vr: "SQ",
    name: "StrainStockSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0217)": {
    tag: "(0010,0217)",
    vr: "LO",
    name: "StrainSource",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0218)": {
    tag: "(0010,0218)",
    vr: "UT",
    name: "StrainAdditionalInformation",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0219)": {
    tag: "(0010,0219)",
    vr: "SQ",
    name: "StrainCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0221)": {
    tag: "(0010,0221)",
    vr: "SQ",
    name: "GeneticModificationsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0222)": {
    tag: "(0010,0222)",
    vr: "UC",
    name: "GeneticModificationsDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0223)": {
    tag: "(0010,0223)",
    vr: "LO",
    name: "GeneticModificationsNomenclature",
    vm: "1",
    version: "DICOM"
  },
  "(0010,0229)": {
    tag: "(0010,0229)",
    vr: "SQ",
    name: "GeneticModificationsCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1000)": {
    tag: "(0010,1000)",
    vr: "LO",
    name: "OtherPatientIDs",
    vm: "1-n",
    version: "DICOM"
  },
  "(0010,1001)": {
    tag: "(0010,1001)",
    vr: "PN",
    name: "OtherPatientNames",
    vm: "1-n",
    version: "DICOM"
  },
  "(0010,1002)": {
    tag: "(0010,1002)",
    vr: "SQ",
    name: "OtherPatientIDsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1005)": {
    tag: "(0010,1005)",
    vr: "PN",
    name: "PatientBirthName",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1010)": {
    tag: "(0010,1010)",
    vr: "AS",
    name: "PatientAge",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1020)": {
    tag: "(0010,1020)",
    vr: "DS",
    name: "PatientSize",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1021)": {
    tag: "(0010,1021)",
    vr: "SQ",
    name: "PatientSizeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1022)": {
    tag: "(0010,1022)",
    vr: "DS",
    name: "PatientBodyMassIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1023)": {
    tag: "(0010,1023)",
    vr: "DS",
    name: "MeasuredAPDimension",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1024)": {
    tag: "(0010,1024)",
    vr: "DS",
    name: "MeasuredLateralDimension",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1030)": {
    tag: "(0010,1030)",
    vr: "DS",
    name: "PatientWeight",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1040)": {
    tag: "(0010,1040)",
    vr: "LO",
    name: "PatientAddress",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1060)": {
    tag: "(0010,1060)",
    vr: "PN",
    name: "PatientMotherBirthName",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1080)": {
    tag: "(0010,1080)",
    vr: "LO",
    name: "MilitaryRank",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1081)": {
    tag: "(0010,1081)",
    vr: "LO",
    name: "BranchOfService",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1090)": {
    tag: "(0010,1090)",
    vr: "LO",
    name: "MedicalRecordLocator",
    vm: "1",
    version: "DICOM"
  },
  "(0010,1100)": {
    tag: "(0010,1100)",
    vr: "SQ",
    name: "ReferencedPatientPhotoSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2000)": {
    tag: "(0010,2000)",
    vr: "LO",
    name: "MedicalAlerts",
    vm: "1-n",
    version: "DICOM"
  },
  "(0010,2110)": {
    tag: "(0010,2110)",
    vr: "LO",
    name: "Allergies",
    vm: "1-n",
    version: "DICOM"
  },
  "(0010,2150)": {
    tag: "(0010,2150)",
    vr: "LO",
    name: "CountryOfResidence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2152)": {
    tag: "(0010,2152)",
    vr: "LO",
    name: "RegionOfResidence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2154)": {
    tag: "(0010,2154)",
    vr: "SH",
    name: "PatientTelephoneNumbers",
    vm: "1-n",
    version: "DICOM"
  },
  "(0010,2155)": {
    tag: "(0010,2155)",
    vr: "LT",
    name: "PatientTelecomInformation",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2160)": {
    tag: "(0010,2160)",
    vr: "SH",
    name: "EthnicGroup",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2180)": {
    tag: "(0010,2180)",
    vr: "SH",
    name: "Occupation",
    vm: "1",
    version: "DICOM"
  },
  "(0010,21A0)": {
    tag: "(0010,21A0)",
    vr: "CS",
    name: "SmokingStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0010,21B0)": {
    tag: "(0010,21B0)",
    vr: "LT",
    name: "AdditionalPatientHistory",
    vm: "1",
    version: "DICOM"
  },
  "(0010,21C0)": {
    tag: "(0010,21C0)",
    vr: "US",
    name: "PregnancyStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0010,21D0)": {
    tag: "(0010,21D0)",
    vr: "DA",
    name: "LastMenstrualDate",
    vm: "1",
    version: "DICOM"
  },
  "(0010,21F0)": {
    tag: "(0010,21F0)",
    vr: "LO",
    name: "PatientReligiousPreference",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2201)": {
    tag: "(0010,2201)",
    vr: "LO",
    name: "PatientSpeciesDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2202)": {
    tag: "(0010,2202)",
    vr: "SQ",
    name: "PatientSpeciesCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2203)": {
    tag: "(0010,2203)",
    vr: "CS",
    name: "PatientSexNeutered",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2210)": {
    tag: "(0010,2210)",
    vr: "CS",
    name: "AnatomicalOrientationType",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2292)": {
    tag: "(0010,2292)",
    vr: "LO",
    name: "PatientBreedDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2293)": {
    tag: "(0010,2293)",
    vr: "SQ",
    name: "PatientBreedCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2294)": {
    tag: "(0010,2294)",
    vr: "SQ",
    name: "BreedRegistrationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2295)": {
    tag: "(0010,2295)",
    vr: "LO",
    name: "BreedRegistrationNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2296)": {
    tag: "(0010,2296)",
    vr: "SQ",
    name: "BreedRegistryCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2297)": {
    tag: "(0010,2297)",
    vr: "PN",
    name: "ResponsiblePerson",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2298)": {
    tag: "(0010,2298)",
    vr: "CS",
    name: "ResponsiblePersonRole",
    vm: "1",
    version: "DICOM"
  },
  "(0010,2299)": {
    tag: "(0010,2299)",
    vr: "LO",
    name: "ResponsibleOrganization",
    vm: "1",
    version: "DICOM"
  },
  "(0010,4000)": {
    tag: "(0010,4000)",
    vr: "LT",
    name: "PatientComments",
    vm: "1",
    version: "DICOM"
  },
  "(0010,9431)": {
    tag: "(0010,9431)",
    vr: "FL",
    name: "ExaminedBodyThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0010)": {
    tag: "(0012,0010)",
    vr: "LO",
    name: "ClinicalTrialSponsorName",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0020)": {
    tag: "(0012,0020)",
    vr: "LO",
    name: "ClinicalTrialProtocolID",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0021)": {
    tag: "(0012,0021)",
    vr: "LO",
    name: "ClinicalTrialProtocolName",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0030)": {
    tag: "(0012,0030)",
    vr: "LO",
    name: "ClinicalTrialSiteID",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0031)": {
    tag: "(0012,0031)",
    vr: "LO",
    name: "ClinicalTrialSiteName",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0040)": {
    tag: "(0012,0040)",
    vr: "LO",
    name: "ClinicalTrialSubjectID",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0042)": {
    tag: "(0012,0042)",
    vr: "LO",
    name: "ClinicalTrialSubjectReadingID",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0050)": {
    tag: "(0012,0050)",
    vr: "LO",
    name: "ClinicalTrialTimePointID",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0051)": {
    tag: "(0012,0051)",
    vr: "ST",
    name: "ClinicalTrialTimePointDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0052)": {
    tag: "(0012,0052)",
    vr: "FD",
    name: "LongitudinalTemporalOffsetFromEvent",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0053)": {
    tag: "(0012,0053)",
    vr: "CS",
    name: "LongitudinalTemporalEventType",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0060)": {
    tag: "(0012,0060)",
    vr: "LO",
    name: "ClinicalTrialCoordinatingCenterName",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0062)": {
    tag: "(0012,0062)",
    vr: "CS",
    name: "PatientIdentityRemoved",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0063)": {
    tag: "(0012,0063)",
    vr: "LO",
    name: "DeidentificationMethod",
    vm: "1-n",
    version: "DICOM"
  },
  "(0012,0064)": {
    tag: "(0012,0064)",
    vr: "SQ",
    name: "DeidentificationMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0071)": {
    tag: "(0012,0071)",
    vr: "LO",
    name: "ClinicalTrialSeriesID",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0072)": {
    tag: "(0012,0072)",
    vr: "LO",
    name: "ClinicalTrialSeriesDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0081)": {
    tag: "(0012,0081)",
    vr: "LO",
    name: "ClinicalTrialProtocolEthicsCommitteeName",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0082)": {
    tag: "(0012,0082)",
    vr: "LO",
    name: "ClinicalTrialProtocolEthicsCommitteeApprovalNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0083)": {
    tag: "(0012,0083)",
    vr: "SQ",
    name: "ConsentForClinicalTrialUseSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0084)": {
    tag: "(0012,0084)",
    vr: "CS",
    name: "DistributionType",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0085)": {
    tag: "(0012,0085)",
    vr: "CS",
    name: "ConsentForDistributionFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0014,0025)": {
    tag: "(0014,0025)",
    vr: "ST",
    name: "ComponentManufacturingProcedure",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,0028)": {
    tag: "(0014,0028)",
    vr: "ST",
    name: "ComponentManufacturer",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,0030)": {
    tag: "(0014,0030)",
    vr: "DS",
    name: "MaterialThickness",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,0032)": {
    tag: "(0014,0032)",
    vr: "DS",
    name: "MaterialPipeDiameter",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,0034)": {
    tag: "(0014,0034)",
    vr: "DS",
    name: "MaterialIsolationDiameter",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,0042)": {
    tag: "(0014,0042)",
    vr: "ST",
    name: "MaterialGrade",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,0044)": {
    tag: "(0014,0044)",
    vr: "ST",
    name: "MaterialPropertiesDescription",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,0046)": {
    tag: "(0014,0046)",
    vr: "LT",
    name: "MaterialNotes",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,0050)": {
    tag: "(0014,0050)",
    vr: "CS",
    name: "ComponentShape",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,0052)": {
    tag: "(0014,0052)",
    vr: "CS",
    name: "CurvatureType",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,0054)": {
    tag: "(0014,0054)",
    vr: "DS",
    name: "OuterDiameter",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,0056)": {
    tag: "(0014,0056)",
    vr: "DS",
    name: "InnerDiameter",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,1010)": {
    tag: "(0014,1010)",
    vr: "ST",
    name: "ActualEnvironmentalConditions",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,1020)": {
    tag: "(0014,1020)",
    vr: "DA",
    name: "ExpiryDate",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,1040)": {
    tag: "(0014,1040)",
    vr: "ST",
    name: "EnvironmentalConditions",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2002)": {
    tag: "(0014,2002)",
    vr: "SQ",
    name: "EvaluatorSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2004)": {
    tag: "(0014,2004)",
    vr: "IS",
    name: "EvaluatorNumber",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2006)": {
    tag: "(0014,2006)",
    vr: "PN",
    name: "EvaluatorName",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2008)": {
    tag: "(0014,2008)",
    vr: "IS",
    name: "EvaluationAttempt",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2012)": {
    tag: "(0014,2012)",
    vr: "SQ",
    name: "IndicationSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2014)": {
    tag: "(0014,2014)",
    vr: "IS",
    name: "IndicationNumber",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2016)": {
    tag: "(0014,2016)",
    vr: "SH",
    name: "IndicationLabel",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2018)": {
    tag: "(0014,2018)",
    vr: "ST",
    name: "IndicationDescription",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,201A)": {
    tag: "(0014,201A)",
    vr: "CS",
    name: "IndicationType",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,201C)": {
    tag: "(0014,201C)",
    vr: "CS",
    name: "IndicationDisposition",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,201E)": {
    tag: "(0014,201E)",
    vr: "SQ",
    name: "IndicationROISequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2030)": {
    tag: "(0014,2030)",
    vr: "SQ",
    name: "IndicationPhysicalPropertySequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2032)": {
    tag: "(0014,2032)",
    vr: "SH",
    name: "PropertyLabel",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2202)": {
    tag: "(0014,2202)",
    vr: "IS",
    name: "CoordinateSystemNumberOfAxes",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2204)": {
    tag: "(0014,2204)",
    vr: "SQ",
    name: "CoordinateSystemAxesSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2206)": {
    tag: "(0014,2206)",
    vr: "ST",
    name: "CoordinateSystemAxisDescription",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2208)": {
    tag: "(0014,2208)",
    vr: "CS",
    name: "CoordinateSystemDataSetMapping",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,220A)": {
    tag: "(0014,220A)",
    vr: "IS",
    name: "CoordinateSystemAxisNumber",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,220C)": {
    tag: "(0014,220C)",
    vr: "CS",
    name: "CoordinateSystemAxisType",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,220E)": {
    tag: "(0014,220E)",
    vr: "CS",
    name: "CoordinateSystemAxisUnits",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2210)": {
    tag: "(0014,2210)",
    vr: "OB",
    name: "CoordinateSystemAxisValues",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2220)": {
    tag: "(0014,2220)",
    vr: "SQ",
    name: "CoordinateSystemTransformSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2222)": {
    tag: "(0014,2222)",
    vr: "ST",
    name: "TransformDescription",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2224)": {
    tag: "(0014,2224)",
    vr: "IS",
    name: "TransformNumberOfAxes",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,2226)": {
    tag: "(0014,2226)",
    vr: "IS",
    name: "TransformOrderOfAxes",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,2228)": {
    tag: "(0014,2228)",
    vr: "CS",
    name: "TransformedAxisUnits",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,222A)": {
    tag: "(0014,222A)",
    vr: "DS",
    name: "CoordinateSystemTransformRotationAndScaleMatrix",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,222C)": {
    tag: "(0014,222C)",
    vr: "DS",
    name: "CoordinateSystemTransformTranslationMatrix",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,3011)": {
    tag: "(0014,3011)",
    vr: "DS",
    name: "InternalDetectorFrameTime",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3012)": {
    tag: "(0014,3012)",
    vr: "DS",
    name: "NumberOfFramesIntegrated",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3020)": {
    tag: "(0014,3020)",
    vr: "SQ",
    name: "DetectorTemperatureSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3022)": {
    tag: "(0014,3022)",
    vr: "ST",
    name: "SensorName",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3024)": {
    tag: "(0014,3024)",
    vr: "DS",
    name: "HorizontalOffsetOfSensor",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3026)": {
    tag: "(0014,3026)",
    vr: "DS",
    name: "VerticalOffsetOfSensor",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3028)": {
    tag: "(0014,3028)",
    vr: "DS",
    name: "SensorTemperature",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3040)": {
    tag: "(0014,3040)",
    vr: "SQ",
    name: "DarkCurrentSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3050)": {
    tag: "(0014,3050)",
    vr: "ox",
    name: "DarkCurrentCounts",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3060)": {
    tag: "(0014,3060)",
    vr: "SQ",
    name: "GainCorrectionReferenceSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3070)": {
    tag: "(0014,3070)",
    vr: "ox",
    name: "AirCounts",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3071)": {
    tag: "(0014,3071)",
    vr: "DS",
    name: "KVUsedInGainCalibration",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3072)": {
    tag: "(0014,3072)",
    vr: "DS",
    name: "MAUsedInGainCalibration",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3073)": {
    tag: "(0014,3073)",
    vr: "DS",
    name: "NumberOfFramesUsedForIntegration",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3074)": {
    tag: "(0014,3074)",
    vr: "LO",
    name: "FilterMaterialUsedInGainCalibration",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3075)": {
    tag: "(0014,3075)",
    vr: "DS",
    name: "FilterThicknessUsedInGainCalibration",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3076)": {
    tag: "(0014,3076)",
    vr: "DA",
    name: "DateOfGainCalibration",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3077)": {
    tag: "(0014,3077)",
    vr: "TM",
    name: "TimeOfGainCalibration",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3080)": {
    tag: "(0014,3080)",
    vr: "OB",
    name: "BadPixelImage",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,3099)": {
    tag: "(0014,3099)",
    vr: "LT",
    name: "CalibrationNotes",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4002)": {
    tag: "(0014,4002)",
    vr: "SQ",
    name: "PulserEquipmentSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4004)": {
    tag: "(0014,4004)",
    vr: "CS",
    name: "PulserType",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4006)": {
    tag: "(0014,4006)",
    vr: "LT",
    name: "PulserNotes",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4008)": {
    tag: "(0014,4008)",
    vr: "SQ",
    name: "ReceiverEquipmentSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,400A)": {
    tag: "(0014,400A)",
    vr: "CS",
    name: "AmplifierType",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,400C)": {
    tag: "(0014,400C)",
    vr: "LT",
    name: "ReceiverNotes",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,400E)": {
    tag: "(0014,400E)",
    vr: "SQ",
    name: "PreAmplifierEquipmentSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,400F)": {
    tag: "(0014,400F)",
    vr: "LT",
    name: "PreAmplifierNotes",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4010)": {
    tag: "(0014,4010)",
    vr: "SQ",
    name: "TransmitTransducerSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4011)": {
    tag: "(0014,4011)",
    vr: "SQ",
    name: "ReceiveTransducerSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4012)": {
    tag: "(0014,4012)",
    vr: "US",
    name: "NumberOfElements",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4013)": {
    tag: "(0014,4013)",
    vr: "CS",
    name: "ElementShape",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4014)": {
    tag: "(0014,4014)",
    vr: "DS",
    name: "ElementDimensionA",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4015)": {
    tag: "(0014,4015)",
    vr: "DS",
    name: "ElementDimensionB",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4016)": {
    tag: "(0014,4016)",
    vr: "DS",
    name: "ElementPitchA",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4017)": {
    tag: "(0014,4017)",
    vr: "DS",
    name: "MeasuredBeamDimensionA",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4018)": {
    tag: "(0014,4018)",
    vr: "DS",
    name: "MeasuredBeamDimensionB",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4019)": {
    tag: "(0014,4019)",
    vr: "DS",
    name: "LocationOfMeasuredBeamDiameter",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,401A)": {
    tag: "(0014,401A)",
    vr: "DS",
    name: "NominalFrequency",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,401B)": {
    tag: "(0014,401B)",
    vr: "DS",
    name: "MeasuredCenterFrequency",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,401C)": {
    tag: "(0014,401C)",
    vr: "DS",
    name: "MeasuredBandwidth",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,401D)": {
    tag: "(0014,401D)",
    vr: "DS",
    name: "ElementPitchB",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4020)": {
    tag: "(0014,4020)",
    vr: "SQ",
    name: "PulserSettingsSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4022)": {
    tag: "(0014,4022)",
    vr: "DS",
    name: "PulseWidth",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4024)": {
    tag: "(0014,4024)",
    vr: "DS",
    name: "ExcitationFrequency",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4026)": {
    tag: "(0014,4026)",
    vr: "CS",
    name: "ModulationType",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4028)": {
    tag: "(0014,4028)",
    vr: "DS",
    name: "Damping",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4030)": {
    tag: "(0014,4030)",
    vr: "SQ",
    name: "ReceiverSettingsSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4031)": {
    tag: "(0014,4031)",
    vr: "DS",
    name: "AcquiredSoundpathLength",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4032)": {
    tag: "(0014,4032)",
    vr: "CS",
    name: "AcquisitionCompressionType",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4033)": {
    tag: "(0014,4033)",
    vr: "IS",
    name: "AcquisitionSampleSize",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4034)": {
    tag: "(0014,4034)",
    vr: "DS",
    name: "RectifierSmoothing",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4035)": {
    tag: "(0014,4035)",
    vr: "SQ",
    name: "DACSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4036)": {
    tag: "(0014,4036)",
    vr: "CS",
    name: "DACType",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4038)": {
    tag: "(0014,4038)",
    vr: "DS",
    name: "DACGainPoints",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,403A)": {
    tag: "(0014,403A)",
    vr: "DS",
    name: "DACTimePoints",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,403C)": {
    tag: "(0014,403C)",
    vr: "DS",
    name: "DACAmplitude",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,4040)": {
    tag: "(0014,4040)",
    vr: "SQ",
    name: "PreAmplifierSettingsSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4050)": {
    tag: "(0014,4050)",
    vr: "SQ",
    name: "TransmitTransducerSettingsSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4051)": {
    tag: "(0014,4051)",
    vr: "SQ",
    name: "ReceiveTransducerSettingsSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4052)": {
    tag: "(0014,4052)",
    vr: "DS",
    name: "IncidentAngle",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4054)": {
    tag: "(0014,4054)",
    vr: "ST",
    name: "CouplingTechnique",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4056)": {
    tag: "(0014,4056)",
    vr: "ST",
    name: "CouplingMedium",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4057)": {
    tag: "(0014,4057)",
    vr: "DS",
    name: "CouplingVelocity",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4058)": {
    tag: "(0014,4058)",
    vr: "DS",
    name: "ProbeCenterLocationX",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4059)": {
    tag: "(0014,4059)",
    vr: "DS",
    name: "ProbeCenterLocationZ",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,405A)": {
    tag: "(0014,405A)",
    vr: "DS",
    name: "SoundPathLength",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,405C)": {
    tag: "(0014,405C)",
    vr: "ST",
    name: "DelayLawIdentifier",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4060)": {
    tag: "(0014,4060)",
    vr: "SQ",
    name: "GateSettingsSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4062)": {
    tag: "(0014,4062)",
    vr: "DS",
    name: "GateThreshold",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4064)": {
    tag: "(0014,4064)",
    vr: "DS",
    name: "VelocityOfSound",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4070)": {
    tag: "(0014,4070)",
    vr: "SQ",
    name: "CalibrationSettingsSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4072)": {
    tag: "(0014,4072)",
    vr: "ST",
    name: "CalibrationProcedure",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4074)": {
    tag: "(0014,4074)",
    vr: "SH",
    name: "ProcedureVersion",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4076)": {
    tag: "(0014,4076)",
    vr: "DA",
    name: "ProcedureCreationDate",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4078)": {
    tag: "(0014,4078)",
    vr: "DA",
    name: "ProcedureExpirationDate",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,407A)": {
    tag: "(0014,407A)",
    vr: "DA",
    name: "ProcedureLastModifiedDate",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,407C)": {
    tag: "(0014,407C)",
    vr: "TM",
    name: "CalibrationTime",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,407E)": {
    tag: "(0014,407E)",
    vr: "DA",
    name: "CalibrationDate",
    vm: "1-n",
    version: "DICOM/DICONDE"
  },
  "(0014,4080)": {
    tag: "(0014,4080)",
    vr: "SQ",
    name: "ProbeDriveEquipmentSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4081)": {
    tag: "(0014,4081)",
    vr: "CS",
    name: "DriveType",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4082)": {
    tag: "(0014,4082)",
    vr: "LT",
    name: "ProbeDriveNotes",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4083)": {
    tag: "(0014,4083)",
    vr: "SQ",
    name: "DriveProbeSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4084)": {
    tag: "(0014,4084)",
    vr: "DS",
    name: "ProbeInductance",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4085)": {
    tag: "(0014,4085)",
    vr: "DS",
    name: "ProbeResistance",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4086)": {
    tag: "(0014,4086)",
    vr: "SQ",
    name: "ReceiveProbeSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4087)": {
    tag: "(0014,4087)",
    vr: "SQ",
    name: "ProbeDriveSettingsSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4088)": {
    tag: "(0014,4088)",
    vr: "DS",
    name: "BridgeResistors",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4089)": {
    tag: "(0014,4089)",
    vr: "DS",
    name: "ProbeOrientationAngle",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,408B)": {
    tag: "(0014,408B)",
    vr: "DS",
    name: "UserSelectedGainY",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,408C)": {
    tag: "(0014,408C)",
    vr: "DS",
    name: "UserSelectedPhase",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,408D)": {
    tag: "(0014,408D)",
    vr: "DS",
    name: "UserSelectedOffsetX",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,408E)": {
    tag: "(0014,408E)",
    vr: "DS",
    name: "UserSelectedOffsetY",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4091)": {
    tag: "(0014,4091)",
    vr: "SQ",
    name: "ChannelSettingsSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,4092)": {
    tag: "(0014,4092)",
    vr: "DS",
    name: "ChannelThreshold",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,409A)": {
    tag: "(0014,409A)",
    vr: "SQ",
    name: "ScannerSettingsSequence",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,409B)": {
    tag: "(0014,409B)",
    vr: "ST",
    name: "ScanProcedure",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,409C)": {
    tag: "(0014,409C)",
    vr: "DS",
    name: "TranslationRateX",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,409D)": {
    tag: "(0014,409D)",
    vr: "DS",
    name: "TranslationRateY",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,409F)": {
    tag: "(0014,409F)",
    vr: "DS",
    name: "ChannelOverlap",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,40A0)": {
    tag: "(0014,40A0)",
    vr: "LO",
    name: "ImageQualityIndicatorType",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,40A1)": {
    tag: "(0014,40A1)",
    vr: "LO",
    name: "ImageQualityIndicatorMaterial",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,40A2)": {
    tag: "(0014,40A2)",
    vr: "LO",
    name: "ImageQualityIndicatorSize",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5002)": {
    tag: "(0014,5002)",
    vr: "IS",
    name: "LINACEnergy",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5004)": {
    tag: "(0014,5004)",
    vr: "IS",
    name: "LINACOutput",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5100)": {
    tag: "(0014,5100)",
    vr: "US",
    name: "ActiveAperture",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5101)": {
    tag: "(0014,5101)",
    vr: "DS",
    name: "TotalAperture",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5102)": {
    tag: "(0014,5102)",
    vr: "DS",
    name: "ApertureElevation",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5103)": {
    tag: "(0014,5103)",
    vr: "DS",
    name: "MainLobeAngle",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5104)": {
    tag: "(0014,5104)",
    vr: "DS",
    name: "MainRoofAngle",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5105)": {
    tag: "(0014,5105)",
    vr: "CS",
    name: "ConnectorType",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5106)": {
    tag: "(0014,5106)",
    vr: "SH",
    name: "WedgeModelNumber",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5107)": {
    tag: "(0014,5107)",
    vr: "DS",
    name: "WedgeAngleFloat",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5108)": {
    tag: "(0014,5108)",
    vr: "DS",
    name: "WedgeRoofAngle",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5109)": {
    tag: "(0014,5109)",
    vr: "CS",
    name: "WedgeElement1Position",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,510A)": {
    tag: "(0014,510A)",
    vr: "DS",
    name: "WedgeMaterialVelocity",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,510B)": {
    tag: "(0014,510B)",
    vr: "SH",
    name: "WedgeMaterial",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,510C)": {
    tag: "(0014,510C)",
    vr: "DS",
    name: "WedgeOffsetZ",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,510D)": {
    tag: "(0014,510D)",
    vr: "DS",
    name: "WedgeOriginOffsetX",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,510E)": {
    tag: "(0014,510E)",
    vr: "DS",
    name: "WedgeTimeDelay",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,510F)": {
    tag: "(0014,510F)",
    vr: "SH",
    name: "WedgeName",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5110)": {
    tag: "(0014,5110)",
    vr: "SH",
    name: "WedgeManufacturerName",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5111)": {
    tag: "(0014,5111)",
    vr: "LO",
    name: "WedgeDescription",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5112)": {
    tag: "(0014,5112)",
    vr: "DS",
    name: "NominalBeamAngle",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5113)": {
    tag: "(0014,5113)",
    vr: "DS",
    name: "WedgeOffsetX",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5114)": {
    tag: "(0014,5114)",
    vr: "DS",
    name: "WedgeOffsetY",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5115)": {
    tag: "(0014,5115)",
    vr: "DS",
    name: "WedgeTotalLength",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5116)": {
    tag: "(0014,5116)",
    vr: "DS",
    name: "WedgeInContactLength",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5117)": {
    tag: "(0014,5117)",
    vr: "DS",
    name: "WedgeFrontGap",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5118)": {
    tag: "(0014,5118)",
    vr: "DS",
    name: "WedgeTotalHeight",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,5119)": {
    tag: "(0014,5119)",
    vr: "DS",
    name: "WedgeFrontHeight",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,511A)": {
    tag: "(0014,511A)",
    vr: "DS",
    name: "WedgeRearHeight",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,511B)": {
    tag: "(0014,511B)",
    vr: "DS",
    name: "WedgeTotalWidth",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,511C)": {
    tag: "(0014,511C)",
    vr: "DS",
    name: "WedgeInContactWidth",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,511D)": {
    tag: "(0014,511D)",
    vr: "DS",
    name: "WedgeChamferHeight",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,511E)": {
    tag: "(0014,511E)",
    vr: "CS",
    name: "WedgeCurve",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0014,511F)": {
    tag: "(0014,511F)",
    vr: "DS",
    name: "RadiusAlongWedge",
    vm: "1",
    version: "DICOM/DICONDE"
  },
  "(0012,0086)": {
    tag: "(0012,0086)",
    vr: "DA",
    name: "EthicsCommitteeApprovalEffectivenessStartDate",
    vm: "1",
    version: "DICOM"
  },
  "(0012,0087)": {
    tag: "(0012,0087)",
    vr: "DA",
    name: "EthicsCommitteeApprovalEffectivenessEndDate",
    vm: "1",
    version: "DICOM"
  },
  "(0014,0100)": {
    tag: "(0014,0100)",
    vr: "LO",
    name: "ComponentWelderIDs",
    vm: "1-n",
    version: "DICOM"
  },
  "(0014,0101)": {
    tag: "(0014,0101)",
    vr: "CS",
    name: "SecondaryApprovalStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0014,0102)": {
    tag: "(0014,0102)",
    vr: "DA",
    name: "SecondaryReviewDate",
    vm: "1",
    version: "DICOM"
  },
  "(0014,0103)": {
    tag: "(0014,0103)",
    vr: "TM",
    name: "SecondaryReviewTime",
    vm: "1",
    version: "DICOM"
  },
  "(0014,0104)": {
    tag: "(0014,0104)",
    vr: "PN",
    name: "SecondaryReviewerName",
    vm: "1",
    version: "DICOM"
  },
  "(0014,0105)": {
    tag: "(0014,0105)",
    vr: "ST",
    name: "RepairID",
    vm: "1",
    version: "DICOM"
  },
  "(0014,0106)": {
    tag: "(0014,0106)",
    vr: "SQ",
    name: "MultipleComponentApprovalSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0014,0107)": {
    tag: "(0014,0107)",
    vr: "CS",
    name: "OtherApprovalStatus",
    vm: "1-n",
    version: "DICOM"
  },
  "(0014,0108)": {
    tag: "(0014,0108)",
    vr: "CS",
    name: "OtherSecondaryApprovalStatus",
    vm: "1-n",
    version: "DICOM"
  },
  "(0016,0001)": {
    tag: "(0016,0001)",
    vr: "DS",
    name: "WhitePoint",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0002)": {
    tag: "(0016,0002)",
    vr: "DS",
    name: "PrimaryChromaticities",
    vm: "3",
    version: "DICOM"
  },
  "(0016,0003)": {
    tag: "(0016,0003)",
    vr: "UT",
    name: "BatteryLevel",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0004)": {
    tag: "(0016,0004)",
    vr: "DS",
    name: "ExposureTimeInSeconds",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0005)": {
    tag: "(0016,0005)",
    vr: "DS",
    name: "FNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0006)": {
    tag: "(0016,0006)",
    vr: "IS",
    name: "OECFRows",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0007)": {
    tag: "(0016,0007)",
    vr: "IS",
    name: "OECFColumns",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0008)": {
    tag: "(0016,0008)",
    vr: "UC",
    name: "OECFColumnNames",
    vm: "1-n",
    version: "DICOM"
  },
  "(0016,0009)": {
    tag: "(0016,0009)",
    vr: "DS",
    name: "OECFValues",
    vm: "1-n",
    version: "DICOM"
  },
  "(0016,000A)": {
    tag: "(0016,000A)",
    vr: "IS",
    name: "SpatialFrequencyResponseRows",
    vm: "1",
    version: "DICOM"
  },
  "(0016,000B)": {
    tag: "(0016,000B)",
    vr: "IS",
    name: "SpatialFrequencyResponseColumns",
    vm: "1",
    version: "DICOM"
  },
  "(0016,000C)": {
    tag: "(0016,000C)",
    vr: "UC",
    name: "SpatialFrequencyResponseColumnNames",
    vm: "1-n",
    version: "DICOM"
  },
  "(0016,000D)": {
    tag: "(0016,000D)",
    vr: "DS",
    name: "SpatialFrequencyResponseValues",
    vm: "1-n",
    version: "DICOM"
  },
  "(0016,000E)": {
    tag: "(0016,000E)",
    vr: "IS",
    name: "ColorFilterArrayPatternRows",
    vm: "1",
    version: "DICOM"
  },
  "(0016,000F)": {
    tag: "(0016,000F)",
    vr: "IS",
    name: "ColorFilterArrayPatternColumns",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0010)": {
    tag: "(0016,0010)",
    vr: "DS",
    name: "ColorFilterArrayPatternValues",
    vm: "1-n",
    version: "DICOM"
  },
  "(0016,0011)": {
    tag: "(0016,0011)",
    vr: "US",
    name: "FlashFiringStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0012)": {
    tag: "(0016,0012)",
    vr: "US",
    name: "FlashReturnStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0013)": {
    tag: "(0016,0013)",
    vr: "US",
    name: "FlashMode",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0014)": {
    tag: "(0016,0014)",
    vr: "US",
    name: "FlashFunctionPresent",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0015)": {
    tag: "(0016,0015)",
    vr: "US",
    name: "FlashRedEyeMode",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0016)": {
    tag: "(0016,0016)",
    vr: "US",
    name: "ExposureProgram",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0017)": {
    tag: "(0016,0017)",
    vr: "UT",
    name: "SpectralSensitivity",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0018)": {
    tag: "(0016,0018)",
    vr: "IS",
    name: "PhotographicSensitivity",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0019)": {
    tag: "(0016,0019)",
    vr: "IS",
    name: "SelfTimerMode",
    vm: "1",
    version: "DICOM"
  },
  "(0016,001A)": {
    tag: "(0016,001A)",
    vr: "US",
    name: "SensitivityType",
    vm: "1",
    version: "DICOM"
  },
  "(0016,001B)": {
    tag: "(0016,001B)",
    vr: "IS",
    name: "StandardOutputSensitivity",
    vm: "1",
    version: "DICOM"
  },
  "(0016,001C)": {
    tag: "(0016,001C)",
    vr: "IS",
    name: "RecommendedExposureIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0016,001D)": {
    tag: "(0016,001D)",
    vr: "IS",
    name: "ISOSpeed",
    vm: "1",
    version: "DICOM"
  },
  "(0016,001E)": {
    tag: "(0016,001E)",
    vr: "IS",
    name: "ISOSpeedLatitudeyyy",
    vm: "1",
    version: "DICOM"
  },
  "(0016,001F)": {
    tag: "(0016,001F)",
    vr: "IS",
    name: "ISOSpeedLatitudezzz",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0020)": {
    tag: "(0016,0020)",
    vr: "UT",
    name: "EXIFVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0021)": {
    tag: "(0016,0021)",
    vr: "DS",
    name: "ShutterSpeedValue",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0022)": {
    tag: "(0016,0022)",
    vr: "DS",
    name: "ApertureValue",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0023)": {
    tag: "(0016,0023)",
    vr: "DS",
    name: "BrightnessValue",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0024)": {
    tag: "(0016,0024)",
    vr: "DS",
    name: "ExposureBiasValue",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0025)": {
    tag: "(0016,0025)",
    vr: "DS",
    name: "MaxApertureValue",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0026)": {
    tag: "(0016,0026)",
    vr: "DS",
    name: "SubjectDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0027)": {
    tag: "(0016,0027)",
    vr: "US",
    name: "MeteringMode",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0028)": {
    tag: "(0016,0028)",
    vr: "US",
    name: "LightSource",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0029)": {
    tag: "(0016,0029)",
    vr: "DS",
    name: "FocalLength",
    vm: "1",
    version: "DICOM"
  },
  "(0016,002A)": {
    tag: "(0016,002A)",
    vr: "IS",
    name: "SubjectArea",
    vm: "2-4",
    version: "DICOM"
  },
  "(0016,002B)": {
    tag: "(0016,002B)",
    vr: "OB",
    name: "MakerNote",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0030)": {
    tag: "(0016,0030)",
    vr: "DS",
    name: "Temperature",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0031)": {
    tag: "(0016,0031)",
    vr: "DS",
    name: "Humidity",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0032)": {
    tag: "(0016,0032)",
    vr: "DS",
    name: "Pressure",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0033)": {
    tag: "(0016,0033)",
    vr: "DS",
    name: "WaterDepth",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0034)": {
    tag: "(0016,0034)",
    vr: "DS",
    name: "Acceleration",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0035)": {
    tag: "(0016,0035)",
    vr: "DS",
    name: "CameraElevationAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0036)": {
    tag: "(0016,0036)",
    vr: "DS",
    name: "FlashEnergy",
    vm: "1-2",
    version: "DICOM"
  },
  "(0016,0037)": {
    tag: "(0016,0037)",
    vr: "IS",
    name: "SubjectLocation",
    vm: "2",
    version: "DICOM"
  },
  "(0016,0038)": {
    tag: "(0016,0038)",
    vr: "DS",
    name: "PhotographicExposureIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0039)": {
    tag: "(0016,0039)",
    vr: "US",
    name: "SensingMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0016,003A)": {
    tag: "(0016,003A)",
    vr: "US",
    name: "FileSource",
    vm: "1",
    version: "DICOM"
  },
  "(0016,003B)": {
    tag: "(0016,003B)",
    vr: "US",
    name: "SceneType",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0041)": {
    tag: "(0016,0041)",
    vr: "US",
    name: "CustomRendered",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0042)": {
    tag: "(0016,0042)",
    vr: "US",
    name: "ExposureMode",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0043)": {
    tag: "(0016,0043)",
    vr: "US",
    name: "WhiteBalance",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0044)": {
    tag: "(0016,0044)",
    vr: "DS",
    name: "DigitalZoomRatio",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0045)": {
    tag: "(0016,0045)",
    vr: "IS",
    name: "FocalLengthIn35mmFilm",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0046)": {
    tag: "(0016,0046)",
    vr: "US",
    name: "SceneCaptureType",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0047)": {
    tag: "(0016,0047)",
    vr: "US",
    name: "GainControl",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0048)": {
    tag: "(0016,0048)",
    vr: "US",
    name: "Contrast",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0049)": {
    tag: "(0016,0049)",
    vr: "US",
    name: "Saturation",
    vm: "1",
    version: "DICOM"
  },
  "(0016,004A)": {
    tag: "(0016,004A)",
    vr: "US",
    name: "Sharpness",
    vm: "1",
    version: "DICOM"
  },
  "(0016,004B)": {
    tag: "(0016,004B)",
    vr: "OB",
    name: "DeviceSettingDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0016,004C)": {
    tag: "(0016,004C)",
    vr: "US",
    name: "SubjectDistanceRange",
    vm: "1",
    version: "DICOM"
  },
  "(0016,004D)": {
    tag: "(0016,004D)",
    vr: "UT",
    name: "CameraOwnerName",
    vm: "1",
    version: "DICOM"
  },
  "(0016,004E)": {
    tag: "(0016,004E)",
    vr: "DS",
    name: "LensSpecification",
    vm: "4",
    version: "DICOM"
  },
  "(0016,004F)": {
    tag: "(0016,004F)",
    vr: "UT",
    name: "LensMake",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0050)": {
    tag: "(0016,0050)",
    vr: "UT",
    name: "LensModel",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0051)": {
    tag: "(0016,0051)",
    vr: "UT",
    name: "LensSerialNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0061)": {
    tag: "(0016,0061)",
    vr: "CS",
    name: "InteroperabilityIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0062)": {
    tag: "(0016,0062)",
    vr: "OB",
    name: "InteroperabilityVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0070)": {
    tag: "(0016,0070)",
    vr: "OB",
    name: "GPSVersionID",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0071)": {
    tag: "(0016,0071)",
    vr: "CS",
    name: "GPSLatitudeRef",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0072)": {
    tag: "(0016,0072)",
    vr: "DS",
    name: "GPSLatitude",
    vm: "3",
    version: "DICOM"
  },
  "(0016,0073)": {
    tag: "(0016,0073)",
    vr: "CS",
    name: "GPSLongitudeRef",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0074)": {
    tag: "(0016,0074)",
    vr: "DS",
    name: "GPSLongitude",
    vm: "3",
    version: "DICOM"
  },
  "(0016,0075)": {
    tag: "(0016,0075)",
    vr: "US",
    name: "GPSAltitudeRef",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0076)": {
    tag: "(0016,0076)",
    vr: "DS",
    name: "GPSAltitude",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0077)": {
    tag: "(0016,0077)",
    vr: "DT",
    name: "GPSTimeStamp",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0078)": {
    tag: "(0016,0078)",
    vr: "UT",
    name: "GPSSatellites",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0079)": {
    tag: "(0016,0079)",
    vr: "CS",
    name: "GPSStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0016,007A)": {
    tag: "(0016,007A)",
    vr: "CS",
    name: "GPSMeasureMode",
    vm: "1",
    version: "DICOM"
  },
  "(0016,007B)": {
    tag: "(0016,007B)",
    vr: "DS",
    name: "GPSDOP",
    vm: "1",
    version: "DICOM"
  },
  "(0016,007C)": {
    tag: "(0016,007C)",
    vr: "CS",
    name: "GPSSpeedRef",
    vm: "1",
    version: "DICOM"
  },
  "(0016,007D)": {
    tag: "(0016,007D)",
    vr: "DS",
    name: "GPSSpeed",
    vm: "1",
    version: "DICOM"
  },
  "(0016,007E)": {
    tag: "(0016,007E)",
    vr: "CS",
    name: "GPSTrackRef",
    vm: "1",
    version: "DICOM"
  },
  "(0016,007F)": {
    tag: "(0016,007F)",
    vr: "DS",
    name: "GPSTrack",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0080)": {
    tag: "(0016,0080)",
    vr: "CS",
    name: "GPSImgDirectionRef",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0081)": {
    tag: "(0016,0081)",
    vr: "DS",
    name: "GPSImgDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0082)": {
    tag: "(0016,0082)",
    vr: "UT",
    name: "GPSMapDatum",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0083)": {
    tag: "(0016,0083)",
    vr: "CS",
    name: "GPSDestLatitudeRef",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0084)": {
    tag: "(0016,0084)",
    vr: "DS",
    name: "GPSDestLatitude",
    vm: "3",
    version: "DICOM"
  },
  "(0016,0085)": {
    tag: "(0016,0085)",
    vr: "CS",
    name: "GPSDestLongitudeRef",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0086)": {
    tag: "(0016,0086)",
    vr: "DS",
    name: "GPSDestLongitude",
    vm: "3",
    version: "DICOM"
  },
  "(0016,0087)": {
    tag: "(0016,0087)",
    vr: "CS",
    name: "GPSDestBearingRef",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0088)": {
    tag: "(0016,0088)",
    vr: "DS",
    name: "GPSDestBearing",
    vm: "1",
    version: "DICOM"
  },
  "(0016,0089)": {
    tag: "(0016,0089)",
    vr: "CS",
    name: "GPSDestDistanceRef",
    vm: "1",
    version: "DICOM"
  },
  "(0016,008A)": {
    tag: "(0016,008A)",
    vr: "DS",
    name: "GPSDestDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0016,008B)": {
    tag: "(0016,008B)",
    vr: "OB",
    name: "GPSProcessingMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0016,008C)": {
    tag: "(0016,008C)",
    vr: "OB",
    name: "GPSAreaInformation",
    vm: "1",
    version: "DICOM"
  },
  "(0016,008D)": {
    tag: "(0016,008D)",
    vr: "DT",
    name: "GPSDateStamp",
    vm: "1",
    version: "DICOM"
  },
  "(0016,008E)": {
    tag: "(0016,008E)",
    vr: "IS",
    name: "GPSDifferential",
    vm: "1",
    version: "DICOM"
  },
  "(0016,1001)": {
    tag: "(0016,1001)",
    vr: "CS",
    name: "LightSourcePolarization",
    vm: "1",
    version: "DICOM"
  },
  "(0016,1002)": {
    tag: "(0016,1002)",
    vr: "DS",
    name: "EmitterColorTemperature",
    vm: "1",
    version: "DICOM"
  },
  "(0016,1003)": {
    tag: "(0016,1003)",
    vr: "CS",
    name: "ContactMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0016,1004)": {
    tag: "(0016,1004)",
    vr: "CS",
    name: "ImmersionMedia",
    vm: "1-n",
    version: "DICOM"
  },
  "(0016,1005)": {
    tag: "(0016,1005)",
    vr: "DS",
    name: "OpticalMagnificationFactor",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0010)": {
    tag: "(0018,0010)",
    vr: "LO",
    name: "ContrastBolusAgent",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0012)": {
    tag: "(0018,0012)",
    vr: "SQ",
    name: "ContrastBolusAgentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0013)": {
    tag: "(0018,0013)",
    vr: "FL",
    name: "ContrastBolusT1Relaxivity",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0014)": {
    tag: "(0018,0014)",
    vr: "SQ",
    name: "ContrastBolusAdministrationRouteSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0015)": {
    tag: "(0018,0015)",
    vr: "CS",
    name: "BodyPartExamined",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0020)": {
    tag: "(0018,0020)",
    vr: "CS",
    name: "ScanningSequence",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,0021)": {
    tag: "(0018,0021)",
    vr: "CS",
    name: "SequenceVariant",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,0022)": {
    tag: "(0018,0022)",
    vr: "CS",
    name: "ScanOptions",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,0023)": {
    tag: "(0018,0023)",
    vr: "CS",
    name: "MRAcquisitionType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0024)": {
    tag: "(0018,0024)",
    vr: "SH",
    name: "SequenceName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0025)": {
    tag: "(0018,0025)",
    vr: "CS",
    name: "AngioFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0026)": {
    tag: "(0018,0026)",
    vr: "SQ",
    name: "InterventionDrugInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0027)": {
    tag: "(0018,0027)",
    vr: "TM",
    name: "InterventionDrugStopTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0028)": {
    tag: "(0018,0028)",
    vr: "DS",
    name: "InterventionDrugDose",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0029)": {
    tag: "(0018,0029)",
    vr: "SQ",
    name: "InterventionDrugCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,002A)": {
    tag: "(0018,002A)",
    vr: "SQ",
    name: "AdditionalDrugSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0031)": {
    tag: "(0018,0031)",
    vr: "LO",
    name: "Radiopharmaceutical",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0034)": {
    tag: "(0018,0034)",
    vr: "LO",
    name: "InterventionDrugName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0035)": {
    tag: "(0018,0035)",
    vr: "TM",
    name: "InterventionDrugStartTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0036)": {
    tag: "(0018,0036)",
    vr: "SQ",
    name: "InterventionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0038)": {
    tag: "(0018,0038)",
    vr: "CS",
    name: "InterventionStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0018,003A)": {
    tag: "(0018,003A)",
    vr: "ST",
    name: "InterventionDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0040)": {
    tag: "(0018,0040)",
    vr: "IS",
    name: "CineRate",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0042)": {
    tag: "(0018,0042)",
    vr: "CS",
    name: "InitialCineRunState",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0050)": {
    tag: "(0018,0050)",
    vr: "DS",
    name: "SliceThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0060)": {
    tag: "(0018,0060)",
    vr: "DS",
    name: "KVP",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0070)": {
    tag: "(0018,0070)",
    vr: "IS",
    name: "CountsAccumulated",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0071)": {
    tag: "(0018,0071)",
    vr: "CS",
    name: "AcquisitionTerminationCondition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0072)": {
    tag: "(0018,0072)",
    vr: "DS",
    name: "EffectiveDuration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0073)": {
    tag: "(0018,0073)",
    vr: "CS",
    name: "AcquisitionStartCondition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0074)": {
    tag: "(0018,0074)",
    vr: "IS",
    name: "AcquisitionStartConditionData",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0075)": {
    tag: "(0018,0075)",
    vr: "IS",
    name: "AcquisitionTerminationConditionData",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0080)": {
    tag: "(0018,0080)",
    vr: "DS",
    name: "RepetitionTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0081)": {
    tag: "(0018,0081)",
    vr: "DS",
    name: "EchoTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0082)": {
    tag: "(0018,0082)",
    vr: "DS",
    name: "InversionTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0083)": {
    tag: "(0018,0083)",
    vr: "DS",
    name: "NumberOfAverages",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0084)": {
    tag: "(0018,0084)",
    vr: "DS",
    name: "ImagingFrequency",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0085)": {
    tag: "(0018,0085)",
    vr: "SH",
    name: "ImagedNucleus",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0086)": {
    tag: "(0018,0086)",
    vr: "IS",
    name: "EchoNumbers",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,0087)": {
    tag: "(0018,0087)",
    vr: "DS",
    name: "MagneticFieldStrength",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0088)": {
    tag: "(0018,0088)",
    vr: "DS",
    name: "SpacingBetweenSlices",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0089)": {
    tag: "(0018,0089)",
    vr: "IS",
    name: "NumberOfPhaseEncodingSteps",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0090)": {
    tag: "(0018,0090)",
    vr: "DS",
    name: "DataCollectionDiameter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0091)": {
    tag: "(0018,0091)",
    vr: "IS",
    name: "EchoTrainLength",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0093)": {
    tag: "(0018,0093)",
    vr: "DS",
    name: "PercentSampling",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0094)": {
    tag: "(0018,0094)",
    vr: "DS",
    name: "PercentPhaseFieldOfView",
    vm: "1",
    version: "DICOM"
  },
  "(0018,0095)": {
    tag: "(0018,0095)",
    vr: "DS",
    name: "PixelBandwidth",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1000)": {
    tag: "(0018,1000)",
    vr: "LO",
    name: "DeviceSerialNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1002)": {
    tag: "(0018,1002)",
    vr: "UI",
    name: "DeviceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1003)": {
    tag: "(0018,1003)",
    vr: "LO",
    name: "DeviceID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1004)": {
    tag: "(0018,1004)",
    vr: "LO",
    name: "PlateID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1005)": {
    tag: "(0018,1005)",
    vr: "LO",
    name: "GeneratorID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1006)": {
    tag: "(0018,1006)",
    vr: "LO",
    name: "GridID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1007)": {
    tag: "(0018,1007)",
    vr: "LO",
    name: "CassetteID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1008)": {
    tag: "(0018,1008)",
    vr: "LO",
    name: "GantryID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1009)": {
    tag: "(0018,1009)",
    vr: "UT",
    name: "UniqueDeviceIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0018,100A)": {
    tag: "(0018,100A)",
    vr: "SQ",
    name: "UDISequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,100B)": {
    tag: "(0018,100B)",
    vr: "UI",
    name: "ManufacturerDeviceClassUID",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1010)": {
    tag: "(0018,1010)",
    vr: "LO",
    name: "SecondaryCaptureDeviceID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1012)": {
    tag: "(0018,1012)",
    vr: "DA",
    name: "DateOfSecondaryCapture",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1014)": {
    tag: "(0018,1014)",
    vr: "TM",
    name: "TimeOfSecondaryCapture",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1016)": {
    tag: "(0018,1016)",
    vr: "LO",
    name: "SecondaryCaptureDeviceManufacturer",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1018)": {
    tag: "(0018,1018)",
    vr: "LO",
    name: "SecondaryCaptureDeviceManufacturerModelName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1019)": {
    tag: "(0018,1019)",
    vr: "LO",
    name: "SecondaryCaptureDeviceSoftwareVersions",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1020)": {
    tag: "(0018,1020)",
    vr: "LO",
    name: "SoftwareVersions",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1022)": {
    tag: "(0018,1022)",
    vr: "SH",
    name: "VideoImageFormatAcquired",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1023)": {
    tag: "(0018,1023)",
    vr: "LO",
    name: "DigitalImageFormatAcquired",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1030)": {
    tag: "(0018,1030)",
    vr: "LO",
    name: "ProtocolName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1040)": {
    tag: "(0018,1040)",
    vr: "LO",
    name: "ContrastBolusRoute",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1041)": {
    tag: "(0018,1041)",
    vr: "DS",
    name: "ContrastBolusVolume",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1042)": {
    tag: "(0018,1042)",
    vr: "TM",
    name: "ContrastBolusStartTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1043)": {
    tag: "(0018,1043)",
    vr: "TM",
    name: "ContrastBolusStopTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1044)": {
    tag: "(0018,1044)",
    vr: "DS",
    name: "ContrastBolusTotalDose",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1045)": {
    tag: "(0018,1045)",
    vr: "IS",
    name: "SyringeCounts",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1046)": {
    tag: "(0018,1046)",
    vr: "DS",
    name: "ContrastFlowRate",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1047)": {
    tag: "(0018,1047)",
    vr: "DS",
    name: "ContrastFlowDuration",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1048)": {
    tag: "(0018,1048)",
    vr: "CS",
    name: "ContrastBolusIngredient",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1049)": {
    tag: "(0018,1049)",
    vr: "DS",
    name: "ContrastBolusIngredientConcentration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1050)": {
    tag: "(0018,1050)",
    vr: "DS",
    name: "SpatialResolution",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1060)": {
    tag: "(0018,1060)",
    vr: "DS",
    name: "TriggerTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1061)": {
    tag: "(0018,1061)",
    vr: "LO",
    name: "TriggerSourceOrType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1062)": {
    tag: "(0018,1062)",
    vr: "IS",
    name: "NominalInterval",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1063)": {
    tag: "(0018,1063)",
    vr: "DS",
    name: "FrameTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1064)": {
    tag: "(0018,1064)",
    vr: "LO",
    name: "CardiacFramingType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1065)": {
    tag: "(0018,1065)",
    vr: "DS",
    name: "FrameTimeVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1066)": {
    tag: "(0018,1066)",
    vr: "DS",
    name: "FrameDelay",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1067)": {
    tag: "(0018,1067)",
    vr: "DS",
    name: "ImageTriggerDelay",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1068)": {
    tag: "(0018,1068)",
    vr: "DS",
    name: "MultiplexGroupTimeOffset",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1069)": {
    tag: "(0018,1069)",
    vr: "DS",
    name: "TriggerTimeOffset",
    vm: "1",
    version: "DICOM"
  },
  "(0018,106A)": {
    tag: "(0018,106A)",
    vr: "CS",
    name: "SynchronizationTrigger",
    vm: "1",
    version: "DICOM"
  },
  "(0018,106C)": {
    tag: "(0018,106C)",
    vr: "US",
    name: "SynchronizationChannel",
    vm: "2",
    version: "DICOM"
  },
  "(0018,106E)": {
    tag: "(0018,106E)",
    vr: "UL",
    name: "TriggerSamplePosition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1070)": {
    tag: "(0018,1070)",
    vr: "LO",
    name: "RadiopharmaceuticalRoute",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1071)": {
    tag: "(0018,1071)",
    vr: "DS",
    name: "RadiopharmaceuticalVolume",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1072)": {
    tag: "(0018,1072)",
    vr: "TM",
    name: "RadiopharmaceuticalStartTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1073)": {
    tag: "(0018,1073)",
    vr: "TM",
    name: "RadiopharmaceuticalStopTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1074)": {
    tag: "(0018,1074)",
    vr: "DS",
    name: "RadionuclideTotalDose",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1075)": {
    tag: "(0018,1075)",
    vr: "DS",
    name: "RadionuclideHalfLife",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1076)": {
    tag: "(0018,1076)",
    vr: "DS",
    name: "RadionuclidePositronFraction",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1077)": {
    tag: "(0018,1077)",
    vr: "DS",
    name: "RadiopharmaceuticalSpecificActivity",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1078)": {
    tag: "(0018,1078)",
    vr: "DT",
    name: "RadiopharmaceuticalStartDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1079)": {
    tag: "(0018,1079)",
    vr: "DT",
    name: "RadiopharmaceuticalStopDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1080)": {
    tag: "(0018,1080)",
    vr: "CS",
    name: "BeatRejectionFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1081)": {
    tag: "(0018,1081)",
    vr: "IS",
    name: "LowRRValue",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1082)": {
    tag: "(0018,1082)",
    vr: "IS",
    name: "HighRRValue",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1083)": {
    tag: "(0018,1083)",
    vr: "IS",
    name: "IntervalsAcquired",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1084)": {
    tag: "(0018,1084)",
    vr: "IS",
    name: "IntervalsRejected",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1085)": {
    tag: "(0018,1085)",
    vr: "LO",
    name: "PVCRejection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1086)": {
    tag: "(0018,1086)",
    vr: "IS",
    name: "SkipBeats",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1088)": {
    tag: "(0018,1088)",
    vr: "IS",
    name: "HeartRate",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1090)": {
    tag: "(0018,1090)",
    vr: "IS",
    name: "CardiacNumberOfImages",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1094)": {
    tag: "(0018,1094)",
    vr: "IS",
    name: "TriggerWindow",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1100)": {
    tag: "(0018,1100)",
    vr: "DS",
    name: "ReconstructionDiameter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1110)": {
    tag: "(0018,1110)",
    vr: "DS",
    name: "DistanceSourceToDetector",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1111)": {
    tag: "(0018,1111)",
    vr: "DS",
    name: "DistanceSourceToPatient",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1114)": {
    tag: "(0018,1114)",
    vr: "DS",
    name: "EstimatedRadiographicMagnificationFactor",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1120)": {
    tag: "(0018,1120)",
    vr: "DS",
    name: "GantryDetectorTilt",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1121)": {
    tag: "(0018,1121)",
    vr: "DS",
    name: "GantryDetectorSlew",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1130)": {
    tag: "(0018,1130)",
    vr: "DS",
    name: "TableHeight",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1131)": {
    tag: "(0018,1131)",
    vr: "DS",
    name: "TableTraverse",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1134)": {
    tag: "(0018,1134)",
    vr: "CS",
    name: "TableMotion",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1135)": {
    tag: "(0018,1135)",
    vr: "DS",
    name: "TableVerticalIncrement",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1136)": {
    tag: "(0018,1136)",
    vr: "DS",
    name: "TableLateralIncrement",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1137)": {
    tag: "(0018,1137)",
    vr: "DS",
    name: "TableLongitudinalIncrement",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1138)": {
    tag: "(0018,1138)",
    vr: "DS",
    name: "TableAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,113A)": {
    tag: "(0018,113A)",
    vr: "CS",
    name: "TableType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1140)": {
    tag: "(0018,1140)",
    vr: "CS",
    name: "RotationDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1142)": {
    tag: "(0018,1142)",
    vr: "DS",
    name: "RadialPosition",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1143)": {
    tag: "(0018,1143)",
    vr: "DS",
    name: "ScanArc",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1144)": {
    tag: "(0018,1144)",
    vr: "DS",
    name: "AngularStep",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1145)": {
    tag: "(0018,1145)",
    vr: "DS",
    name: "CenterOfRotationOffset",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1147)": {
    tag: "(0018,1147)",
    vr: "CS",
    name: "FieldOfViewShape",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1149)": {
    tag: "(0018,1149)",
    vr: "IS",
    name: "FieldOfViewDimensions",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,1150)": {
    tag: "(0018,1150)",
    vr: "IS",
    name: "ExposureTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1151)": {
    tag: "(0018,1151)",
    vr: "IS",
    name: "XRayTubeCurrent",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1152)": {
    tag: "(0018,1152)",
    vr: "IS",
    name: "Exposure",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1153)": {
    tag: "(0018,1153)",
    vr: "IS",
    name: "ExposureInuAs",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1154)": {
    tag: "(0018,1154)",
    vr: "DS",
    name: "AveragePulseWidth",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1155)": {
    tag: "(0018,1155)",
    vr: "CS",
    name: "RadiationSetting",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1156)": {
    tag: "(0018,1156)",
    vr: "CS",
    name: "RectificationType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,115A)": {
    tag: "(0018,115A)",
    vr: "CS",
    name: "RadiationMode",
    vm: "1",
    version: "DICOM"
  },
  "(0018,115E)": {
    tag: "(0018,115E)",
    vr: "DS",
    name: "ImageAndFluoroscopyAreaDoseProduct",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1160)": {
    tag: "(0018,1160)",
    vr: "SH",
    name: "FilterType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1161)": {
    tag: "(0018,1161)",
    vr: "LO",
    name: "TypeOfFilters",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1162)": {
    tag: "(0018,1162)",
    vr: "DS",
    name: "IntensifierSize",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1164)": {
    tag: "(0018,1164)",
    vr: "DS",
    name: "ImagerPixelSpacing",
    vm: "2",
    version: "DICOM"
  },
  "(0018,1166)": {
    tag: "(0018,1166)",
    vr: "CS",
    name: "Grid",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1170)": {
    tag: "(0018,1170)",
    vr: "IS",
    name: "GeneratorPower",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1180)": {
    tag: "(0018,1180)",
    vr: "SH",
    name: "CollimatorGridName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1181)": {
    tag: "(0018,1181)",
    vr: "CS",
    name: "CollimatorType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1182)": {
    tag: "(0018,1182)",
    vr: "IS",
    name: "FocalDistance",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,1183)": {
    tag: "(0018,1183)",
    vr: "DS",
    name: "XFocusCenter",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,1184)": {
    tag: "(0018,1184)",
    vr: "DS",
    name: "YFocusCenter",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,1190)": {
    tag: "(0018,1190)",
    vr: "DS",
    name: "FocalSpots",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1191)": {
    tag: "(0018,1191)",
    vr: "CS",
    name: "AnodeTargetMaterial",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11A0)": {
    tag: "(0018,11A0)",
    vr: "DS",
    name: "BodyPartThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11A2)": {
    tag: "(0018,11A2)",
    vr: "DS",
    name: "CompressionForce",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11A3)": {
    tag: "(0018,11A3)",
    vr: "DS",
    name: "CompressionPressure",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11A4)": {
    tag: "(0018,11A4)",
    vr: "LO",
    name: "PaddleDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11A5)": {
    tag: "(0018,11A5)",
    vr: "DS",
    name: "CompressionContactArea",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11B0)": {
    tag: "(0018,11B0)",
    vr: "LO",
    name: "AcquisitionMode",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11B1)": {
    tag: "(0018,11B1)",
    vr: "LO",
    name: "DoseModeName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11B2)": {
    tag: "(0018,11B2)",
    vr: "CS",
    name: "AcquiredSubtractionMaskFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11B3)": {
    tag: "(0018,11B3)",
    vr: "CS",
    name: "FluoroscopyPersistenceFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11B4)": {
    tag: "(0018,11B4)",
    vr: "CS",
    name: "FluoroscopyLastImageHoldPersistenceFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11B5)": {
    tag: "(0018,11B5)",
    vr: "IS",
    name: "UpperLimitNumberOfPersistentFluoroscopyFrames",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11B6)": {
    tag: "(0018,11B6)",
    vr: "CS",
    name: "ContrastBolusAutoInjectionTriggerFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11B7)": {
    tag: "(0018,11B7)",
    vr: "FD",
    name: "ContrastBolusInjectionDelay",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11B8)": {
    tag: "(0018,11B8)",
    vr: "SQ",
    name: "XAAcquisitionPhaseDetailsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11B9)": {
    tag: "(0018,11B9)",
    vr: "FD",
    name: "XAAcquisitionFrameRate",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11BA)": {
    tag: "(0018,11BA)",
    vr: "SQ",
    name: "XAPlaneDetailsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11BB)": {
    tag: "(0018,11BB)",
    vr: "LO",
    name: "AcquisitionFieldOfViewLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11BC)": {
    tag: "(0018,11BC)",
    vr: "SQ",
    name: "XRayFilterDetailsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11BD)": {
    tag: "(0018,11BD)",
    vr: "FD",
    name: "XAAcquisitionDuration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11BE)": {
    tag: "(0018,11BE)",
    vr: "CS",
    name: "ReconstructionPipelineType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11BF)": {
    tag: "(0018,11BF)",
    vr: "SQ",
    name: "ImageFilterDetailsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11C0)": {
    tag: "(0018,11C0)",
    vr: "CS",
    name: "AppliedMaskSubtractionFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,11C1)": {
    tag: "(0018,11C1)",
    vr: "SQ",
    name: "RequestedSeriesDescriptionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1200)": {
    tag: "(0018,1200)",
    vr: "DA",
    name: "DateOfLastCalibration",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1201)": {
    tag: "(0018,1201)",
    vr: "TM",
    name: "TimeOfLastCalibration",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1202)": {
    tag: "(0018,1202)",
    vr: "DT",
    name: "DateTimeOfLastCalibration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1210)": {
    tag: "(0018,1210)",
    vr: "SH",
    name: "ConvolutionKernel",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1242)": {
    tag: "(0018,1242)",
    vr: "IS",
    name: "ActualFrameDuration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1243)": {
    tag: "(0018,1243)",
    vr: "IS",
    name: "CountRate",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1244)": {
    tag: "(0018,1244)",
    vr: "US",
    name: "PreferredPlaybackSequencing",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1250)": {
    tag: "(0018,1250)",
    vr: "SH",
    name: "ReceiveCoilName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1251)": {
    tag: "(0018,1251)",
    vr: "SH",
    name: "TransmitCoilName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1260)": {
    tag: "(0018,1260)",
    vr: "SH",
    name: "PlateType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1261)": {
    tag: "(0018,1261)",
    vr: "LO",
    name: "PhosphorType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1271)": {
    tag: "(0018,1271)",
    vr: "FD",
    name: "WaterEquivalentDiameter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1272)": {
    tag: "(0018,1272)",
    vr: "SQ",
    name: "WaterEquivalentDiameterCalculationMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1300)": {
    tag: "(0018,1300)",
    vr: "DS",
    name: "ScanVelocity",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1301)": {
    tag: "(0018,1301)",
    vr: "CS",
    name: "WholeBodyTechnique",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1302)": {
    tag: "(0018,1302)",
    vr: "IS",
    name: "ScanLength",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1310)": {
    tag: "(0018,1310)",
    vr: "US",
    name: "AcquisitionMatrix",
    vm: "4",
    version: "DICOM"
  },
  "(0018,1312)": {
    tag: "(0018,1312)",
    vr: "CS",
    name: "InPlanePhaseEncodingDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1314)": {
    tag: "(0018,1314)",
    vr: "DS",
    name: "FlipAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1315)": {
    tag: "(0018,1315)",
    vr: "CS",
    name: "VariableFlipAngleFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1316)": {
    tag: "(0018,1316)",
    vr: "DS",
    name: "SAR",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1318)": {
    tag: "(0018,1318)",
    vr: "DS",
    name: "dBdt",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1400)": {
    tag: "(0018,1400)",
    vr: "LO",
    name: "AcquisitionDeviceProcessingDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1401)": {
    tag: "(0018,1401)",
    vr: "LO",
    name: "AcquisitionDeviceProcessingCode",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1402)": {
    tag: "(0018,1402)",
    vr: "CS",
    name: "CassetteOrientation",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1403)": {
    tag: "(0018,1403)",
    vr: "CS",
    name: "CassetteSize",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1404)": {
    tag: "(0018,1404)",
    vr: "US",
    name: "ExposuresOnPlate",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1405)": {
    tag: "(0018,1405)",
    vr: "IS",
    name: "RelativeXRayExposure",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1411)": {
    tag: "(0018,1411)",
    vr: "DS",
    name: "ExposureIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1412)": {
    tag: "(0018,1412)",
    vr: "DS",
    name: "TargetExposureIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1413)": {
    tag: "(0018,1413)",
    vr: "DS",
    name: "DeviationIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1450)": {
    tag: "(0018,1450)",
    vr: "DS",
    name: "ColumnAngulation",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1460)": {
    tag: "(0018,1460)",
    vr: "DS",
    name: "TomoLayerHeight",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1470)": {
    tag: "(0018,1470)",
    vr: "DS",
    name: "TomoAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1480)": {
    tag: "(0018,1480)",
    vr: "DS",
    name: "TomoTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1490)": {
    tag: "(0018,1490)",
    vr: "CS",
    name: "TomoType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1491)": {
    tag: "(0018,1491)",
    vr: "CS",
    name: "TomoClass",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1495)": {
    tag: "(0018,1495)",
    vr: "IS",
    name: "NumberOfTomosynthesisSourceImages",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1500)": {
    tag: "(0018,1500)",
    vr: "CS",
    name: "PositionerMotion",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1508)": {
    tag: "(0018,1508)",
    vr: "CS",
    name: "PositionerType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1510)": {
    tag: "(0018,1510)",
    vr: "DS",
    name: "PositionerPrimaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1511)": {
    tag: "(0018,1511)",
    vr: "DS",
    name: "PositionerSecondaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1520)": {
    tag: "(0018,1520)",
    vr: "DS",
    name: "PositionerPrimaryAngleIncrement",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1521)": {
    tag: "(0018,1521)",
    vr: "DS",
    name: "PositionerSecondaryAngleIncrement",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,1530)": {
    tag: "(0018,1530)",
    vr: "DS",
    name: "DetectorPrimaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1531)": {
    tag: "(0018,1531)",
    vr: "DS",
    name: "DetectorSecondaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1600)": {
    tag: "(0018,1600)",
    vr: "CS",
    name: "ShutterShape",
    vm: "1-3",
    version: "DICOM"
  },
  "(0018,1602)": {
    tag: "(0018,1602)",
    vr: "IS",
    name: "ShutterLeftVerticalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1604)": {
    tag: "(0018,1604)",
    vr: "IS",
    name: "ShutterRightVerticalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1606)": {
    tag: "(0018,1606)",
    vr: "IS",
    name: "ShutterUpperHorizontalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1608)": {
    tag: "(0018,1608)",
    vr: "IS",
    name: "ShutterLowerHorizontalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1610)": {
    tag: "(0018,1610)",
    vr: "IS",
    name: "CenterOfCircularShutter",
    vm: "2",
    version: "DICOM"
  },
  "(0018,1612)": {
    tag: "(0018,1612)",
    vr: "IS",
    name: "RadiusOfCircularShutter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1620)": {
    tag: "(0018,1620)",
    vr: "IS",
    name: "VerticesOfThePolygonalShutter",
    vm: "2-2n",
    version: "DICOM"
  },
  "(0018,1622)": {
    tag: "(0018,1622)",
    vr: "US",
    name: "ShutterPresentationValue",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1623)": {
    tag: "(0018,1623)",
    vr: "US",
    name: "ShutterOverlayGroup",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1624)": {
    tag: "(0018,1624)",
    vr: "US",
    name: "ShutterPresentationColorCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(0018,1630)": {
    tag: "(0018,1630)",
    vr: "CS",
    name: "OutlineShapeType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1631)": {
    tag: "(0018,1631)",
    vr: "FD",
    name: "OutlineLeftVerticalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1632)": {
    tag: "(0018,1632)",
    vr: "FD",
    name: "OutlineRightVerticalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1633)": {
    tag: "(0018,1633)",
    vr: "FD",
    name: "OutlineUpperHorizontalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1634)": {
    tag: "(0018,1634)",
    vr: "FD",
    name: "OutlineLowerHorizontalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1635)": {
    tag: "(0018,1635)",
    vr: "FD",
    name: "CenterOfCircularOutline",
    vm: "2",
    version: "DICOM"
  },
  "(0018,1636)": {
    tag: "(0018,1636)",
    vr: "FD",
    name: "DiameterOfCircularOutline",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1637)": {
    tag: "(0018,1637)",
    vr: "UL",
    name: "NumberOfPolygonalVertices",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1638)": {
    tag: "(0018,1638)",
    vr: "OF",
    name: "VerticesOfThePolygonalOutline",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1700)": {
    tag: "(0018,1700)",
    vr: "CS",
    name: "CollimatorShape",
    vm: "1-3",
    version: "DICOM"
  },
  "(0018,1702)": {
    tag: "(0018,1702)",
    vr: "IS",
    name: "CollimatorLeftVerticalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1704)": {
    tag: "(0018,1704)",
    vr: "IS",
    name: "CollimatorRightVerticalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1706)": {
    tag: "(0018,1706)",
    vr: "IS",
    name: "CollimatorUpperHorizontalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1708)": {
    tag: "(0018,1708)",
    vr: "IS",
    name: "CollimatorLowerHorizontalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1710)": {
    tag: "(0018,1710)",
    vr: "IS",
    name: "CenterOfCircularCollimator",
    vm: "2",
    version: "DICOM"
  },
  "(0018,1712)": {
    tag: "(0018,1712)",
    vr: "IS",
    name: "RadiusOfCircularCollimator",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1720)": {
    tag: "(0018,1720)",
    vr: "IS",
    name: "VerticesOfThePolygonalCollimator",
    vm: "2-2n",
    version: "DICOM"
  },
  "(0018,1800)": {
    tag: "(0018,1800)",
    vr: "CS",
    name: "AcquisitionTimeSynchronized",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1801)": {
    tag: "(0018,1801)",
    vr: "SH",
    name: "TimeSource",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1802)": {
    tag: "(0018,1802)",
    vr: "CS",
    name: "TimeDistributionProtocol",
    vm: "1",
    version: "DICOM"
  },
  "(0018,1803)": {
    tag: "(0018,1803)",
    vr: "LO",
    name: "NTPSourceAddress",
    vm: "1",
    version: "DICOM"
  },
  "(0018,2001)": {
    tag: "(0018,2001)",
    vr: "IS",
    name: "PageNumberVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,2002)": {
    tag: "(0018,2002)",
    vr: "SH",
    name: "FrameLabelVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,2003)": {
    tag: "(0018,2003)",
    vr: "DS",
    name: "FramePrimaryAngleVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,2004)": {
    tag: "(0018,2004)",
    vr: "DS",
    name: "FrameSecondaryAngleVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,2005)": {
    tag: "(0018,2005)",
    vr: "DS",
    name: "SliceLocationVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,2006)": {
    tag: "(0018,2006)",
    vr: "SH",
    name: "DisplayWindowLabelVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,2010)": {
    tag: "(0018,2010)",
    vr: "DS",
    name: "NominalScannedPixelSpacing",
    vm: "2",
    version: "DICOM"
  },
  "(0018,2020)": {
    tag: "(0018,2020)",
    vr: "CS",
    name: "DigitizingDeviceTransportDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,2030)": {
    tag: "(0018,2030)",
    vr: "DS",
    name: "RotationOfScannedFilm",
    vm: "1",
    version: "DICOM"
  },
  "(0018,2041)": {
    tag: "(0018,2041)",
    vr: "SQ",
    name: "BiopsyTargetSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,2042)": {
    tag: "(0018,2042)",
    vr: "UI",
    name: "TargetUID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,2043)": {
    tag: "(0018,2043)",
    vr: "FL",
    name: "LocalizingCursorPosition",
    vm: "2",
    version: "DICOM"
  },
  "(0018,2044)": {
    tag: "(0018,2044)",
    vr: "FL",
    name: "CalculatedTargetPosition",
    vm: "3",
    version: "DICOM"
  },
  "(0018,2045)": {
    tag: "(0018,2045)",
    vr: "SH",
    name: "TargetLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0018,2046)": {
    tag: "(0018,2046)",
    vr: "FL",
    name: "DisplayedZValue",
    vm: "1",
    version: "DICOM"
  },
  "(0018,3100)": {
    tag: "(0018,3100)",
    vr: "CS",
    name: "IVUSAcquisition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,3101)": {
    tag: "(0018,3101)",
    vr: "DS",
    name: "IVUSPullbackRate",
    vm: "1",
    version: "DICOM"
  },
  "(0018,3102)": {
    tag: "(0018,3102)",
    vr: "DS",
    name: "IVUSGatedRate",
    vm: "1",
    version: "DICOM"
  },
  "(0018,3103)": {
    tag: "(0018,3103)",
    vr: "IS",
    name: "IVUSPullbackStartFrameNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0018,3104)": {
    tag: "(0018,3104)",
    vr: "IS",
    name: "IVUSPullbackStopFrameNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0018,3105)": {
    tag: "(0018,3105)",
    vr: "IS",
    name: "LesionNumber",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,5000)": {
    tag: "(0018,5000)",
    vr: "SH",
    name: "OutputPower",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,5010)": {
    tag: "(0018,5010)",
    vr: "LO",
    name: "TransducerData",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,5011)": {
    tag: "(0018,5011)",
    vr: "SQ",
    name: "TransducerIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5012)": {
    tag: "(0018,5012)",
    vr: "DS",
    name: "FocusDepth",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5020)": {
    tag: "(0018,5020)",
    vr: "LO",
    name: "ProcessingFunction",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5022)": {
    tag: "(0018,5022)",
    vr: "DS",
    name: "MechanicalIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5024)": {
    tag: "(0018,5024)",
    vr: "DS",
    name: "BoneThermalIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5026)": {
    tag: "(0018,5026)",
    vr: "DS",
    name: "CranialThermalIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5027)": {
    tag: "(0018,5027)",
    vr: "DS",
    name: "SoftTissueThermalIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5028)": {
    tag: "(0018,5028)",
    vr: "DS",
    name: "SoftTissueFocusThermalIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5029)": {
    tag: "(0018,5029)",
    vr: "DS",
    name: "SoftTissueSurfaceThermalIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5050)": {
    tag: "(0018,5050)",
    vr: "IS",
    name: "DepthOfScanField",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5100)": {
    tag: "(0018,5100)",
    vr: "CS",
    name: "PatientPosition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5101)": {
    tag: "(0018,5101)",
    vr: "CS",
    name: "ViewPosition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,5104)": {
    tag: "(0018,5104)",
    vr: "SQ",
    name: "ProjectionEponymousNameCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6000)": {
    tag: "(0018,6000)",
    vr: "DS",
    name: "Sensitivity",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6011)": {
    tag: "(0018,6011)",
    vr: "SQ",
    name: "SequenceOfUltrasoundRegions",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6012)": {
    tag: "(0018,6012)",
    vr: "US",
    name: "RegionSpatialFormat",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6014)": {
    tag: "(0018,6014)",
    vr: "US",
    name: "RegionDataType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6016)": {
    tag: "(0018,6016)",
    vr: "UL",
    name: "RegionFlags",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6018)": {
    tag: "(0018,6018)",
    vr: "UL",
    name: "RegionLocationMinX0",
    vm: "1",
    version: "DICOM"
  },
  "(0018,601A)": {
    tag: "(0018,601A)",
    vr: "UL",
    name: "RegionLocationMinY0",
    vm: "1",
    version: "DICOM"
  },
  "(0018,601C)": {
    tag: "(0018,601C)",
    vr: "UL",
    name: "RegionLocationMaxX1",
    vm: "1",
    version: "DICOM"
  },
  "(0018,601E)": {
    tag: "(0018,601E)",
    vr: "UL",
    name: "RegionLocationMaxY1",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6020)": {
    tag: "(0018,6020)",
    vr: "SL",
    name: "ReferencePixelX0",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6022)": {
    tag: "(0018,6022)",
    vr: "SL",
    name: "ReferencePixelY0",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6024)": {
    tag: "(0018,6024)",
    vr: "US",
    name: "PhysicalUnitsXDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6026)": {
    tag: "(0018,6026)",
    vr: "US",
    name: "PhysicalUnitsYDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6028)": {
    tag: "(0018,6028)",
    vr: "FD",
    name: "ReferencePixelPhysicalValueX",
    vm: "1",
    version: "DICOM"
  },
  "(0018,602A)": {
    tag: "(0018,602A)",
    vr: "FD",
    name: "ReferencePixelPhysicalValueY",
    vm: "1",
    version: "DICOM"
  },
  "(0018,602C)": {
    tag: "(0018,602C)",
    vr: "FD",
    name: "PhysicalDeltaX",
    vm: "1",
    version: "DICOM"
  },
  "(0018,602E)": {
    tag: "(0018,602E)",
    vr: "FD",
    name: "PhysicalDeltaY",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6030)": {
    tag: "(0018,6030)",
    vr: "UL",
    name: "TransducerFrequency",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6031)": {
    tag: "(0018,6031)",
    vr: "CS",
    name: "TransducerType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6032)": {
    tag: "(0018,6032)",
    vr: "UL",
    name: "PulseRepetitionFrequency",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6034)": {
    tag: "(0018,6034)",
    vr: "FD",
    name: "DopplerCorrectionAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6036)": {
    tag: "(0018,6036)",
    vr: "FD",
    name: "SteeringAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6039)": {
    tag: "(0018,6039)",
    vr: "SL",
    name: "DopplerSampleVolumeXPosition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,603B)": {
    tag: "(0018,603B)",
    vr: "SL",
    name: "DopplerSampleVolumeYPosition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,603D)": {
    tag: "(0018,603D)",
    vr: "SL",
    name: "TMLinePositionX0",
    vm: "1",
    version: "DICOM"
  },
  "(0018,603F)": {
    tag: "(0018,603F)",
    vr: "SL",
    name: "TMLinePositionY0",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6041)": {
    tag: "(0018,6041)",
    vr: "SL",
    name: "TMLinePositionX1",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6043)": {
    tag: "(0018,6043)",
    vr: "SL",
    name: "TMLinePositionY1",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6044)": {
    tag: "(0018,6044)",
    vr: "US",
    name: "PixelComponentOrganization",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6046)": {
    tag: "(0018,6046)",
    vr: "UL",
    name: "PixelComponentMask",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6048)": {
    tag: "(0018,6048)",
    vr: "UL",
    name: "PixelComponentRangeStart",
    vm: "1",
    version: "DICOM"
  },
  "(0018,604A)": {
    tag: "(0018,604A)",
    vr: "UL",
    name: "PixelComponentRangeStop",
    vm: "1",
    version: "DICOM"
  },
  "(0018,604C)": {
    tag: "(0018,604C)",
    vr: "US",
    name: "PixelComponentPhysicalUnits",
    vm: "1",
    version: "DICOM"
  },
  "(0018,604E)": {
    tag: "(0018,604E)",
    vr: "US",
    name: "PixelComponentDataType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6050)": {
    tag: "(0018,6050)",
    vr: "UL",
    name: "NumberOfTableBreakPoints",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6052)": {
    tag: "(0018,6052)",
    vr: "UL",
    name: "TableOfXBreakPoints",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,6054)": {
    tag: "(0018,6054)",
    vr: "FD",
    name: "TableOfYBreakPoints",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,6056)": {
    tag: "(0018,6056)",
    vr: "UL",
    name: "NumberOfTableEntries",
    vm: "1",
    version: "DICOM"
  },
  "(0018,6058)": {
    tag: "(0018,6058)",
    vr: "UL",
    name: "TableOfPixelValues",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,605A)": {
    tag: "(0018,605A)",
    vr: "FL",
    name: "TableOfParameterValues",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,6060)": {
    tag: "(0018,6060)",
    vr: "FL",
    name: "RWaveTimeVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,6070)": {
    tag: "(0018,6070)",
    vr: "US",
    name: "ActiveImageAreaOverlayGroup",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7000)": {
    tag: "(0018,7000)",
    vr: "CS",
    name: "DetectorConditionsNominalFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7001)": {
    tag: "(0018,7001)",
    vr: "DS",
    name: "DetectorTemperature",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7004)": {
    tag: "(0018,7004)",
    vr: "CS",
    name: "DetectorType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7005)": {
    tag: "(0018,7005)",
    vr: "CS",
    name: "DetectorConfiguration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7006)": {
    tag: "(0018,7006)",
    vr: "LT",
    name: "DetectorDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7008)": {
    tag: "(0018,7008)",
    vr: "LT",
    name: "DetectorMode",
    vm: "1",
    version: "DICOM"
  },
  "(0018,700A)": {
    tag: "(0018,700A)",
    vr: "SH",
    name: "DetectorID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,700C)": {
    tag: "(0018,700C)",
    vr: "DA",
    name: "DateOfLastDetectorCalibration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,700E)": {
    tag: "(0018,700E)",
    vr: "TM",
    name: "TimeOfLastDetectorCalibration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7010)": {
    tag: "(0018,7010)",
    vr: "IS",
    name: "ExposuresOnDetectorSinceLastCalibration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7011)": {
    tag: "(0018,7011)",
    vr: "IS",
    name: "ExposuresOnDetectorSinceManufactured",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7012)": {
    tag: "(0018,7012)",
    vr: "DS",
    name: "DetectorTimeSinceLastExposure",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7014)": {
    tag: "(0018,7014)",
    vr: "DS",
    name: "DetectorActiveTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7016)": {
    tag: "(0018,7016)",
    vr: "DS",
    name: "DetectorActivationOffsetFromExposure",
    vm: "1",
    version: "DICOM"
  },
  "(0018,701A)": {
    tag: "(0018,701A)",
    vr: "DS",
    name: "DetectorBinning",
    vm: "2",
    version: "DICOM"
  },
  "(0018,7020)": {
    tag: "(0018,7020)",
    vr: "DS",
    name: "DetectorElementPhysicalSize",
    vm: "2",
    version: "DICOM"
  },
  "(0018,7022)": {
    tag: "(0018,7022)",
    vr: "DS",
    name: "DetectorElementSpacing",
    vm: "2",
    version: "DICOM"
  },
  "(0018,7024)": {
    tag: "(0018,7024)",
    vr: "CS",
    name: "DetectorActiveShape",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7026)": {
    tag: "(0018,7026)",
    vr: "DS",
    name: "DetectorActiveDimensions",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,7028)": {
    tag: "(0018,7028)",
    vr: "DS",
    name: "DetectorActiveOrigin",
    vm: "2",
    version: "DICOM"
  },
  "(0018,702A)": {
    tag: "(0018,702A)",
    vr: "LO",
    name: "DetectorManufacturerName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,702B)": {
    tag: "(0018,702B)",
    vr: "LO",
    name: "DetectorManufacturerModelName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7030)": {
    tag: "(0018,7030)",
    vr: "DS",
    name: "FieldOfViewOrigin",
    vm: "2",
    version: "DICOM"
  },
  "(0018,7032)": {
    tag: "(0018,7032)",
    vr: "DS",
    name: "FieldOfViewRotation",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7034)": {
    tag: "(0018,7034)",
    vr: "CS",
    name: "FieldOfViewHorizontalFlip",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7036)": {
    tag: "(0018,7036)",
    vr: "FL",
    name: "PixelDataAreaOriginRelativeToFOV",
    vm: "2",
    version: "DICOM"
  },
  "(0018,7038)": {
    tag: "(0018,7038)",
    vr: "FL",
    name: "PixelDataAreaRotationAngleRelativeToFOV",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7040)": {
    tag: "(0018,7040)",
    vr: "LT",
    name: "GridAbsorbingMaterial",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7041)": {
    tag: "(0018,7041)",
    vr: "LT",
    name: "GridSpacingMaterial",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7042)": {
    tag: "(0018,7042)",
    vr: "DS",
    name: "GridThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7044)": {
    tag: "(0018,7044)",
    vr: "DS",
    name: "GridPitch",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7046)": {
    tag: "(0018,7046)",
    vr: "IS",
    name: "GridAspectRatio",
    vm: "2",
    version: "DICOM"
  },
  "(0018,7048)": {
    tag: "(0018,7048)",
    vr: "DS",
    name: "GridPeriod",
    vm: "1",
    version: "DICOM"
  },
  "(0018,704C)": {
    tag: "(0018,704C)",
    vr: "DS",
    name: "GridFocalDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7050)": {
    tag: "(0018,7050)",
    vr: "CS",
    name: "FilterMaterial",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,7052)": {
    tag: "(0018,7052)",
    vr: "DS",
    name: "FilterThicknessMinimum",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,7054)": {
    tag: "(0018,7054)",
    vr: "DS",
    name: "FilterThicknessMaximum",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,7056)": {
    tag: "(0018,7056)",
    vr: "FL",
    name: "FilterBeamPathLengthMinimum",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,7058)": {
    tag: "(0018,7058)",
    vr: "FL",
    name: "FilterBeamPathLengthMaximum",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,7060)": {
    tag: "(0018,7060)",
    vr: "CS",
    name: "ExposureControlMode",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7062)": {
    tag: "(0018,7062)",
    vr: "LT",
    name: "ExposureControlModeDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7064)": {
    tag: "(0018,7064)",
    vr: "CS",
    name: "ExposureStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0018,7065)": {
    tag: "(0018,7065)",
    vr: "DS",
    name: "PhototimerSetting",
    vm: "1",
    version: "DICOM"
  },
  "(0018,8150)": {
    tag: "(0018,8150)",
    vr: "DS",
    name: "ExposureTimeInuS",
    vm: "1",
    version: "DICOM"
  },
  "(0018,8151)": {
    tag: "(0018,8151)",
    vr: "DS",
    name: "XRayTubeCurrentInuA",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9004)": {
    tag: "(0018,9004)",
    vr: "CS",
    name: "ContentQualification",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9005)": {
    tag: "(0018,9005)",
    vr: "SH",
    name: "PulseSequenceName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9006)": {
    tag: "(0018,9006)",
    vr: "SQ",
    name: "MRImagingModifierSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9008)": {
    tag: "(0018,9008)",
    vr: "CS",
    name: "EchoPulseSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9009)": {
    tag: "(0018,9009)",
    vr: "CS",
    name: "InversionRecovery",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9010)": {
    tag: "(0018,9010)",
    vr: "CS",
    name: "FlowCompensation",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9011)": {
    tag: "(0018,9011)",
    vr: "CS",
    name: "MultipleSpinEcho",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9012)": {
    tag: "(0018,9012)",
    vr: "CS",
    name: "MultiPlanarExcitation",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9014)": {
    tag: "(0018,9014)",
    vr: "CS",
    name: "PhaseContrast",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9015)": {
    tag: "(0018,9015)",
    vr: "CS",
    name: "TimeOfFlightContrast",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9016)": {
    tag: "(0018,9016)",
    vr: "CS",
    name: "Spoiling",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9017)": {
    tag: "(0018,9017)",
    vr: "CS",
    name: "SteadyStatePulseSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9018)": {
    tag: "(0018,9018)",
    vr: "CS",
    name: "EchoPlanarPulseSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9019)": {
    tag: "(0018,9019)",
    vr: "FD",
    name: "TagAngleFirstAxis",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9020)": {
    tag: "(0018,9020)",
    vr: "CS",
    name: "MagnetizationTransfer",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9021)": {
    tag: "(0018,9021)",
    vr: "CS",
    name: "T2Preparation",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9022)": {
    tag: "(0018,9022)",
    vr: "CS",
    name: "BloodSignalNulling",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9024)": {
    tag: "(0018,9024)",
    vr: "CS",
    name: "SaturationRecovery",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9025)": {
    tag: "(0018,9025)",
    vr: "CS",
    name: "SpectrallySelectedSuppression",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9026)": {
    tag: "(0018,9026)",
    vr: "CS",
    name: "SpectrallySelectedExcitation",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9027)": {
    tag: "(0018,9027)",
    vr: "CS",
    name: "SpatialPresaturation",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9028)": {
    tag: "(0018,9028)",
    vr: "CS",
    name: "Tagging",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9029)": {
    tag: "(0018,9029)",
    vr: "CS",
    name: "OversamplingPhase",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9030)": {
    tag: "(0018,9030)",
    vr: "FD",
    name: "TagSpacingFirstDimension",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9032)": {
    tag: "(0018,9032)",
    vr: "CS",
    name: "GeometryOfKSpaceTraversal",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9033)": {
    tag: "(0018,9033)",
    vr: "CS",
    name: "SegmentedKSpaceTraversal",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9034)": {
    tag: "(0018,9034)",
    vr: "CS",
    name: "RectilinearPhaseEncodeReordering",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9035)": {
    tag: "(0018,9035)",
    vr: "FD",
    name: "TagThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9036)": {
    tag: "(0018,9036)",
    vr: "CS",
    name: "PartialFourierDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9037)": {
    tag: "(0018,9037)",
    vr: "CS",
    name: "CardiacSynchronizationTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9041)": {
    tag: "(0018,9041)",
    vr: "LO",
    name: "ReceiveCoilManufacturerName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9042)": {
    tag: "(0018,9042)",
    vr: "SQ",
    name: "MRReceiveCoilSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9043)": {
    tag: "(0018,9043)",
    vr: "CS",
    name: "ReceiveCoilType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9044)": {
    tag: "(0018,9044)",
    vr: "CS",
    name: "QuadratureReceiveCoil",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9045)": {
    tag: "(0018,9045)",
    vr: "SQ",
    name: "MultiCoilDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9046)": {
    tag: "(0018,9046)",
    vr: "LO",
    name: "MultiCoilConfiguration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9047)": {
    tag: "(0018,9047)",
    vr: "SH",
    name: "MultiCoilElementName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9048)": {
    tag: "(0018,9048)",
    vr: "CS",
    name: "MultiCoilElementUsed",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9049)": {
    tag: "(0018,9049)",
    vr: "SQ",
    name: "MRTransmitCoilSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9050)": {
    tag: "(0018,9050)",
    vr: "LO",
    name: "TransmitCoilManufacturerName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9051)": {
    tag: "(0018,9051)",
    vr: "CS",
    name: "TransmitCoilType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9052)": {
    tag: "(0018,9052)",
    vr: "FD",
    name: "SpectralWidth",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,9053)": {
    tag: "(0018,9053)",
    vr: "FD",
    name: "ChemicalShiftReference",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,9054)": {
    tag: "(0018,9054)",
    vr: "CS",
    name: "VolumeLocalizationTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9058)": {
    tag: "(0018,9058)",
    vr: "US",
    name: "MRAcquisitionFrequencyEncodingSteps",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9059)": {
    tag: "(0018,9059)",
    vr: "CS",
    name: "Decoupling",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9060)": {
    tag: "(0018,9060)",
    vr: "CS",
    name: "DecoupledNucleus",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,9061)": {
    tag: "(0018,9061)",
    vr: "FD",
    name: "DecouplingFrequency",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,9062)": {
    tag: "(0018,9062)",
    vr: "CS",
    name: "DecouplingMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9063)": {
    tag: "(0018,9063)",
    vr: "FD",
    name: "DecouplingChemicalShiftReference",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,9064)": {
    tag: "(0018,9064)",
    vr: "CS",
    name: "KSpaceFiltering",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9065)": {
    tag: "(0018,9065)",
    vr: "CS",
    name: "TimeDomainFiltering",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,9066)": {
    tag: "(0018,9066)",
    vr: "US",
    name: "NumberOfZeroFills",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,9067)": {
    tag: "(0018,9067)",
    vr: "CS",
    name: "BaselineCorrection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9069)": {
    tag: "(0018,9069)",
    vr: "FD",
    name: "ParallelReductionFactorInPlane",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9070)": {
    tag: "(0018,9070)",
    vr: "FD",
    name: "CardiacRRIntervalSpecified",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9073)": {
    tag: "(0018,9073)",
    vr: "FD",
    name: "AcquisitionDuration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9074)": {
    tag: "(0018,9074)",
    vr: "DT",
    name: "FrameAcquisitionDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9075)": {
    tag: "(0018,9075)",
    vr: "CS",
    name: "DiffusionDirectionality",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9076)": {
    tag: "(0018,9076)",
    vr: "SQ",
    name: "DiffusionGradientDirectionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9077)": {
    tag: "(0018,9077)",
    vr: "CS",
    name: "ParallelAcquisition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9078)": {
    tag: "(0018,9078)",
    vr: "CS",
    name: "ParallelAcquisitionTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9079)": {
    tag: "(0018,9079)",
    vr: "FD",
    name: "InversionTimes",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,9080)": {
    tag: "(0018,9080)",
    vr: "ST",
    name: "MetaboliteMapDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9081)": {
    tag: "(0018,9081)",
    vr: "CS",
    name: "PartialFourier",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9082)": {
    tag: "(0018,9082)",
    vr: "FD",
    name: "EffectiveEchoTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9083)": {
    tag: "(0018,9083)",
    vr: "SQ",
    name: "MetaboliteMapCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9084)": {
    tag: "(0018,9084)",
    vr: "SQ",
    name: "ChemicalShiftSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9085)": {
    tag: "(0018,9085)",
    vr: "CS",
    name: "CardiacSignalSource",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9087)": {
    tag: "(0018,9087)",
    vr: "FD",
    name: "DiffusionBValue",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9089)": {
    tag: "(0018,9089)",
    vr: "FD",
    name: "DiffusionGradientOrientation",
    vm: "3",
    version: "DICOM"
  },
  "(0018,9090)": {
    tag: "(0018,9090)",
    vr: "FD",
    name: "VelocityEncodingDirection",
    vm: "3",
    version: "DICOM"
  },
  "(0018,9091)": {
    tag: "(0018,9091)",
    vr: "FD",
    name: "VelocityEncodingMinimumValue",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9092)": {
    tag: "(0018,9092)",
    vr: "SQ",
    name: "VelocityEncodingAcquisitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9093)": {
    tag: "(0018,9093)",
    vr: "US",
    name: "NumberOfKSpaceTrajectories",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9094)": {
    tag: "(0018,9094)",
    vr: "CS",
    name: "CoverageOfKSpace",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9095)": {
    tag: "(0018,9095)",
    vr: "UL",
    name: "SpectroscopyAcquisitionPhaseRows",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9098)": {
    tag: "(0018,9098)",
    vr: "FD",
    name: "TransmitterFrequency",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,9100)": {
    tag: "(0018,9100)",
    vr: "CS",
    name: "ResonantNucleus",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,9101)": {
    tag: "(0018,9101)",
    vr: "CS",
    name: "FrequencyCorrection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9103)": {
    tag: "(0018,9103)",
    vr: "SQ",
    name: "MRSpectroscopyFOVGeometrySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9104)": {
    tag: "(0018,9104)",
    vr: "FD",
    name: "SlabThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9105)": {
    tag: "(0018,9105)",
    vr: "FD",
    name: "SlabOrientation",
    vm: "3",
    version: "DICOM"
  },
  "(0018,9106)": {
    tag: "(0018,9106)",
    vr: "FD",
    name: "MidSlabPosition",
    vm: "3",
    version: "DICOM"
  },
  "(0018,9107)": {
    tag: "(0018,9107)",
    vr: "SQ",
    name: "MRSpatialSaturationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9112)": {
    tag: "(0018,9112)",
    vr: "SQ",
    name: "MRTimingAndRelatedParametersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9114)": {
    tag: "(0018,9114)",
    vr: "SQ",
    name: "MREchoSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9115)": {
    tag: "(0018,9115)",
    vr: "SQ",
    name: "MRModifierSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9117)": {
    tag: "(0018,9117)",
    vr: "SQ",
    name: "MRDiffusionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9118)": {
    tag: "(0018,9118)",
    vr: "SQ",
    name: "CardiacSynchronizationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9119)": {
    tag: "(0018,9119)",
    vr: "SQ",
    name: "MRAveragesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9125)": {
    tag: "(0018,9125)",
    vr: "SQ",
    name: "MRFOVGeometrySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9126)": {
    tag: "(0018,9126)",
    vr: "SQ",
    name: "VolumeLocalizationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9127)": {
    tag: "(0018,9127)",
    vr: "UL",
    name: "SpectroscopyAcquisitionDataColumns",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9147)": {
    tag: "(0018,9147)",
    vr: "CS",
    name: "DiffusionAnisotropyType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9151)": {
    tag: "(0018,9151)",
    vr: "DT",
    name: "FrameReferenceDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9152)": {
    tag: "(0018,9152)",
    vr: "SQ",
    name: "MRMetaboliteMapSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9155)": {
    tag: "(0018,9155)",
    vr: "FD",
    name: "ParallelReductionFactorOutOfPlane",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9159)": {
    tag: "(0018,9159)",
    vr: "UL",
    name: "SpectroscopyAcquisitionOutOfPlanePhaseSteps",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9168)": {
    tag: "(0018,9168)",
    vr: "FD",
    name: "ParallelReductionFactorSecondInPlane",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9169)": {
    tag: "(0018,9169)",
    vr: "CS",
    name: "CardiacBeatRejectionTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9170)": {
    tag: "(0018,9170)",
    vr: "CS",
    name: "RespiratoryMotionCompensationTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9171)": {
    tag: "(0018,9171)",
    vr: "CS",
    name: "RespiratorySignalSource",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9172)": {
    tag: "(0018,9172)",
    vr: "CS",
    name: "BulkMotionCompensationTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9173)": {
    tag: "(0018,9173)",
    vr: "CS",
    name: "BulkMotionSignalSource",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9174)": {
    tag: "(0018,9174)",
    vr: "CS",
    name: "ApplicableSafetyStandardAgency",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9175)": {
    tag: "(0018,9175)",
    vr: "LO",
    name: "ApplicableSafetyStandardDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9176)": {
    tag: "(0018,9176)",
    vr: "SQ",
    name: "OperatingModeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9177)": {
    tag: "(0018,9177)",
    vr: "CS",
    name: "OperatingModeType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9178)": {
    tag: "(0018,9178)",
    vr: "CS",
    name: "OperatingMode",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9179)": {
    tag: "(0018,9179)",
    vr: "CS",
    name: "SpecificAbsorptionRateDefinition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9180)": {
    tag: "(0018,9180)",
    vr: "CS",
    name: "GradientOutputType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9181)": {
    tag: "(0018,9181)",
    vr: "FD",
    name: "SpecificAbsorptionRateValue",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9182)": {
    tag: "(0018,9182)",
    vr: "FD",
    name: "GradientOutput",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9183)": {
    tag: "(0018,9183)",
    vr: "CS",
    name: "FlowCompensationDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9184)": {
    tag: "(0018,9184)",
    vr: "FD",
    name: "TaggingDelay",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9185)": {
    tag: "(0018,9185)",
    vr: "ST",
    name: "RespiratoryMotionCompensationTechniqueDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9186)": {
    tag: "(0018,9186)",
    vr: "SH",
    name: "RespiratorySignalSourceID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9197)": {
    tag: "(0018,9197)",
    vr: "SQ",
    name: "MRVelocityEncodingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9198)": {
    tag: "(0018,9198)",
    vr: "CS",
    name: "FirstOrderPhaseCorrection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9199)": {
    tag: "(0018,9199)",
    vr: "CS",
    name: "WaterReferencedPhaseCorrection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9200)": {
    tag: "(0018,9200)",
    vr: "CS",
    name: "MRSpectroscopyAcquisitionType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9214)": {
    tag: "(0018,9214)",
    vr: "CS",
    name: "RespiratoryCyclePosition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9217)": {
    tag: "(0018,9217)",
    vr: "FD",
    name: "VelocityEncodingMaximumValue",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9218)": {
    tag: "(0018,9218)",
    vr: "FD",
    name: "TagSpacingSecondDimension",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9219)": {
    tag: "(0018,9219)",
    vr: "SS",
    name: "TagAngleSecondAxis",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9220)": {
    tag: "(0018,9220)",
    vr: "FD",
    name: "FrameAcquisitionDuration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9226)": {
    tag: "(0018,9226)",
    vr: "SQ",
    name: "MRImageFrameTypeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9227)": {
    tag: "(0018,9227)",
    vr: "SQ",
    name: "MRSpectroscopyFrameTypeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9231)": {
    tag: "(0018,9231)",
    vr: "US",
    name: "MRAcquisitionPhaseEncodingStepsInPlane",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9232)": {
    tag: "(0018,9232)",
    vr: "US",
    name: "MRAcquisitionPhaseEncodingStepsOutOfPlane",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9234)": {
    tag: "(0018,9234)",
    vr: "UL",
    name: "SpectroscopyAcquisitionPhaseColumns",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9236)": {
    tag: "(0018,9236)",
    vr: "CS",
    name: "CardiacCyclePosition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9239)": {
    tag: "(0018,9239)",
    vr: "SQ",
    name: "SpecificAbsorptionRateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9240)": {
    tag: "(0018,9240)",
    vr: "US",
    name: "RFEchoTrainLength",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9241)": {
    tag: "(0018,9241)",
    vr: "US",
    name: "GradientEchoTrainLength",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9250)": {
    tag: "(0018,9250)",
    vr: "CS",
    name: "ArterialSpinLabelingContrast",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9251)": {
    tag: "(0018,9251)",
    vr: "SQ",
    name: "MRArterialSpinLabelingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9252)": {
    tag: "(0018,9252)",
    vr: "LO",
    name: "ASLTechniqueDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9253)": {
    tag: "(0018,9253)",
    vr: "US",
    name: "ASLSlabNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9254)": {
    tag: "(0018,9254)",
    vr: "FD",
    name: "ASLSlabThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9255)": {
    tag: "(0018,9255)",
    vr: "FD",
    name: "ASLSlabOrientation",
    vm: "3",
    version: "DICOM"
  },
  "(0018,9256)": {
    tag: "(0018,9256)",
    vr: "FD",
    name: "ASLMidSlabPosition",
    vm: "3",
    version: "DICOM"
  },
  "(0018,9257)": {
    tag: "(0018,9257)",
    vr: "CS",
    name: "ASLContext",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9258)": {
    tag: "(0018,9258)",
    vr: "UL",
    name: "ASLPulseTrainDuration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9259)": {
    tag: "(0018,9259)",
    vr: "CS",
    name: "ASLCrusherFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,925A)": {
    tag: "(0018,925A)",
    vr: "FD",
    name: "ASLCrusherFlowLimit",
    vm: "1",
    version: "DICOM"
  },
  "(0018,925B)": {
    tag: "(0018,925B)",
    vr: "LO",
    name: "ASLCrusherDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,925C)": {
    tag: "(0018,925C)",
    vr: "CS",
    name: "ASLBolusCutoffFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,925D)": {
    tag: "(0018,925D)",
    vr: "SQ",
    name: "ASLBolusCutoffTimingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,925E)": {
    tag: "(0018,925E)",
    vr: "LO",
    name: "ASLBolusCutoffTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(0018,925F)": {
    tag: "(0018,925F)",
    vr: "UL",
    name: "ASLBolusCutoffDelayTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9260)": {
    tag: "(0018,9260)",
    vr: "SQ",
    name: "ASLSlabSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9295)": {
    tag: "(0018,9295)",
    vr: "FD",
    name: "ChemicalShiftMinimumIntegrationLimitInppm",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9296)": {
    tag: "(0018,9296)",
    vr: "FD",
    name: "ChemicalShiftMaximumIntegrationLimitInppm",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9297)": {
    tag: "(0018,9297)",
    vr: "CS",
    name: "WaterReferenceAcquisition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9298)": {
    tag: "(0018,9298)",
    vr: "IS",
    name: "EchoPeakPosition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9301)": {
    tag: "(0018,9301)",
    vr: "SQ",
    name: "CTAcquisitionTypeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9302)": {
    tag: "(0018,9302)",
    vr: "CS",
    name: "AcquisitionType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9303)": {
    tag: "(0018,9303)",
    vr: "FD",
    name: "TubeAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9304)": {
    tag: "(0018,9304)",
    vr: "SQ",
    name: "CTAcquisitionDetailsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9305)": {
    tag: "(0018,9305)",
    vr: "FD",
    name: "RevolutionTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9306)": {
    tag: "(0018,9306)",
    vr: "FD",
    name: "SingleCollimationWidth",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9307)": {
    tag: "(0018,9307)",
    vr: "FD",
    name: "TotalCollimationWidth",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9308)": {
    tag: "(0018,9308)",
    vr: "SQ",
    name: "CTTableDynamicsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9309)": {
    tag: "(0018,9309)",
    vr: "FD",
    name: "TableSpeed",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9310)": {
    tag: "(0018,9310)",
    vr: "FD",
    name: "TableFeedPerRotation",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9311)": {
    tag: "(0018,9311)",
    vr: "FD",
    name: "SpiralPitchFactor",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9312)": {
    tag: "(0018,9312)",
    vr: "SQ",
    name: "CTGeometrySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9313)": {
    tag: "(0018,9313)",
    vr: "FD",
    name: "DataCollectionCenterPatient",
    vm: "3",
    version: "DICOM"
  },
  "(0018,9314)": {
    tag: "(0018,9314)",
    vr: "SQ",
    name: "CTReconstructionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9315)": {
    tag: "(0018,9315)",
    vr: "CS",
    name: "ReconstructionAlgorithm",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9316)": {
    tag: "(0018,9316)",
    vr: "CS",
    name: "ConvolutionKernelGroup",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9317)": {
    tag: "(0018,9317)",
    vr: "FD",
    name: "ReconstructionFieldOfView",
    vm: "2",
    version: "DICOM"
  },
  "(0018,9318)": {
    tag: "(0018,9318)",
    vr: "FD",
    name: "ReconstructionTargetCenterPatient",
    vm: "3",
    version: "DICOM"
  },
  "(0018,9319)": {
    tag: "(0018,9319)",
    vr: "FD",
    name: "ReconstructionAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9320)": {
    tag: "(0018,9320)",
    vr: "SH",
    name: "ImageFilter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9321)": {
    tag: "(0018,9321)",
    vr: "SQ",
    name: "CTExposureSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9322)": {
    tag: "(0018,9322)",
    vr: "FD",
    name: "ReconstructionPixelSpacing",
    vm: "2",
    version: "DICOM"
  },
  "(0018,9323)": {
    tag: "(0018,9323)",
    vr: "CS",
    name: "ExposureModulationType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9324)": {
    tag: "(0018,9324)",
    vr: "FD",
    name: "EstimatedDoseSaving",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9325)": {
    tag: "(0018,9325)",
    vr: "SQ",
    name: "CTXRayDetailsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9326)": {
    tag: "(0018,9326)",
    vr: "SQ",
    name: "CTPositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9327)": {
    tag: "(0018,9327)",
    vr: "FD",
    name: "TablePosition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9328)": {
    tag: "(0018,9328)",
    vr: "FD",
    name: "ExposureTimeInms",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9329)": {
    tag: "(0018,9329)",
    vr: "SQ",
    name: "CTImageFrameTypeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9330)": {
    tag: "(0018,9330)",
    vr: "FD",
    name: "XRayTubeCurrentInmA",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9332)": {
    tag: "(0018,9332)",
    vr: "FD",
    name: "ExposureInmAs",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9333)": {
    tag: "(0018,9333)",
    vr: "CS",
    name: "ConstantVolumeFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9334)": {
    tag: "(0018,9334)",
    vr: "CS",
    name: "FluoroscopyFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9335)": {
    tag: "(0018,9335)",
    vr: "FD",
    name: "DistanceSourceToDataCollectionCenter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9337)": {
    tag: "(0018,9337)",
    vr: "US",
    name: "ContrastBolusAgentNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9338)": {
    tag: "(0018,9338)",
    vr: "SQ",
    name: "ContrastBolusIngredientCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9340)": {
    tag: "(0018,9340)",
    vr: "SQ",
    name: "ContrastAdministrationProfileSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9341)": {
    tag: "(0018,9341)",
    vr: "SQ",
    name: "ContrastBolusUsageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9342)": {
    tag: "(0018,9342)",
    vr: "CS",
    name: "ContrastBolusAgentAdministered",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9343)": {
    tag: "(0018,9343)",
    vr: "CS",
    name: "ContrastBolusAgentDetected",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9344)": {
    tag: "(0018,9344)",
    vr: "CS",
    name: "ContrastBolusAgentPhase",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9345)": {
    tag: "(0018,9345)",
    vr: "FD",
    name: "CTDIvol",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9346)": {
    tag: "(0018,9346)",
    vr: "SQ",
    name: "CTDIPhantomTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9351)": {
    tag: "(0018,9351)",
    vr: "FL",
    name: "CalciumScoringMassFactorPatient",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9352)": {
    tag: "(0018,9352)",
    vr: "FL",
    name: "CalciumScoringMassFactorDevice",
    vm: "3",
    version: "DICOM"
  },
  "(0018,9353)": {
    tag: "(0018,9353)",
    vr: "FL",
    name: "EnergyWeightingFactor",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9360)": {
    tag: "(0018,9360)",
    vr: "SQ",
    name: "CTAdditionalXRaySourceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9361)": {
    tag: "(0018,9361)",
    vr: "CS",
    name: "MultienergyCTAcquisition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9362)": {
    tag: "(0018,9362)",
    vr: "SQ",
    name: "MultienergyCTAcquisitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9363)": {
    tag: "(0018,9363)",
    vr: "SQ",
    name: "MultienergyCTProcessingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9364)": {
    tag: "(0018,9364)",
    vr: "SQ",
    name: "MultienergyCTCharacteristicsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9365)": {
    tag: "(0018,9365)",
    vr: "SQ",
    name: "MultienergyCTXRaySourceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9366)": {
    tag: "(0018,9366)",
    vr: "US",
    name: "XRaySourceIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9367)": {
    tag: "(0018,9367)",
    vr: "UC",
    name: "XRaySourceID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9368)": {
    tag: "(0018,9368)",
    vr: "CS",
    name: "MultienergySourceTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9369)": {
    tag: "(0018,9369)",
    vr: "DT",
    name: "SourceStartDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,936A)": {
    tag: "(0018,936A)",
    vr: "DT",
    name: "SourceEndDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,936B)": {
    tag: "(0018,936B)",
    vr: "US",
    name: "SwitchingPhaseNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0018,936C)": {
    tag: "(0018,936C)",
    vr: "DS",
    name: "SwitchingPhaseNominalDuration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,936D)": {
    tag: "(0018,936D)",
    vr: "DS",
    name: "SwitchingPhaseTransitionDuration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,936E)": {
    tag: "(0018,936E)",
    vr: "DS",
    name: "EffectiveBinEnergy",
    vm: "1",
    version: "DICOM"
  },
  "(0018,936F)": {
    tag: "(0018,936F)",
    vr: "SQ",
    name: "MultienergyCTXRayDetectorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9370)": {
    tag: "(0018,9370)",
    vr: "US",
    name: "XRayDetectorIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9371)": {
    tag: "(0018,9371)",
    vr: "UC",
    name: "XRayDetectorID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9372)": {
    tag: "(0018,9372)",
    vr: "CS",
    name: "MultienergyDetectorType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9373)": {
    tag: "(0018,9373)",
    vr: "ST",
    name: "XRayDetectorLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9374)": {
    tag: "(0018,9374)",
    vr: "DS",
    name: "NominalMaxEnergy",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9375)": {
    tag: "(0018,9375)",
    vr: "DS",
    name: "NominalMinEnergy",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9376)": {
    tag: "(0018,9376)",
    vr: "US",
    name: "ReferencedXRayDetectorIndex",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,9377)": {
    tag: "(0018,9377)",
    vr: "US",
    name: "ReferencedXRaySourceIndex",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,9378)": {
    tag: "(0018,9378)",
    vr: "US",
    name: "ReferencedPathIndex",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,9379)": {
    tag: "(0018,9379)",
    vr: "SQ",
    name: "MultienergyCTPathSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,937A)": {
    tag: "(0018,937A)",
    vr: "US",
    name: "MultienergyCTPathIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,937B)": {
    tag: "(0018,937B)",
    vr: "UT",
    name: "MultienergyAcquisitionDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,937C)": {
    tag: "(0018,937C)",
    vr: "FD",
    name: "MonoenergeticEnergyEquivalent",
    vm: "1",
    version: "DICOM"
  },
  "(0018,937D)": {
    tag: "(0018,937D)",
    vr: "SQ",
    name: "MaterialCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,937E)": {
    tag: "(0018,937E)",
    vr: "CS",
    name: "DecompositionMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0018,937F)": {
    tag: "(0018,937F)",
    vr: "UT",
    name: "DecompositionDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9380)": {
    tag: "(0018,9380)",
    vr: "SQ",
    name: "DecompositionAlgorithmIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9381)": {
    tag: "(0018,9381)",
    vr: "SQ",
    name: "DecompositionMaterialSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9382)": {
    tag: "(0018,9382)",
    vr: "SQ",
    name: "MaterialAttenuationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9383)": {
    tag: "(0018,9383)",
    vr: "DS",
    name: "PhotonEnergy",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9384)": {
    tag: "(0018,9384)",
    vr: "DS",
    name: "XRayMassAttenuationCoefficient",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9401)": {
    tag: "(0018,9401)",
    vr: "SQ",
    name: "ProjectionPixelCalibrationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9402)": {
    tag: "(0018,9402)",
    vr: "FL",
    name: "DistanceSourceToIsocenter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9403)": {
    tag: "(0018,9403)",
    vr: "FL",
    name: "DistanceObjectToTableTop",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9404)": {
    tag: "(0018,9404)",
    vr: "FL",
    name: "ObjectPixelSpacingInCenterOfBeam",
    vm: "2",
    version: "DICOM"
  },
  "(0018,9405)": {
    tag: "(0018,9405)",
    vr: "SQ",
    name: "PositionerPositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9406)": {
    tag: "(0018,9406)",
    vr: "SQ",
    name: "TablePositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9407)": {
    tag: "(0018,9407)",
    vr: "SQ",
    name: "CollimatorShapeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9410)": {
    tag: "(0018,9410)",
    vr: "CS",
    name: "PlanesInAcquisition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9412)": {
    tag: "(0018,9412)",
    vr: "SQ",
    name: "XAXRFFrameCharacteristicsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9417)": {
    tag: "(0018,9417)",
    vr: "SQ",
    name: "FrameAcquisitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9420)": {
    tag: "(0018,9420)",
    vr: "CS",
    name: "XRayReceptorType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9423)": {
    tag: "(0018,9423)",
    vr: "LO",
    name: "AcquisitionProtocolName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9424)": {
    tag: "(0018,9424)",
    vr: "LT",
    name: "AcquisitionProtocolDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9425)": {
    tag: "(0018,9425)",
    vr: "CS",
    name: "ContrastBolusIngredientOpaque",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9426)": {
    tag: "(0018,9426)",
    vr: "FL",
    name: "DistanceReceptorPlaneToDetectorHousing",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9427)": {
    tag: "(0018,9427)",
    vr: "CS",
    name: "IntensifierActiveShape",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9428)": {
    tag: "(0018,9428)",
    vr: "FL",
    name: "IntensifierActiveDimensions",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,9429)": {
    tag: "(0018,9429)",
    vr: "FL",
    name: "PhysicalDetectorSize",
    vm: "2",
    version: "DICOM"
  },
  "(0018,9430)": {
    tag: "(0018,9430)",
    vr: "FL",
    name: "PositionOfIsocenterProjection",
    vm: "2",
    version: "DICOM"
  },
  "(0018,9432)": {
    tag: "(0018,9432)",
    vr: "SQ",
    name: "FieldOfViewSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9433)": {
    tag: "(0018,9433)",
    vr: "LO",
    name: "FieldOfViewDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9434)": {
    tag: "(0018,9434)",
    vr: "SQ",
    name: "ExposureControlSensingRegionsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9435)": {
    tag: "(0018,9435)",
    vr: "CS",
    name: "ExposureControlSensingRegionShape",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9436)": {
    tag: "(0018,9436)",
    vr: "SS",
    name: "ExposureControlSensingRegionLeftVerticalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9437)": {
    tag: "(0018,9437)",
    vr: "SS",
    name: "ExposureControlSensingRegionRightVerticalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9438)": {
    tag: "(0018,9438)",
    vr: "SS",
    name: "ExposureControlSensingRegionUpperHorizontalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9439)": {
    tag: "(0018,9439)",
    vr: "SS",
    name: "ExposureControlSensingRegionLowerHorizontalEdge",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9440)": {
    tag: "(0018,9440)",
    vr: "SS",
    name: "CenterOfCircularExposureControlSensingRegion",
    vm: "2",
    version: "DICOM"
  },
  "(0018,9441)": {
    tag: "(0018,9441)",
    vr: "US",
    name: "RadiusOfCircularExposureControlSensingRegion",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9442)": {
    tag: "(0018,9442)",
    vr: "SS",
    name: "VerticesOfThePolygonalExposureControlSensingRegion",
    vm: "2-n",
    version: "DICOM"
  },
  "(0018,9447)": {
    tag: "(0018,9447)",
    vr: "FL",
    name: "ColumnAngulationPatient",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9449)": {
    tag: "(0018,9449)",
    vr: "FL",
    name: "BeamAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9451)": {
    tag: "(0018,9451)",
    vr: "SQ",
    name: "FrameDetectorParametersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9452)": {
    tag: "(0018,9452)",
    vr: "FL",
    name: "CalculatedAnatomyThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9455)": {
    tag: "(0018,9455)",
    vr: "SQ",
    name: "CalibrationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9456)": {
    tag: "(0018,9456)",
    vr: "SQ",
    name: "ObjectThicknessSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9457)": {
    tag: "(0018,9457)",
    vr: "CS",
    name: "PlaneIdentification",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9461)": {
    tag: "(0018,9461)",
    vr: "FL",
    name: "FieldOfViewDimensionsInFloat",
    vm: "1-2",
    version: "DICOM"
  },
  "(0018,9462)": {
    tag: "(0018,9462)",
    vr: "SQ",
    name: "IsocenterReferenceSystemSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9463)": {
    tag: "(0018,9463)",
    vr: "FL",
    name: "PositionerIsocenterPrimaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9464)": {
    tag: "(0018,9464)",
    vr: "FL",
    name: "PositionerIsocenterSecondaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9465)": {
    tag: "(0018,9465)",
    vr: "FL",
    name: "PositionerIsocenterDetectorRotationAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9466)": {
    tag: "(0018,9466)",
    vr: "FL",
    name: "TableXPositionToIsocenter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9467)": {
    tag: "(0018,9467)",
    vr: "FL",
    name: "TableYPositionToIsocenter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9468)": {
    tag: "(0018,9468)",
    vr: "FL",
    name: "TableZPositionToIsocenter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9469)": {
    tag: "(0018,9469)",
    vr: "FL",
    name: "TableHorizontalRotationAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9470)": {
    tag: "(0018,9470)",
    vr: "FL",
    name: "TableHeadTiltAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9471)": {
    tag: "(0018,9471)",
    vr: "FL",
    name: "TableCradleTiltAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9472)": {
    tag: "(0018,9472)",
    vr: "SQ",
    name: "FrameDisplayShutterSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9473)": {
    tag: "(0018,9473)",
    vr: "FL",
    name: "AcquiredImageAreaDoseProduct",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9474)": {
    tag: "(0018,9474)",
    vr: "CS",
    name: "CArmPositionerTabletopRelationship",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9476)": {
    tag: "(0018,9476)",
    vr: "SQ",
    name: "XRayGeometrySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9477)": {
    tag: "(0018,9477)",
    vr: "SQ",
    name: "IrradiationEventIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9504)": {
    tag: "(0018,9504)",
    vr: "SQ",
    name: "XRay3DFrameTypeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9506)": {
    tag: "(0018,9506)",
    vr: "SQ",
    name: "ContributingSourcesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9507)": {
    tag: "(0018,9507)",
    vr: "SQ",
    name: "XRay3DAcquisitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9508)": {
    tag: "(0018,9508)",
    vr: "FL",
    name: "PrimaryPositionerScanArc",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9509)": {
    tag: "(0018,9509)",
    vr: "FL",
    name: "SecondaryPositionerScanArc",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9510)": {
    tag: "(0018,9510)",
    vr: "FL",
    name: "PrimaryPositionerScanStartAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9511)": {
    tag: "(0018,9511)",
    vr: "FL",
    name: "SecondaryPositionerScanStartAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9514)": {
    tag: "(0018,9514)",
    vr: "FL",
    name: "PrimaryPositionerIncrement",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9515)": {
    tag: "(0018,9515)",
    vr: "FL",
    name: "SecondaryPositionerIncrement",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9516)": {
    tag: "(0018,9516)",
    vr: "DT",
    name: "StartAcquisitionDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9517)": {
    tag: "(0018,9517)",
    vr: "DT",
    name: "EndAcquisitionDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9518)": {
    tag: "(0018,9518)",
    vr: "SS",
    name: "PrimaryPositionerIncrementSign",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9519)": {
    tag: "(0018,9519)",
    vr: "SS",
    name: "SecondaryPositionerIncrementSign",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9524)": {
    tag: "(0018,9524)",
    vr: "LO",
    name: "ApplicationName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9525)": {
    tag: "(0018,9525)",
    vr: "LO",
    name: "ApplicationVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9526)": {
    tag: "(0018,9526)",
    vr: "LO",
    name: "ApplicationManufacturer",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9527)": {
    tag: "(0018,9527)",
    vr: "CS",
    name: "AlgorithmType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9528)": {
    tag: "(0018,9528)",
    vr: "LO",
    name: "AlgorithmDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9530)": {
    tag: "(0018,9530)",
    vr: "SQ",
    name: "XRay3DReconstructionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9531)": {
    tag: "(0018,9531)",
    vr: "LO",
    name: "ReconstructionDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9538)": {
    tag: "(0018,9538)",
    vr: "SQ",
    name: "PerProjectionAcquisitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9541)": {
    tag: "(0018,9541)",
    vr: "SQ",
    name: "DetectorPositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9542)": {
    tag: "(0018,9542)",
    vr: "SQ",
    name: "XRayAcquisitionDoseSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9543)": {
    tag: "(0018,9543)",
    vr: "FD",
    name: "XRaySourceIsocenterPrimaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9544)": {
    tag: "(0018,9544)",
    vr: "FD",
    name: "XRaySourceIsocenterSecondaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9545)": {
    tag: "(0018,9545)",
    vr: "FD",
    name: "BreastSupportIsocenterPrimaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9546)": {
    tag: "(0018,9546)",
    vr: "FD",
    name: "BreastSupportIsocenterSecondaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9547)": {
    tag: "(0018,9547)",
    vr: "FD",
    name: "BreastSupportXPositionToIsocenter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9548)": {
    tag: "(0018,9548)",
    vr: "FD",
    name: "BreastSupportYPositionToIsocenter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9549)": {
    tag: "(0018,9549)",
    vr: "FD",
    name: "BreastSupportZPositionToIsocenter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9550)": {
    tag: "(0018,9550)",
    vr: "FD",
    name: "DetectorIsocenterPrimaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9551)": {
    tag: "(0018,9551)",
    vr: "FD",
    name: "DetectorIsocenterSecondaryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9552)": {
    tag: "(0018,9552)",
    vr: "FD",
    name: "DetectorXPositionToIsocenter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9553)": {
    tag: "(0018,9553)",
    vr: "FD",
    name: "DetectorYPositionToIsocenter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9554)": {
    tag: "(0018,9554)",
    vr: "FD",
    name: "DetectorZPositionToIsocenter",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9555)": {
    tag: "(0018,9555)",
    vr: "SQ",
    name: "XRayGridSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9556)": {
    tag: "(0018,9556)",
    vr: "SQ",
    name: "XRayFilterSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9557)": {
    tag: "(0018,9557)",
    vr: "FD",
    name: "DetectorActiveAreaTLHCPosition",
    vm: "3",
    version: "DICOM"
  },
  "(0018,9558)": {
    tag: "(0018,9558)",
    vr: "FD",
    name: "DetectorActiveAreaOrientation",
    vm: "6",
    version: "DICOM"
  },
  "(0018,9559)": {
    tag: "(0018,9559)",
    vr: "CS",
    name: "PositionerPrimaryAngleDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9601)": {
    tag: "(0018,9601)",
    vr: "SQ",
    name: "DiffusionBMatrixSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9602)": {
    tag: "(0018,9602)",
    vr: "FD",
    name: "DiffusionBValueXX",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9603)": {
    tag: "(0018,9603)",
    vr: "FD",
    name: "DiffusionBValueXY",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9604)": {
    tag: "(0018,9604)",
    vr: "FD",
    name: "DiffusionBValueXZ",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9605)": {
    tag: "(0018,9605)",
    vr: "FD",
    name: "DiffusionBValueYY",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9606)": {
    tag: "(0018,9606)",
    vr: "FD",
    name: "DiffusionBValueYZ",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9607)": {
    tag: "(0018,9607)",
    vr: "FD",
    name: "DiffusionBValueZZ",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9621)": {
    tag: "(0018,9621)",
    vr: "SQ",
    name: "FunctionalMRSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9622)": {
    tag: "(0018,9622)",
    vr: "CS",
    name: "FunctionalSettlingPhaseFramesPresent",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9623)": {
    tag: "(0018,9623)",
    vr: "DT",
    name: "FunctionalSyncPulse",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9624)": {
    tag: "(0018,9624)",
    vr: "CS",
    name: "SettlingPhaseFrame",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9701)": {
    tag: "(0018,9701)",
    vr: "DT",
    name: "DecayCorrectionDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9715)": {
    tag: "(0018,9715)",
    vr: "FD",
    name: "StartDensityThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9716)": {
    tag: "(0018,9716)",
    vr: "FD",
    name: "StartRelativeDensityDifferenceThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9717)": {
    tag: "(0018,9717)",
    vr: "FD",
    name: "StartCardiacTriggerCountThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9718)": {
    tag: "(0018,9718)",
    vr: "FD",
    name: "StartRespiratoryTriggerCountThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9719)": {
    tag: "(0018,9719)",
    vr: "FD",
    name: "TerminationCountsThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9720)": {
    tag: "(0018,9720)",
    vr: "FD",
    name: "TerminationDensityThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9721)": {
    tag: "(0018,9721)",
    vr: "FD",
    name: "TerminationRelativeDensityThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9722)": {
    tag: "(0018,9722)",
    vr: "FD",
    name: "TerminationTimeThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9723)": {
    tag: "(0018,9723)",
    vr: "FD",
    name: "TerminationCardiacTriggerCountThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9724)": {
    tag: "(0018,9724)",
    vr: "FD",
    name: "TerminationRespiratoryTriggerCountThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9725)": {
    tag: "(0018,9725)",
    vr: "CS",
    name: "DetectorGeometry",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9726)": {
    tag: "(0018,9726)",
    vr: "FD",
    name: "TransverseDetectorSeparation",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9727)": {
    tag: "(0018,9727)",
    vr: "FD",
    name: "AxialDetectorDimension",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9729)": {
    tag: "(0018,9729)",
    vr: "US",
    name: "RadiopharmaceuticalAgentNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9732)": {
    tag: "(0018,9732)",
    vr: "SQ",
    name: "PETFrameAcquisitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9733)": {
    tag: "(0018,9733)",
    vr: "SQ",
    name: "PETDetectorMotionDetailsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9734)": {
    tag: "(0018,9734)",
    vr: "SQ",
    name: "PETTableDynamicsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9735)": {
    tag: "(0018,9735)",
    vr: "SQ",
    name: "PETPositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9736)": {
    tag: "(0018,9736)",
    vr: "SQ",
    name: "PETFrameCorrectionFactorsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9737)": {
    tag: "(0018,9737)",
    vr: "SQ",
    name: "RadiopharmaceuticalUsageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9738)": {
    tag: "(0018,9738)",
    vr: "CS",
    name: "AttenuationCorrectionSource",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9739)": {
    tag: "(0018,9739)",
    vr: "US",
    name: "NumberOfIterations",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9740)": {
    tag: "(0018,9740)",
    vr: "US",
    name: "NumberOfSubsets",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9749)": {
    tag: "(0018,9749)",
    vr: "SQ",
    name: "PETReconstructionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9751)": {
    tag: "(0018,9751)",
    vr: "SQ",
    name: "PETFrameTypeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9755)": {
    tag: "(0018,9755)",
    vr: "CS",
    name: "TimeOfFlightInformationUsed",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9756)": {
    tag: "(0018,9756)",
    vr: "CS",
    name: "ReconstructionType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9758)": {
    tag: "(0018,9758)",
    vr: "CS",
    name: "DecayCorrected",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9759)": {
    tag: "(0018,9759)",
    vr: "CS",
    name: "AttenuationCorrected",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9760)": {
    tag: "(0018,9760)",
    vr: "CS",
    name: "ScatterCorrected",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9761)": {
    tag: "(0018,9761)",
    vr: "CS",
    name: "DeadTimeCorrected",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9762)": {
    tag: "(0018,9762)",
    vr: "CS",
    name: "GantryMotionCorrected",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9763)": {
    tag: "(0018,9763)",
    vr: "CS",
    name: "PatientMotionCorrected",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9764)": {
    tag: "(0018,9764)",
    vr: "CS",
    name: "CountLossNormalizationCorrected",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9765)": {
    tag: "(0018,9765)",
    vr: "CS",
    name: "RandomsCorrected",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9766)": {
    tag: "(0018,9766)",
    vr: "CS",
    name: "NonUniformRadialSamplingCorrected",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9767)": {
    tag: "(0018,9767)",
    vr: "CS",
    name: "SensitivityCalibrated",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9768)": {
    tag: "(0018,9768)",
    vr: "CS",
    name: "DetectorNormalizationCorrection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9769)": {
    tag: "(0018,9769)",
    vr: "CS",
    name: "IterativeReconstructionMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9770)": {
    tag: "(0018,9770)",
    vr: "CS",
    name: "AttenuationCorrectionTemporalRelationship",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9771)": {
    tag: "(0018,9771)",
    vr: "SQ",
    name: "PatientPhysiologicalStateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9772)": {
    tag: "(0018,9772)",
    vr: "SQ",
    name: "PatientPhysiologicalStateCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9801)": {
    tag: "(0018,9801)",
    vr: "FD",
    name: "DepthsOfFocus",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,9803)": {
    tag: "(0018,9803)",
    vr: "SQ",
    name: "ExcludedIntervalsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9804)": {
    tag: "(0018,9804)",
    vr: "DT",
    name: "ExclusionStartDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9805)": {
    tag: "(0018,9805)",
    vr: "FD",
    name: "ExclusionDuration",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9806)": {
    tag: "(0018,9806)",
    vr: "SQ",
    name: "USImageDescriptionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9807)": {
    tag: "(0018,9807)",
    vr: "SQ",
    name: "ImageDataTypeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9808)": {
    tag: "(0018,9808)",
    vr: "CS",
    name: "DataType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9809)": {
    tag: "(0018,9809)",
    vr: "SQ",
    name: "TransducerScanPatternCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,980B)": {
    tag: "(0018,980B)",
    vr: "CS",
    name: "AliasedDataType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,980C)": {
    tag: "(0018,980C)",
    vr: "CS",
    name: "PositionMeasuringDeviceUsed",
    vm: "1",
    version: "DICOM"
  },
  "(0018,980D)": {
    tag: "(0018,980D)",
    vr: "SQ",
    name: "TransducerGeometryCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,980E)": {
    tag: "(0018,980E)",
    vr: "SQ",
    name: "TransducerBeamSteeringCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,980F)": {
    tag: "(0018,980F)",
    vr: "SQ",
    name: "TransducerApplicationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9810)": {
    tag: "(0018,9810)",
    vr: "xs",
    name: "ZeroVelocityPixelValue",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9900)": {
    tag: "(0018,9900)",
    vr: "LO",
    name: "ReferenceLocationLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9901)": {
    tag: "(0018,9901)",
    vr: "UT",
    name: "ReferenceLocationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9902)": {
    tag: "(0018,9902)",
    vr: "SQ",
    name: "ReferenceBasisCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9903)": {
    tag: "(0018,9903)",
    vr: "SQ",
    name: "ReferenceGeometryCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9904)": {
    tag: "(0018,9904)",
    vr: "DS",
    name: "OffsetDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9905)": {
    tag: "(0018,9905)",
    vr: "CS",
    name: "OffsetDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9906)": {
    tag: "(0018,9906)",
    vr: "SQ",
    name: "PotentialScheduledProtocolCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9907)": {
    tag: "(0018,9907)",
    vr: "SQ",
    name: "PotentialRequestedProcedureCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9908)": {
    tag: "(0018,9908)",
    vr: "UC",
    name: "PotentialReasonsForProcedure",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,9909)": {
    tag: "(0018,9909)",
    vr: "SQ",
    name: "PotentialReasonsForProcedureCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,990A)": {
    tag: "(0018,990A)",
    vr: "UC",
    name: "PotentialDiagnosticTasks",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,990B)": {
    tag: "(0018,990B)",
    vr: "SQ",
    name: "ContraindicationsCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,990C)": {
    tag: "(0018,990C)",
    vr: "SQ",
    name: "ReferencedDefinedProtocolSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,990D)": {
    tag: "(0018,990D)",
    vr: "SQ",
    name: "ReferencedPerformedProtocolSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,990E)": {
    tag: "(0018,990E)",
    vr: "SQ",
    name: "PredecessorProtocolSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,990F)": {
    tag: "(0018,990F)",
    vr: "UT",
    name: "ProtocolPlanningInformation",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9910)": {
    tag: "(0018,9910)",
    vr: "UT",
    name: "ProtocolDesignRationale",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9911)": {
    tag: "(0018,9911)",
    vr: "SQ",
    name: "PatientSpecificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9912)": {
    tag: "(0018,9912)",
    vr: "SQ",
    name: "ModelSpecificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9913)": {
    tag: "(0018,9913)",
    vr: "SQ",
    name: "ParametersSpecificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9914)": {
    tag: "(0018,9914)",
    vr: "SQ",
    name: "InstructionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9915)": {
    tag: "(0018,9915)",
    vr: "US",
    name: "InstructionIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9916)": {
    tag: "(0018,9916)",
    vr: "LO",
    name: "InstructionText",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9917)": {
    tag: "(0018,9917)",
    vr: "UT",
    name: "InstructionDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9918)": {
    tag: "(0018,9918)",
    vr: "CS",
    name: "InstructionPerformedFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9919)": {
    tag: "(0018,9919)",
    vr: "DT",
    name: "InstructionPerformedDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,991A)": {
    tag: "(0018,991A)",
    vr: "UT",
    name: "InstructionPerformanceComment",
    vm: "1",
    version: "DICOM"
  },
  "(0018,991B)": {
    tag: "(0018,991B)",
    vr: "SQ",
    name: "PatientPositioningInstructionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,991C)": {
    tag: "(0018,991C)",
    vr: "SQ",
    name: "PositioningMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,991D)": {
    tag: "(0018,991D)",
    vr: "SQ",
    name: "PositioningLandmarkSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,991E)": {
    tag: "(0018,991E)",
    vr: "UI",
    name: "TargetFrameOfReferenceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0018,991F)": {
    tag: "(0018,991F)",
    vr: "SQ",
    name: "AcquisitionProtocolElementSpecificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9920)": {
    tag: "(0018,9920)",
    vr: "SQ",
    name: "AcquisitionProtocolElementSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9921)": {
    tag: "(0018,9921)",
    vr: "US",
    name: "ProtocolElementNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9922)": {
    tag: "(0018,9922)",
    vr: "LO",
    name: "ProtocolElementName",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9923)": {
    tag: "(0018,9923)",
    vr: "UT",
    name: "ProtocolElementCharacteristicsSummary",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9924)": {
    tag: "(0018,9924)",
    vr: "UT",
    name: "ProtocolElementPurpose",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9930)": {
    tag: "(0018,9930)",
    vr: "CS",
    name: "AcquisitionMotion",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9931)": {
    tag: "(0018,9931)",
    vr: "SQ",
    name: "AcquisitionStartLocationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9932)": {
    tag: "(0018,9932)",
    vr: "SQ",
    name: "AcquisitionEndLocationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9933)": {
    tag: "(0018,9933)",
    vr: "SQ",
    name: "ReconstructionProtocolElementSpecificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9934)": {
    tag: "(0018,9934)",
    vr: "SQ",
    name: "ReconstructionProtocolElementSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9935)": {
    tag: "(0018,9935)",
    vr: "SQ",
    name: "StorageProtocolElementSpecificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9936)": {
    tag: "(0018,9936)",
    vr: "SQ",
    name: "StorageProtocolElementSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9937)": {
    tag: "(0018,9937)",
    vr: "LO",
    name: "RequestedSeriesDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9938)": {
    tag: "(0018,9938)",
    vr: "US",
    name: "SourceAcquisitionProtocolElementNumber",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,9939)": {
    tag: "(0018,9939)",
    vr: "US",
    name: "SourceAcquisitionBeamNumber",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,993A)": {
    tag: "(0018,993A)",
    vr: "US",
    name: "SourceReconstructionProtocolElementNumber",
    vm: "1-n",
    version: "DICOM"
  },
  "(0018,993B)": {
    tag: "(0018,993B)",
    vr: "SQ",
    name: "ReconstructionStartLocationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,993C)": {
    tag: "(0018,993C)",
    vr: "SQ",
    name: "ReconstructionEndLocationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,993D)": {
    tag: "(0018,993D)",
    vr: "SQ",
    name: "ReconstructionAlgorithmSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,993E)": {
    tag: "(0018,993E)",
    vr: "SQ",
    name: "ReconstructionTargetCenterLocationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9941)": {
    tag: "(0018,9941)",
    vr: "UT",
    name: "ImageFilterDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9942)": {
    tag: "(0018,9942)",
    vr: "FD",
    name: "CTDIvolNotificationTrigger",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9943)": {
    tag: "(0018,9943)",
    vr: "FD",
    name: "DLPNotificationTrigger",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9944)": {
    tag: "(0018,9944)",
    vr: "CS",
    name: "AutoKVPSelectionType",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9945)": {
    tag: "(0018,9945)",
    vr: "FD",
    name: "AutoKVPUpperBound",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9946)": {
    tag: "(0018,9946)",
    vr: "FD",
    name: "AutoKVPLowerBound",
    vm: "1",
    version: "DICOM"
  },
  "(0018,9947)": {
    tag: "(0018,9947)",
    vr: "CS",
    name: "ProtocolDefinedPatientPosition",
    vm: "1",
    version: "DICOM"
  },
  "(0018,A001)": {
    tag: "(0018,A001)",
    vr: "SQ",
    name: "ContributingEquipmentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0018,A002)": {
    tag: "(0018,A002)",
    vr: "DT",
    name: "ContributionDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0018,A003)": {
    tag: "(0018,A003)",
    vr: "ST",
    name: "ContributionDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0020,000D)": {
    tag: "(0020,000D)",
    vr: "UI",
    name: "StudyInstanceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0020,000E)": {
    tag: "(0020,000E)",
    vr: "UI",
    name: "SeriesInstanceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0010)": {
    tag: "(0020,0010)",
    vr: "SH",
    name: "StudyID",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0011)": {
    tag: "(0020,0011)",
    vr: "IS",
    name: "SeriesNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0012)": {
    tag: "(0020,0012)",
    vr: "IS",
    name: "AcquisitionNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0013)": {
    tag: "(0020,0013)",
    vr: "IS",
    name: "InstanceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0019)": {
    tag: "(0020,0019)",
    vr: "IS",
    name: "ItemNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0020)": {
    tag: "(0020,0020)",
    vr: "CS",
    name: "PatientOrientation",
    vm: "2",
    version: "DICOM"
  },
  "(0020,0032)": {
    tag: "(0020,0032)",
    vr: "DS",
    name: "ImagePositionPatient",
    vm: "3",
    version: "DICOM"
  },
  "(0020,0037)": {
    tag: "(0020,0037)",
    vr: "DS",
    name: "ImageOrientationPatient",
    vm: "6",
    version: "DICOM"
  },
  "(0020,0052)": {
    tag: "(0020,0052)",
    vr: "UI",
    name: "FrameOfReferenceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0060)": {
    tag: "(0020,0060)",
    vr: "CS",
    name: "Laterality",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0062)": {
    tag: "(0020,0062)",
    vr: "CS",
    name: "ImageLaterality",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0100)": {
    tag: "(0020,0100)",
    vr: "IS",
    name: "TemporalPositionIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0105)": {
    tag: "(0020,0105)",
    vr: "IS",
    name: "NumberOfTemporalPositions",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0110)": {
    tag: "(0020,0110)",
    vr: "DS",
    name: "TemporalResolution",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0200)": {
    tag: "(0020,0200)",
    vr: "UI",
    name: "SynchronizationFrameOfReferenceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0020,0242)": {
    tag: "(0020,0242)",
    vr: "UI",
    name: "SOPInstanceUIDOfConcatenationSource",
    vm: "1",
    version: "DICOM"
  },
  "(0020,1002)": {
    tag: "(0020,1002)",
    vr: "IS",
    name: "ImagesInAcquisition",
    vm: "1",
    version: "DICOM"
  },
  "(0020,103F)": {
    tag: "(0020,103F)",
    vr: "LO",
    name: "TargetPositionReferenceIndicator",
    vm: "1",
    version: "DICOM"
  },
  "(0020,1040)": {
    tag: "(0020,1040)",
    vr: "LO",
    name: "PositionReferenceIndicator",
    vm: "1",
    version: "DICOM"
  },
  "(0020,1041)": {
    tag: "(0020,1041)",
    vr: "DS",
    name: "SliceLocation",
    vm: "1",
    version: "DICOM"
  },
  "(0020,1200)": {
    tag: "(0020,1200)",
    vr: "IS",
    name: "NumberOfPatientRelatedStudies",
    vm: "1",
    version: "DICOM"
  },
  "(0020,1202)": {
    tag: "(0020,1202)",
    vr: "IS",
    name: "NumberOfPatientRelatedSeries",
    vm: "1",
    version: "DICOM"
  },
  "(0020,1204)": {
    tag: "(0020,1204)",
    vr: "IS",
    name: "NumberOfPatientRelatedInstances",
    vm: "1",
    version: "DICOM"
  },
  "(0020,1206)": {
    tag: "(0020,1206)",
    vr: "IS",
    name: "NumberOfStudyRelatedSeries",
    vm: "1",
    version: "DICOM"
  },
  "(0020,1208)": {
    tag: "(0020,1208)",
    vr: "IS",
    name: "NumberOfStudyRelatedInstances",
    vm: "1",
    version: "DICOM"
  },
  "(0020,1209)": {
    tag: "(0020,1209)",
    vr: "IS",
    name: "NumberOfSeriesRelatedInstances",
    vm: "1",
    version: "DICOM"
  },
  "(0020,4000)": {
    tag: "(0020,4000)",
    vr: "LT",
    name: "ImageComments",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9056)": {
    tag: "(0020,9056)",
    vr: "SH",
    name: "StackID",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9057)": {
    tag: "(0020,9057)",
    vr: "UL",
    name: "InStackPositionNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9071)": {
    tag: "(0020,9071)",
    vr: "SQ",
    name: "FrameAnatomySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9072)": {
    tag: "(0020,9072)",
    vr: "CS",
    name: "FrameLaterality",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9111)": {
    tag: "(0020,9111)",
    vr: "SQ",
    name: "FrameContentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9113)": {
    tag: "(0020,9113)",
    vr: "SQ",
    name: "PlanePositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9116)": {
    tag: "(0020,9116)",
    vr: "SQ",
    name: "PlaneOrientationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9128)": {
    tag: "(0020,9128)",
    vr: "UL",
    name: "TemporalPositionIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9153)": {
    tag: "(0020,9153)",
    vr: "FD",
    name: "NominalCardiacTriggerDelayTime",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9154)": {
    tag: "(0020,9154)",
    vr: "FL",
    name: "NominalCardiacTriggerTimePriorToRPeak",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9155)": {
    tag: "(0020,9155)",
    vr: "FL",
    name: "ActualCardiacTriggerTimePriorToRPeak",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9156)": {
    tag: "(0020,9156)",
    vr: "US",
    name: "FrameAcquisitionNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9157)": {
    tag: "(0020,9157)",
    vr: "UL",
    name: "DimensionIndexValues",
    vm: "1-n",
    version: "DICOM"
  },
  "(0020,9158)": {
    tag: "(0020,9158)",
    vr: "LT",
    name: "FrameComments",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9161)": {
    tag: "(0020,9161)",
    vr: "UI",
    name: "ConcatenationUID",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9162)": {
    tag: "(0020,9162)",
    vr: "US",
    name: "InConcatenationNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9163)": {
    tag: "(0020,9163)",
    vr: "US",
    name: "InConcatenationTotalNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9164)": {
    tag: "(0020,9164)",
    vr: "UI",
    name: "DimensionOrganizationUID",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9165)": {
    tag: "(0020,9165)",
    vr: "AT",
    name: "DimensionIndexPointer",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9167)": {
    tag: "(0020,9167)",
    vr: "AT",
    name: "FunctionalGroupPointer",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9170)": {
    tag: "(0020,9170)",
    vr: "SQ",
    name: "UnassignedSharedConvertedAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9171)": {
    tag: "(0020,9171)",
    vr: "SQ",
    name: "UnassignedPerFrameConvertedAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9172)": {
    tag: "(0020,9172)",
    vr: "SQ",
    name: "ConversionSourceAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9213)": {
    tag: "(0020,9213)",
    vr: "LO",
    name: "DimensionIndexPrivateCreator",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9221)": {
    tag: "(0020,9221)",
    vr: "SQ",
    name: "DimensionOrganizationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9222)": {
    tag: "(0020,9222)",
    vr: "SQ",
    name: "DimensionIndexSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9228)": {
    tag: "(0020,9228)",
    vr: "UL",
    name: "ConcatenationFrameOffsetNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9238)": {
    tag: "(0020,9238)",
    vr: "LO",
    name: "FunctionalGroupPrivateCreator",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9241)": {
    tag: "(0020,9241)",
    vr: "FL",
    name: "NominalPercentageOfCardiacPhase",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9245)": {
    tag: "(0020,9245)",
    vr: "FL",
    name: "NominalPercentageOfRespiratoryPhase",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9246)": {
    tag: "(0020,9246)",
    vr: "FL",
    name: "StartingRespiratoryAmplitude",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9247)": {
    tag: "(0020,9247)",
    vr: "CS",
    name: "StartingRespiratoryPhase",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9248)": {
    tag: "(0020,9248)",
    vr: "FL",
    name: "EndingRespiratoryAmplitude",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9249)": {
    tag: "(0020,9249)",
    vr: "CS",
    name: "EndingRespiratoryPhase",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9250)": {
    tag: "(0020,9250)",
    vr: "CS",
    name: "RespiratoryTriggerType",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9251)": {
    tag: "(0020,9251)",
    vr: "FD",
    name: "RRIntervalTimeNominal",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9252)": {
    tag: "(0020,9252)",
    vr: "FD",
    name: "ActualCardiacTriggerDelayTime",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9253)": {
    tag: "(0020,9253)",
    vr: "SQ",
    name: "RespiratorySynchronizationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9254)": {
    tag: "(0020,9254)",
    vr: "FD",
    name: "RespiratoryIntervalTime",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9255)": {
    tag: "(0020,9255)",
    vr: "FD",
    name: "NominalRespiratoryTriggerDelayTime",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9256)": {
    tag: "(0020,9256)",
    vr: "FD",
    name: "RespiratoryTriggerDelayThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9257)": {
    tag: "(0020,9257)",
    vr: "FD",
    name: "ActualRespiratoryTriggerDelayTime",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9301)": {
    tag: "(0020,9301)",
    vr: "FD",
    name: "ImagePositionVolume",
    vm: "3",
    version: "DICOM"
  },
  "(0020,9302)": {
    tag: "(0020,9302)",
    vr: "FD",
    name: "ImageOrientationVolume",
    vm: "6",
    version: "DICOM"
  },
  "(0020,9307)": {
    tag: "(0020,9307)",
    vr: "CS",
    name: "UltrasoundAcquisitionGeometry",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9308)": {
    tag: "(0020,9308)",
    vr: "FD",
    name: "ApexPosition",
    vm: "3",
    version: "DICOM"
  },
  "(0020,9309)": {
    tag: "(0020,9309)",
    vr: "FD",
    name: "VolumeToTransducerMappingMatrix",
    vm: "16",
    version: "DICOM"
  },
  "(0020,930A)": {
    tag: "(0020,930A)",
    vr: "FD",
    name: "VolumeToTableMappingMatrix",
    vm: "16",
    version: "DICOM"
  },
  "(0020,930B)": {
    tag: "(0020,930B)",
    vr: "CS",
    name: "VolumeToTransducerRelationship",
    vm: "1",
    version: "DICOM"
  },
  "(0020,930C)": {
    tag: "(0020,930C)",
    vr: "CS",
    name: "PatientFrameOfReferenceSource",
    vm: "1",
    version: "DICOM"
  },
  "(0020,930D)": {
    tag: "(0020,930D)",
    vr: "FD",
    name: "TemporalPositionTimeOffset",
    vm: "1",
    version: "DICOM"
  },
  "(0020,930E)": {
    tag: "(0020,930E)",
    vr: "SQ",
    name: "PlanePositionVolumeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,930F)": {
    tag: "(0020,930F)",
    vr: "SQ",
    name: "PlaneOrientationVolumeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9310)": {
    tag: "(0020,9310)",
    vr: "SQ",
    name: "TemporalPositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9311)": {
    tag: "(0020,9311)",
    vr: "CS",
    name: "DimensionOrganizationType",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9312)": {
    tag: "(0020,9312)",
    vr: "UI",
    name: "VolumeFrameOfReferenceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9313)": {
    tag: "(0020,9313)",
    vr: "UI",
    name: "TableFrameOfReferenceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9421)": {
    tag: "(0020,9421)",
    vr: "LO",
    name: "DimensionDescriptionLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9450)": {
    tag: "(0020,9450)",
    vr: "SQ",
    name: "PatientOrientationInFrameSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9453)": {
    tag: "(0020,9453)",
    vr: "LO",
    name: "FrameLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9518)": {
    tag: "(0020,9518)",
    vr: "US",
    name: "AcquisitionIndex",
    vm: "1-n",
    version: "DICOM"
  },
  "(0020,9529)": {
    tag: "(0020,9529)",
    vr: "SQ",
    name: "ContributingSOPInstancesReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0020,9536)": {
    tag: "(0020,9536)",
    vr: "US",
    name: "ReconstructionIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0001)": {
    tag: "(0022,0001)",
    vr: "US",
    name: "LightPathFilterPassThroughWavelength",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0002)": {
    tag: "(0022,0002)",
    vr: "US",
    name: "LightPathFilterPassBand",
    vm: "2",
    version: "DICOM"
  },
  "(0022,0003)": {
    tag: "(0022,0003)",
    vr: "US",
    name: "ImagePathFilterPassThroughWavelength",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0004)": {
    tag: "(0022,0004)",
    vr: "US",
    name: "ImagePathFilterPassBand",
    vm: "2",
    version: "DICOM"
  },
  "(0022,0005)": {
    tag: "(0022,0005)",
    vr: "CS",
    name: "PatientEyeMovementCommanded",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0006)": {
    tag: "(0022,0006)",
    vr: "SQ",
    name: "PatientEyeMovementCommandCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0007)": {
    tag: "(0022,0007)",
    vr: "FL",
    name: "SphericalLensPower",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0008)": {
    tag: "(0022,0008)",
    vr: "FL",
    name: "CylinderLensPower",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0009)": {
    tag: "(0022,0009)",
    vr: "FL",
    name: "CylinderAxis",
    vm: "1",
    version: "DICOM"
  },
  "(0022,000A)": {
    tag: "(0022,000A)",
    vr: "FL",
    name: "EmmetropicMagnification",
    vm: "1",
    version: "DICOM"
  },
  "(0022,000B)": {
    tag: "(0022,000B)",
    vr: "FL",
    name: "IntraOcularPressure",
    vm: "1",
    version: "DICOM"
  },
  "(0022,000C)": {
    tag: "(0022,000C)",
    vr: "FL",
    name: "HorizontalFieldOfView",
    vm: "1",
    version: "DICOM"
  },
  "(0022,000D)": {
    tag: "(0022,000D)",
    vr: "CS",
    name: "PupilDilated",
    vm: "1",
    version: "DICOM"
  },
  "(0022,000E)": {
    tag: "(0022,000E)",
    vr: "FL",
    name: "DegreeOfDilation",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0010)": {
    tag: "(0022,0010)",
    vr: "FL",
    name: "StereoBaselineAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0011)": {
    tag: "(0022,0011)",
    vr: "FL",
    name: "StereoBaselineDisplacement",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0012)": {
    tag: "(0022,0012)",
    vr: "FL",
    name: "StereoHorizontalPixelOffset",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0013)": {
    tag: "(0022,0013)",
    vr: "FL",
    name: "StereoVerticalPixelOffset",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0014)": {
    tag: "(0022,0014)",
    vr: "FL",
    name: "StereoRotation",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0015)": {
    tag: "(0022,0015)",
    vr: "SQ",
    name: "AcquisitionDeviceTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0016)": {
    tag: "(0022,0016)",
    vr: "SQ",
    name: "IlluminationTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0017)": {
    tag: "(0022,0017)",
    vr: "SQ",
    name: "LightPathFilterTypeStackCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0018)": {
    tag: "(0022,0018)",
    vr: "SQ",
    name: "ImagePathFilterTypeStackCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0019)": {
    tag: "(0022,0019)",
    vr: "SQ",
    name: "LensesCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,001A)": {
    tag: "(0022,001A)",
    vr: "SQ",
    name: "ChannelDescriptionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,001B)": {
    tag: "(0022,001B)",
    vr: "SQ",
    name: "RefractiveStateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,001C)": {
    tag: "(0022,001C)",
    vr: "SQ",
    name: "MydriaticAgentCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,001D)": {
    tag: "(0022,001D)",
    vr: "SQ",
    name: "RelativeImagePositionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,001E)": {
    tag: "(0022,001E)",
    vr: "FL",
    name: "CameraAngleOfView",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0020)": {
    tag: "(0022,0020)",
    vr: "SQ",
    name: "StereoPairsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0021)": {
    tag: "(0022,0021)",
    vr: "SQ",
    name: "LeftImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0022)": {
    tag: "(0022,0022)",
    vr: "SQ",
    name: "RightImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0028)": {
    tag: "(0022,0028)",
    vr: "CS",
    name: "StereoPairsPresent",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0030)": {
    tag: "(0022,0030)",
    vr: "FL",
    name: "AxialLengthOfTheEye",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0031)": {
    tag: "(0022,0031)",
    vr: "SQ",
    name: "OphthalmicFrameLocationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0032)": {
    tag: "(0022,0032)",
    vr: "FL",
    name: "ReferenceCoordinates",
    vm: "2-2n",
    version: "DICOM"
  },
  "(0022,0035)": {
    tag: "(0022,0035)",
    vr: "FL",
    name: "DepthSpatialResolution",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0036)": {
    tag: "(0022,0036)",
    vr: "FL",
    name: "MaximumDepthDistortion",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0037)": {
    tag: "(0022,0037)",
    vr: "FL",
    name: "AlongScanSpatialResolution",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0038)": {
    tag: "(0022,0038)",
    vr: "FL",
    name: "MaximumAlongScanDistortion",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0039)": {
    tag: "(0022,0039)",
    vr: "CS",
    name: "OphthalmicImageOrientation",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0041)": {
    tag: "(0022,0041)",
    vr: "FL",
    name: "DepthOfTransverseImage",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0042)": {
    tag: "(0022,0042)",
    vr: "SQ",
    name: "MydriaticAgentConcentrationUnitsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0048)": {
    tag: "(0022,0048)",
    vr: "FL",
    name: "AcrossScanSpatialResolution",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0049)": {
    tag: "(0022,0049)",
    vr: "FL",
    name: "MaximumAcrossScanDistortion",
    vm: "1",
    version: "DICOM"
  },
  "(0022,004E)": {
    tag: "(0022,004E)",
    vr: "DS",
    name: "MydriaticAgentConcentration",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0055)": {
    tag: "(0022,0055)",
    vr: "FL",
    name: "IlluminationWaveLength",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0056)": {
    tag: "(0022,0056)",
    vr: "FL",
    name: "IlluminationPower",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0057)": {
    tag: "(0022,0057)",
    vr: "FL",
    name: "IlluminationBandwidth",
    vm: "1",
    version: "DICOM"
  },
  "(0022,0058)": {
    tag: "(0022,0058)",
    vr: "SQ",
    name: "MydriaticAgentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1007)": {
    tag: "(0022,1007)",
    vr: "SQ",
    name: "OphthalmicAxialMeasurementsRightEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1008)": {
    tag: "(0022,1008)",
    vr: "SQ",
    name: "OphthalmicAxialMeasurementsLeftEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1009)": {
    tag: "(0022,1009)",
    vr: "CS",
    name: "OphthalmicAxialMeasurementsDeviceType",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1010)": {
    tag: "(0022,1010)",
    vr: "CS",
    name: "OphthalmicAxialLengthMeasurementsType",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1012)": {
    tag: "(0022,1012)",
    vr: "SQ",
    name: "OphthalmicAxialLengthSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1019)": {
    tag: "(0022,1019)",
    vr: "FL",
    name: "OphthalmicAxialLength",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1024)": {
    tag: "(0022,1024)",
    vr: "SQ",
    name: "LensStatusCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1025)": {
    tag: "(0022,1025)",
    vr: "SQ",
    name: "VitreousStatusCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1028)": {
    tag: "(0022,1028)",
    vr: "SQ",
    name: "IOLFormulaCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1029)": {
    tag: "(0022,1029)",
    vr: "LO",
    name: "IOLFormulaDetail",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1033)": {
    tag: "(0022,1033)",
    vr: "FL",
    name: "KeratometerIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1035)": {
    tag: "(0022,1035)",
    vr: "SQ",
    name: "SourceOfOphthalmicAxialLengthCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1036)": {
    tag: "(0022,1036)",
    vr: "SQ",
    name: "SourceOfCornealSizeDataCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1037)": {
    tag: "(0022,1037)",
    vr: "FL",
    name: "TargetRefraction",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1039)": {
    tag: "(0022,1039)",
    vr: "CS",
    name: "RefractiveProcedureOccurred",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1040)": {
    tag: "(0022,1040)",
    vr: "SQ",
    name: "RefractiveSurgeryTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1044)": {
    tag: "(0022,1044)",
    vr: "SQ",
    name: "OphthalmicUltrasoundMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1045)": {
    tag: "(0022,1045)",
    vr: "SQ",
    name: "SurgicallyInducedAstigmatismSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1046)": {
    tag: "(0022,1046)",
    vr: "CS",
    name: "TypeOfOpticalCorrection",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1047)": {
    tag: "(0022,1047)",
    vr: "SQ",
    name: "ToricIOLPowerSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1048)": {
    tag: "(0022,1048)",
    vr: "SQ",
    name: "PredictedToricErrorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1049)": {
    tag: "(0022,1049)",
    vr: "CS",
    name: "PreSelectedForImplantation",
    vm: "1",
    version: "DICOM"
  },
  "(0022,104A)": {
    tag: "(0022,104A)",
    vr: "SQ",
    name: "ToricIOLPowerForExactEmmetropiaSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,104B)": {
    tag: "(0022,104B)",
    vr: "SQ",
    name: "ToricIOLPowerForExactTargetRefractionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1050)": {
    tag: "(0022,1050)",
    vr: "SQ",
    name: "OphthalmicAxialLengthMeasurementsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1053)": {
    tag: "(0022,1053)",
    vr: "FL",
    name: "IOLPower",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1054)": {
    tag: "(0022,1054)",
    vr: "FL",
    name: "PredictedRefractiveError",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1059)": {
    tag: "(0022,1059)",
    vr: "FL",
    name: "OphthalmicAxialLengthVelocity",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1065)": {
    tag: "(0022,1065)",
    vr: "LO",
    name: "LensStatusDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1066)": {
    tag: "(0022,1066)",
    vr: "LO",
    name: "VitreousStatusDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1090)": {
    tag: "(0022,1090)",
    vr: "SQ",
    name: "IOLPowerSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1092)": {
    tag: "(0022,1092)",
    vr: "SQ",
    name: "LensConstantSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1093)": {
    tag: "(0022,1093)",
    vr: "LO",
    name: "IOLManufacturer",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1095)": {
    tag: "(0022,1095)",
    vr: "LO",
    name: "ImplantName",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1096)": {
    tag: "(0022,1096)",
    vr: "SQ",
    name: "KeratometryMeasurementTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1097)": {
    tag: "(0022,1097)",
    vr: "LO",
    name: "ImplantPartNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1100)": {
    tag: "(0022,1100)",
    vr: "SQ",
    name: "ReferencedOphthalmicAxialMeasurementsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1101)": {
    tag: "(0022,1101)",
    vr: "SQ",
    name: "OphthalmicAxialLengthMeasurementsSegmentNameCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1103)": {
    tag: "(0022,1103)",
    vr: "SQ",
    name: "RefractiveErrorBeforeRefractiveSurgeryCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1121)": {
    tag: "(0022,1121)",
    vr: "FL",
    name: "IOLPowerForExactEmmetropia",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1122)": {
    tag: "(0022,1122)",
    vr: "FL",
    name: "IOLPowerForExactTargetRefraction",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1125)": {
    tag: "(0022,1125)",
    vr: "SQ",
    name: "AnteriorChamberDepthDefinitionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1127)": {
    tag: "(0022,1127)",
    vr: "SQ",
    name: "LensThicknessSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1128)": {
    tag: "(0022,1128)",
    vr: "SQ",
    name: "AnteriorChamberDepthSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,112A)": {
    tag: "(0022,112A)",
    vr: "SQ",
    name: "CalculationCommentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,112B)": {
    tag: "(0022,112B)",
    vr: "CS",
    name: "CalculationCommentType",
    vm: "1",
    version: "DICOM"
  },
  "(0022,112C)": {
    tag: "(0022,112C)",
    vr: "LT",
    name: "CalculationComment",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1130)": {
    tag: "(0022,1130)",
    vr: "FL",
    name: "LensThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1131)": {
    tag: "(0022,1131)",
    vr: "FL",
    name: "AnteriorChamberDepth",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1132)": {
    tag: "(0022,1132)",
    vr: "SQ",
    name: "SourceOfLensThicknessDataCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1133)": {
    tag: "(0022,1133)",
    vr: "SQ",
    name: "SourceOfAnteriorChamberDepthDataCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1134)": {
    tag: "(0022,1134)",
    vr: "SQ",
    name: "SourceOfRefractiveMeasurementsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1135)": {
    tag: "(0022,1135)",
    vr: "SQ",
    name: "SourceOfRefractiveMeasurementsCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1140)": {
    tag: "(0022,1140)",
    vr: "CS",
    name: "OphthalmicAxialLengthMeasurementModified",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1150)": {
    tag: "(0022,1150)",
    vr: "SQ",
    name: "OphthalmicAxialLengthDataSourceCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1155)": {
    tag: "(0022,1155)",
    vr: "FL",
    name: "SignalToNoiseRatio",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1159)": {
    tag: "(0022,1159)",
    vr: "LO",
    name: "OphthalmicAxialLengthDataSourceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1210)": {
    tag: "(0022,1210)",
    vr: "SQ",
    name: "OphthalmicAxialLengthMeasurementsTotalLengthSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1211)": {
    tag: "(0022,1211)",
    vr: "SQ",
    name: "OphthalmicAxialLengthMeasurementsSegmentalLengthSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1212)": {
    tag: "(0022,1212)",
    vr: "SQ",
    name: "OphthalmicAxialLengthMeasurementsLengthSummationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1220)": {
    tag: "(0022,1220)",
    vr: "SQ",
    name: "UltrasoundOphthalmicAxialLengthMeasurementsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1225)": {
    tag: "(0022,1225)",
    vr: "SQ",
    name: "OpticalOphthalmicAxialLengthMeasurementsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1230)": {
    tag: "(0022,1230)",
    vr: "SQ",
    name: "UltrasoundSelectedOphthalmicAxialLengthSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1250)": {
    tag: "(0022,1250)",
    vr: "SQ",
    name: "OphthalmicAxialLengthSelectionMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1255)": {
    tag: "(0022,1255)",
    vr: "SQ",
    name: "OpticalSelectedOphthalmicAxialLengthSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1257)": {
    tag: "(0022,1257)",
    vr: "SQ",
    name: "SelectedSegmentalOphthalmicAxialLengthSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1260)": {
    tag: "(0022,1260)",
    vr: "SQ",
    name: "SelectedTotalOphthalmicAxialLengthSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1262)": {
    tag: "(0022,1262)",
    vr: "SQ",
    name: "OphthalmicAxialLengthQualityMetricSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1300)": {
    tag: "(0022,1300)",
    vr: "SQ",
    name: "IntraocularLensCalculationsRightEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1310)": {
    tag: "(0022,1310)",
    vr: "SQ",
    name: "IntraocularLensCalculationsLeftEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1330)": {
    tag: "(0022,1330)",
    vr: "SQ",
    name: "ReferencedOphthalmicAxialLengthMeasurementQCImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1415)": {
    tag: "(0022,1415)",
    vr: "CS",
    name: "OphthalmicMappingDeviceType",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1420)": {
    tag: "(0022,1420)",
    vr: "SQ",
    name: "AcquisitionMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1423)": {
    tag: "(0022,1423)",
    vr: "SQ",
    name: "AcquisitionMethodAlgorithmSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1436)": {
    tag: "(0022,1436)",
    vr: "SQ",
    name: "OphthalmicThicknessMapTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1443)": {
    tag: "(0022,1443)",
    vr: "SQ",
    name: "OphthalmicThicknessMappingNormalsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1445)": {
    tag: "(0022,1445)",
    vr: "SQ",
    name: "RetinalThicknessDefinitionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1450)": {
    tag: "(0022,1450)",
    vr: "SQ",
    name: "PixelValueMappingToCodedConceptSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1452)": {
    tag: "(0022,1452)",
    vr: "xs",
    name: "MappedPixelValue",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1454)": {
    tag: "(0022,1454)",
    vr: "LO",
    name: "PixelValueMappingExplanation",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1458)": {
    tag: "(0022,1458)",
    vr: "SQ",
    name: "OphthalmicThicknessMapQualityThresholdSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1460)": {
    tag: "(0022,1460)",
    vr: "FL",
    name: "OphthalmicThicknessMapThresholdQualityRating",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1463)": {
    tag: "(0022,1463)",
    vr: "FL",
    name: "AnatomicStructureReferencePoint",
    vm: "2",
    version: "DICOM"
  },
  "(0022,1465)": {
    tag: "(0022,1465)",
    vr: "SQ",
    name: "RegistrationToLocalizerSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1466)": {
    tag: "(0022,1466)",
    vr: "CS",
    name: "RegisteredLocalizerUnits",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1467)": {
    tag: "(0022,1467)",
    vr: "FL",
    name: "RegisteredLocalizerTopLeftHandCorner",
    vm: "2",
    version: "DICOM"
  },
  "(0022,1468)": {
    tag: "(0022,1468)",
    vr: "FL",
    name: "RegisteredLocalizerBottomRightHandCorner",
    vm: "2",
    version: "DICOM"
  },
  "(0022,1470)": {
    tag: "(0022,1470)",
    vr: "SQ",
    name: "OphthalmicThicknessMapQualityRatingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1472)": {
    tag: "(0022,1472)",
    vr: "SQ",
    name: "RelevantOPTAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1512)": {
    tag: "(0022,1512)",
    vr: "SQ",
    name: "TransformationMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1513)": {
    tag: "(0022,1513)",
    vr: "SQ",
    name: "TransformationAlgorithmSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1515)": {
    tag: "(0022,1515)",
    vr: "CS",
    name: "OphthalmicAxialLengthMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1517)": {
    tag: "(0022,1517)",
    vr: "FL",
    name: "OphthalmicFOV",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1518)": {
    tag: "(0022,1518)",
    vr: "SQ",
    name: "TwoDimensionalToThreeDimensionalMapSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1525)": {
    tag: "(0022,1525)",
    vr: "SQ",
    name: "WideFieldOphthalmicPhotographyQualityRatingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1526)": {
    tag: "(0022,1526)",
    vr: "SQ",
    name: "WideFieldOphthalmicPhotographyQualityThresholdSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1527)": {
    tag: "(0022,1527)",
    vr: "FL",
    name: "WideFieldOphthalmicPhotographyThresholdQualityRating",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1528)": {
    tag: "(0022,1528)",
    vr: "FL",
    name: "XCoordinatesCenterPixelViewAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1529)": {
    tag: "(0022,1529)",
    vr: "FL",
    name: "YCoordinatesCenterPixelViewAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1530)": {
    tag: "(0022,1530)",
    vr: "UL",
    name: "NumberOfMapPoints",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1531)": {
    tag: "(0022,1531)",
    vr: "OF",
    name: "TwoDimensionalToThreeDimensionalMapData",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1612)": {
    tag: "(0022,1612)",
    vr: "SQ",
    name: "DerivationAlgorithmSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1615)": {
    tag: "(0022,1615)",
    vr: "SQ",
    name: "OphthalmicImageTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1616)": {
    tag: "(0022,1616)",
    vr: "LO",
    name: "OphthalmicImageTypeDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1618)": {
    tag: "(0022,1618)",
    vr: "SQ",
    name: "ScanPatternTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1620)": {
    tag: "(0022,1620)",
    vr: "SQ",
    name: "ReferencedSurfaceMeshIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1622)": {
    tag: "(0022,1622)",
    vr: "CS",
    name: "OphthalmicVolumetricPropertiesFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1624)": {
    tag: "(0022,1624)",
    vr: "FL",
    name: "OphthalmicAnatomicReferencePointXCoordinate",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1626)": {
    tag: "(0022,1626)",
    vr: "FL",
    name: "OphthalmicAnatomicReferencePointYCoordinate",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1628)": {
    tag: "(0022,1628)",
    vr: "SQ",
    name: "OphthalmicEnFaceImageQualityRatingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1630)": {
    tag: "(0022,1630)",
    vr: "DS",
    name: "QualityThreshold",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1640)": {
    tag: "(0022,1640)",
    vr: "SQ",
    name: "OCTBscanAnalysisAcquisitionParametersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1642)": {
    tag: "(0022,1642)",
    vr: "UL",
    name: "NumberofBscansPerFrame",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1643)": {
    tag: "(0022,1643)",
    vr: "FL",
    name: "BscanSlabThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1644)": {
    tag: "(0022,1644)",
    vr: "FL",
    name: "DistanceBetweenBscanSlabs",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1645)": {
    tag: "(0022,1645)",
    vr: "FL",
    name: "BscanCycleTime",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1646)": {
    tag: "(0022,1646)",
    vr: "FL",
    name: "BscanCycleTimeVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0022,1649)": {
    tag: "(0022,1649)",
    vr: "FL",
    name: "AscanRate",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1650)": {
    tag: "(0022,1650)",
    vr: "FL",
    name: "BscanRate",
    vm: "1",
    version: "DICOM"
  },
  "(0022,1658)": {
    tag: "(0022,1658)",
    vr: "UL",
    name: "SurfaceMeshZPixelOffset",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0010)": {
    tag: "(0024,0010)",
    vr: "FL",
    name: "VisualFieldHorizontalExtent",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0011)": {
    tag: "(0024,0011)",
    vr: "FL",
    name: "VisualFieldVerticalExtent",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0012)": {
    tag: "(0024,0012)",
    vr: "CS",
    name: "VisualFieldShape",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0016)": {
    tag: "(0024,0016)",
    vr: "SQ",
    name: "ScreeningTestModeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0018)": {
    tag: "(0024,0018)",
    vr: "FL",
    name: "MaximumStimulusLuminance",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0020)": {
    tag: "(0024,0020)",
    vr: "FL",
    name: "BackgroundLuminance",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0021)": {
    tag: "(0024,0021)",
    vr: "SQ",
    name: "StimulusColorCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0024)": {
    tag: "(0024,0024)",
    vr: "SQ",
    name: "BackgroundIlluminationColorCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0025)": {
    tag: "(0024,0025)",
    vr: "FL",
    name: "StimulusArea",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0028)": {
    tag: "(0024,0028)",
    vr: "FL",
    name: "StimulusPresentationTime",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0032)": {
    tag: "(0024,0032)",
    vr: "SQ",
    name: "FixationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0033)": {
    tag: "(0024,0033)",
    vr: "SQ",
    name: "FixationMonitoringCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0034)": {
    tag: "(0024,0034)",
    vr: "SQ",
    name: "VisualFieldCatchTrialSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0035)": {
    tag: "(0024,0035)",
    vr: "US",
    name: "FixationCheckedQuantity",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0036)": {
    tag: "(0024,0036)",
    vr: "US",
    name: "PatientNotProperlyFixatedQuantity",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0037)": {
    tag: "(0024,0037)",
    vr: "CS",
    name: "PresentedVisualStimuliDataFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0038)": {
    tag: "(0024,0038)",
    vr: "US",
    name: "NumberOfVisualStimuli",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0039)": {
    tag: "(0024,0039)",
    vr: "CS",
    name: "ExcessiveFixationLossesDataFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0040)": {
    tag: "(0024,0040)",
    vr: "CS",
    name: "ExcessiveFixationLosses",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0042)": {
    tag: "(0024,0042)",
    vr: "US",
    name: "StimuliRetestingQuantity",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0044)": {
    tag: "(0024,0044)",
    vr: "LT",
    name: "CommentsOnPatientPerformanceOfVisualField",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0045)": {
    tag: "(0024,0045)",
    vr: "CS",
    name: "FalseNegativesEstimateFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0046)": {
    tag: "(0024,0046)",
    vr: "FL",
    name: "FalseNegativesEstimate",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0048)": {
    tag: "(0024,0048)",
    vr: "US",
    name: "NegativeCatchTrialsQuantity",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0050)": {
    tag: "(0024,0050)",
    vr: "US",
    name: "FalseNegativesQuantity",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0051)": {
    tag: "(0024,0051)",
    vr: "CS",
    name: "ExcessiveFalseNegativesDataFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0052)": {
    tag: "(0024,0052)",
    vr: "CS",
    name: "ExcessiveFalseNegatives",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0053)": {
    tag: "(0024,0053)",
    vr: "CS",
    name: "FalsePositivesEstimateFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0054)": {
    tag: "(0024,0054)",
    vr: "FL",
    name: "FalsePositivesEstimate",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0055)": {
    tag: "(0024,0055)",
    vr: "CS",
    name: "CatchTrialsDataFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0056)": {
    tag: "(0024,0056)",
    vr: "US",
    name: "PositiveCatchTrialsQuantity",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0057)": {
    tag: "(0024,0057)",
    vr: "CS",
    name: "TestPointNormalsDataFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0058)": {
    tag: "(0024,0058)",
    vr: "SQ",
    name: "TestPointNormalsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0059)": {
    tag: "(0024,0059)",
    vr: "CS",
    name: "GlobalDeviationProbabilityNormalsFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0060)": {
    tag: "(0024,0060)",
    vr: "US",
    name: "FalsePositivesQuantity",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0061)": {
    tag: "(0024,0061)",
    vr: "CS",
    name: "ExcessiveFalsePositivesDataFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0062)": {
    tag: "(0024,0062)",
    vr: "CS",
    name: "ExcessiveFalsePositives",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0063)": {
    tag: "(0024,0063)",
    vr: "CS",
    name: "VisualFieldTestNormalsFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0064)": {
    tag: "(0024,0064)",
    vr: "SQ",
    name: "ResultsNormalsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0065)": {
    tag: "(0024,0065)",
    vr: "SQ",
    name: "AgeCorrectedSensitivityDeviationAlgorithmSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0066)": {
    tag: "(0024,0066)",
    vr: "FL",
    name: "GlobalDeviationFromNormal",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0067)": {
    tag: "(0024,0067)",
    vr: "SQ",
    name: "GeneralizedDefectSensitivityDeviationAlgorithmSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0068)": {
    tag: "(0024,0068)",
    vr: "FL",
    name: "LocalizedDeviationFromNormal",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0069)": {
    tag: "(0024,0069)",
    vr: "LO",
    name: "PatientReliabilityIndicator",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0070)": {
    tag: "(0024,0070)",
    vr: "FL",
    name: "VisualFieldMeanSensitivity",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0071)": {
    tag: "(0024,0071)",
    vr: "FL",
    name: "GlobalDeviationProbability",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0072)": {
    tag: "(0024,0072)",
    vr: "CS",
    name: "LocalDeviationProbabilityNormalsFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0073)": {
    tag: "(0024,0073)",
    vr: "FL",
    name: "LocalizedDeviationProbability",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0074)": {
    tag: "(0024,0074)",
    vr: "CS",
    name: "ShortTermFluctuationCalculated",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0075)": {
    tag: "(0024,0075)",
    vr: "FL",
    name: "ShortTermFluctuation",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0076)": {
    tag: "(0024,0076)",
    vr: "CS",
    name: "ShortTermFluctuationProbabilityCalculated",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0077)": {
    tag: "(0024,0077)",
    vr: "FL",
    name: "ShortTermFluctuationProbability",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0078)": {
    tag: "(0024,0078)",
    vr: "CS",
    name: "CorrectedLocalizedDeviationFromNormalCalculated",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0079)": {
    tag: "(0024,0079)",
    vr: "FL",
    name: "CorrectedLocalizedDeviationFromNormal",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0080)": {
    tag: "(0024,0080)",
    vr: "CS",
    name: "CorrectedLocalizedDeviationFromNormalProbabilityCalculated",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0081)": {
    tag: "(0024,0081)",
    vr: "FL",
    name: "CorrectedLocalizedDeviationFromNormalProbability",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0083)": {
    tag: "(0024,0083)",
    vr: "SQ",
    name: "GlobalDeviationProbabilitySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0085)": {
    tag: "(0024,0085)",
    vr: "SQ",
    name: "LocalizedDeviationProbabilitySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0086)": {
    tag: "(0024,0086)",
    vr: "CS",
    name: "FovealSensitivityMeasured",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0087)": {
    tag: "(0024,0087)",
    vr: "FL",
    name: "FovealSensitivity",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0088)": {
    tag: "(0024,0088)",
    vr: "FL",
    name: "VisualFieldTestDuration",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0089)": {
    tag: "(0024,0089)",
    vr: "SQ",
    name: "VisualFieldTestPointSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0090)": {
    tag: "(0024,0090)",
    vr: "FL",
    name: "VisualFieldTestPointXCoordinate",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0091)": {
    tag: "(0024,0091)",
    vr: "FL",
    name: "VisualFieldTestPointYCoordinate",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0092)": {
    tag: "(0024,0092)",
    vr: "FL",
    name: "AgeCorrectedSensitivityDeviationValue",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0093)": {
    tag: "(0024,0093)",
    vr: "CS",
    name: "StimulusResults",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0094)": {
    tag: "(0024,0094)",
    vr: "FL",
    name: "SensitivityValue",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0095)": {
    tag: "(0024,0095)",
    vr: "CS",
    name: "RetestStimulusSeen",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0096)": {
    tag: "(0024,0096)",
    vr: "FL",
    name: "RetestSensitivityValue",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0097)": {
    tag: "(0024,0097)",
    vr: "SQ",
    name: "VisualFieldTestPointNormalsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0098)": {
    tag: "(0024,0098)",
    vr: "FL",
    name: "QuantifiedDefect",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0100)": {
    tag: "(0024,0100)",
    vr: "FL",
    name: "AgeCorrectedSensitivityDeviationProbabilityValue",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0102)": {
    tag: "(0024,0102)",
    vr: "CS",
    name: "GeneralizedDefectCorrectedSensitivityDeviationFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0103)": {
    tag: "(0024,0103)",
    vr: "FL",
    name: "GeneralizedDefectCorrectedSensitivityDeviationValue",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0104)": {
    tag: "(0024,0104)",
    vr: "FL",
    name: "GeneralizedDefectCorrectedSensitivityDeviationProbabilityValue",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0105)": {
    tag: "(0024,0105)",
    vr: "FL",
    name: "MinimumSensitivityValue",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0106)": {
    tag: "(0024,0106)",
    vr: "CS",
    name: "BlindSpotLocalized",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0107)": {
    tag: "(0024,0107)",
    vr: "FL",
    name: "BlindSpotXCoordinate",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0108)": {
    tag: "(0024,0108)",
    vr: "FL",
    name: "BlindSpotYCoordinate",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0110)": {
    tag: "(0024,0110)",
    vr: "SQ",
    name: "VisualAcuityMeasurementSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0112)": {
    tag: "(0024,0112)",
    vr: "SQ",
    name: "RefractiveParametersUsedOnPatientSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0113)": {
    tag: "(0024,0113)",
    vr: "CS",
    name: "MeasurementLaterality",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0114)": {
    tag: "(0024,0114)",
    vr: "SQ",
    name: "OphthalmicPatientClinicalInformationLeftEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0115)": {
    tag: "(0024,0115)",
    vr: "SQ",
    name: "OphthalmicPatientClinicalInformationRightEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0117)": {
    tag: "(0024,0117)",
    vr: "CS",
    name: "FovealPointNormativeDataFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0118)": {
    tag: "(0024,0118)",
    vr: "FL",
    name: "FovealPointProbabilityValue",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0120)": {
    tag: "(0024,0120)",
    vr: "CS",
    name: "ScreeningBaselineMeasured",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0122)": {
    tag: "(0024,0122)",
    vr: "SQ",
    name: "ScreeningBaselineMeasuredSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0124)": {
    tag: "(0024,0124)",
    vr: "CS",
    name: "ScreeningBaselineType",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0126)": {
    tag: "(0024,0126)",
    vr: "FL",
    name: "ScreeningBaselineValue",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0202)": {
    tag: "(0024,0202)",
    vr: "LO",
    name: "AlgorithmSource",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0306)": {
    tag: "(0024,0306)",
    vr: "LO",
    name: "DataSetName",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0307)": {
    tag: "(0024,0307)",
    vr: "LO",
    name: "DataSetVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0308)": {
    tag: "(0024,0308)",
    vr: "LO",
    name: "DataSetSource",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0309)": {
    tag: "(0024,0309)",
    vr: "LO",
    name: "DataSetDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0317)": {
    tag: "(0024,0317)",
    vr: "SQ",
    name: "VisualFieldTestReliabilityGlobalIndexSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0320)": {
    tag: "(0024,0320)",
    vr: "SQ",
    name: "VisualFieldGlobalResultsIndexSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0325)": {
    tag: "(0024,0325)",
    vr: "SQ",
    name: "DataObservationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0338)": {
    tag: "(0024,0338)",
    vr: "CS",
    name: "IndexNormalsFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0341)": {
    tag: "(0024,0341)",
    vr: "FL",
    name: "IndexProbability",
    vm: "1",
    version: "DICOM"
  },
  "(0024,0344)": {
    tag: "(0024,0344)",
    vr: "SQ",
    name: "IndexProbabilitySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0002)": {
    tag: "(0028,0002)",
    vr: "US",
    name: "SamplesPerPixel",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0003)": {
    tag: "(0028,0003)",
    vr: "US",
    name: "SamplesPerPixelUsed",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0004)": {
    tag: "(0028,0004)",
    vr: "CS",
    name: "PhotometricInterpretation",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0006)": {
    tag: "(0028,0006)",
    vr: "US",
    name: "PlanarConfiguration",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0008)": {
    tag: "(0028,0008)",
    vr: "IS",
    name: "NumberOfFrames",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0009)": {
    tag: "(0028,0009)",
    vr: "AT",
    name: "FrameIncrementPointer",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,000A)": {
    tag: "(0028,000A)",
    vr: "AT",
    name: "FrameDimensionPointer",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,0010)": {
    tag: "(0028,0010)",
    vr: "US",
    name: "Rows",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0011)": {
    tag: "(0028,0011)",
    vr: "US",
    name: "Columns",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0014)": {
    tag: "(0028,0014)",
    vr: "US",
    name: "UltrasoundColorDataPresent",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0030)": {
    tag: "(0028,0030)",
    vr: "DS",
    name: "PixelSpacing",
    vm: "2",
    version: "DICOM"
  },
  "(0028,0031)": {
    tag: "(0028,0031)",
    vr: "DS",
    name: "ZoomFactor",
    vm: "2",
    version: "DICOM"
  },
  "(0028,0032)": {
    tag: "(0028,0032)",
    vr: "DS",
    name: "ZoomCenter",
    vm: "2",
    version: "DICOM"
  },
  "(0028,0034)": {
    tag: "(0028,0034)",
    vr: "IS",
    name: "PixelAspectRatio",
    vm: "2",
    version: "DICOM"
  },
  "(0028,0051)": {
    tag: "(0028,0051)",
    vr: "CS",
    name: "CorrectedImage",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,0100)": {
    tag: "(0028,0100)",
    vr: "US",
    name: "BitsAllocated",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0101)": {
    tag: "(0028,0101)",
    vr: "US",
    name: "BitsStored",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0102)": {
    tag: "(0028,0102)",
    vr: "US",
    name: "HighBit",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0103)": {
    tag: "(0028,0103)",
    vr: "US",
    name: "PixelRepresentation",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0106)": {
    tag: "(0028,0106)",
    vr: "xs",
    name: "SmallestImagePixelValue",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0107)": {
    tag: "(0028,0107)",
    vr: "xs",
    name: "LargestImagePixelValue",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0108)": {
    tag: "(0028,0108)",
    vr: "xs",
    name: "SmallestPixelValueInSeries",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0109)": {
    tag: "(0028,0109)",
    vr: "xs",
    name: "LargestPixelValueInSeries",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0120)": {
    tag: "(0028,0120)",
    vr: "xs",
    name: "PixelPaddingValue",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0121)": {
    tag: "(0028,0121)",
    vr: "xs",
    name: "PixelPaddingRangeLimit",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0122)": {
    tag: "(0028,0122)",
    vr: "FL",
    name: "FloatPixelPaddingValue",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0123)": {
    tag: "(0028,0123)",
    vr: "FD",
    name: "DoubleFloatPixelPaddingValue",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0124)": {
    tag: "(0028,0124)",
    vr: "FL",
    name: "FloatPixelPaddingRangeLimit",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0125)": {
    tag: "(0028,0125)",
    vr: "FD",
    name: "DoubleFloatPixelPaddingRangeLimit",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0300)": {
    tag: "(0028,0300)",
    vr: "CS",
    name: "QualityControlImage",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0301)": {
    tag: "(0028,0301)",
    vr: "CS",
    name: "BurnedInAnnotation",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0302)": {
    tag: "(0028,0302)",
    vr: "CS",
    name: "RecognizableVisualFeatures",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0303)": {
    tag: "(0028,0303)",
    vr: "CS",
    name: "LongitudinalTemporalInformationModified",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0304)": {
    tag: "(0028,0304)",
    vr: "UI",
    name: "ReferencedColorPaletteInstanceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0A02)": {
    tag: "(0028,0A02)",
    vr: "CS",
    name: "PixelSpacingCalibrationType",
    vm: "1",
    version: "DICOM"
  },
  "(0028,0A04)": {
    tag: "(0028,0A04)",
    vr: "LO",
    name: "PixelSpacingCalibrationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1040)": {
    tag: "(0028,1040)",
    vr: "CS",
    name: "PixelIntensityRelationship",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1041)": {
    tag: "(0028,1041)",
    vr: "SS",
    name: "PixelIntensityRelationshipSign",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1050)": {
    tag: "(0028,1050)",
    vr: "DS",
    name: "WindowCenter",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,1051)": {
    tag: "(0028,1051)",
    vr: "DS",
    name: "WindowWidth",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,1052)": {
    tag: "(0028,1052)",
    vr: "DS",
    name: "RescaleIntercept",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1053)": {
    tag: "(0028,1053)",
    vr: "DS",
    name: "RescaleSlope",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1054)": {
    tag: "(0028,1054)",
    vr: "LO",
    name: "RescaleType",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1055)": {
    tag: "(0028,1055)",
    vr: "LO",
    name: "WindowCenterWidthExplanation",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,1056)": {
    tag: "(0028,1056)",
    vr: "CS",
    name: "VOILUTFunction",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1090)": {
    tag: "(0028,1090)",
    vr: "CS",
    name: "RecommendedViewingMode",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1101)": {
    tag: "(0028,1101)",
    vr: "xs",
    name: "RedPaletteColorLookupTableDescriptor",
    vm: "3",
    version: "DICOM"
  },
  "(0028,1102)": {
    tag: "(0028,1102)",
    vr: "xs",
    name: "GreenPaletteColorLookupTableDescriptor",
    vm: "3",
    version: "DICOM"
  },
  "(0028,1103)": {
    tag: "(0028,1103)",
    vr: "xs",
    name: "BluePaletteColorLookupTableDescriptor",
    vm: "3",
    version: "DICOM"
  },
  "(0028,1104)": {
    tag: "(0028,1104)",
    vr: "US",
    name: "AlphaPaletteColorLookupTableDescriptor",
    vm: "3",
    version: "DICOM"
  },
  "(0028,1199)": {
    tag: "(0028,1199)",
    vr: "UI",
    name: "PaletteColorLookupTableUID",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1201)": {
    tag: "(0028,1201)",
    vr: "OW",
    name: "RedPaletteColorLookupTableData",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1202)": {
    tag: "(0028,1202)",
    vr: "OW",
    name: "GreenPaletteColorLookupTableData",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1203)": {
    tag: "(0028,1203)",
    vr: "OW",
    name: "BluePaletteColorLookupTableData",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1204)": {
    tag: "(0028,1204)",
    vr: "OW",
    name: "AlphaPaletteColorLookupTableData",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1221)": {
    tag: "(0028,1221)",
    vr: "OW",
    name: "SegmentedRedPaletteColorLookupTableData",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1222)": {
    tag: "(0028,1222)",
    vr: "OW",
    name: "SegmentedGreenPaletteColorLookupTableData",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1223)": {
    tag: "(0028,1223)",
    vr: "OW",
    name: "SegmentedBluePaletteColorLookupTableData",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1230)": {
    tag: "(0028,1230)",
    vr: "SQ",
    name: "StoredValueColorRangeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1231)": {
    tag: "(0028,1231)",
    vr: "FD",
    name: "MinimumStoredValueMapped",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1232)": {
    tag: "(0028,1232)",
    vr: "FD",
    name: "MaximumStoredValueMapped",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1300)": {
    tag: "(0028,1300)",
    vr: "CS",
    name: "BreastImplantPresent",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1350)": {
    tag: "(0028,1350)",
    vr: "CS",
    name: "PartialView",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1351)": {
    tag: "(0028,1351)",
    vr: "ST",
    name: "PartialViewDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1352)": {
    tag: "(0028,1352)",
    vr: "SQ",
    name: "PartialViewCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,135A)": {
    tag: "(0028,135A)",
    vr: "CS",
    name: "SpatialLocationsPreserved",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1401)": {
    tag: "(0028,1401)",
    vr: "SQ",
    name: "DataFrameAssignmentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1402)": {
    tag: "(0028,1402)",
    vr: "CS",
    name: "DataPathAssignment",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1403)": {
    tag: "(0028,1403)",
    vr: "US",
    name: "BitsMappedToColorLookupTable",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1404)": {
    tag: "(0028,1404)",
    vr: "SQ",
    name: "BlendingLUT1Sequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1405)": {
    tag: "(0028,1405)",
    vr: "CS",
    name: "BlendingLUT1TransferFunction",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1406)": {
    tag: "(0028,1406)",
    vr: "FD",
    name: "BlendingWeightConstant",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1407)": {
    tag: "(0028,1407)",
    vr: "US",
    name: "BlendingLookupTableDescriptor",
    vm: "3",
    version: "DICOM"
  },
  "(0028,1408)": {
    tag: "(0028,1408)",
    vr: "OW",
    name: "BlendingLookupTableData",
    vm: "1",
    version: "DICOM"
  },
  "(0028,140B)": {
    tag: "(0028,140B)",
    vr: "SQ",
    name: "EnhancedPaletteColorLookupTableSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,140C)": {
    tag: "(0028,140C)",
    vr: "SQ",
    name: "BlendingLUT2Sequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,140D)": {
    tag: "(0028,140D)",
    vr: "CS",
    name: "BlendingLUT2TransferFunction",
    vm: "1",
    version: "DICOM"
  },
  "(0028,140E)": {
    tag: "(0028,140E)",
    vr: "CS",
    name: "DataPathID",
    vm: "1",
    version: "DICOM"
  },
  "(0028,140F)": {
    tag: "(0028,140F)",
    vr: "CS",
    name: "RGBLUTTransferFunction",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1410)": {
    tag: "(0028,1410)",
    vr: "CS",
    name: "AlphaLUTTransferFunction",
    vm: "1",
    version: "DICOM"
  },
  "(0028,2000)": {
    tag: "(0028,2000)",
    vr: "OB",
    name: "ICCProfile",
    vm: "1",
    version: "DICOM"
  },
  "(0028,2110)": {
    tag: "(0028,2110)",
    vr: "CS",
    name: "LossyImageCompression",
    vm: "1",
    version: "DICOM"
  },
  "(0028,2112)": {
    tag: "(0028,2112)",
    vr: "DS",
    name: "LossyImageCompressionRatio",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,2114)": {
    tag: "(0028,2114)",
    vr: "CS",
    name: "LossyImageCompressionMethod",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,3000)": {
    tag: "(0028,3000)",
    vr: "SQ",
    name: "ModalityLUTSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,3002)": {
    tag: "(0028,3002)",
    vr: "xs",
    name: "LUTDescriptor",
    vm: "3",
    version: "DICOM"
  },
  "(0028,3003)": {
    tag: "(0028,3003)",
    vr: "LO",
    name: "LUTExplanation",
    vm: "1",
    version: "DICOM"
  },
  "(0028,3004)": {
    tag: "(0028,3004)",
    vr: "LO",
    name: "ModalityLUTType",
    vm: "1",
    version: "DICOM"
  },
  "(0028,3006)": {
    tag: "(0028,3006)",
    vr: "lt",
    name: "LUTData",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,3010)": {
    tag: "(0028,3010)",
    vr: "SQ",
    name: "VOILUTSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,3110)": {
    tag: "(0028,3110)",
    vr: "SQ",
    name: "SoftcopyVOILUTSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,6010)": {
    tag: "(0028,6010)",
    vr: "US",
    name: "RepresentativeFrameNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0028,6020)": {
    tag: "(0028,6020)",
    vr: "US",
    name: "FrameNumbersOfInterest",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,6022)": {
    tag: "(0028,6022)",
    vr: "LO",
    name: "FrameOfInterestDescription",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,6023)": {
    tag: "(0028,6023)",
    vr: "CS",
    name: "FrameOfInterestType",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,6040)": {
    tag: "(0028,6040)",
    vr: "US",
    name: "RWavePointer",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,6100)": {
    tag: "(0028,6100)",
    vr: "SQ",
    name: "MaskSubtractionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,6101)": {
    tag: "(0028,6101)",
    vr: "CS",
    name: "MaskOperation",
    vm: "1",
    version: "DICOM"
  },
  "(0028,6102)": {
    tag: "(0028,6102)",
    vr: "US",
    name: "ApplicableFrameRange",
    vm: "2-2n",
    version: "DICOM"
  },
  "(0028,6110)": {
    tag: "(0028,6110)",
    vr: "US",
    name: "MaskFrameNumbers",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,6112)": {
    tag: "(0028,6112)",
    vr: "US",
    name: "ContrastFrameAveraging",
    vm: "1",
    version: "DICOM"
  },
  "(0028,6114)": {
    tag: "(0028,6114)",
    vr: "FL",
    name: "MaskSubPixelShift",
    vm: "2",
    version: "DICOM"
  },
  "(0028,6120)": {
    tag: "(0028,6120)",
    vr: "SS",
    name: "TIDOffset",
    vm: "1",
    version: "DICOM"
  },
  "(0028,6190)": {
    tag: "(0028,6190)",
    vr: "ST",
    name: "MaskOperationExplanation",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7000)": {
    tag: "(0028,7000)",
    vr: "SQ",
    name: "EquipmentAdministratorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7001)": {
    tag: "(0028,7001)",
    vr: "US",
    name: "NumberOfDisplaySubsystems",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7002)": {
    tag: "(0028,7002)",
    vr: "US",
    name: "CurrentConfigurationID",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7003)": {
    tag: "(0028,7003)",
    vr: "US",
    name: "DisplaySubsystemID",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7004)": {
    tag: "(0028,7004)",
    vr: "SH",
    name: "DisplaySubsystemName",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7005)": {
    tag: "(0028,7005)",
    vr: "LO",
    name: "DisplaySubsystemDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7006)": {
    tag: "(0028,7006)",
    vr: "CS",
    name: "SystemStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7007)": {
    tag: "(0028,7007)",
    vr: "LO",
    name: "SystemStatusComment",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7008)": {
    tag: "(0028,7008)",
    vr: "SQ",
    name: "TargetLuminanceCharacteristicsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7009)": {
    tag: "(0028,7009)",
    vr: "US",
    name: "LuminanceCharacteristicsID",
    vm: "1",
    version: "DICOM"
  },
  "(0028,700A)": {
    tag: "(0028,700A)",
    vr: "SQ",
    name: "DisplaySubsystemConfigurationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,700B)": {
    tag: "(0028,700B)",
    vr: "US",
    name: "ConfigurationID",
    vm: "1",
    version: "DICOM"
  },
  "(0028,700C)": {
    tag: "(0028,700C)",
    vr: "SH",
    name: "ConfigurationName",
    vm: "1",
    version: "DICOM"
  },
  "(0028,700D)": {
    tag: "(0028,700D)",
    vr: "LO",
    name: "ConfigurationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0028,700E)": {
    tag: "(0028,700E)",
    vr: "US",
    name: "ReferencedTargetLuminanceCharacteristicsID",
    vm: "1",
    version: "DICOM"
  },
  "(0028,700F)": {
    tag: "(0028,700F)",
    vr: "SQ",
    name: "QAResultsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7010)": {
    tag: "(0028,7010)",
    vr: "SQ",
    name: "DisplaySubsystemQAResultsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7011)": {
    tag: "(0028,7011)",
    vr: "SQ",
    name: "ConfigurationQAResultsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7012)": {
    tag: "(0028,7012)",
    vr: "SQ",
    name: "MeasurementEquipmentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7013)": {
    tag: "(0028,7013)",
    vr: "CS",
    name: "MeasurementFunctions",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,7014)": {
    tag: "(0028,7014)",
    vr: "CS",
    name: "MeasurementEquipmentType",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7015)": {
    tag: "(0028,7015)",
    vr: "SQ",
    name: "VisualEvaluationResultSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7016)": {
    tag: "(0028,7016)",
    vr: "SQ",
    name: "DisplayCalibrationResultSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7017)": {
    tag: "(0028,7017)",
    vr: "US",
    name: "DDLValue",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7018)": {
    tag: "(0028,7018)",
    vr: "FL",
    name: "CIExyWhitePoint",
    vm: "2",
    version: "DICOM"
  },
  "(0028,7019)": {
    tag: "(0028,7019)",
    vr: "CS",
    name: "DisplayFunctionType",
    vm: "1",
    version: "DICOM"
  },
  "(0028,701A)": {
    tag: "(0028,701A)",
    vr: "FL",
    name: "GammaValue",
    vm: "1",
    version: "DICOM"
  },
  "(0028,701B)": {
    tag: "(0028,701B)",
    vr: "US",
    name: "NumberOfLuminancePoints",
    vm: "1",
    version: "DICOM"
  },
  "(0028,701C)": {
    tag: "(0028,701C)",
    vr: "SQ",
    name: "LuminanceResponseSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,701D)": {
    tag: "(0028,701D)",
    vr: "FL",
    name: "TargetMinimumLuminance",
    vm: "1",
    version: "DICOM"
  },
  "(0028,701E)": {
    tag: "(0028,701E)",
    vr: "FL",
    name: "TargetMaximumLuminance",
    vm: "1",
    version: "DICOM"
  },
  "(0028,701F)": {
    tag: "(0028,701F)",
    vr: "FL",
    name: "LuminanceValue",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7020)": {
    tag: "(0028,7020)",
    vr: "LO",
    name: "LuminanceResponseDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7021)": {
    tag: "(0028,7021)",
    vr: "CS",
    name: "WhitePointFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7022)": {
    tag: "(0028,7022)",
    vr: "SQ",
    name: "DisplayDeviceTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7023)": {
    tag: "(0028,7023)",
    vr: "SQ",
    name: "DisplaySubsystemSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7024)": {
    tag: "(0028,7024)",
    vr: "SQ",
    name: "LuminanceResultSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7025)": {
    tag: "(0028,7025)",
    vr: "CS",
    name: "AmbientLightValueSource",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7026)": {
    tag: "(0028,7026)",
    vr: "CS",
    name: "MeasuredCharacteristics",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,7027)": {
    tag: "(0028,7027)",
    vr: "SQ",
    name: "LuminanceUniformityResultSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7028)": {
    tag: "(0028,7028)",
    vr: "SQ",
    name: "VisualEvaluationTestSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7029)": {
    tag: "(0028,7029)",
    vr: "CS",
    name: "TestResult",
    vm: "1",
    version: "DICOM"
  },
  "(0028,702A)": {
    tag: "(0028,702A)",
    vr: "LO",
    name: "TestResultComment",
    vm: "1",
    version: "DICOM"
  },
  "(0028,702B)": {
    tag: "(0028,702B)",
    vr: "CS",
    name: "TestImageValidation",
    vm: "1",
    version: "DICOM"
  },
  "(0028,702C)": {
    tag: "(0028,702C)",
    vr: "SQ",
    name: "TestPatternCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,702D)": {
    tag: "(0028,702D)",
    vr: "SQ",
    name: "MeasurementPatternCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,702E)": {
    tag: "(0028,702E)",
    vr: "SQ",
    name: "VisualEvaluationMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,7FE0)": {
    tag: "(0028,7FE0)",
    vr: "UR",
    name: "PixelDataProviderURL",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9001)": {
    tag: "(0028,9001)",
    vr: "UL",
    name: "DataPointRows",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9002)": {
    tag: "(0028,9002)",
    vr: "UL",
    name: "DataPointColumns",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9003)": {
    tag: "(0028,9003)",
    vr: "CS",
    name: "SignalDomainColumns",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9108)": {
    tag: "(0028,9108)",
    vr: "CS",
    name: "DataRepresentation",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9110)": {
    tag: "(0028,9110)",
    vr: "SQ",
    name: "PixelMeasuresSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9132)": {
    tag: "(0028,9132)",
    vr: "SQ",
    name: "FrameVOILUTSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9145)": {
    tag: "(0028,9145)",
    vr: "SQ",
    name: "PixelValueTransformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9235)": {
    tag: "(0028,9235)",
    vr: "CS",
    name: "SignalDomainRows",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9411)": {
    tag: "(0028,9411)",
    vr: "FL",
    name: "DisplayFilterPercentage",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9415)": {
    tag: "(0028,9415)",
    vr: "SQ",
    name: "FramePixelShiftSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9416)": {
    tag: "(0028,9416)",
    vr: "US",
    name: "SubtractionItemID",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9422)": {
    tag: "(0028,9422)",
    vr: "SQ",
    name: "PixelIntensityRelationshipLUTSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9443)": {
    tag: "(0028,9443)",
    vr: "SQ",
    name: "FramePixelDataPropertiesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9444)": {
    tag: "(0028,9444)",
    vr: "CS",
    name: "GeometricalProperties",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9445)": {
    tag: "(0028,9445)",
    vr: "FL",
    name: "GeometricMaximumDistortion",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9446)": {
    tag: "(0028,9446)",
    vr: "CS",
    name: "ImageProcessingApplied",
    vm: "1-n",
    version: "DICOM"
  },
  "(0028,9454)": {
    tag: "(0028,9454)",
    vr: "CS",
    name: "MaskSelectionMode",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9474)": {
    tag: "(0028,9474)",
    vr: "CS",
    name: "LUTFunction",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9478)": {
    tag: "(0028,9478)",
    vr: "FL",
    name: "MaskVisibilityPercentage",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9501)": {
    tag: "(0028,9501)",
    vr: "SQ",
    name: "PixelShiftSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9502)": {
    tag: "(0028,9502)",
    vr: "SQ",
    name: "RegionPixelShiftSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9503)": {
    tag: "(0028,9503)",
    vr: "SS",
    name: "VerticesOfTheRegion",
    vm: "2-2n",
    version: "DICOM"
  },
  "(0028,9505)": {
    tag: "(0028,9505)",
    vr: "SQ",
    name: "MultiFramePresentationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0028,9506)": {
    tag: "(0028,9506)",
    vr: "US",
    name: "PixelShiftFrameRange",
    vm: "2-2n",
    version: "DICOM"
  },
  "(0028,9507)": {
    tag: "(0028,9507)",
    vr: "US",
    name: "LUTFrameRange",
    vm: "2-2n",
    version: "DICOM"
  },
  "(0028,9520)": {
    tag: "(0028,9520)",
    vr: "DS",
    name: "ImageToEquipmentMappingMatrix",
    vm: "16",
    version: "DICOM"
  },
  "(0028,9537)": {
    tag: "(0028,9537)",
    vr: "CS",
    name: "EquipmentCoordinateSystemIdentification",
    vm: "1",
    version: "DICOM"
  },
  "(0032,1031)": {
    tag: "(0032,1031)",
    vr: "SQ",
    name: "RequestingPhysicianIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0032,1032)": {
    tag: "(0032,1032)",
    vr: "PN",
    name: "RequestingPhysician",
    vm: "1",
    version: "DICOM"
  },
  "(0032,1033)": {
    tag: "(0032,1033)",
    vr: "LO",
    name: "RequestingService",
    vm: "1",
    version: "DICOM"
  },
  "(0032,1034)": {
    tag: "(0032,1034)",
    vr: "SQ",
    name: "RequestingServiceCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0032,1060)": {
    tag: "(0032,1060)",
    vr: "LO",
    name: "RequestedProcedureDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0032,1064)": {
    tag: "(0032,1064)",
    vr: "SQ",
    name: "RequestedProcedureCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0032,1066)": {
    tag: "(0032,1066)",
    vr: "UT",
    name: "ReasonForVisit",
    vm: "1",
    version: "DICOM"
  },
  "(0032,1067)": {
    tag: "(0032,1067)",
    vr: "SQ",
    name: "ReasonForVisitCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0032,1070)": {
    tag: "(0032,1070)",
    vr: "LO",
    name: "RequestedContrastAgent",
    vm: "1",
    version: "DICOM"
  },
  "(0034,0001)": {
    tag: "(0034,0001)",
    vr: "SQ",
    name: "FlowIdentifierSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0034,0002)": {
    tag: "(0034,0002)",
    vr: "OB",
    name: "FlowIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0034,0003)": {
    tag: "(0034,0003)",
    vr: "UI",
    name: "FlowTransferSyntaxUID",
    vm: "1",
    version: "DICOM"
  },
  "(0034,0004)": {
    tag: "(0034,0004)",
    vr: "UL",
    name: "FlowRTPSamplingRate",
    vm: "1",
    version: "DICOM"
  },
  "(0034,0005)": {
    tag: "(0034,0005)",
    vr: "OB",
    name: "SourceIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0034,0007)": {
    tag: "(0034,0007)",
    vr: "OB",
    name: "FrameOriginTimestamp",
    vm: "1",
    version: "DICOM"
  },
  "(0034,0008)": {
    tag: "(0034,0008)",
    vr: "CS",
    name: "IncludesImagingSubject",
    vm: "1",
    version: "DICOM"
  },
  "(0034,0009)": {
    tag: "(0034,0009)",
    vr: "SQ",
    name: "FrameUsefulnessGroupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0034,000A)": {
    tag: "(0034,000A)",
    vr: "SQ",
    name: "RealTimeBulkDataFlowSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0034,000B)": {
    tag: "(0034,000B)",
    vr: "SQ",
    name: "CameraPositionGroupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0034,000C)": {
    tag: "(0034,000C)",
    vr: "CS",
    name: "IncludesInformation",
    vm: "1",
    version: "DICOM"
  },
  "(0034,000D)": {
    tag: "(0034,000D)",
    vr: "SQ",
    name: "TimeOfFrameGroupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0004)": {
    tag: "(0038,0004)",
    vr: "SQ",
    name: "ReferencedPatientAliasSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0008)": {
    tag: "(0038,0008)",
    vr: "CS",
    name: "VisitStatusID",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0010)": {
    tag: "(0038,0010)",
    vr: "LO",
    name: "AdmissionID",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0014)": {
    tag: "(0038,0014)",
    vr: "SQ",
    name: "IssuerOfAdmissionIDSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0016)": {
    tag: "(0038,0016)",
    vr: "LO",
    name: "RouteOfAdmissions",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0020)": {
    tag: "(0038,0020)",
    vr: "DA",
    name: "AdmittingDate",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0021)": {
    tag: "(0038,0021)",
    vr: "TM",
    name: "AdmittingTime",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0050)": {
    tag: "(0038,0050)",
    vr: "LO",
    name: "SpecialNeeds",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0060)": {
    tag: "(0038,0060)",
    vr: "LO",
    name: "ServiceEpisodeID",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0062)": {
    tag: "(0038,0062)",
    vr: "LO",
    name: "ServiceEpisodeDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0064)": {
    tag: "(0038,0064)",
    vr: "SQ",
    name: "IssuerOfServiceEpisodeIDSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0100)": {
    tag: "(0038,0100)",
    vr: "SQ",
    name: "PertinentDocumentsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0101)": {
    tag: "(0038,0101)",
    vr: "SQ",
    name: "PertinentResourcesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0102)": {
    tag: "(0038,0102)",
    vr: "LO",
    name: "ResourceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0300)": {
    tag: "(0038,0300)",
    vr: "LO",
    name: "CurrentPatientLocation",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0400)": {
    tag: "(0038,0400)",
    vr: "LO",
    name: "PatientInstitutionResidence",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0500)": {
    tag: "(0038,0500)",
    vr: "LO",
    name: "PatientState",
    vm: "1",
    version: "DICOM"
  },
  "(0038,0502)": {
    tag: "(0038,0502)",
    vr: "SQ",
    name: "PatientClinicalTrialParticipationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0038,4000)": {
    tag: "(0038,4000)",
    vr: "LT",
    name: "VisitComments",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0004)": {
    tag: "(003A,0004)",
    vr: "CS",
    name: "WaveformOriginality",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0005)": {
    tag: "(003A,0005)",
    vr: "US",
    name: "NumberOfWaveformChannels",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0010)": {
    tag: "(003A,0010)",
    vr: "UL",
    name: "NumberOfWaveformSamples",
    vm: "1",
    version: "DICOM"
  },
  "(003A,001A)": {
    tag: "(003A,001A)",
    vr: "DS",
    name: "SamplingFrequency",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0020)": {
    tag: "(003A,0020)",
    vr: "SH",
    name: "MultiplexGroupLabel",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0200)": {
    tag: "(003A,0200)",
    vr: "SQ",
    name: "ChannelDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0202)": {
    tag: "(003A,0202)",
    vr: "IS",
    name: "WaveformChannelNumber",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0203)": {
    tag: "(003A,0203)",
    vr: "SH",
    name: "ChannelLabel",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0205)": {
    tag: "(003A,0205)",
    vr: "CS",
    name: "ChannelStatus",
    vm: "1-n",
    version: "DICOM"
  },
  "(003A,0208)": {
    tag: "(003A,0208)",
    vr: "SQ",
    name: "ChannelSourceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0209)": {
    tag: "(003A,0209)",
    vr: "SQ",
    name: "ChannelSourceModifiersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(003A,020A)": {
    tag: "(003A,020A)",
    vr: "SQ",
    name: "SourceWaveformSequence",
    vm: "1",
    version: "DICOM"
  },
  "(003A,020C)": {
    tag: "(003A,020C)",
    vr: "LO",
    name: "ChannelDerivationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0210)": {
    tag: "(003A,0210)",
    vr: "DS",
    name: "ChannelSensitivity",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0211)": {
    tag: "(003A,0211)",
    vr: "SQ",
    name: "ChannelSensitivityUnitsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0212)": {
    tag: "(003A,0212)",
    vr: "DS",
    name: "ChannelSensitivityCorrectionFactor",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0213)": {
    tag: "(003A,0213)",
    vr: "DS",
    name: "ChannelBaseline",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0214)": {
    tag: "(003A,0214)",
    vr: "DS",
    name: "ChannelTimeSkew",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0215)": {
    tag: "(003A,0215)",
    vr: "DS",
    name: "ChannelSampleSkew",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0218)": {
    tag: "(003A,0218)",
    vr: "DS",
    name: "ChannelOffset",
    vm: "1",
    version: "DICOM"
  },
  "(003A,021A)": {
    tag: "(003A,021A)",
    vr: "US",
    name: "WaveformBitsStored",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0220)": {
    tag: "(003A,0220)",
    vr: "DS",
    name: "FilterLowFrequency",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0221)": {
    tag: "(003A,0221)",
    vr: "DS",
    name: "FilterHighFrequency",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0222)": {
    tag: "(003A,0222)",
    vr: "DS",
    name: "NotchFilterFrequency",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0223)": {
    tag: "(003A,0223)",
    vr: "DS",
    name: "NotchFilterBandwidth",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0230)": {
    tag: "(003A,0230)",
    vr: "FL",
    name: "WaveformDataDisplayScale",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0231)": {
    tag: "(003A,0231)",
    vr: "US",
    name: "WaveformDisplayBackgroundCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(003A,0240)": {
    tag: "(003A,0240)",
    vr: "SQ",
    name: "WaveformPresentationGroupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0241)": {
    tag: "(003A,0241)",
    vr: "US",
    name: "PresentationGroupNumber",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0242)": {
    tag: "(003A,0242)",
    vr: "SQ",
    name: "ChannelDisplaySequence",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0244)": {
    tag: "(003A,0244)",
    vr: "US",
    name: "ChannelRecommendedDisplayCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(003A,0245)": {
    tag: "(003A,0245)",
    vr: "FL",
    name: "ChannelPosition",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0246)": {
    tag: "(003A,0246)",
    vr: "CS",
    name: "DisplayShadingFlag",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0247)": {
    tag: "(003A,0247)",
    vr: "FL",
    name: "FractionalChannelDisplayScale",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0248)": {
    tag: "(003A,0248)",
    vr: "FL",
    name: "AbsoluteChannelDisplayScale",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0300)": {
    tag: "(003A,0300)",
    vr: "SQ",
    name: "MultiplexedAudioChannelsDescriptionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0301)": {
    tag: "(003A,0301)",
    vr: "IS",
    name: "ChannelIdentificationCode",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0302)": {
    tag: "(003A,0302)",
    vr: "CS",
    name: "ChannelMode",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0310)": {
    tag: "(003A,0310)",
    vr: "UI",
    name: "MultiplexGroupUID",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0311)": {
    tag: "(003A,0311)",
    vr: "DS",
    name: "PowerlineFrequency",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0312)": {
    tag: "(003A,0312)",
    vr: "SQ",
    name: "ChannelImpedanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0313)": {
    tag: "(003A,0313)",
    vr: "DS",
    name: "ImpedanceValue",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0314)": {
    tag: "(003A,0314)",
    vr: "DT",
    name: "ImpedanceMeasurementDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0315)": {
    tag: "(003A,0315)",
    vr: "DS",
    name: "ImpedanceMeasurementFrequency",
    vm: "1",
    version: "DICOM"
  },
  "(003A,0316)": {
    tag: "(003A,0316)",
    vr: "CS",
    name: "ImpedanceMeasurementCurrentType",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0001)": {
    tag: "(0040,0001)",
    vr: "AE",
    name: "ScheduledStationAETitle",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,0002)": {
    tag: "(0040,0002)",
    vr: "DA",
    name: "ScheduledProcedureStepStartDate",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0003)": {
    tag: "(0040,0003)",
    vr: "TM",
    name: "ScheduledProcedureStepStartTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0004)": {
    tag: "(0040,0004)",
    vr: "DA",
    name: "ScheduledProcedureStepEndDate",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0005)": {
    tag: "(0040,0005)",
    vr: "TM",
    name: "ScheduledProcedureStepEndTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0006)": {
    tag: "(0040,0006)",
    vr: "PN",
    name: "ScheduledPerformingPhysicianName",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0007)": {
    tag: "(0040,0007)",
    vr: "LO",
    name: "ScheduledProcedureStepDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0008)": {
    tag: "(0040,0008)",
    vr: "SQ",
    name: "ScheduledProtocolCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0009)": {
    tag: "(0040,0009)",
    vr: "SH",
    name: "ScheduledProcedureStepID",
    vm: "1",
    version: "DICOM"
  },
  "(0040,000A)": {
    tag: "(0040,000A)",
    vr: "SQ",
    name: "StageCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,000B)": {
    tag: "(0040,000B)",
    vr: "SQ",
    name: "ScheduledPerformingPhysicianIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0010)": {
    tag: "(0040,0010)",
    vr: "SH",
    name: "ScheduledStationName",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,0011)": {
    tag: "(0040,0011)",
    vr: "SH",
    name: "ScheduledProcedureStepLocation",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0012)": {
    tag: "(0040,0012)",
    vr: "LO",
    name: "PreMedication",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0020)": {
    tag: "(0040,0020)",
    vr: "CS",
    name: "ScheduledProcedureStepStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0026)": {
    tag: "(0040,0026)",
    vr: "SQ",
    name: "OrderPlacerIdentifierSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0027)": {
    tag: "(0040,0027)",
    vr: "SQ",
    name: "OrderFillerIdentifierSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0031)": {
    tag: "(0040,0031)",
    vr: "UT",
    name: "LocalNamespaceEntityID",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0032)": {
    tag: "(0040,0032)",
    vr: "UT",
    name: "UniversalEntityID",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0033)": {
    tag: "(0040,0033)",
    vr: "CS",
    name: "UniversalEntityIDType",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0035)": {
    tag: "(0040,0035)",
    vr: "CS",
    name: "IdentifierTypeCode",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0036)": {
    tag: "(0040,0036)",
    vr: "SQ",
    name: "AssigningFacilitySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0039)": {
    tag: "(0040,0039)",
    vr: "SQ",
    name: "AssigningJurisdictionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,003A)": {
    tag: "(0040,003A)",
    vr: "SQ",
    name: "AssigningAgencyOrDepartmentCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0100)": {
    tag: "(0040,0100)",
    vr: "SQ",
    name: "ScheduledProcedureStepSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0220)": {
    tag: "(0040,0220)",
    vr: "SQ",
    name: "ReferencedNonImageCompositeSOPInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0241)": {
    tag: "(0040,0241)",
    vr: "AE",
    name: "PerformedStationAETitle",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0242)": {
    tag: "(0040,0242)",
    vr: "SH",
    name: "PerformedStationName",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0243)": {
    tag: "(0040,0243)",
    vr: "SH",
    name: "PerformedLocation",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0244)": {
    tag: "(0040,0244)",
    vr: "DA",
    name: "PerformedProcedureStepStartDate",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0245)": {
    tag: "(0040,0245)",
    vr: "TM",
    name: "PerformedProcedureStepStartTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0250)": {
    tag: "(0040,0250)",
    vr: "DA",
    name: "PerformedProcedureStepEndDate",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0251)": {
    tag: "(0040,0251)",
    vr: "TM",
    name: "PerformedProcedureStepEndTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0252)": {
    tag: "(0040,0252)",
    vr: "CS",
    name: "PerformedProcedureStepStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0253)": {
    tag: "(0040,0253)",
    vr: "SH",
    name: "PerformedProcedureStepID",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0254)": {
    tag: "(0040,0254)",
    vr: "LO",
    name: "PerformedProcedureStepDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0255)": {
    tag: "(0040,0255)",
    vr: "LO",
    name: "PerformedProcedureTypeDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0260)": {
    tag: "(0040,0260)",
    vr: "SQ",
    name: "PerformedProtocolCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0261)": {
    tag: "(0040,0261)",
    vr: "CS",
    name: "PerformedProtocolType",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0270)": {
    tag: "(0040,0270)",
    vr: "SQ",
    name: "ScheduledStepAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0275)": {
    tag: "(0040,0275)",
    vr: "SQ",
    name: "RequestAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0280)": {
    tag: "(0040,0280)",
    vr: "ST",
    name: "CommentsOnThePerformedProcedureStep",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0281)": {
    tag: "(0040,0281)",
    vr: "SQ",
    name: "PerformedProcedureStepDiscontinuationReasonCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0293)": {
    tag: "(0040,0293)",
    vr: "SQ",
    name: "QuantitySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0294)": {
    tag: "(0040,0294)",
    vr: "DS",
    name: "Quantity",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0295)": {
    tag: "(0040,0295)",
    vr: "SQ",
    name: "MeasuringUnitsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0296)": {
    tag: "(0040,0296)",
    vr: "SQ",
    name: "BillingItemSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0300)": {
    tag: "(0040,0300)",
    vr: "US",
    name: "TotalTimeOfFluoroscopy",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0301)": {
    tag: "(0040,0301)",
    vr: "US",
    name: "TotalNumberOfExposures",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0302)": {
    tag: "(0040,0302)",
    vr: "US",
    name: "EntranceDose",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0303)": {
    tag: "(0040,0303)",
    vr: "US",
    name: "ExposedArea",
    vm: "1-2",
    version: "DICOM"
  },
  "(0040,0306)": {
    tag: "(0040,0306)",
    vr: "DS",
    name: "DistanceSourceToEntrance",
    vm: "1",
    version: "DICOM"
  },
  "(0040,030E)": {
    tag: "(0040,030E)",
    vr: "SQ",
    name: "ExposureDoseSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0310)": {
    tag: "(0040,0310)",
    vr: "ST",
    name: "CommentsOnRadiationDose",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0312)": {
    tag: "(0040,0312)",
    vr: "DS",
    name: "XRayOutput",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0314)": {
    tag: "(0040,0314)",
    vr: "DS",
    name: "HalfValueLayer",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0316)": {
    tag: "(0040,0316)",
    vr: "DS",
    name: "OrganDose",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0318)": {
    tag: "(0040,0318)",
    vr: "CS",
    name: "OrganExposed",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0320)": {
    tag: "(0040,0320)",
    vr: "SQ",
    name: "BillingProcedureStepSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0321)": {
    tag: "(0040,0321)",
    vr: "SQ",
    name: "FilmConsumptionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0324)": {
    tag: "(0040,0324)",
    vr: "SQ",
    name: "BillingSuppliesAndDevicesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0340)": {
    tag: "(0040,0340)",
    vr: "SQ",
    name: "PerformedSeriesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0400)": {
    tag: "(0040,0400)",
    vr: "LT",
    name: "CommentsOnTheScheduledProcedureStep",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0440)": {
    tag: "(0040,0440)",
    vr: "SQ",
    name: "ProtocolContextSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0441)": {
    tag: "(0040,0441)",
    vr: "SQ",
    name: "ContentItemModifierSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0500)": {
    tag: "(0040,0500)",
    vr: "SQ",
    name: "ScheduledSpecimenSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0512)": {
    tag: "(0040,0512)",
    vr: "LO",
    name: "ContainerIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0513)": {
    tag: "(0040,0513)",
    vr: "SQ",
    name: "IssuerOfTheContainerIdentifierSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0515)": {
    tag: "(0040,0515)",
    vr: "SQ",
    name: "AlternateContainerIdentifierSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0518)": {
    tag: "(0040,0518)",
    vr: "SQ",
    name: "ContainerTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,051A)": {
    tag: "(0040,051A)",
    vr: "LO",
    name: "ContainerDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0520)": {
    tag: "(0040,0520)",
    vr: "SQ",
    name: "ContainerComponentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0551)": {
    tag: "(0040,0551)",
    vr: "LO",
    name: "SpecimenIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0554)": {
    tag: "(0040,0554)",
    vr: "UI",
    name: "SpecimenUID",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0555)": {
    tag: "(0040,0555)",
    vr: "SQ",
    name: "AcquisitionContextSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0556)": {
    tag: "(0040,0556)",
    vr: "ST",
    name: "AcquisitionContextDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0560)": {
    tag: "(0040,0560)",
    vr: "SQ",
    name: "SpecimenDescriptionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0562)": {
    tag: "(0040,0562)",
    vr: "SQ",
    name: "IssuerOfTheSpecimenIdentifierSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,059A)": {
    tag: "(0040,059A)",
    vr: "SQ",
    name: "SpecimenTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0600)": {
    tag: "(0040,0600)",
    vr: "LO",
    name: "SpecimenShortDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0602)": {
    tag: "(0040,0602)",
    vr: "UT",
    name: "SpecimenDetailedDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0610)": {
    tag: "(0040,0610)",
    vr: "SQ",
    name: "SpecimenPreparationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0612)": {
    tag: "(0040,0612)",
    vr: "SQ",
    name: "SpecimenPreparationStepContentItemSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0620)": {
    tag: "(0040,0620)",
    vr: "SQ",
    name: "SpecimenLocalizationContentItemSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,0710)": {
    tag: "(0040,0710)",
    vr: "SQ",
    name: "WholeSlideMicroscopyImageFrameTypeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,071A)": {
    tag: "(0040,071A)",
    vr: "SQ",
    name: "ImageCenterPointCoordinatesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,072A)": {
    tag: "(0040,072A)",
    vr: "DS",
    name: "XOffsetInSlideCoordinateSystem",
    vm: "1",
    version: "DICOM"
  },
  "(0040,073A)": {
    tag: "(0040,073A)",
    vr: "DS",
    name: "YOffsetInSlideCoordinateSystem",
    vm: "1",
    version: "DICOM"
  },
  "(0040,074A)": {
    tag: "(0040,074A)",
    vr: "DS",
    name: "ZOffsetInSlideCoordinateSystem",
    vm: "1",
    version: "DICOM"
  },
  "(0040,08EA)": {
    tag: "(0040,08EA)",
    vr: "SQ",
    name: "MeasurementUnitsCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1001)": {
    tag: "(0040,1001)",
    vr: "SH",
    name: "RequestedProcedureID",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1002)": {
    tag: "(0040,1002)",
    vr: "LO",
    name: "ReasonForTheRequestedProcedure",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1003)": {
    tag: "(0040,1003)",
    vr: "SH",
    name: "RequestedProcedurePriority",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1004)": {
    tag: "(0040,1004)",
    vr: "LO",
    name: "PatientTransportArrangements",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1005)": {
    tag: "(0040,1005)",
    vr: "LO",
    name: "RequestedProcedureLocation",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1008)": {
    tag: "(0040,1008)",
    vr: "LO",
    name: "ConfidentialityCode",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1009)": {
    tag: "(0040,1009)",
    vr: "SH",
    name: "ReportingPriority",
    vm: "1",
    version: "DICOM"
  },
  "(0040,100A)": {
    tag: "(0040,100A)",
    vr: "SQ",
    name: "ReasonForRequestedProcedureCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1010)": {
    tag: "(0040,1010)",
    vr: "PN",
    name: "NamesOfIntendedRecipientsOfResults",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,1011)": {
    tag: "(0040,1011)",
    vr: "SQ",
    name: "IntendedRecipientsOfResultsIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1012)": {
    tag: "(0040,1012)",
    vr: "SQ",
    name: "ReasonForPerformedProcedureCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1101)": {
    tag: "(0040,1101)",
    vr: "SQ",
    name: "PersonIdentificationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1102)": {
    tag: "(0040,1102)",
    vr: "ST",
    name: "PersonAddress",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1103)": {
    tag: "(0040,1103)",
    vr: "LO",
    name: "PersonTelephoneNumbers",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,1104)": {
    tag: "(0040,1104)",
    vr: "LT",
    name: "PersonTelecomInformation",
    vm: "1",
    version: "DICOM"
  },
  "(0040,1400)": {
    tag: "(0040,1400)",
    vr: "LT",
    name: "RequestedProcedureComments",
    vm: "1",
    version: "DICOM"
  },
  "(0040,2004)": {
    tag: "(0040,2004)",
    vr: "DA",
    name: "IssueDateOfImagingServiceRequest",
    vm: "1",
    version: "DICOM"
  },
  "(0040,2005)": {
    tag: "(0040,2005)",
    vr: "TM",
    name: "IssueTimeOfImagingServiceRequest",
    vm: "1",
    version: "DICOM"
  },
  "(0040,2008)": {
    tag: "(0040,2008)",
    vr: "PN",
    name: "OrderEnteredBy",
    vm: "1",
    version: "DICOM"
  },
  "(0040,2009)": {
    tag: "(0040,2009)",
    vr: "SH",
    name: "OrderEntererLocation",
    vm: "1",
    version: "DICOM"
  },
  "(0040,2010)": {
    tag: "(0040,2010)",
    vr: "SH",
    name: "OrderCallbackPhoneNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0040,2011)": {
    tag: "(0040,2011)",
    vr: "LT",
    name: "OrderCallbackTelecomInformation",
    vm: "1",
    version: "DICOM"
  },
  "(0040,2016)": {
    tag: "(0040,2016)",
    vr: "LO",
    name: "PlacerOrderNumberImagingServiceRequest",
    vm: "1",
    version: "DICOM"
  },
  "(0040,2017)": {
    tag: "(0040,2017)",
    vr: "LO",
    name: "FillerOrderNumberImagingServiceRequest",
    vm: "1",
    version: "DICOM"
  },
  "(0040,2400)": {
    tag: "(0040,2400)",
    vr: "LT",
    name: "ImagingServiceRequestComments",
    vm: "1",
    version: "DICOM"
  },
  "(0040,3001)": {
    tag: "(0040,3001)",
    vr: "LO",
    name: "ConfidentialityConstraintOnPatientDataDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4005)": {
    tag: "(0040,4005)",
    vr: "DT",
    name: "ScheduledProcedureStepStartDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4007)": {
    tag: "(0040,4007)",
    vr: "SQ",
    name: "PerformedProcessingApplicationsCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4008)": {
    tag: "(0040,4008)",
    vr: "DT",
    name: "ScheduledProcedureStepExpirationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4009)": {
    tag: "(0040,4009)",
    vr: "SQ",
    name: "HumanPerformerCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4010)": {
    tag: "(0040,4010)",
    vr: "DT",
    name: "ScheduledProcedureStepModificationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4011)": {
    tag: "(0040,4011)",
    vr: "DT",
    name: "ExpectedCompletionDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4018)": {
    tag: "(0040,4018)",
    vr: "SQ",
    name: "ScheduledWorkitemCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4019)": {
    tag: "(0040,4019)",
    vr: "SQ",
    name: "PerformedWorkitemCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4020)": {
    tag: "(0040,4020)",
    vr: "CS",
    name: "InputAvailabilityFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4021)": {
    tag: "(0040,4021)",
    vr: "SQ",
    name: "InputInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4025)": {
    tag: "(0040,4025)",
    vr: "SQ",
    name: "ScheduledStationNameCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4026)": {
    tag: "(0040,4026)",
    vr: "SQ",
    name: "ScheduledStationClassCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4027)": {
    tag: "(0040,4027)",
    vr: "SQ",
    name: "ScheduledStationGeographicLocationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4028)": {
    tag: "(0040,4028)",
    vr: "SQ",
    name: "PerformedStationNameCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4029)": {
    tag: "(0040,4029)",
    vr: "SQ",
    name: "PerformedStationClassCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4030)": {
    tag: "(0040,4030)",
    vr: "SQ",
    name: "PerformedStationGeographicLocationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4033)": {
    tag: "(0040,4033)",
    vr: "SQ",
    name: "OutputInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4034)": {
    tag: "(0040,4034)",
    vr: "SQ",
    name: "ScheduledHumanPerformersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4035)": {
    tag: "(0040,4035)",
    vr: "SQ",
    name: "ActualHumanPerformersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4036)": {
    tag: "(0040,4036)",
    vr: "LO",
    name: "HumanPerformerOrganization",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4037)": {
    tag: "(0040,4037)",
    vr: "PN",
    name: "HumanPerformerName",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4040)": {
    tag: "(0040,4040)",
    vr: "CS",
    name: "RawDataHandling",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4041)": {
    tag: "(0040,4041)",
    vr: "CS",
    name: "InputReadinessState",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4050)": {
    tag: "(0040,4050)",
    vr: "DT",
    name: "PerformedProcedureStepStartDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4051)": {
    tag: "(0040,4051)",
    vr: "DT",
    name: "PerformedProcedureStepEndDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,4052)": {
    tag: "(0040,4052)",
    vr: "DT",
    name: "ProcedureStepCancellationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,8302)": {
    tag: "(0040,8302)",
    vr: "DS",
    name: "EntranceDoseInmGy",
    vm: "1",
    version: "DICOM"
  },
  "(0040,8303)": {
    tag: "(0040,8303)",
    vr: "CS",
    name: "EntranceDoseDerivation",
    vm: "1",
    version: "DICOM"
  },
  "(0040,9092)": {
    tag: "(0040,9092)",
    vr: "SQ",
    name: "ParametricMapFrameTypeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,9094)": {
    tag: "(0040,9094)",
    vr: "SQ",
    name: "ReferencedImageRealWorldValueMappingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,9096)": {
    tag: "(0040,9096)",
    vr: "SQ",
    name: "RealWorldValueMappingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,9098)": {
    tag: "(0040,9098)",
    vr: "SQ",
    name: "PixelValueMappingCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,9210)": {
    tag: "(0040,9210)",
    vr: "SH",
    name: "LUTLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0040,9211)": {
    tag: "(0040,9211)",
    vr: "xs",
    name: "RealWorldValueLastValueMapped",
    vm: "1",
    version: "DICOM"
  },
  "(0040,9212)": {
    tag: "(0040,9212)",
    vr: "FD",
    name: "RealWorldValueLUTData",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,9216)": {
    tag: "(0040,9216)",
    vr: "xs",
    name: "RealWorldValueFirstValueMapped",
    vm: "1",
    version: "DICOM"
  },
  "(0040,9220)": {
    tag: "(0040,9220)",
    vr: "SQ",
    name: "QuantityDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,9224)": {
    tag: "(0040,9224)",
    vr: "FD",
    name: "RealWorldValueIntercept",
    vm: "1",
    version: "DICOM"
  },
  "(0040,9225)": {
    tag: "(0040,9225)",
    vr: "FD",
    name: "RealWorldValueSlope",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A010)": {
    tag: "(0040,A010)",
    vr: "CS",
    name: "RelationshipType",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A027)": {
    tag: "(0040,A027)",
    vr: "LO",
    name: "VerifyingOrganization",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A030)": {
    tag: "(0040,A030)",
    vr: "DT",
    name: "VerificationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A032)": {
    tag: "(0040,A032)",
    vr: "DT",
    name: "ObservationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A033)": {
    tag: "(0040,A033)",
    vr: "DT",
    name: "ObservationStartDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A040)": {
    tag: "(0040,A040)",
    vr: "CS",
    name: "ValueType",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A043)": {
    tag: "(0040,A043)",
    vr: "SQ",
    name: "ConceptNameCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A050)": {
    tag: "(0040,A050)",
    vr: "CS",
    name: "ContinuityOfContent",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A073)": {
    tag: "(0040,A073)",
    vr: "SQ",
    name: "VerifyingObserverSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A075)": {
    tag: "(0040,A075)",
    vr: "PN",
    name: "VerifyingObserverName",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A078)": {
    tag: "(0040,A078)",
    vr: "SQ",
    name: "AuthorObserverSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A07A)": {
    tag: "(0040,A07A)",
    vr: "SQ",
    name: "ParticipantSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A07C)": {
    tag: "(0040,A07C)",
    vr: "SQ",
    name: "CustodialOrganizationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A080)": {
    tag: "(0040,A080)",
    vr: "CS",
    name: "ParticipationType",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A082)": {
    tag: "(0040,A082)",
    vr: "DT",
    name: "ParticipationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A084)": {
    tag: "(0040,A084)",
    vr: "CS",
    name: "ObserverType",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A088)": {
    tag: "(0040,A088)",
    vr: "SQ",
    name: "VerifyingObserverIdentificationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A0B0)": {
    tag: "(0040,A0B0)",
    vr: "US",
    name: "ReferencedWaveformChannels",
    vm: "2-2n",
    version: "DICOM"
  },
  "(0040,A120)": {
    tag: "(0040,A120)",
    vr: "DT",
    name: "DateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A121)": {
    tag: "(0040,A121)",
    vr: "DA",
    name: "Date",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A122)": {
    tag: "(0040,A122)",
    vr: "TM",
    name: "Time",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A123)": {
    tag: "(0040,A123)",
    vr: "PN",
    name: "PersonName",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A124)": {
    tag: "(0040,A124)",
    vr: "UI",
    name: "UID",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A130)": {
    tag: "(0040,A130)",
    vr: "CS",
    name: "TemporalRangeType",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A132)": {
    tag: "(0040,A132)",
    vr: "UL",
    name: "ReferencedSamplePositions",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,A136)": {
    tag: "(0040,A136)",
    vr: "US",
    name: "ReferencedFrameNumbers",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,A138)": {
    tag: "(0040,A138)",
    vr: "DS",
    name: "ReferencedTimeOffsets",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,A13A)": {
    tag: "(0040,A13A)",
    vr: "DT",
    name: "ReferencedDateTime",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,A160)": {
    tag: "(0040,A160)",
    vr: "UT",
    name: "TextValue",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A161)": {
    tag: "(0040,A161)",
    vr: "FD",
    name: "FloatingPointValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,A162)": {
    tag: "(0040,A162)",
    vr: "SL",
    name: "RationalNumeratorValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,A163)": {
    tag: "(0040,A163)",
    vr: "UL",
    name: "RationalDenominatorValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,A168)": {
    tag: "(0040,A168)",
    vr: "SQ",
    name: "ConceptCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A170)": {
    tag: "(0040,A170)",
    vr: "SQ",
    name: "PurposeOfReferenceCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A171)": {
    tag: "(0040,A171)",
    vr: "UI",
    name: "ObservationUID",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A180)": {
    tag: "(0040,A180)",
    vr: "US",
    name: "AnnotationGroupNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A195)": {
    tag: "(0040,A195)",
    vr: "SQ",
    name: "ModifierCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A300)": {
    tag: "(0040,A300)",
    vr: "SQ",
    name: "MeasuredValueSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A301)": {
    tag: "(0040,A301)",
    vr: "SQ",
    name: "NumericValueQualifierCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A30A)": {
    tag: "(0040,A30A)",
    vr: "DS",
    name: "NumericValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,A360)": {
    tag: "(0040,A360)",
    vr: "SQ",
    name: "PredecessorDocumentsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A370)": {
    tag: "(0040,A370)",
    vr: "SQ",
    name: "ReferencedRequestSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A372)": {
    tag: "(0040,A372)",
    vr: "SQ",
    name: "PerformedProcedureCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A375)": {
    tag: "(0040,A375)",
    vr: "SQ",
    name: "CurrentRequestedProcedureEvidenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A385)": {
    tag: "(0040,A385)",
    vr: "SQ",
    name: "PertinentOtherEvidenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A390)": {
    tag: "(0040,A390)",
    vr: "SQ",
    name: "HL7StructuredDocumentReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A491)": {
    tag: "(0040,A491)",
    vr: "CS",
    name: "CompletionFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A492)": {
    tag: "(0040,A492)",
    vr: "LO",
    name: "CompletionFlagDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A493)": {
    tag: "(0040,A493)",
    vr: "CS",
    name: "VerificationFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A494)": {
    tag: "(0040,A494)",
    vr: "CS",
    name: "ArchiveRequested",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A496)": {
    tag: "(0040,A496)",
    vr: "CS",
    name: "PreliminaryFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A504)": {
    tag: "(0040,A504)",
    vr: "SQ",
    name: "ContentTemplateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A525)": {
    tag: "(0040,A525)",
    vr: "SQ",
    name: "IdenticalDocumentsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A730)": {
    tag: "(0040,A730)",
    vr: "SQ",
    name: "ContentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A801)": {
    tag: "(0040,A801)",
    vr: "SQ",
    name: "TabulatedValuesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A802)": {
    tag: "(0040,A802)",
    vr: "UL",
    name: "NumberOfTableRows",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A803)": {
    tag: "(0040,A803)",
    vr: "UL",
    name: "NumbeOfTableColumns",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A804)": {
    tag: "(0040,A804)",
    vr: "UL",
    name: "TableRowNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A805)": {
    tag: "(0040,A805)",
    vr: "UL",
    name: "TableColumnNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A806)": {
    tag: "(0040,A806)",
    vr: "SQ",
    name: "TableRowDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A807)": {
    tag: "(0040,A807)",
    vr: "SQ",
    name: "TableColumnDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,A808)": {
    tag: "(0040,A808)",
    vr: "SQ",
    name: "CellValuesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,B020)": {
    tag: "(0040,B020)",
    vr: "SQ",
    name: "WaveformAnnotationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,DB00)": {
    tag: "(0040,DB00)",
    vr: "CS",
    name: "TemplateIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0040,DB73)": {
    tag: "(0040,DB73)",
    vr: "UL",
    name: "ReferencedContentItemIdentifier",
    vm: "1-n",
    version: "DICOM"
  },
  "(0040,E001)": {
    tag: "(0040,E001)",
    vr: "ST",
    name: "HL7InstanceIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E004)": {
    tag: "(0040,E004)",
    vr: "DT",
    name: "HL7DocumentEffectiveTime",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E006)": {
    tag: "(0040,E006)",
    vr: "SQ",
    name: "HL7DocumentTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E008)": {
    tag: "(0040,E008)",
    vr: "SQ",
    name: "DocumentClassCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E010)": {
    tag: "(0040,E010)",
    vr: "UR",
    name: "RetrieveURI",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E011)": {
    tag: "(0040,E011)",
    vr: "UI",
    name: "RetrieveLocationUID",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E020)": {
    tag: "(0040,E020)",
    vr: "CS",
    name: "TypeOfInstances",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E021)": {
    tag: "(0040,E021)",
    vr: "SQ",
    name: "DICOMRetrievalSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E022)": {
    tag: "(0040,E022)",
    vr: "SQ",
    name: "DICOMMediaRetrievalSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E023)": {
    tag: "(0040,E023)",
    vr: "SQ",
    name: "WADORetrievalSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E024)": {
    tag: "(0040,E024)",
    vr: "SQ",
    name: "XDSRetrievalSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E025)": {
    tag: "(0040,E025)",
    vr: "SQ",
    name: "WADORSRetrievalSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E030)": {
    tag: "(0040,E030)",
    vr: "UI",
    name: "RepositoryUniqueID",
    vm: "1",
    version: "DICOM"
  },
  "(0040,E031)": {
    tag: "(0040,E031)",
    vr: "UI",
    name: "HomeCommunityID",
    vm: "1",
    version: "DICOM"
  },
  "(0042,0010)": {
    tag: "(0042,0010)",
    vr: "ST",
    name: "DocumentTitle",
    vm: "1",
    version: "DICOM"
  },
  "(0042,0011)": {
    tag: "(0042,0011)",
    vr: "OB",
    name: "EncapsulatedDocument",
    vm: "1",
    version: "DICOM"
  },
  "(0042,0012)": {
    tag: "(0042,0012)",
    vr: "LO",
    name: "MIMETypeOfEncapsulatedDocument",
    vm: "1",
    version: "DICOM"
  },
  "(0042,0013)": {
    tag: "(0042,0013)",
    vr: "SQ",
    name: "SourceInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0042,0014)": {
    tag: "(0042,0014)",
    vr: "LO",
    name: "ListOfMIMETypes",
    vm: "1-n",
    version: "DICOM"
  },
  "(0042,0015)": {
    tag: "(0042,0015)",
    vr: "UL",
    name: "EncapsulatedDocumentLength",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0001)": {
    tag: "(0044,0001)",
    vr: "ST",
    name: "ProductPackageIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0002)": {
    tag: "(0044,0002)",
    vr: "CS",
    name: "SubstanceAdministrationApproval",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0003)": {
    tag: "(0044,0003)",
    vr: "LT",
    name: "ApprovalStatusFurtherDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0004)": {
    tag: "(0044,0004)",
    vr: "DT",
    name: "ApprovalStatusDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0007)": {
    tag: "(0044,0007)",
    vr: "SQ",
    name: "ProductTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0008)": {
    tag: "(0044,0008)",
    vr: "LO",
    name: "ProductName",
    vm: "1-n",
    version: "DICOM"
  },
  "(0044,0009)": {
    tag: "(0044,0009)",
    vr: "LT",
    name: "ProductDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0044,000A)": {
    tag: "(0044,000A)",
    vr: "LO",
    name: "ProductLotIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0044,000B)": {
    tag: "(0044,000B)",
    vr: "DT",
    name: "ProductExpirationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0010)": {
    tag: "(0044,0010)",
    vr: "DT",
    name: "SubstanceAdministrationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0011)": {
    tag: "(0044,0011)",
    vr: "LO",
    name: "SubstanceAdministrationNotes",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0012)": {
    tag: "(0044,0012)",
    vr: "LO",
    name: "SubstanceAdministrationDeviceID",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0013)": {
    tag: "(0044,0013)",
    vr: "SQ",
    name: "ProductParameterSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0019)": {
    tag: "(0044,0019)",
    vr: "SQ",
    name: "SubstanceAdministrationParameterSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0100)": {
    tag: "(0044,0100)",
    vr: "SQ",
    name: "ApprovalSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0101)": {
    tag: "(0044,0101)",
    vr: "SQ",
    name: "AssertionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0102)": {
    tag: "(0044,0102)",
    vr: "UI",
    name: "AssertionUID",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0103)": {
    tag: "(0044,0103)",
    vr: "SQ",
    name: "AsserterIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0104)": {
    tag: "(0044,0104)",
    vr: "DT",
    name: "AssertionDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0105)": {
    tag: "(0044,0105)",
    vr: "DT",
    name: "AssertionExpirationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0106)": {
    tag: "(0044,0106)",
    vr: "UT",
    name: "AssertionComments",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0107)": {
    tag: "(0044,0107)",
    vr: "SQ",
    name: "RelatedAssertionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0108)": {
    tag: "(0044,0108)",
    vr: "UI",
    name: "ReferencedAssertionUID",
    vm: "1",
    version: "DICOM"
  },
  "(0044,0109)": {
    tag: "(0044,0109)",
    vr: "SQ",
    name: "ApprovalSubjectSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0044,010A)": {
    tag: "(0044,010A)",
    vr: "SQ",
    name: "OrganizationalRoleCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0012)": {
    tag: "(0046,0012)",
    vr: "LO",
    name: "LensDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0014)": {
    tag: "(0046,0014)",
    vr: "SQ",
    name: "RightLensSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0015)": {
    tag: "(0046,0015)",
    vr: "SQ",
    name: "LeftLensSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0016)": {
    tag: "(0046,0016)",
    vr: "SQ",
    name: "UnspecifiedLateralityLensSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0018)": {
    tag: "(0046,0018)",
    vr: "SQ",
    name: "CylinderSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0028)": {
    tag: "(0046,0028)",
    vr: "SQ",
    name: "PrismSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0030)": {
    tag: "(0046,0030)",
    vr: "FD",
    name: "HorizontalPrismPower",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0032)": {
    tag: "(0046,0032)",
    vr: "CS",
    name: "HorizontalPrismBase",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0034)": {
    tag: "(0046,0034)",
    vr: "FD",
    name: "VerticalPrismPower",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0036)": {
    tag: "(0046,0036)",
    vr: "CS",
    name: "VerticalPrismBase",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0038)": {
    tag: "(0046,0038)",
    vr: "CS",
    name: "LensSegmentType",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0040)": {
    tag: "(0046,0040)",
    vr: "FD",
    name: "OpticalTransmittance",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0042)": {
    tag: "(0046,0042)",
    vr: "FD",
    name: "ChannelWidth",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0044)": {
    tag: "(0046,0044)",
    vr: "FD",
    name: "PupilSize",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0046)": {
    tag: "(0046,0046)",
    vr: "FD",
    name: "CornealSize",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0047)": {
    tag: "(0046,0047)",
    vr: "SQ",
    name: "CornealSizeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0050)": {
    tag: "(0046,0050)",
    vr: "SQ",
    name: "AutorefractionRightEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0052)": {
    tag: "(0046,0052)",
    vr: "SQ",
    name: "AutorefractionLeftEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0060)": {
    tag: "(0046,0060)",
    vr: "FD",
    name: "DistancePupillaryDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0062)": {
    tag: "(0046,0062)",
    vr: "FD",
    name: "NearPupillaryDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0063)": {
    tag: "(0046,0063)",
    vr: "FD",
    name: "IntermediatePupillaryDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0064)": {
    tag: "(0046,0064)",
    vr: "FD",
    name: "OtherPupillaryDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0070)": {
    tag: "(0046,0070)",
    vr: "SQ",
    name: "KeratometryRightEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0071)": {
    tag: "(0046,0071)",
    vr: "SQ",
    name: "KeratometryLeftEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0074)": {
    tag: "(0046,0074)",
    vr: "SQ",
    name: "SteepKeratometricAxisSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0075)": {
    tag: "(0046,0075)",
    vr: "FD",
    name: "RadiusOfCurvature",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0076)": {
    tag: "(0046,0076)",
    vr: "FD",
    name: "KeratometricPower",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0077)": {
    tag: "(0046,0077)",
    vr: "FD",
    name: "KeratometricAxis",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0080)": {
    tag: "(0046,0080)",
    vr: "SQ",
    name: "FlatKeratometricAxisSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0092)": {
    tag: "(0046,0092)",
    vr: "CS",
    name: "BackgroundColor",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0094)": {
    tag: "(0046,0094)",
    vr: "CS",
    name: "Optotype",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0095)": {
    tag: "(0046,0095)",
    vr: "CS",
    name: "OptotypePresentation",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0097)": {
    tag: "(0046,0097)",
    vr: "SQ",
    name: "SubjectiveRefractionRightEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0098)": {
    tag: "(0046,0098)",
    vr: "SQ",
    name: "SubjectiveRefractionLeftEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0100)": {
    tag: "(0046,0100)",
    vr: "SQ",
    name: "AddNearSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0101)": {
    tag: "(0046,0101)",
    vr: "SQ",
    name: "AddIntermediateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0102)": {
    tag: "(0046,0102)",
    vr: "SQ",
    name: "AddOtherSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0104)": {
    tag: "(0046,0104)",
    vr: "FD",
    name: "AddPower",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0106)": {
    tag: "(0046,0106)",
    vr: "FD",
    name: "ViewingDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0110)": {
    tag: "(0046,0110)",
    vr: "SQ",
    name: "CorneaMeasurementsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0111)": {
    tag: "(0046,0111)",
    vr: "SQ",
    name: "SourceOfCorneaMeasurementDataCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0112)": {
    tag: "(0046,0112)",
    vr: "SQ",
    name: "SteepCornealAxisSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0113)": {
    tag: "(0046,0113)",
    vr: "SQ",
    name: "FlatCornealAxisSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0114)": {
    tag: "(0046,0114)",
    vr: "FD",
    name: "CornealPower",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0115)": {
    tag: "(0046,0115)",
    vr: "FD",
    name: "CornealAxis",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0116)": {
    tag: "(0046,0116)",
    vr: "SQ",
    name: "CorneaMeasurementMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0117)": {
    tag: "(0046,0117)",
    vr: "FL",
    name: "RefractiveIndexOfCornea",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0118)": {
    tag: "(0046,0118)",
    vr: "FL",
    name: "RefractiveIndexOfAqueousHumor",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0121)": {
    tag: "(0046,0121)",
    vr: "SQ",
    name: "VisualAcuityTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0122)": {
    tag: "(0046,0122)",
    vr: "SQ",
    name: "VisualAcuityRightEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0123)": {
    tag: "(0046,0123)",
    vr: "SQ",
    name: "VisualAcuityLeftEyeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0124)": {
    tag: "(0046,0124)",
    vr: "SQ",
    name: "VisualAcuityBothEyesOpenSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0125)": {
    tag: "(0046,0125)",
    vr: "CS",
    name: "ViewingDistanceType",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0135)": {
    tag: "(0046,0135)",
    vr: "SS",
    name: "VisualAcuityModifiers",
    vm: "2",
    version: "DICOM"
  },
  "(0046,0137)": {
    tag: "(0046,0137)",
    vr: "FD",
    name: "DecimalVisualAcuity",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0139)": {
    tag: "(0046,0139)",
    vr: "LO",
    name: "OptotypeDetailedDefinition",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0145)": {
    tag: "(0046,0145)",
    vr: "SQ",
    name: "ReferencedRefractiveMeasurementsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0146)": {
    tag: "(0046,0146)",
    vr: "FD",
    name: "SpherePower",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0147)": {
    tag: "(0046,0147)",
    vr: "FD",
    name: "CylinderPower",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0201)": {
    tag: "(0046,0201)",
    vr: "CS",
    name: "CornealTopographySurface",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0202)": {
    tag: "(0046,0202)",
    vr: "FL",
    name: "CornealVertexLocation",
    vm: "2",
    version: "DICOM"
  },
  "(0046,0203)": {
    tag: "(0046,0203)",
    vr: "FL",
    name: "PupilCentroidXCoordinate",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0204)": {
    tag: "(0046,0204)",
    vr: "FL",
    name: "PupilCentroidYCoordinate",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0205)": {
    tag: "(0046,0205)",
    vr: "FL",
    name: "EquivalentPupilRadius",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0207)": {
    tag: "(0046,0207)",
    vr: "SQ",
    name: "CornealTopographyMapTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0208)": {
    tag: "(0046,0208)",
    vr: "IS",
    name: "VerticesOfTheOutlineOfPupil",
    vm: "2-2n",
    version: "DICOM"
  },
  "(0046,0210)": {
    tag: "(0046,0210)",
    vr: "SQ",
    name: "CornealTopographyMappingNormalsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0211)": {
    tag: "(0046,0211)",
    vr: "SQ",
    name: "MaximumCornealCurvatureSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0212)": {
    tag: "(0046,0212)",
    vr: "FL",
    name: "MaximumCornealCurvature",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0213)": {
    tag: "(0046,0213)",
    vr: "FL",
    name: "MaximumCornealCurvatureLocation",
    vm: "2",
    version: "DICOM"
  },
  "(0046,0215)": {
    tag: "(0046,0215)",
    vr: "SQ",
    name: "MinimumKeratometricSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0218)": {
    tag: "(0046,0218)",
    vr: "SQ",
    name: "SimulatedKeratometricCylinderSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0220)": {
    tag: "(0046,0220)",
    vr: "FL",
    name: "AverageCornealPower",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0224)": {
    tag: "(0046,0224)",
    vr: "FL",
    name: "CornealISValue",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0227)": {
    tag: "(0046,0227)",
    vr: "FL",
    name: "AnalyzedArea",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0230)": {
    tag: "(0046,0230)",
    vr: "FL",
    name: "SurfaceRegularityIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0232)": {
    tag: "(0046,0232)",
    vr: "FL",
    name: "SurfaceAsymmetryIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0234)": {
    tag: "(0046,0234)",
    vr: "FL",
    name: "CornealEccentricityIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0236)": {
    tag: "(0046,0236)",
    vr: "FL",
    name: "KeratoconusPredictionIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0238)": {
    tag: "(0046,0238)",
    vr: "FL",
    name: "DecimalPotentialVisualAcuity",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0242)": {
    tag: "(0046,0242)",
    vr: "CS",
    name: "CornealTopographyMapQualityEvaluation",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0244)": {
    tag: "(0046,0244)",
    vr: "SQ",
    name: "SourceImageCornealProcessedDataSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0247)": {
    tag: "(0046,0247)",
    vr: "FL",
    name: "CornealPointLocation",
    vm: "3",
    version: "DICOM"
  },
  "(0046,0248)": {
    tag: "(0046,0248)",
    vr: "CS",
    name: "CornealPointEstimated",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0249)": {
    tag: "(0046,0249)",
    vr: "FL",
    name: "AxialPower",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0250)": {
    tag: "(0046,0250)",
    vr: "FL",
    name: "TangentialPower",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0251)": {
    tag: "(0046,0251)",
    vr: "FL",
    name: "RefractivePower",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0252)": {
    tag: "(0046,0252)",
    vr: "FL",
    name: "RelativeElevation",
    vm: "1",
    version: "DICOM"
  },
  "(0046,0253)": {
    tag: "(0046,0253)",
    vr: "FL",
    name: "CornealWavefront",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0001)": {
    tag: "(0048,0001)",
    vr: "FL",
    name: "ImagedVolumeWidth",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0002)": {
    tag: "(0048,0002)",
    vr: "FL",
    name: "ImagedVolumeHeight",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0003)": {
    tag: "(0048,0003)",
    vr: "FL",
    name: "ImagedVolumeDepth",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0006)": {
    tag: "(0048,0006)",
    vr: "UL",
    name: "TotalPixelMatrixColumns",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0007)": {
    tag: "(0048,0007)",
    vr: "UL",
    name: "TotalPixelMatrixRows",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0008)": {
    tag: "(0048,0008)",
    vr: "SQ",
    name: "TotalPixelMatrixOriginSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0010)": {
    tag: "(0048,0010)",
    vr: "CS",
    name: "SpecimenLabelInImage",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0011)": {
    tag: "(0048,0011)",
    vr: "CS",
    name: "FocusMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0012)": {
    tag: "(0048,0012)",
    vr: "CS",
    name: "ExtendedDepthOfField",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0013)": {
    tag: "(0048,0013)",
    vr: "US",
    name: "NumberOfFocalPlanes",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0014)": {
    tag: "(0048,0014)",
    vr: "FL",
    name: "DistanceBetweenFocalPlanes",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0015)": {
    tag: "(0048,0015)",
    vr: "US",
    name: "RecommendedAbsentPixelCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(0048,0100)": {
    tag: "(0048,0100)",
    vr: "SQ",
    name: "IlluminatorTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0102)": {
    tag: "(0048,0102)",
    vr: "DS",
    name: "ImageOrientationSlide",
    vm: "6",
    version: "DICOM"
  },
  "(0048,0105)": {
    tag: "(0048,0105)",
    vr: "SQ",
    name: "OpticalPathSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0106)": {
    tag: "(0048,0106)",
    vr: "SH",
    name: "OpticalPathIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0107)": {
    tag: "(0048,0107)",
    vr: "ST",
    name: "OpticalPathDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0108)": {
    tag: "(0048,0108)",
    vr: "SQ",
    name: "IlluminationColorCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0110)": {
    tag: "(0048,0110)",
    vr: "SQ",
    name: "SpecimenReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0111)": {
    tag: "(0048,0111)",
    vr: "DS",
    name: "CondenserLensPower",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0112)": {
    tag: "(0048,0112)",
    vr: "DS",
    name: "ObjectiveLensPower",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0113)": {
    tag: "(0048,0113)",
    vr: "DS",
    name: "ObjectiveLensNumericalAperture",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0120)": {
    tag: "(0048,0120)",
    vr: "SQ",
    name: "PaletteColorLookupTableSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0200)": {
    tag: "(0048,0200)",
    vr: "SQ",
    name: "ReferencedImageNavigationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0201)": {
    tag: "(0048,0201)",
    vr: "US",
    name: "TopLeftHandCornerOfLocalizerArea",
    vm: "2",
    version: "DICOM"
  },
  "(0048,0202)": {
    tag: "(0048,0202)",
    vr: "US",
    name: "BottomRightHandCornerOfLocalizerArea",
    vm: "2",
    version: "DICOM"
  },
  "(0048,0207)": {
    tag: "(0048,0207)",
    vr: "SQ",
    name: "OpticalPathIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0048,021A)": {
    tag: "(0048,021A)",
    vr: "SQ",
    name: "PlanePositionSlideSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0048,021E)": {
    tag: "(0048,021E)",
    vr: "SL",
    name: "ColumnPositionInTotalImagePixelMatrix",
    vm: "1",
    version: "DICOM"
  },
  "(0048,021F)": {
    tag: "(0048,021F)",
    vr: "SL",
    name: "RowPositionInTotalImagePixelMatrix",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0301)": {
    tag: "(0048,0301)",
    vr: "CS",
    name: "PixelOriginInterpretation",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0302)": {
    tag: "(0048,0302)",
    vr: "UL",
    name: "NumberOfOpticalPaths",
    vm: "1",
    version: "DICOM"
  },
  "(0048,0303)": {
    tag: "(0048,0303)",
    vr: "UL",
    name: "TotalPixelMatrixFocalPlanes",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0004)": {
    tag: "(0050,0004)",
    vr: "CS",
    name: "CalibrationImage",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0010)": {
    tag: "(0050,0010)",
    vr: "SQ",
    name: "DeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0012)": {
    tag: "(0050,0012)",
    vr: "SQ",
    name: "ContainerComponentTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0013)": {
    tag: "(0050,0013)",
    vr: "FD",
    name: "ContainerComponentThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0014)": {
    tag: "(0050,0014)",
    vr: "DS",
    name: "DeviceLength",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0015)": {
    tag: "(0050,0015)",
    vr: "FD",
    name: "ContainerComponentWidth",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0016)": {
    tag: "(0050,0016)",
    vr: "DS",
    name: "DeviceDiameter",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0017)": {
    tag: "(0050,0017)",
    vr: "CS",
    name: "DeviceDiameterUnits",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0018)": {
    tag: "(0050,0018)",
    vr: "DS",
    name: "DeviceVolume",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0019)": {
    tag: "(0050,0019)",
    vr: "DS",
    name: "InterMarkerDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0050,001A)": {
    tag: "(0050,001A)",
    vr: "CS",
    name: "ContainerComponentMaterial",
    vm: "1",
    version: "DICOM"
  },
  "(0050,001B)": {
    tag: "(0050,001B)",
    vr: "LO",
    name: "ContainerComponentID",
    vm: "1",
    version: "DICOM"
  },
  "(0050,001C)": {
    tag: "(0050,001C)",
    vr: "FD",
    name: "ContainerComponentLength",
    vm: "1",
    version: "DICOM"
  },
  "(0050,001D)": {
    tag: "(0050,001D)",
    vr: "FD",
    name: "ContainerComponentDiameter",
    vm: "1",
    version: "DICOM"
  },
  "(0050,001E)": {
    tag: "(0050,001E)",
    vr: "LO",
    name: "ContainerComponentDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0020)": {
    tag: "(0050,0020)",
    vr: "LO",
    name: "DeviceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0050,0021)": {
    tag: "(0050,0021)",
    vr: "ST",
    name: "LongDeviceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0001)": {
    tag: "(0052,0001)",
    vr: "FL",
    name: "ContrastBolusIngredientPercentByVolume",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0002)": {
    tag: "(0052,0002)",
    vr: "FD",
    name: "OCTFocalDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0003)": {
    tag: "(0052,0003)",
    vr: "FD",
    name: "BeamSpotSize",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0004)": {
    tag: "(0052,0004)",
    vr: "FD",
    name: "EffectiveRefractiveIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0006)": {
    tag: "(0052,0006)",
    vr: "CS",
    name: "OCTAcquisitionDomain",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0007)": {
    tag: "(0052,0007)",
    vr: "FD",
    name: "OCTOpticalCenterWavelength",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0008)": {
    tag: "(0052,0008)",
    vr: "FD",
    name: "AxialResolution",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0009)": {
    tag: "(0052,0009)",
    vr: "FD",
    name: "RangingDepth",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0011)": {
    tag: "(0052,0011)",
    vr: "FD",
    name: "ALineRate",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0012)": {
    tag: "(0052,0012)",
    vr: "US",
    name: "ALinesPerFrame",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0013)": {
    tag: "(0052,0013)",
    vr: "FD",
    name: "CatheterRotationalRate",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0014)": {
    tag: "(0052,0014)",
    vr: "FD",
    name: "ALinePixelSpacing",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0016)": {
    tag: "(0052,0016)",
    vr: "SQ",
    name: "ModeOfPercutaneousAccessSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0025)": {
    tag: "(0052,0025)",
    vr: "SQ",
    name: "IntravascularOCTFrameTypeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0026)": {
    tag: "(0052,0026)",
    vr: "CS",
    name: "OCTZOffsetApplied",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0027)": {
    tag: "(0052,0027)",
    vr: "SQ",
    name: "IntravascularFrameContentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0028)": {
    tag: "(0052,0028)",
    vr: "FD",
    name: "IntravascularLongitudinalDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0029)": {
    tag: "(0052,0029)",
    vr: "SQ",
    name: "IntravascularOCTFrameContentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0030)": {
    tag: "(0052,0030)",
    vr: "SS",
    name: "OCTZOffsetCorrection",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0031)": {
    tag: "(0052,0031)",
    vr: "CS",
    name: "CatheterDirectionOfRotation",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0033)": {
    tag: "(0052,0033)",
    vr: "FD",
    name: "SeamLineLocation",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0034)": {
    tag: "(0052,0034)",
    vr: "FD",
    name: "FirstALineLocation",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0036)": {
    tag: "(0052,0036)",
    vr: "US",
    name: "SeamLineIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0038)": {
    tag: "(0052,0038)",
    vr: "US",
    name: "NumberOfPaddedALines",
    vm: "1",
    version: "DICOM"
  },
  "(0052,0039)": {
    tag: "(0052,0039)",
    vr: "CS",
    name: "InterpolationType",
    vm: "1",
    version: "DICOM"
  },
  "(0052,003A)": {
    tag: "(0052,003A)",
    vr: "CS",
    name: "RefractiveIndexApplied",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0010)": {
    tag: "(0054,0010)",
    vr: "US",
    name: "EnergyWindowVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,0011)": {
    tag: "(0054,0011)",
    vr: "US",
    name: "NumberOfEnergyWindows",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0012)": {
    tag: "(0054,0012)",
    vr: "SQ",
    name: "EnergyWindowInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0013)": {
    tag: "(0054,0013)",
    vr: "SQ",
    name: "EnergyWindowRangeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0014)": {
    tag: "(0054,0014)",
    vr: "DS",
    name: "EnergyWindowLowerLimit",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0015)": {
    tag: "(0054,0015)",
    vr: "DS",
    name: "EnergyWindowUpperLimit",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0016)": {
    tag: "(0054,0016)",
    vr: "SQ",
    name: "RadiopharmaceuticalInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0017)": {
    tag: "(0054,0017)",
    vr: "IS",
    name: "ResidualSyringeCounts",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0018)": {
    tag: "(0054,0018)",
    vr: "SH",
    name: "EnergyWindowName",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0020)": {
    tag: "(0054,0020)",
    vr: "US",
    name: "DetectorVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,0021)": {
    tag: "(0054,0021)",
    vr: "US",
    name: "NumberOfDetectors",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0022)": {
    tag: "(0054,0022)",
    vr: "SQ",
    name: "DetectorInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0030)": {
    tag: "(0054,0030)",
    vr: "US",
    name: "PhaseVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,0031)": {
    tag: "(0054,0031)",
    vr: "US",
    name: "NumberOfPhases",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0032)": {
    tag: "(0054,0032)",
    vr: "SQ",
    name: "PhaseInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0033)": {
    tag: "(0054,0033)",
    vr: "US",
    name: "NumberOfFramesInPhase",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0036)": {
    tag: "(0054,0036)",
    vr: "IS",
    name: "PhaseDelay",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0038)": {
    tag: "(0054,0038)",
    vr: "IS",
    name: "PauseBetweenFrames",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0039)": {
    tag: "(0054,0039)",
    vr: "CS",
    name: "PhaseDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0050)": {
    tag: "(0054,0050)",
    vr: "US",
    name: "RotationVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,0051)": {
    tag: "(0054,0051)",
    vr: "US",
    name: "NumberOfRotations",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0052)": {
    tag: "(0054,0052)",
    vr: "SQ",
    name: "RotationInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0053)": {
    tag: "(0054,0053)",
    vr: "US",
    name: "NumberOfFramesInRotation",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0060)": {
    tag: "(0054,0060)",
    vr: "US",
    name: "RRIntervalVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,0061)": {
    tag: "(0054,0061)",
    vr: "US",
    name: "NumberOfRRIntervals",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0062)": {
    tag: "(0054,0062)",
    vr: "SQ",
    name: "GatedInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0063)": {
    tag: "(0054,0063)",
    vr: "SQ",
    name: "DataInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0070)": {
    tag: "(0054,0070)",
    vr: "US",
    name: "TimeSlotVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,0071)": {
    tag: "(0054,0071)",
    vr: "US",
    name: "NumberOfTimeSlots",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0072)": {
    tag: "(0054,0072)",
    vr: "SQ",
    name: "TimeSlotInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0073)": {
    tag: "(0054,0073)",
    vr: "DS",
    name: "TimeSlotTime",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0080)": {
    tag: "(0054,0080)",
    vr: "US",
    name: "SliceVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,0081)": {
    tag: "(0054,0081)",
    vr: "US",
    name: "NumberOfSlices",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0090)": {
    tag: "(0054,0090)",
    vr: "US",
    name: "AngularViewVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,0100)": {
    tag: "(0054,0100)",
    vr: "US",
    name: "TimeSliceVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,0101)": {
    tag: "(0054,0101)",
    vr: "US",
    name: "NumberOfTimeSlices",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0200)": {
    tag: "(0054,0200)",
    vr: "DS",
    name: "StartAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0202)": {
    tag: "(0054,0202)",
    vr: "CS",
    name: "TypeOfDetectorMotion",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0210)": {
    tag: "(0054,0210)",
    vr: "IS",
    name: "TriggerVector",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,0211)": {
    tag: "(0054,0211)",
    vr: "US",
    name: "NumberOfTriggersInPhase",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0220)": {
    tag: "(0054,0220)",
    vr: "SQ",
    name: "ViewCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0222)": {
    tag: "(0054,0222)",
    vr: "SQ",
    name: "ViewModifierCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0300)": {
    tag: "(0054,0300)",
    vr: "SQ",
    name: "RadionuclideCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0302)": {
    tag: "(0054,0302)",
    vr: "SQ",
    name: "AdministrationRouteCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0304)": {
    tag: "(0054,0304)",
    vr: "SQ",
    name: "RadiopharmaceuticalCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0306)": {
    tag: "(0054,0306)",
    vr: "SQ",
    name: "CalibrationDataSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0308)": {
    tag: "(0054,0308)",
    vr: "US",
    name: "EnergyWindowNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0400)": {
    tag: "(0054,0400)",
    vr: "SH",
    name: "ImageID",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0410)": {
    tag: "(0054,0410)",
    vr: "SQ",
    name: "PatientOrientationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0412)": {
    tag: "(0054,0412)",
    vr: "SQ",
    name: "PatientOrientationModifierCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0414)": {
    tag: "(0054,0414)",
    vr: "SQ",
    name: "PatientGantryRelationshipCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0500)": {
    tag: "(0054,0500)",
    vr: "CS",
    name: "SliceProgressionDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0054,0501)": {
    tag: "(0054,0501)",
    vr: "CS",
    name: "ScanProgressionDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1000)": {
    tag: "(0054,1000)",
    vr: "CS",
    name: "SeriesType",
    vm: "2",
    version: "DICOM"
  },
  "(0054,1001)": {
    tag: "(0054,1001)",
    vr: "CS",
    name: "Units",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1002)": {
    tag: "(0054,1002)",
    vr: "CS",
    name: "CountsSource",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1004)": {
    tag: "(0054,1004)",
    vr: "CS",
    name: "ReprojectionMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1006)": {
    tag: "(0054,1006)",
    vr: "CS",
    name: "SUVType",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1100)": {
    tag: "(0054,1100)",
    vr: "CS",
    name: "RandomsCorrectionMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1101)": {
    tag: "(0054,1101)",
    vr: "LO",
    name: "AttenuationCorrectionMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1102)": {
    tag: "(0054,1102)",
    vr: "CS",
    name: "DecayCorrection",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1103)": {
    tag: "(0054,1103)",
    vr: "LO",
    name: "ReconstructionMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1104)": {
    tag: "(0054,1104)",
    vr: "LO",
    name: "DetectorLinesOfResponseUsed",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1105)": {
    tag: "(0054,1105)",
    vr: "LO",
    name: "ScatterCorrectionMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1200)": {
    tag: "(0054,1200)",
    vr: "DS",
    name: "AxialAcceptance",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1201)": {
    tag: "(0054,1201)",
    vr: "IS",
    name: "AxialMash",
    vm: "2",
    version: "DICOM"
  },
  "(0054,1202)": {
    tag: "(0054,1202)",
    vr: "IS",
    name: "TransverseMash",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1203)": {
    tag: "(0054,1203)",
    vr: "DS",
    name: "DetectorElementSize",
    vm: "2",
    version: "DICOM"
  },
  "(0054,1210)": {
    tag: "(0054,1210)",
    vr: "DS",
    name: "CoincidenceWindowWidth",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1220)": {
    tag: "(0054,1220)",
    vr: "CS",
    name: "SecondaryCountsType",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,1300)": {
    tag: "(0054,1300)",
    vr: "DS",
    name: "FrameReferenceTime",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1310)": {
    tag: "(0054,1310)",
    vr: "IS",
    name: "PrimaryPromptsCountsAccumulated",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1311)": {
    tag: "(0054,1311)",
    vr: "IS",
    name: "SecondaryCountsAccumulated",
    vm: "1-n",
    version: "DICOM"
  },
  "(0054,1320)": {
    tag: "(0054,1320)",
    vr: "DS",
    name: "SliceSensitivityFactor",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1321)": {
    tag: "(0054,1321)",
    vr: "DS",
    name: "DecayFactor",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1322)": {
    tag: "(0054,1322)",
    vr: "DS",
    name: "DoseCalibrationFactor",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1323)": {
    tag: "(0054,1323)",
    vr: "DS",
    name: "ScatterFractionFactor",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1324)": {
    tag: "(0054,1324)",
    vr: "DS",
    name: "DeadTimeFactor",
    vm: "1",
    version: "DICOM"
  },
  "(0054,1330)": {
    tag: "(0054,1330)",
    vr: "US",
    name: "ImageIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0060,3000)": {
    tag: "(0060,3000)",
    vr: "SQ",
    name: "HistogramSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0060,3002)": {
    tag: "(0060,3002)",
    vr: "US",
    name: "HistogramNumberOfBins",
    vm: "1",
    version: "DICOM"
  },
  "(0060,3004)": {
    tag: "(0060,3004)",
    vr: "xs",
    name: "HistogramFirstBinValue",
    vm: "1",
    version: "DICOM"
  },
  "(0060,3006)": {
    tag: "(0060,3006)",
    vr: "xs",
    name: "HistogramLastBinValue",
    vm: "1",
    version: "DICOM"
  },
  "(0060,3008)": {
    tag: "(0060,3008)",
    vr: "US",
    name: "HistogramBinWidth",
    vm: "1",
    version: "DICOM"
  },
  "(0060,3010)": {
    tag: "(0060,3010)",
    vr: "LO",
    name: "HistogramExplanation",
    vm: "1",
    version: "DICOM"
  },
  "(0060,3020)": {
    tag: "(0060,3020)",
    vr: "UL",
    name: "HistogramData",
    vm: "1-n",
    version: "DICOM"
  },
  "(0062,0001)": {
    tag: "(0062,0001)",
    vr: "CS",
    name: "SegmentationType",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0002)": {
    tag: "(0062,0002)",
    vr: "SQ",
    name: "SegmentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0003)": {
    tag: "(0062,0003)",
    vr: "SQ",
    name: "SegmentedPropertyCategoryCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0004)": {
    tag: "(0062,0004)",
    vr: "US",
    name: "SegmentNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0005)": {
    tag: "(0062,0005)",
    vr: "LO",
    name: "SegmentLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0006)": {
    tag: "(0062,0006)",
    vr: "ST",
    name: "SegmentDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0007)": {
    tag: "(0062,0007)",
    vr: "SQ",
    name: "SegmentationAlgorithmIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0008)": {
    tag: "(0062,0008)",
    vr: "CS",
    name: "SegmentAlgorithmType",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0009)": {
    tag: "(0062,0009)",
    vr: "LO",
    name: "SegmentAlgorithmName",
    vm: "1",
    version: "DICOM"
  },
  "(0062,000A)": {
    tag: "(0062,000A)",
    vr: "SQ",
    name: "SegmentIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0062,000B)": {
    tag: "(0062,000B)",
    vr: "US",
    name: "ReferencedSegmentNumber",
    vm: "1-n",
    version: "DICOM"
  },
  "(0062,000C)": {
    tag: "(0062,000C)",
    vr: "US",
    name: "RecommendedDisplayGrayscaleValue",
    vm: "1",
    version: "DICOM"
  },
  "(0062,000D)": {
    tag: "(0062,000D)",
    vr: "US",
    name: "RecommendedDisplayCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(0062,000E)": {
    tag: "(0062,000E)",
    vr: "US",
    name: "MaximumFractionalValue",
    vm: "1",
    version: "DICOM"
  },
  "(0062,000F)": {
    tag: "(0062,000F)",
    vr: "SQ",
    name: "SegmentedPropertyTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0010)": {
    tag: "(0062,0010)",
    vr: "CS",
    name: "SegmentationFractionalType",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0011)": {
    tag: "(0062,0011)",
    vr: "SQ",
    name: "SegmentedPropertyTypeModifierCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0012)": {
    tag: "(0062,0012)",
    vr: "SQ",
    name: "UsedSegmentsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0013)": {
    tag: "(0062,0013)",
    vr: "CS",
    name: "SegmentsOverlap",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0020)": {
    tag: "(0062,0020)",
    vr: "UT",
    name: "TrackingID",
    vm: "1",
    version: "DICOM"
  },
  "(0062,0021)": {
    tag: "(0062,0021)",
    vr: "UI",
    name: "TrackingUID",
    vm: "1",
    version: "DICOM"
  },
  "(0064,0002)": {
    tag: "(0064,0002)",
    vr: "SQ",
    name: "DeformableRegistrationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0064,0003)": {
    tag: "(0064,0003)",
    vr: "UI",
    name: "SourceFrameOfReferenceUID",
    vm: "1",
    version: "DICOM"
  },
  "(0064,0005)": {
    tag: "(0064,0005)",
    vr: "SQ",
    name: "DeformableRegistrationGridSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0064,0007)": {
    tag: "(0064,0007)",
    vr: "UL",
    name: "GridDimensions",
    vm: "3",
    version: "DICOM"
  },
  "(0064,0008)": {
    tag: "(0064,0008)",
    vr: "FD",
    name: "GridResolution",
    vm: "3",
    version: "DICOM"
  },
  "(0064,0009)": {
    tag: "(0064,0009)",
    vr: "OF",
    name: "VectorGridData",
    vm: "1",
    version: "DICOM"
  },
  "(0064,000F)": {
    tag: "(0064,000F)",
    vr: "SQ",
    name: "PreDeformationMatrixRegistrationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0064,0010)": {
    tag: "(0064,0010)",
    vr: "SQ",
    name: "PostDeformationMatrixRegistrationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0001)": {
    tag: "(0066,0001)",
    vr: "UL",
    name: "NumberOfSurfaces",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0002)": {
    tag: "(0066,0002)",
    vr: "SQ",
    name: "SurfaceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0003)": {
    tag: "(0066,0003)",
    vr: "UL",
    name: "SurfaceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0004)": {
    tag: "(0066,0004)",
    vr: "LT",
    name: "SurfaceComments",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0009)": {
    tag: "(0066,0009)",
    vr: "CS",
    name: "SurfaceProcessing",
    vm: "1",
    version: "DICOM"
  },
  "(0066,000A)": {
    tag: "(0066,000A)",
    vr: "FL",
    name: "SurfaceProcessingRatio",
    vm: "1",
    version: "DICOM"
  },
  "(0066,000B)": {
    tag: "(0066,000B)",
    vr: "LO",
    name: "SurfaceProcessingDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0066,000C)": {
    tag: "(0066,000C)",
    vr: "FL",
    name: "RecommendedPresentationOpacity",
    vm: "1",
    version: "DICOM"
  },
  "(0066,000D)": {
    tag: "(0066,000D)",
    vr: "CS",
    name: "RecommendedPresentationType",
    vm: "1",
    version: "DICOM"
  },
  "(0066,000E)": {
    tag: "(0066,000E)",
    vr: "CS",
    name: "FiniteVolume",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0010)": {
    tag: "(0066,0010)",
    vr: "CS",
    name: "Manifold",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0011)": {
    tag: "(0066,0011)",
    vr: "SQ",
    name: "SurfacePointsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0012)": {
    tag: "(0066,0012)",
    vr: "SQ",
    name: "SurfacePointsNormalsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0013)": {
    tag: "(0066,0013)",
    vr: "SQ",
    name: "SurfaceMeshPrimitivesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0015)": {
    tag: "(0066,0015)",
    vr: "UL",
    name: "NumberOfSurfacePoints",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0016)": {
    tag: "(0066,0016)",
    vr: "OF",
    name: "PointCoordinatesData",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0017)": {
    tag: "(0066,0017)",
    vr: "FL",
    name: "PointPositionAccuracy",
    vm: "3",
    version: "DICOM"
  },
  "(0066,0018)": {
    tag: "(0066,0018)",
    vr: "FL",
    name: "MeanPointDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0019)": {
    tag: "(0066,0019)",
    vr: "FL",
    name: "MaximumPointDistance",
    vm: "1",
    version: "DICOM"
  },
  "(0066,001A)": {
    tag: "(0066,001A)",
    vr: "FL",
    name: "PointsBoundingBoxCoordinates",
    vm: "6",
    version: "DICOM"
  },
  "(0066,001B)": {
    tag: "(0066,001B)",
    vr: "FL",
    name: "AxisOfRotation",
    vm: "3",
    version: "DICOM"
  },
  "(0066,001C)": {
    tag: "(0066,001C)",
    vr: "FL",
    name: "CenterOfRotation",
    vm: "3",
    version: "DICOM"
  },
  "(0066,001E)": {
    tag: "(0066,001E)",
    vr: "UL",
    name: "NumberOfVectors",
    vm: "1",
    version: "DICOM"
  },
  "(0066,001F)": {
    tag: "(0066,001F)",
    vr: "US",
    name: "VectorDimensionality",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0020)": {
    tag: "(0066,0020)",
    vr: "FL",
    name: "VectorAccuracy",
    vm: "1-n",
    version: "DICOM"
  },
  "(0066,0021)": {
    tag: "(0066,0021)",
    vr: "OF",
    name: "VectorCoordinateData",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0023)": {
    tag: "(0066,0023)",
    vr: "OW",
    name: "TrianglePointIndexList",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0024)": {
    tag: "(0066,0024)",
    vr: "OW",
    name: "EdgePointIndexList",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0025)": {
    tag: "(0066,0025)",
    vr: "OW",
    name: "VertexPointIndexList",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0026)": {
    tag: "(0066,0026)",
    vr: "SQ",
    name: "TriangleStripSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0027)": {
    tag: "(0066,0027)",
    vr: "SQ",
    name: "TriangleFanSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0028)": {
    tag: "(0066,0028)",
    vr: "SQ",
    name: "LineSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0029)": {
    tag: "(0066,0029)",
    vr: "OW",
    name: "PrimitivePointIndexList",
    vm: "1",
    version: "DICOM"
  },
  "(0066,002A)": {
    tag: "(0066,002A)",
    vr: "UL",
    name: "SurfaceCount",
    vm: "1",
    version: "DICOM"
  },
  "(0066,002B)": {
    tag: "(0066,002B)",
    vr: "SQ",
    name: "ReferencedSurfaceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,002C)": {
    tag: "(0066,002C)",
    vr: "UL",
    name: "ReferencedSurfaceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0066,002D)": {
    tag: "(0066,002D)",
    vr: "SQ",
    name: "SegmentSurfaceGenerationAlgorithmIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,002E)": {
    tag: "(0066,002E)",
    vr: "SQ",
    name: "SegmentSurfaceSourceInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,002F)": {
    tag: "(0066,002F)",
    vr: "SQ",
    name: "AlgorithmFamilyCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0030)": {
    tag: "(0066,0030)",
    vr: "SQ",
    name: "AlgorithmNameCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0031)": {
    tag: "(0066,0031)",
    vr: "LO",
    name: "AlgorithmVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0032)": {
    tag: "(0066,0032)",
    vr: "LT",
    name: "AlgorithmParameters",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0034)": {
    tag: "(0066,0034)",
    vr: "SQ",
    name: "FacetSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0035)": {
    tag: "(0066,0035)",
    vr: "SQ",
    name: "SurfaceProcessingAlgorithmIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0036)": {
    tag: "(0066,0036)",
    vr: "LO",
    name: "AlgorithmName",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0037)": {
    tag: "(0066,0037)",
    vr: "FL",
    name: "RecommendedPointRadius",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0038)": {
    tag: "(0066,0038)",
    vr: "FL",
    name: "RecommendedLineThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0040)": {
    tag: "(0066,0040)",
    vr: "UL",
    name: "LongPrimitivePointIndexList",
    vm: "1-n",
    version: "DICOM"
  },
  "(0066,0041)": {
    tag: "(0066,0041)",
    vr: "UL",
    name: "LongTrianglePointIndexList",
    vm: "3-3n",
    version: "DICOM"
  },
  "(0066,0042)": {
    tag: "(0066,0042)",
    vr: "UL",
    name: "LongEdgePointIndexList",
    vm: "2-2n",
    version: "DICOM"
  },
  "(0066,0043)": {
    tag: "(0066,0043)",
    vr: "UL",
    name: "LongVertexPointIndexList",
    vm: "1-n",
    version: "DICOM"
  },
  "(0066,0101)": {
    tag: "(0066,0101)",
    vr: "SQ",
    name: "TrackSetSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0102)": {
    tag: "(0066,0102)",
    vr: "SQ",
    name: "TrackSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0103)": {
    tag: "(0066,0103)",
    vr: "OW",
    name: "RecommendedDisplayCIELabValueList",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0104)": {
    tag: "(0066,0104)",
    vr: "SQ",
    name: "TrackingAlgorithmIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0105)": {
    tag: "(0066,0105)",
    vr: "UL",
    name: "TrackSetNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0106)": {
    tag: "(0066,0106)",
    vr: "LO",
    name: "TrackSetLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0107)": {
    tag: "(0066,0107)",
    vr: "UT",
    name: "TrackSetDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0108)": {
    tag: "(0066,0108)",
    vr: "SQ",
    name: "TrackSetAnatomicalTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0121)": {
    tag: "(0066,0121)",
    vr: "SQ",
    name: "MeasurementsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0124)": {
    tag: "(0066,0124)",
    vr: "SQ",
    name: "TrackSetStatisticsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0125)": {
    tag: "(0066,0125)",
    vr: "OF",
    name: "FloatingPointValues",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0129)": {
    tag: "(0066,0129)",
    vr: "OL",
    name: "TrackPointIndexList",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0130)": {
    tag: "(0066,0130)",
    vr: "SQ",
    name: "TrackStatisticsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0132)": {
    tag: "(0066,0132)",
    vr: "SQ",
    name: "MeasurementValuesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0133)": {
    tag: "(0066,0133)",
    vr: "SQ",
    name: "DiffusionAcquisitionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0066,0134)": {
    tag: "(0066,0134)",
    vr: "SQ",
    name: "DiffusionModelCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6210)": {
    tag: "(0068,6210)",
    vr: "LO",
    name: "ImplantSize",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6221)": {
    tag: "(0068,6221)",
    vr: "LO",
    name: "ImplantTemplateVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6222)": {
    tag: "(0068,6222)",
    vr: "SQ",
    name: "ReplacedImplantTemplateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6223)": {
    tag: "(0068,6223)",
    vr: "CS",
    name: "ImplantType",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6224)": {
    tag: "(0068,6224)",
    vr: "SQ",
    name: "DerivationImplantTemplateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6225)": {
    tag: "(0068,6225)",
    vr: "SQ",
    name: "OriginalImplantTemplateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6226)": {
    tag: "(0068,6226)",
    vr: "DT",
    name: "EffectiveDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6230)": {
    tag: "(0068,6230)",
    vr: "SQ",
    name: "ImplantTargetAnatomySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6260)": {
    tag: "(0068,6260)",
    vr: "SQ",
    name: "InformationFromManufacturerSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6265)": {
    tag: "(0068,6265)",
    vr: "SQ",
    name: "NotificationFromManufacturerSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6270)": {
    tag: "(0068,6270)",
    vr: "DT",
    name: "InformationIssueDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6280)": {
    tag: "(0068,6280)",
    vr: "ST",
    name: "InformationSummary",
    vm: "1",
    version: "DICOM"
  },
  "(0068,62A0)": {
    tag: "(0068,62A0)",
    vr: "SQ",
    name: "ImplantRegulatoryDisapprovalCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,62A5)": {
    tag: "(0068,62A5)",
    vr: "FD",
    name: "OverallTemplateSpatialTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(0068,62C0)": {
    tag: "(0068,62C0)",
    vr: "SQ",
    name: "HPGLDocumentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,62D0)": {
    tag: "(0068,62D0)",
    vr: "US",
    name: "HPGLDocumentID",
    vm: "1",
    version: "DICOM"
  },
  "(0068,62D5)": {
    tag: "(0068,62D5)",
    vr: "LO",
    name: "HPGLDocumentLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0068,62E0)": {
    tag: "(0068,62E0)",
    vr: "SQ",
    name: "ViewOrientationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,62F0)": {
    tag: "(0068,62F0)",
    vr: "FD",
    name: "ViewOrientationModifier",
    vm: "9",
    version: "DICOM"
  },
  "(0068,62F2)": {
    tag: "(0068,62F2)",
    vr: "FD",
    name: "HPGLDocumentScaling",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6300)": {
    tag: "(0068,6300)",
    vr: "OB",
    name: "HPGLDocument",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6310)": {
    tag: "(0068,6310)",
    vr: "US",
    name: "HPGLContourPenNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6320)": {
    tag: "(0068,6320)",
    vr: "SQ",
    name: "HPGLPenSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6330)": {
    tag: "(0068,6330)",
    vr: "US",
    name: "HPGLPenNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6340)": {
    tag: "(0068,6340)",
    vr: "LO",
    name: "HPGLPenLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6345)": {
    tag: "(0068,6345)",
    vr: "ST",
    name: "HPGLPenDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6346)": {
    tag: "(0068,6346)",
    vr: "FD",
    name: "RecommendedRotationPoint",
    vm: "2",
    version: "DICOM"
  },
  "(0068,6347)": {
    tag: "(0068,6347)",
    vr: "FD",
    name: "BoundingRectangle",
    vm: "4",
    version: "DICOM"
  },
  "(0068,6350)": {
    tag: "(0068,6350)",
    vr: "US",
    name: "ImplantTemplate3DModelSurfaceNumber",
    vm: "1-n",
    version: "DICOM"
  },
  "(0068,6360)": {
    tag: "(0068,6360)",
    vr: "SQ",
    name: "SurfaceModelDescriptionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6380)": {
    tag: "(0068,6380)",
    vr: "LO",
    name: "SurfaceModelLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6390)": {
    tag: "(0068,6390)",
    vr: "FD",
    name: "SurfaceModelScalingFactor",
    vm: "1",
    version: "DICOM"
  },
  "(0068,63A0)": {
    tag: "(0068,63A0)",
    vr: "SQ",
    name: "MaterialsCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,63A4)": {
    tag: "(0068,63A4)",
    vr: "SQ",
    name: "CoatingMaterialsCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,63A8)": {
    tag: "(0068,63A8)",
    vr: "SQ",
    name: "ImplantTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,63AC)": {
    tag: "(0068,63AC)",
    vr: "SQ",
    name: "FixationMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,63B0)": {
    tag: "(0068,63B0)",
    vr: "SQ",
    name: "MatingFeatureSetsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,63C0)": {
    tag: "(0068,63C0)",
    vr: "US",
    name: "MatingFeatureSetID",
    vm: "1",
    version: "DICOM"
  },
  "(0068,63D0)": {
    tag: "(0068,63D0)",
    vr: "LO",
    name: "MatingFeatureSetLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0068,63E0)": {
    tag: "(0068,63E0)",
    vr: "SQ",
    name: "MatingFeatureSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,63F0)": {
    tag: "(0068,63F0)",
    vr: "US",
    name: "MatingFeatureID",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6400)": {
    tag: "(0068,6400)",
    vr: "SQ",
    name: "MatingFeatureDegreeOfFreedomSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6410)": {
    tag: "(0068,6410)",
    vr: "US",
    name: "DegreeOfFreedomID",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6420)": {
    tag: "(0068,6420)",
    vr: "CS",
    name: "DegreeOfFreedomType",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6430)": {
    tag: "(0068,6430)",
    vr: "SQ",
    name: "TwoDMatingFeatureCoordinatesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6440)": {
    tag: "(0068,6440)",
    vr: "US",
    name: "ReferencedHPGLDocumentID",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6450)": {
    tag: "(0068,6450)",
    vr: "FD",
    name: "TwoDMatingPoint",
    vm: "2",
    version: "DICOM"
  },
  "(0068,6460)": {
    tag: "(0068,6460)",
    vr: "FD",
    name: "TwoDMatingAxes",
    vm: "4",
    version: "DICOM"
  },
  "(0068,6470)": {
    tag: "(0068,6470)",
    vr: "SQ",
    name: "TwoDDegreeOfFreedomSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6490)": {
    tag: "(0068,6490)",
    vr: "FD",
    name: "ThreeDDegreeOfFreedomAxis",
    vm: "3",
    version: "DICOM"
  },
  "(0068,64A0)": {
    tag: "(0068,64A0)",
    vr: "FD",
    name: "RangeOfFreedom",
    vm: "2",
    version: "DICOM"
  },
  "(0068,64C0)": {
    tag: "(0068,64C0)",
    vr: "FD",
    name: "ThreeDMatingPoint",
    vm: "3",
    version: "DICOM"
  },
  "(0068,64D0)": {
    tag: "(0068,64D0)",
    vr: "FD",
    name: "ThreeDMatingAxes",
    vm: "9",
    version: "DICOM"
  },
  "(0068,64F0)": {
    tag: "(0068,64F0)",
    vr: "FD",
    name: "TwoDDegreeOfFreedomAxis",
    vm: "3",
    version: "DICOM"
  },
  "(0068,6500)": {
    tag: "(0068,6500)",
    vr: "SQ",
    name: "PlanningLandmarkPointSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6510)": {
    tag: "(0068,6510)",
    vr: "SQ",
    name: "PlanningLandmarkLineSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6520)": {
    tag: "(0068,6520)",
    vr: "SQ",
    name: "PlanningLandmarkPlaneSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6530)": {
    tag: "(0068,6530)",
    vr: "US",
    name: "PlanningLandmarkID",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6540)": {
    tag: "(0068,6540)",
    vr: "LO",
    name: "PlanningLandmarkDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6545)": {
    tag: "(0068,6545)",
    vr: "SQ",
    name: "PlanningLandmarkIdentificationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6550)": {
    tag: "(0068,6550)",
    vr: "SQ",
    name: "TwoDPointCoordinatesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,6560)": {
    tag: "(0068,6560)",
    vr: "FD",
    name: "TwoDPointCoordinates",
    vm: "2",
    version: "DICOM"
  },
  "(0068,6590)": {
    tag: "(0068,6590)",
    vr: "FD",
    name: "ThreeDPointCoordinates",
    vm: "3",
    version: "DICOM"
  },
  "(0068,65A0)": {
    tag: "(0068,65A0)",
    vr: "SQ",
    name: "TwoDLineCoordinatesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,65B0)": {
    tag: "(0068,65B0)",
    vr: "FD",
    name: "TwoDLineCoordinates",
    vm: "4",
    version: "DICOM"
  },
  "(0068,65D0)": {
    tag: "(0068,65D0)",
    vr: "FD",
    name: "ThreeDLineCoordinates",
    vm: "6",
    version: "DICOM"
  },
  "(0068,65E0)": {
    tag: "(0068,65E0)",
    vr: "SQ",
    name: "TwoDPlaneCoordinatesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,65F0)": {
    tag: "(0068,65F0)",
    vr: "FD",
    name: "TwoDPlaneIntersection",
    vm: "4",
    version: "DICOM"
  },
  "(0068,6610)": {
    tag: "(0068,6610)",
    vr: "FD",
    name: "ThreeDPlaneOrigin",
    vm: "3",
    version: "DICOM"
  },
  "(0068,6620)": {
    tag: "(0068,6620)",
    vr: "FD",
    name: "ThreeDPlaneNormal",
    vm: "3",
    version: "DICOM"
  },
  "(0068,7001)": {
    tag: "(0068,7001)",
    vr: "CS",
    name: "ModelModification",
    vm: "1",
    version: "DICOM"
  },
  "(0068,7002)": {
    tag: "(0068,7002)",
    vr: "CS",
    name: "ModelMirroring",
    vm: "1",
    version: "DICOM"
  },
  "(0068,7003)": {
    tag: "(0068,7003)",
    vr: "SQ",
    name: "ModelUsageCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0068,7004)": {
    tag: "(0068,7004)",
    vr: "UI",
    name: "ModelGroupUID",
    vm: "1",
    version: "DICOM"
  },
  "(0068,7005)": {
    tag: "(0068,7005)",
    vr: "UR",
    name: "RelativeURIReferenceWithinEncapsulatedDocument",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0001)": {
    tag: "(0070,0001)",
    vr: "SQ",
    name: "GraphicAnnotationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0002)": {
    tag: "(0070,0002)",
    vr: "CS",
    name: "GraphicLayer",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0003)": {
    tag: "(0070,0003)",
    vr: "CS",
    name: "BoundingBoxAnnotationUnits",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0004)": {
    tag: "(0070,0004)",
    vr: "CS",
    name: "AnchorPointAnnotationUnits",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0005)": {
    tag: "(0070,0005)",
    vr: "CS",
    name: "GraphicAnnotationUnits",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0006)": {
    tag: "(0070,0006)",
    vr: "ST",
    name: "UnformattedTextValue",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0008)": {
    tag: "(0070,0008)",
    vr: "SQ",
    name: "TextObjectSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0009)": {
    tag: "(0070,0009)",
    vr: "SQ",
    name: "GraphicObjectSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0010)": {
    tag: "(0070,0010)",
    vr: "FL",
    name: "BoundingBoxTopLeftHandCorner",
    vm: "2",
    version: "DICOM"
  },
  "(0070,0011)": {
    tag: "(0070,0011)",
    vr: "FL",
    name: "BoundingBoxBottomRightHandCorner",
    vm: "2",
    version: "DICOM"
  },
  "(0070,0012)": {
    tag: "(0070,0012)",
    vr: "CS",
    name: "BoundingBoxTextHorizontalJustification",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0014)": {
    tag: "(0070,0014)",
    vr: "FL",
    name: "AnchorPoint",
    vm: "2",
    version: "DICOM"
  },
  "(0070,0015)": {
    tag: "(0070,0015)",
    vr: "CS",
    name: "AnchorPointVisibility",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0020)": {
    tag: "(0070,0020)",
    vr: "US",
    name: "GraphicDimensions",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0021)": {
    tag: "(0070,0021)",
    vr: "US",
    name: "NumberOfGraphicPoints",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0022)": {
    tag: "(0070,0022)",
    vr: "FL",
    name: "GraphicData",
    vm: "2-n",
    version: "DICOM"
  },
  "(0070,0023)": {
    tag: "(0070,0023)",
    vr: "CS",
    name: "GraphicType",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0024)": {
    tag: "(0070,0024)",
    vr: "CS",
    name: "GraphicFilled",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0041)": {
    tag: "(0070,0041)",
    vr: "CS",
    name: "ImageHorizontalFlip",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0042)": {
    tag: "(0070,0042)",
    vr: "US",
    name: "ImageRotation",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0052)": {
    tag: "(0070,0052)",
    vr: "SL",
    name: "DisplayedAreaTopLeftHandCorner",
    vm: "2",
    version: "DICOM"
  },
  "(0070,0053)": {
    tag: "(0070,0053)",
    vr: "SL",
    name: "DisplayedAreaBottomRightHandCorner",
    vm: "2",
    version: "DICOM"
  },
  "(0070,005A)": {
    tag: "(0070,005A)",
    vr: "SQ",
    name: "DisplayedAreaSelectionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0060)": {
    tag: "(0070,0060)",
    vr: "SQ",
    name: "GraphicLayerSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0062)": {
    tag: "(0070,0062)",
    vr: "IS",
    name: "GraphicLayerOrder",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0066)": {
    tag: "(0070,0066)",
    vr: "US",
    name: "GraphicLayerRecommendedDisplayGrayscaleValue",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0068)": {
    tag: "(0070,0068)",
    vr: "LO",
    name: "GraphicLayerDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0080)": {
    tag: "(0070,0080)",
    vr: "CS",
    name: "ContentLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0081)": {
    tag: "(0070,0081)",
    vr: "LO",
    name: "ContentDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0082)": {
    tag: "(0070,0082)",
    vr: "DA",
    name: "PresentationCreationDate",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0083)": {
    tag: "(0070,0083)",
    vr: "TM",
    name: "PresentationCreationTime",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0084)": {
    tag: "(0070,0084)",
    vr: "PN",
    name: "ContentCreatorName",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0086)": {
    tag: "(0070,0086)",
    vr: "SQ",
    name: "ContentCreatorIdentificationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0087)": {
    tag: "(0070,0087)",
    vr: "SQ",
    name: "AlternateContentDescriptionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0100)": {
    tag: "(0070,0100)",
    vr: "CS",
    name: "PresentationSizeMode",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0101)": {
    tag: "(0070,0101)",
    vr: "DS",
    name: "PresentationPixelSpacing",
    vm: "2",
    version: "DICOM"
  },
  "(0070,0102)": {
    tag: "(0070,0102)",
    vr: "IS",
    name: "PresentationPixelAspectRatio",
    vm: "2",
    version: "DICOM"
  },
  "(0070,0103)": {
    tag: "(0070,0103)",
    vr: "FL",
    name: "PresentationPixelMagnificationRatio",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0207)": {
    tag: "(0070,0207)",
    vr: "LO",
    name: "GraphicGroupLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0208)": {
    tag: "(0070,0208)",
    vr: "ST",
    name: "GraphicGroupDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0209)": {
    tag: "(0070,0209)",
    vr: "SQ",
    name: "CompoundGraphicSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0226)": {
    tag: "(0070,0226)",
    vr: "UL",
    name: "CompoundGraphicInstanceID",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0227)": {
    tag: "(0070,0227)",
    vr: "LO",
    name: "FontName",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0228)": {
    tag: "(0070,0228)",
    vr: "CS",
    name: "FontNameType",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0229)": {
    tag: "(0070,0229)",
    vr: "LO",
    name: "CSSFontName",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0230)": {
    tag: "(0070,0230)",
    vr: "FD",
    name: "RotationAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0231)": {
    tag: "(0070,0231)",
    vr: "SQ",
    name: "TextStyleSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0232)": {
    tag: "(0070,0232)",
    vr: "SQ",
    name: "LineStyleSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0233)": {
    tag: "(0070,0233)",
    vr: "SQ",
    name: "FillStyleSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0234)": {
    tag: "(0070,0234)",
    vr: "SQ",
    name: "GraphicGroupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0241)": {
    tag: "(0070,0241)",
    vr: "US",
    name: "TextColorCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(0070,0242)": {
    tag: "(0070,0242)",
    vr: "CS",
    name: "HorizontalAlignment",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0243)": {
    tag: "(0070,0243)",
    vr: "CS",
    name: "VerticalAlignment",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0244)": {
    tag: "(0070,0244)",
    vr: "CS",
    name: "ShadowStyle",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0245)": {
    tag: "(0070,0245)",
    vr: "FL",
    name: "ShadowOffsetX",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0246)": {
    tag: "(0070,0246)",
    vr: "FL",
    name: "ShadowOffsetY",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0247)": {
    tag: "(0070,0247)",
    vr: "US",
    name: "ShadowColorCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(0070,0248)": {
    tag: "(0070,0248)",
    vr: "CS",
    name: "Underlined",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0249)": {
    tag: "(0070,0249)",
    vr: "CS",
    name: "Bold",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0250)": {
    tag: "(0070,0250)",
    vr: "CS",
    name: "Italic",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0251)": {
    tag: "(0070,0251)",
    vr: "US",
    name: "PatternOnColorCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(0070,0252)": {
    tag: "(0070,0252)",
    vr: "US",
    name: "PatternOffColorCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(0070,0253)": {
    tag: "(0070,0253)",
    vr: "FL",
    name: "LineThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0254)": {
    tag: "(0070,0254)",
    vr: "CS",
    name: "LineDashingStyle",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0255)": {
    tag: "(0070,0255)",
    vr: "UL",
    name: "LinePattern",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0256)": {
    tag: "(0070,0256)",
    vr: "OB",
    name: "FillPattern",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0257)": {
    tag: "(0070,0257)",
    vr: "CS",
    name: "FillMode",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0258)": {
    tag: "(0070,0258)",
    vr: "FL",
    name: "ShadowOpacity",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0261)": {
    tag: "(0070,0261)",
    vr: "FL",
    name: "GapLength",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0262)": {
    tag: "(0070,0262)",
    vr: "FL",
    name: "DiameterOfVisibility",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0273)": {
    tag: "(0070,0273)",
    vr: "FL",
    name: "RotationPoint",
    vm: "2",
    version: "DICOM"
  },
  "(0070,0274)": {
    tag: "(0070,0274)",
    vr: "CS",
    name: "TickAlignment",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0278)": {
    tag: "(0070,0278)",
    vr: "CS",
    name: "ShowTickLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0279)": {
    tag: "(0070,0279)",
    vr: "CS",
    name: "TickLabelAlignment",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0282)": {
    tag: "(0070,0282)",
    vr: "CS",
    name: "CompoundGraphicUnits",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0284)": {
    tag: "(0070,0284)",
    vr: "FL",
    name: "PatternOnOpacity",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0285)": {
    tag: "(0070,0285)",
    vr: "FL",
    name: "PatternOffOpacity",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0287)": {
    tag: "(0070,0287)",
    vr: "SQ",
    name: "MajorTicksSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0288)": {
    tag: "(0070,0288)",
    vr: "FL",
    name: "TickPosition",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0289)": {
    tag: "(0070,0289)",
    vr: "SH",
    name: "TickLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0294)": {
    tag: "(0070,0294)",
    vr: "CS",
    name: "CompoundGraphicType",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0295)": {
    tag: "(0070,0295)",
    vr: "UL",
    name: "GraphicGroupID",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0306)": {
    tag: "(0070,0306)",
    vr: "CS",
    name: "ShapeType",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0308)": {
    tag: "(0070,0308)",
    vr: "SQ",
    name: "RegistrationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0309)": {
    tag: "(0070,0309)",
    vr: "SQ",
    name: "MatrixRegistrationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,030A)": {
    tag: "(0070,030A)",
    vr: "SQ",
    name: "MatrixSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,030B)": {
    tag: "(0070,030B)",
    vr: "FD",
    name: "FrameOfReferenceToDisplayedCoordinateSystemTransformationMatrix",
    vm: "16",
    version: "DICOM"
  },
  "(0070,030C)": {
    tag: "(0070,030C)",
    vr: "CS",
    name: "FrameOfReferenceTransformationMatrixType",
    vm: "1",
    version: "DICOM"
  },
  "(0070,030D)": {
    tag: "(0070,030D)",
    vr: "SQ",
    name: "RegistrationTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,030F)": {
    tag: "(0070,030F)",
    vr: "ST",
    name: "FiducialDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0310)": {
    tag: "(0070,0310)",
    vr: "SH",
    name: "FiducialIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0311)": {
    tag: "(0070,0311)",
    vr: "SQ",
    name: "FiducialIdentifierCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0312)": {
    tag: "(0070,0312)",
    vr: "FD",
    name: "ContourUncertaintyRadius",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0314)": {
    tag: "(0070,0314)",
    vr: "SQ",
    name: "UsedFiducialsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0318)": {
    tag: "(0070,0318)",
    vr: "SQ",
    name: "GraphicCoordinatesDataSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,031A)": {
    tag: "(0070,031A)",
    vr: "UI",
    name: "FiducialUID",
    vm: "1",
    version: "DICOM"
  },
  "(0070,031B)": {
    tag: "(0070,031B)",
    vr: "UI",
    name: "ReferencedFiducialUID",
    vm: "1",
    version: "DICOM"
  },
  "(0070,031C)": {
    tag: "(0070,031C)",
    vr: "SQ",
    name: "FiducialSetSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,031E)": {
    tag: "(0070,031E)",
    vr: "SQ",
    name: "FiducialSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,031F)": {
    tag: "(0070,031F)",
    vr: "SQ",
    name: "FiducialsPropertyCategoryCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0401)": {
    tag: "(0070,0401)",
    vr: "US",
    name: "GraphicLayerRecommendedDisplayCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(0070,0402)": {
    tag: "(0070,0402)",
    vr: "SQ",
    name: "BlendingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0403)": {
    tag: "(0070,0403)",
    vr: "FL",
    name: "RelativeOpacity",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0404)": {
    tag: "(0070,0404)",
    vr: "SQ",
    name: "ReferencedSpatialRegistrationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,0405)": {
    tag: "(0070,0405)",
    vr: "CS",
    name: "BlendingPosition",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1209)": {
    tag: "(0070,1209)",
    vr: "UI",
    name: "VolumetricPresentationInputSetUID",
    vm: "1",
    version: "DICOM"
  },
  "(0070,120A)": {
    tag: "(0070,120A)",
    vr: "SQ",
    name: "VolumetricPresentationInputSetSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,120B)": {
    tag: "(0070,120B)",
    vr: "CS",
    name: "GlobalCrop",
    vm: "1",
    version: "DICOM"
  },
  "(0070,120C)": {
    tag: "(0070,120C)",
    vr: "US",
    name: "GlobalCroppingSpecificationIndex",
    vm: "1-n",
    version: "DICOM"
  },
  "(0070,120D)": {
    tag: "(0070,120D)",
    vr: "CS",
    name: "RenderingMethod",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1602)": {
    tag: "(0070,1602)",
    vr: "CS",
    name: "RenderProjection",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1603)": {
    tag: "(0070,1603)",
    vr: "FD",
    name: "ViewpointPosition",
    vm: "3",
    version: "DICOM"
  },
  "(0070,1604)": {
    tag: "(0070,1604)",
    vr: "FD",
    name: "ViewpointLookAtPoint",
    vm: "3",
    version: "DICOM"
  },
  "(0070,1605)": {
    tag: "(0070,1605)",
    vr: "FD",
    name: "ViewpointUpDirection",
    vm: "3",
    version: "DICOM"
  },
  "(0070,1606)": {
    tag: "(0070,1606)",
    vr: "FD",
    name: "RenderFieldOfView",
    vm: "6",
    version: "DICOM"
  },
  "(0070,1607)": {
    tag: "(0070,1607)",
    vr: "FD",
    name: "SamplingStepSize",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1701)": {
    tag: "(0070,1701)",
    vr: "CS",
    name: "ShadingStyle",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1702)": {
    tag: "(0070,1702)",
    vr: "FD",
    name: "AmbientReflectionIntensity",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1703)": {
    tag: "(0070,1703)",
    vr: "FD",
    name: "LightDirection",
    vm: "3",
    version: "DICOM"
  },
  "(0070,1704)": {
    tag: "(0070,1704)",
    vr: "FD",
    name: "DiffuseReflectionIntensity",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1705)": {
    tag: "(0070,1705)",
    vr: "FD",
    name: "SpecularReflectionIntensity",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1706)": {
    tag: "(0070,1706)",
    vr: "FD",
    name: "Shininess",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1A06)": {
    tag: "(0070,1A06)",
    vr: "FD",
    name: "SwivelRange",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1A07)": {
    tag: "(0070,1A07)",
    vr: "OD",
    name: "VolumetricCurveUpDirections",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1A08)": {
    tag: "(0070,1A08)",
    vr: "SQ",
    name: "VolumeStreamSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1A09)": {
    tag: "(0070,1A09)",
    vr: "LO",
    name: "RGBATransferFunctionDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1B01)": {
    tag: "(0070,1B01)",
    vr: "SQ",
    name: "AdvancedBlendingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1B02)": {
    tag: "(0070,1B02)",
    vr: "US",
    name: "BlendingInputNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1B03)": {
    tag: "(0070,1B03)",
    vr: "SQ",
    name: "BlendingDisplayInputSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1B04)": {
    tag: "(0070,1B04)",
    vr: "SQ",
    name: "BlendingDisplaySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1B06)": {
    tag: "(0070,1B06)",
    vr: "CS",
    name: "BlendingMode",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1B07)": {
    tag: "(0070,1B07)",
    vr: "CS",
    name: "TimeSeriesBlending",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1B08)": {
    tag: "(0070,1B08)",
    vr: "CS",
    name: "GeometryForDisplay",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1B11)": {
    tag: "(0070,1B11)",
    vr: "SQ",
    name: "ThresholdSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1B12)": {
    tag: "(0070,1B12)",
    vr: "SQ",
    name: "ThresholdValueSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1B13)": {
    tag: "(0070,1B13)",
    vr: "CS",
    name: "ThresholdType",
    vm: "1",
    version: "DICOM"
  },
  "(0070,1B14)": {
    tag: "(0070,1B14)",
    vr: "FD",
    name: "ThresholdValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0002)": {
    tag: "(0072,0002)",
    vr: "SH",
    name: "HangingProtocolName",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0004)": {
    tag: "(0072,0004)",
    vr: "LO",
    name: "HangingProtocolDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0006)": {
    tag: "(0072,0006)",
    vr: "CS",
    name: "HangingProtocolLevel",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0008)": {
    tag: "(0072,0008)",
    vr: "LO",
    name: "HangingProtocolCreator",
    vm: "1",
    version: "DICOM"
  },
  "(0072,000A)": {
    tag: "(0072,000A)",
    vr: "DT",
    name: "HangingProtocolCreationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0072,000C)": {
    tag: "(0072,000C)",
    vr: "SQ",
    name: "HangingProtocolDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,000E)": {
    tag: "(0072,000E)",
    vr: "SQ",
    name: "HangingProtocolUserIdentificationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0010)": {
    tag: "(0072,0010)",
    vr: "LO",
    name: "HangingProtocolUserGroupName",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0012)": {
    tag: "(0072,0012)",
    vr: "SQ",
    name: "SourceHangingProtocolSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0014)": {
    tag: "(0072,0014)",
    vr: "US",
    name: "NumberOfPriorsReferenced",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0020)": {
    tag: "(0072,0020)",
    vr: "SQ",
    name: "ImageSetsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0022)": {
    tag: "(0072,0022)",
    vr: "SQ",
    name: "ImageSetSelectorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0024)": {
    tag: "(0072,0024)",
    vr: "CS",
    name: "ImageSetSelectorUsageFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0026)": {
    tag: "(0072,0026)",
    vr: "AT",
    name: "SelectorAttribute",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0028)": {
    tag: "(0072,0028)",
    vr: "US",
    name: "SelectorValueNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0030)": {
    tag: "(0072,0030)",
    vr: "SQ",
    name: "TimeBasedImageSetsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0032)": {
    tag: "(0072,0032)",
    vr: "US",
    name: "ImageSetNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0034)": {
    tag: "(0072,0034)",
    vr: "CS",
    name: "ImageSetSelectorCategory",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0038)": {
    tag: "(0072,0038)",
    vr: "US",
    name: "RelativeTime",
    vm: "2",
    version: "DICOM"
  },
  "(0072,003A)": {
    tag: "(0072,003A)",
    vr: "CS",
    name: "RelativeTimeUnits",
    vm: "1",
    version: "DICOM"
  },
  "(0072,003C)": {
    tag: "(0072,003C)",
    vr: "SS",
    name: "AbstractPriorValue",
    vm: "2",
    version: "DICOM"
  },
  "(0072,003E)": {
    tag: "(0072,003E)",
    vr: "SQ",
    name: "AbstractPriorCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0040)": {
    tag: "(0072,0040)",
    vr: "LO",
    name: "ImageSetLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0050)": {
    tag: "(0072,0050)",
    vr: "CS",
    name: "SelectorAttributeVR",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0052)": {
    tag: "(0072,0052)",
    vr: "AT",
    name: "SelectorSequencePointer",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0054)": {
    tag: "(0072,0054)",
    vr: "LO",
    name: "SelectorSequencePointerPrivateCreator",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0056)": {
    tag: "(0072,0056)",
    vr: "LO",
    name: "SelectorAttributePrivateCreator",
    vm: "1",
    version: "DICOM"
  },
  "(0072,005E)": {
    tag: "(0072,005E)",
    vr: "AE",
    name: "SelectorAEValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,005F)": {
    tag: "(0072,005F)",
    vr: "AS",
    name: "SelectorASValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0060)": {
    tag: "(0072,0060)",
    vr: "AT",
    name: "SelectorATValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0061)": {
    tag: "(0072,0061)",
    vr: "DA",
    name: "SelectorDAValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0062)": {
    tag: "(0072,0062)",
    vr: "CS",
    name: "SelectorCSValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0063)": {
    tag: "(0072,0063)",
    vr: "DT",
    name: "SelectorDTValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0064)": {
    tag: "(0072,0064)",
    vr: "IS",
    name: "SelectorISValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0065)": {
    tag: "(0072,0065)",
    vr: "OB",
    name: "SelectorOBValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0066)": {
    tag: "(0072,0066)",
    vr: "LO",
    name: "SelectorLOValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0067)": {
    tag: "(0072,0067)",
    vr: "OF",
    name: "SelectorOFValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0068)": {
    tag: "(0072,0068)",
    vr: "LT",
    name: "SelectorLTValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0069)": {
    tag: "(0072,0069)",
    vr: "OW",
    name: "SelectorOWValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,006A)": {
    tag: "(0072,006A)",
    vr: "PN",
    name: "SelectorPNValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,006B)": {
    tag: "(0072,006B)",
    vr: "TM",
    name: "SelectorTMValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,006C)": {
    tag: "(0072,006C)",
    vr: "SH",
    name: "SelectorSHValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,006D)": {
    tag: "(0072,006D)",
    vr: "UN",
    name: "SelectorUNValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,006E)": {
    tag: "(0072,006E)",
    vr: "ST",
    name: "SelectorSTValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,006F)": {
    tag: "(0072,006F)",
    vr: "UC",
    name: "SelectorUCValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0070)": {
    tag: "(0072,0070)",
    vr: "UT",
    name: "SelectorUTValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0071)": {
    tag: "(0072,0071)",
    vr: "UR",
    name: "SelectorURValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0072)": {
    tag: "(0072,0072)",
    vr: "DS",
    name: "SelectorDSValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0073)": {
    tag: "(0072,0073)",
    vr: "OD",
    name: "SelectorODValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0074)": {
    tag: "(0072,0074)",
    vr: "FD",
    name: "SelectorFDValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0075)": {
    tag: "(0072,0075)",
    vr: "OL",
    name: "SelectorOLValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0076)": {
    tag: "(0072,0076)",
    vr: "FL",
    name: "SelectorFLValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0078)": {
    tag: "(0072,0078)",
    vr: "UL",
    name: "SelectorULValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,007A)": {
    tag: "(0072,007A)",
    vr: "US",
    name: "SelectorUSValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,007C)": {
    tag: "(0072,007C)",
    vr: "SL",
    name: "SelectorSLValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,007E)": {
    tag: "(0072,007E)",
    vr: "SS",
    name: "SelectorSSValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,007F)": {
    tag: "(0072,007F)",
    vr: "UI",
    name: "SelectorUIValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0080)": {
    tag: "(0072,0080)",
    vr: "SQ",
    name: "SelectorCodeSequenceValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0081)": {
    tag: "(0072,0081)",
    vr: "OV",
    name: "SelectorOVValue",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0082)": {
    tag: "(0072,0082)",
    vr: "SV",
    name: "SelectorSVValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0083)": {
    tag: "(0072,0083)",
    vr: "UV",
    name: "SelectorUVValue",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0100)": {
    tag: "(0072,0100)",
    vr: "US",
    name: "NumberOfScreens",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0102)": {
    tag: "(0072,0102)",
    vr: "SQ",
    name: "NominalScreenDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0104)": {
    tag: "(0072,0104)",
    vr: "US",
    name: "NumberOfVerticalPixels",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0106)": {
    tag: "(0072,0106)",
    vr: "US",
    name: "NumberOfHorizontalPixels",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0108)": {
    tag: "(0072,0108)",
    vr: "FD",
    name: "DisplayEnvironmentSpatialPosition",
    vm: "4",
    version: "DICOM"
  },
  "(0072,010A)": {
    tag: "(0072,010A)",
    vr: "US",
    name: "ScreenMinimumGrayscaleBitDepth",
    vm: "1",
    version: "DICOM"
  },
  "(0072,010C)": {
    tag: "(0072,010C)",
    vr: "US",
    name: "ScreenMinimumColorBitDepth",
    vm: "1",
    version: "DICOM"
  },
  "(0072,010E)": {
    tag: "(0072,010E)",
    vr: "US",
    name: "ApplicationMaximumRepaintTime",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0200)": {
    tag: "(0072,0200)",
    vr: "SQ",
    name: "DisplaySetsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0202)": {
    tag: "(0072,0202)",
    vr: "US",
    name: "DisplaySetNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0203)": {
    tag: "(0072,0203)",
    vr: "LO",
    name: "DisplaySetLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0204)": {
    tag: "(0072,0204)",
    vr: "US",
    name: "DisplaySetPresentationGroup",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0206)": {
    tag: "(0072,0206)",
    vr: "LO",
    name: "DisplaySetPresentationGroupDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0208)": {
    tag: "(0072,0208)",
    vr: "CS",
    name: "PartialDataDisplayHandling",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0210)": {
    tag: "(0072,0210)",
    vr: "SQ",
    name: "SynchronizedScrollingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0212)": {
    tag: "(0072,0212)",
    vr: "US",
    name: "DisplaySetScrollingGroup",
    vm: "2-n",
    version: "DICOM"
  },
  "(0072,0214)": {
    tag: "(0072,0214)",
    vr: "SQ",
    name: "NavigationIndicatorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0216)": {
    tag: "(0072,0216)",
    vr: "US",
    name: "NavigationDisplaySet",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0218)": {
    tag: "(0072,0218)",
    vr: "US",
    name: "ReferenceDisplaySets",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0300)": {
    tag: "(0072,0300)",
    vr: "SQ",
    name: "ImageBoxesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0302)": {
    tag: "(0072,0302)",
    vr: "US",
    name: "ImageBoxNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0304)": {
    tag: "(0072,0304)",
    vr: "CS",
    name: "ImageBoxLayoutType",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0306)": {
    tag: "(0072,0306)",
    vr: "US",
    name: "ImageBoxTileHorizontalDimension",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0308)": {
    tag: "(0072,0308)",
    vr: "US",
    name: "ImageBoxTileVerticalDimension",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0310)": {
    tag: "(0072,0310)",
    vr: "CS",
    name: "ImageBoxScrollDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0312)": {
    tag: "(0072,0312)",
    vr: "CS",
    name: "ImageBoxSmallScrollType",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0314)": {
    tag: "(0072,0314)",
    vr: "US",
    name: "ImageBoxSmallScrollAmount",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0316)": {
    tag: "(0072,0316)",
    vr: "CS",
    name: "ImageBoxLargeScrollType",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0318)": {
    tag: "(0072,0318)",
    vr: "US",
    name: "ImageBoxLargeScrollAmount",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0320)": {
    tag: "(0072,0320)",
    vr: "US",
    name: "ImageBoxOverlapPriority",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0330)": {
    tag: "(0072,0330)",
    vr: "FD",
    name: "CineRelativeToRealTime",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0400)": {
    tag: "(0072,0400)",
    vr: "SQ",
    name: "FilterOperationsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0402)": {
    tag: "(0072,0402)",
    vr: "CS",
    name: "FilterByCategory",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0404)": {
    tag: "(0072,0404)",
    vr: "CS",
    name: "FilterByAttributePresence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0406)": {
    tag: "(0072,0406)",
    vr: "CS",
    name: "FilterByOperator",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0420)": {
    tag: "(0072,0420)",
    vr: "US",
    name: "StructuredDisplayBackgroundCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(0072,0421)": {
    tag: "(0072,0421)",
    vr: "US",
    name: "EmptyImageBoxCIELabValue",
    vm: "3",
    version: "DICOM"
  },
  "(0072,0422)": {
    tag: "(0072,0422)",
    vr: "SQ",
    name: "StructuredDisplayImageBoxSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0424)": {
    tag: "(0072,0424)",
    vr: "SQ",
    name: "StructuredDisplayTextBoxSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0427)": {
    tag: "(0072,0427)",
    vr: "SQ",
    name: "ReferencedFirstFrameSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0430)": {
    tag: "(0072,0430)",
    vr: "SQ",
    name: "ImageBoxSynchronizationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0432)": {
    tag: "(0072,0432)",
    vr: "US",
    name: "SynchronizedImageBoxList",
    vm: "2-n",
    version: "DICOM"
  },
  "(0072,0434)": {
    tag: "(0072,0434)",
    vr: "CS",
    name: "TypeOfSynchronization",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0500)": {
    tag: "(0072,0500)",
    vr: "CS",
    name: "BlendingOperationType",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0510)": {
    tag: "(0072,0510)",
    vr: "CS",
    name: "ReformattingOperationType",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0512)": {
    tag: "(0072,0512)",
    vr: "FD",
    name: "ReformattingThickness",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0514)": {
    tag: "(0072,0514)",
    vr: "FD",
    name: "ReformattingInterval",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0516)": {
    tag: "(0072,0516)",
    vr: "CS",
    name: "ReformattingOperationInitialViewDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0520)": {
    tag: "(0072,0520)",
    vr: "CS",
    name: "ThreeDRenderingType",
    vm: "1-n",
    version: "DICOM"
  },
  "(0072,0600)": {
    tag: "(0072,0600)",
    vr: "SQ",
    name: "SortingOperationsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0602)": {
    tag: "(0072,0602)",
    vr: "CS",
    name: "SortByCategory",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0604)": {
    tag: "(0072,0604)",
    vr: "CS",
    name: "SortingDirection",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0700)": {
    tag: "(0072,0700)",
    vr: "CS",
    name: "DisplaySetPatientOrientation",
    vm: "2",
    version: "DICOM"
  },
  "(0072,0702)": {
    tag: "(0072,0702)",
    vr: "CS",
    name: "VOIType",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0704)": {
    tag: "(0072,0704)",
    vr: "CS",
    name: "PseudoColorType",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0705)": {
    tag: "(0072,0705)",
    vr: "SQ",
    name: "PseudoColorPaletteInstanceReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0706)": {
    tag: "(0072,0706)",
    vr: "CS",
    name: "ShowGrayscaleInverted",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0710)": {
    tag: "(0072,0710)",
    vr: "CS",
    name: "ShowImageTrueSizeFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0712)": {
    tag: "(0072,0712)",
    vr: "CS",
    name: "ShowGraphicAnnotationFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0714)": {
    tag: "(0072,0714)",
    vr: "CS",
    name: "ShowPatientDemographicsFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0716)": {
    tag: "(0072,0716)",
    vr: "CS",
    name: "ShowAcquisitionTechniquesFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0717)": {
    tag: "(0072,0717)",
    vr: "CS",
    name: "DisplaySetHorizontalJustification",
    vm: "1",
    version: "DICOM"
  },
  "(0072,0718)": {
    tag: "(0072,0718)",
    vr: "CS",
    name: "DisplaySetVerticalJustification",
    vm: "1",
    version: "DICOM"
  },
  "(0074,0120)": {
    tag: "(0074,0120)",
    vr: "FD",
    name: "ContinuationStartMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(0074,0121)": {
    tag: "(0074,0121)",
    vr: "FD",
    name: "ContinuationEndMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1000)": {
    tag: "(0074,1000)",
    vr: "CS",
    name: "ProcedureStepState",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1002)": {
    tag: "(0074,1002)",
    vr: "SQ",
    name: "ProcedureStepProgressInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1004)": {
    tag: "(0074,1004)",
    vr: "DS",
    name: "ProcedureStepProgress",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1006)": {
    tag: "(0074,1006)",
    vr: "ST",
    name: "ProcedureStepProgressDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1007)": {
    tag: "(0074,1007)",
    vr: "SQ",
    name: "ProcedureStepProgressParametersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1008)": {
    tag: "(0074,1008)",
    vr: "SQ",
    name: "ProcedureStepCommunicationsURISequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,100A)": {
    tag: "(0074,100A)",
    vr: "UR",
    name: "ContactURI",
    vm: "1",
    version: "DICOM"
  },
  "(0074,100C)": {
    tag: "(0074,100C)",
    vr: "LO",
    name: "ContactDisplayName",
    vm: "1",
    version: "DICOM"
  },
  "(0074,100E)": {
    tag: "(0074,100E)",
    vr: "SQ",
    name: "ProcedureStepDiscontinuationReasonCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1020)": {
    tag: "(0074,1020)",
    vr: "SQ",
    name: "BeamTaskSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1022)": {
    tag: "(0074,1022)",
    vr: "CS",
    name: "BeamTaskType",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1025)": {
    tag: "(0074,1025)",
    vr: "CS",
    name: "AutosequenceFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1026)": {
    tag: "(0074,1026)",
    vr: "FD",
    name: "TableTopVerticalAdjustedPosition",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1027)": {
    tag: "(0074,1027)",
    vr: "FD",
    name: "TableTopLongitudinalAdjustedPosition",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1028)": {
    tag: "(0074,1028)",
    vr: "FD",
    name: "TableTopLateralAdjustedPosition",
    vm: "1",
    version: "DICOM"
  },
  "(0074,102A)": {
    tag: "(0074,102A)",
    vr: "FD",
    name: "PatientSupportAdjustedAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0074,102B)": {
    tag: "(0074,102B)",
    vr: "FD",
    name: "TableTopEccentricAdjustedAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0074,102C)": {
    tag: "(0074,102C)",
    vr: "FD",
    name: "TableTopPitchAdjustedAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0074,102D)": {
    tag: "(0074,102D)",
    vr: "FD",
    name: "TableTopRollAdjustedAngle",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1030)": {
    tag: "(0074,1030)",
    vr: "SQ",
    name: "DeliveryVerificationImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1032)": {
    tag: "(0074,1032)",
    vr: "CS",
    name: "VerificationImageTiming",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1034)": {
    tag: "(0074,1034)",
    vr: "CS",
    name: "DoubleExposureFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1036)": {
    tag: "(0074,1036)",
    vr: "CS",
    name: "DoubleExposureOrdering",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1040)": {
    tag: "(0074,1040)",
    vr: "SQ",
    name: "RelatedReferenceRTImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1042)": {
    tag: "(0074,1042)",
    vr: "SQ",
    name: "GeneralMachineVerificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1044)": {
    tag: "(0074,1044)",
    vr: "SQ",
    name: "ConventionalMachineVerificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1046)": {
    tag: "(0074,1046)",
    vr: "SQ",
    name: "IonMachineVerificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1048)": {
    tag: "(0074,1048)",
    vr: "SQ",
    name: "FailedAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,104A)": {
    tag: "(0074,104A)",
    vr: "SQ",
    name: "OverriddenAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,104C)": {
    tag: "(0074,104C)",
    vr: "SQ",
    name: "ConventionalControlPointVerificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,104E)": {
    tag: "(0074,104E)",
    vr: "SQ",
    name: "IonControlPointVerificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1050)": {
    tag: "(0074,1050)",
    vr: "SQ",
    name: "AttributeOccurrenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1052)": {
    tag: "(0074,1052)",
    vr: "AT",
    name: "AttributeOccurrencePointer",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1054)": {
    tag: "(0074,1054)",
    vr: "UL",
    name: "AttributeItemSelector",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1056)": {
    tag: "(0074,1056)",
    vr: "LO",
    name: "AttributeOccurrencePrivateCreator",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1057)": {
    tag: "(0074,1057)",
    vr: "IS",
    name: "SelectorSequencePointerItems",
    vm: "1-n",
    version: "DICOM"
  },
  "(0074,1200)": {
    tag: "(0074,1200)",
    vr: "CS",
    name: "ScheduledProcedureStepPriority",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1202)": {
    tag: "(0074,1202)",
    vr: "LO",
    name: "WorklistLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1204)": {
    tag: "(0074,1204)",
    vr: "LO",
    name: "ProcedureStepLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1210)": {
    tag: "(0074,1210)",
    vr: "SQ",
    name: "ScheduledProcessingParametersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1212)": {
    tag: "(0074,1212)",
    vr: "SQ",
    name: "PerformedProcessingParametersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1216)": {
    tag: "(0074,1216)",
    vr: "SQ",
    name: "UnifiedProcedureStepPerformedProcedureSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1224)": {
    tag: "(0074,1224)",
    vr: "SQ",
    name: "ReplacedProcedureStepSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1230)": {
    tag: "(0074,1230)",
    vr: "LO",
    name: "DeletionLock",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1234)": {
    tag: "(0074,1234)",
    vr: "AE",
    name: "ReceivingAE",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1236)": {
    tag: "(0074,1236)",
    vr: "AE",
    name: "RequestingAE",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1238)": {
    tag: "(0074,1238)",
    vr: "LT",
    name: "ReasonForCancellation",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1242)": {
    tag: "(0074,1242)",
    vr: "CS",
    name: "SCPStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1244)": {
    tag: "(0074,1244)",
    vr: "CS",
    name: "SubscriptionListStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1246)": {
    tag: "(0074,1246)",
    vr: "CS",
    name: "UnifiedProcedureStepListStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1324)": {
    tag: "(0074,1324)",
    vr: "UL",
    name: "BeamOrderIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1338)": {
    tag: "(0074,1338)",
    vr: "FD",
    name: "DoubleExposureMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(0074,133A)": {
    tag: "(0074,133A)",
    vr: "FD",
    name: "DoubleExposureFieldDelta",
    vm: "4",
    version: "DICOM"
  },
  "(0074,1401)": {
    tag: "(0074,1401)",
    vr: "SQ",
    name: "BrachyTaskSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1402)": {
    tag: "(0074,1402)",
    vr: "DS",
    name: "ContinuationStartTotalReferenceAirKerma",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1403)": {
    tag: "(0074,1403)",
    vr: "DS",
    name: "ContinuationEndTotalReferenceAirKerma",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1404)": {
    tag: "(0074,1404)",
    vr: "IS",
    name: "ContinuationPulseNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1405)": {
    tag: "(0074,1405)",
    vr: "SQ",
    name: "ChannelDeliveryOrderSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1406)": {
    tag: "(0074,1406)",
    vr: "IS",
    name: "ReferencedChannelNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1407)": {
    tag: "(0074,1407)",
    vr: "DS",
    name: "StartCumulativeTimeWeight",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1408)": {
    tag: "(0074,1408)",
    vr: "DS",
    name: "EndCumulativeTimeWeight",
    vm: "1",
    version: "DICOM"
  },
  "(0074,1409)": {
    tag: "(0074,1409)",
    vr: "SQ",
    name: "OmittedChannelSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,140A)": {
    tag: "(0074,140A)",
    vr: "CS",
    name: "ReasonForChannelOmission",
    vm: "1",
    version: "DICOM"
  },
  "(0074,140B)": {
    tag: "(0074,140B)",
    vr: "LO",
    name: "ReasonForChannelOmissionDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0074,140C)": {
    tag: "(0074,140C)",
    vr: "IS",
    name: "ChannelDeliveryOrderIndex",
    vm: "1",
    version: "DICOM"
  },
  "(0074,140D)": {
    tag: "(0074,140D)",
    vr: "SQ",
    name: "ChannelDeliveryContinuationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0074,140E)": {
    tag: "(0074,140E)",
    vr: "SQ",
    name: "OmittedApplicationSetupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0001)": {
    tag: "(0076,0001)",
    vr: "LO",
    name: "ImplantAssemblyTemplateName",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0003)": {
    tag: "(0076,0003)",
    vr: "LO",
    name: "ImplantAssemblyTemplateIssuer",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0006)": {
    tag: "(0076,0006)",
    vr: "LO",
    name: "ImplantAssemblyTemplateVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0008)": {
    tag: "(0076,0008)",
    vr: "SQ",
    name: "ReplacedImplantAssemblyTemplateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0076,000A)": {
    tag: "(0076,000A)",
    vr: "CS",
    name: "ImplantAssemblyTemplateType",
    vm: "1",
    version: "DICOM"
  },
  "(0076,000C)": {
    tag: "(0076,000C)",
    vr: "SQ",
    name: "OriginalImplantAssemblyTemplateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0076,000E)": {
    tag: "(0076,000E)",
    vr: "SQ",
    name: "DerivationImplantAssemblyTemplateSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0010)": {
    tag: "(0076,0010)",
    vr: "SQ",
    name: "ImplantAssemblyTemplateTargetAnatomySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0020)": {
    tag: "(0076,0020)",
    vr: "SQ",
    name: "ProcedureTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0030)": {
    tag: "(0076,0030)",
    vr: "LO",
    name: "SurgicalTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0032)": {
    tag: "(0076,0032)",
    vr: "SQ",
    name: "ComponentTypesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0034)": {
    tag: "(0076,0034)",
    vr: "CS",
    name: "ComponentTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0036)": {
    tag: "(0076,0036)",
    vr: "CS",
    name: "ExclusiveComponentType",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0038)": {
    tag: "(0076,0038)",
    vr: "CS",
    name: "MandatoryComponentType",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0040)": {
    tag: "(0076,0040)",
    vr: "SQ",
    name: "ComponentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0055)": {
    tag: "(0076,0055)",
    vr: "US",
    name: "ComponentID",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0060)": {
    tag: "(0076,0060)",
    vr: "SQ",
    name: "ComponentAssemblySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0070)": {
    tag: "(0076,0070)",
    vr: "US",
    name: "Component1ReferencedID",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0080)": {
    tag: "(0076,0080)",
    vr: "US",
    name: "Component1ReferencedMatingFeatureSetID",
    vm: "1",
    version: "DICOM"
  },
  "(0076,0090)": {
    tag: "(0076,0090)",
    vr: "US",
    name: "Component1ReferencedMatingFeatureID",
    vm: "1",
    version: "DICOM"
  },
  "(0076,00A0)": {
    tag: "(0076,00A0)",
    vr: "US",
    name: "Component2ReferencedID",
    vm: "1",
    version: "DICOM"
  },
  "(0076,00B0)": {
    tag: "(0076,00B0)",
    vr: "US",
    name: "Component2ReferencedMatingFeatureSetID",
    vm: "1",
    version: "DICOM"
  },
  "(0076,00C0)": {
    tag: "(0076,00C0)",
    vr: "US",
    name: "Component2ReferencedMatingFeatureID",
    vm: "1",
    version: "DICOM"
  },
  "(0078,0001)": {
    tag: "(0078,0001)",
    vr: "LO",
    name: "ImplantTemplateGroupName",
    vm: "1",
    version: "DICOM"
  },
  "(0078,0010)": {
    tag: "(0078,0010)",
    vr: "ST",
    name: "ImplantTemplateGroupDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0078,0020)": {
    tag: "(0078,0020)",
    vr: "LO",
    name: "ImplantTemplateGroupIssuer",
    vm: "1",
    version: "DICOM"
  },
  "(0078,0024)": {
    tag: "(0078,0024)",
    vr: "LO",
    name: "ImplantTemplateGroupVersion",
    vm: "1",
    version: "DICOM"
  },
  "(0078,0026)": {
    tag: "(0078,0026)",
    vr: "SQ",
    name: "ReplacedImplantTemplateGroupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0078,0028)": {
    tag: "(0078,0028)",
    vr: "SQ",
    name: "ImplantTemplateGroupTargetAnatomySequence",
    vm: "1",
    version: "DICOM"
  },
  "(0078,002A)": {
    tag: "(0078,002A)",
    vr: "SQ",
    name: "ImplantTemplateGroupMembersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0078,002E)": {
    tag: "(0078,002E)",
    vr: "US",
    name: "ImplantTemplateGroupMemberID",
    vm: "1",
    version: "DICOM"
  },
  "(0078,0050)": {
    tag: "(0078,0050)",
    vr: "FD",
    name: "ThreeDImplantTemplateGroupMemberMatchingPoint",
    vm: "3",
    version: "DICOM"
  },
  "(0078,0060)": {
    tag: "(0078,0060)",
    vr: "FD",
    name: "ThreeDImplantTemplateGroupMemberMatchingAxes",
    vm: "9",
    version: "DICOM"
  },
  "(0078,0070)": {
    tag: "(0078,0070)",
    vr: "SQ",
    name: "ImplantTemplateGroupMemberMatching2DCoordinatesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0078,0090)": {
    tag: "(0078,0090)",
    vr: "FD",
    name: "TwoDImplantTemplateGroupMemberMatchingPoint",
    vm: "2",
    version: "DICOM"
  },
  "(0078,00A0)": {
    tag: "(0078,00A0)",
    vr: "FD",
    name: "TwoDImplantTemplateGroupMemberMatchingAxes",
    vm: "4",
    version: "DICOM"
  },
  "(0078,00B0)": {
    tag: "(0078,00B0)",
    vr: "SQ",
    name: "ImplantTemplateGroupVariationDimensionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0078,00B2)": {
    tag: "(0078,00B2)",
    vr: "LO",
    name: "ImplantTemplateGroupVariationDimensionName",
    vm: "1",
    version: "DICOM"
  },
  "(0078,00B4)": {
    tag: "(0078,00B4)",
    vr: "SQ",
    name: "ImplantTemplateGroupVariationDimensionRankSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0078,00B6)": {
    tag: "(0078,00B6)",
    vr: "US",
    name: "ReferencedImplantTemplateGroupMemberID",
    vm: "1",
    version: "DICOM"
  },
  "(0078,00B8)": {
    tag: "(0078,00B8)",
    vr: "US",
    name: "ImplantTemplateGroupVariationDimensionRank",
    vm: "1",
    version: "DICOM"
  },
  "(0080,0001)": {
    tag: "(0080,0001)",
    vr: "SQ",
    name: "SurfaceScanAcquisitionTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0080,0002)": {
    tag: "(0080,0002)",
    vr: "SQ",
    name: "SurfaceScanModeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0080,0003)": {
    tag: "(0080,0003)",
    vr: "SQ",
    name: "RegistrationMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0080,0004)": {
    tag: "(0080,0004)",
    vr: "FD",
    name: "ShotDurationTime",
    vm: "1",
    version: "DICOM"
  },
  "(0080,0005)": {
    tag: "(0080,0005)",
    vr: "FD",
    name: "ShotOffsetTime",
    vm: "1",
    version: "DICOM"
  },
  "(0080,0006)": {
    tag: "(0080,0006)",
    vr: "US",
    name: "SurfacePointPresentationValueData",
    vm: "1-n",
    version: "DICOM"
  },
  "(0080,0007)": {
    tag: "(0080,0007)",
    vr: "US",
    name: "SurfacePointColorCIELabValueData",
    vm: "3-3n",
    version: "DICOM"
  },
  "(0080,0008)": {
    tag: "(0080,0008)",
    vr: "SQ",
    name: "UVMappingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0080,0009)": {
    tag: "(0080,0009)",
    vr: "SH",
    name: "TextureLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0080,0010)": {
    tag: "(0080,0010)",
    vr: "OF",
    name: "UValueData",
    vm: "1-n",
    version: "DICOM"
  },
  "(0080,0011)": {
    tag: "(0080,0011)",
    vr: "OF",
    name: "VValueData",
    vm: "1-n",
    version: "DICOM"
  },
  "(0080,0012)": {
    tag: "(0080,0012)",
    vr: "SQ",
    name: "ReferencedTextureSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0080,0013)": {
    tag: "(0080,0013)",
    vr: "SQ",
    name: "ReferencedSurfaceDataSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0001)": {
    tag: "(0082,0001)",
    vr: "CS",
    name: "AssessmentSummary",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0003)": {
    tag: "(0082,0003)",
    vr: "UT",
    name: "AssessmentSummaryDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0004)": {
    tag: "(0082,0004)",
    vr: "SQ",
    name: "AssessedSOPInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0005)": {
    tag: "(0082,0005)",
    vr: "SQ",
    name: "ReferencedComparisonSOPInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0006)": {
    tag: "(0082,0006)",
    vr: "UL",
    name: "NumberOfAssessmentObservations",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0007)": {
    tag: "(0082,0007)",
    vr: "SQ",
    name: "AssessmentObservationsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0008)": {
    tag: "(0082,0008)",
    vr: "CS",
    name: "ObservationSignificance",
    vm: "1",
    version: "DICOM"
  },
  "(0082,000A)": {
    tag: "(0082,000A)",
    vr: "UT",
    name: "ObservationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(0082,000C)": {
    tag: "(0082,000C)",
    vr: "SQ",
    name: "StructuredConstraintObservationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0010)": {
    tag: "(0082,0010)",
    vr: "SQ",
    name: "AssessedAttributeValueSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0016)": {
    tag: "(0082,0016)",
    vr: "LO",
    name: "AssessmentSetID",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0017)": {
    tag: "(0082,0017)",
    vr: "SQ",
    name: "AssessmentRequesterSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0018)": {
    tag: "(0082,0018)",
    vr: "LO",
    name: "SelectorAttributeName",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0019)": {
    tag: "(0082,0019)",
    vr: "LO",
    name: "SelectorAttributeKeyword",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0021)": {
    tag: "(0082,0021)",
    vr: "SQ",
    name: "AssessmentTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0022)": {
    tag: "(0082,0022)",
    vr: "SQ",
    name: "ObservationBasisCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0023)": {
    tag: "(0082,0023)",
    vr: "LO",
    name: "AssessmentLabel",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0032)": {
    tag: "(0082,0032)",
    vr: "CS",
    name: "ConstraintType",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0033)": {
    tag: "(0082,0033)",
    vr: "UT",
    name: "SpecificationSelectionGuidance",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0034)": {
    tag: "(0082,0034)",
    vr: "SQ",
    name: "ConstraintValueSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0035)": {
    tag: "(0082,0035)",
    vr: "SQ",
    name: "RecommendedDefaultValueSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0036)": {
    tag: "(0082,0036)",
    vr: "CS",
    name: "ConstraintViolationSignificance",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0037)": {
    tag: "(0082,0037)",
    vr: "UT",
    name: "ConstraintViolationCondition",
    vm: "1",
    version: "DICOM"
  },
  "(0082,0038)": {
    tag: "(0082,0038)",
    vr: "CS",
    name: "ModifiableConstraintFlag",
    vm: "1",
    version: "DICOM"
  },
  "(0088,0130)": {
    tag: "(0088,0130)",
    vr: "SH",
    name: "StorageMediaFileSetID",
    vm: "1",
    version: "DICOM"
  },
  "(0088,0140)": {
    tag: "(0088,0140)",
    vr: "UI",
    name: "StorageMediaFileSetUID",
    vm: "1",
    version: "DICOM"
  },
  "(0088,0200)": {
    tag: "(0088,0200)",
    vr: "SQ",
    name: "IconImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0100,0410)": {
    tag: "(0100,0410)",
    vr: "CS",
    name: "SOPInstanceStatus",
    vm: "1",
    version: "DICOM"
  },
  "(0100,0420)": {
    tag: "(0100,0420)",
    vr: "DT",
    name: "SOPAuthorizationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0100,0424)": {
    tag: "(0100,0424)",
    vr: "LT",
    name: "SOPAuthorizationComment",
    vm: "1",
    version: "DICOM"
  },
  "(0100,0426)": {
    tag: "(0100,0426)",
    vr: "LO",
    name: "AuthorizationEquipmentCertificationNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0005)": {
    tag: "(0400,0005)",
    vr: "US",
    name: "MACIDNumber",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0010)": {
    tag: "(0400,0010)",
    vr: "UI",
    name: "MACCalculationTransferSyntaxUID",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0015)": {
    tag: "(0400,0015)",
    vr: "CS",
    name: "MACAlgorithm",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0020)": {
    tag: "(0400,0020)",
    vr: "AT",
    name: "DataElementsSigned",
    vm: "1-n",
    version: "DICOM"
  },
  "(0400,0100)": {
    tag: "(0400,0100)",
    vr: "UI",
    name: "DigitalSignatureUID",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0105)": {
    tag: "(0400,0105)",
    vr: "DT",
    name: "DigitalSignatureDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0110)": {
    tag: "(0400,0110)",
    vr: "CS",
    name: "CertificateType",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0115)": {
    tag: "(0400,0115)",
    vr: "OB",
    name: "CertificateOfSigner",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0120)": {
    tag: "(0400,0120)",
    vr: "OB",
    name: "Signature",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0305)": {
    tag: "(0400,0305)",
    vr: "CS",
    name: "CertifiedTimestampType",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0310)": {
    tag: "(0400,0310)",
    vr: "OB",
    name: "CertifiedTimestamp",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0401)": {
    tag: "(0400,0401)",
    vr: "SQ",
    name: "DigitalSignaturePurposeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0402)": {
    tag: "(0400,0402)",
    vr: "SQ",
    name: "ReferencedDigitalSignatureSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0403)": {
    tag: "(0400,0403)",
    vr: "SQ",
    name: "ReferencedSOPInstanceMACSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0404)": {
    tag: "(0400,0404)",
    vr: "OB",
    name: "MAC",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0500)": {
    tag: "(0400,0500)",
    vr: "SQ",
    name: "EncryptedAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0510)": {
    tag: "(0400,0510)",
    vr: "UI",
    name: "EncryptedContentTransferSyntaxUID",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0520)": {
    tag: "(0400,0520)",
    vr: "OB",
    name: "EncryptedContent",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0550)": {
    tag: "(0400,0550)",
    vr: "SQ",
    name: "ModifiedAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0551)": {
    tag: "(0400,0551)",
    vr: "SQ",
    name: "NonconformingModifiedAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0552)": {
    tag: "(0400,0552)",
    vr: "OB",
    name: "NonconformingDataElementValue",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0561)": {
    tag: "(0400,0561)",
    vr: "SQ",
    name: "OriginalAttributesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0562)": {
    tag: "(0400,0562)",
    vr: "DT",
    name: "AttributeModificationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0563)": {
    tag: "(0400,0563)",
    vr: "LO",
    name: "ModifyingSystem",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0564)": {
    tag: "(0400,0564)",
    vr: "LO",
    name: "SourceOfPreviousValues",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0565)": {
    tag: "(0400,0565)",
    vr: "CS",
    name: "ReasonForTheAttributeModification",
    vm: "1",
    version: "DICOM"
  },
  "(0400,0600)": {
    tag: "(0400,0600)",
    vr: "CS",
    name: "InstanceOriginStatus",
    vm: "1",
    version: "DICOM"
  },
  "(2000,0010)": {
    tag: "(2000,0010)",
    vr: "IS",
    name: "NumberOfCopies",
    vm: "1",
    version: "DICOM"
  },
  "(2000,001E)": {
    tag: "(2000,001E)",
    vr: "SQ",
    name: "PrinterConfigurationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2000,0020)": {
    tag: "(2000,0020)",
    vr: "CS",
    name: "PrintPriority",
    vm: "1",
    version: "DICOM"
  },
  "(2000,0030)": {
    tag: "(2000,0030)",
    vr: "CS",
    name: "MediumType",
    vm: "1",
    version: "DICOM"
  },
  "(2000,0040)": {
    tag: "(2000,0040)",
    vr: "CS",
    name: "FilmDestination",
    vm: "1",
    version: "DICOM"
  },
  "(2000,0050)": {
    tag: "(2000,0050)",
    vr: "LO",
    name: "FilmSessionLabel",
    vm: "1",
    version: "DICOM"
  },
  "(2000,0060)": {
    tag: "(2000,0060)",
    vr: "IS",
    name: "MemoryAllocation",
    vm: "1",
    version: "DICOM"
  },
  "(2000,0061)": {
    tag: "(2000,0061)",
    vr: "IS",
    name: "MaximumMemoryAllocation",
    vm: "1",
    version: "DICOM"
  },
  "(2000,00A0)": {
    tag: "(2000,00A0)",
    vr: "US",
    name: "MemoryBitDepth",
    vm: "1",
    version: "DICOM"
  },
  "(2000,00A1)": {
    tag: "(2000,00A1)",
    vr: "US",
    name: "PrintingBitDepth",
    vm: "1",
    version: "DICOM"
  },
  "(2000,00A2)": {
    tag: "(2000,00A2)",
    vr: "SQ",
    name: "MediaInstalledSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2000,00A4)": {
    tag: "(2000,00A4)",
    vr: "SQ",
    name: "OtherMediaAvailableSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2000,00A8)": {
    tag: "(2000,00A8)",
    vr: "SQ",
    name: "SupportedImageDisplayFormatsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2000,0500)": {
    tag: "(2000,0500)",
    vr: "SQ",
    name: "ReferencedFilmBoxSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0010)": {
    tag: "(2010,0010)",
    vr: "ST",
    name: "ImageDisplayFormat",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0030)": {
    tag: "(2010,0030)",
    vr: "CS",
    name: "AnnotationDisplayFormatID",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0040)": {
    tag: "(2010,0040)",
    vr: "CS",
    name: "FilmOrientation",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0050)": {
    tag: "(2010,0050)",
    vr: "CS",
    name: "FilmSizeID",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0052)": {
    tag: "(2010,0052)",
    vr: "CS",
    name: "PrinterResolutionID",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0054)": {
    tag: "(2010,0054)",
    vr: "CS",
    name: "DefaultPrinterResolutionID",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0060)": {
    tag: "(2010,0060)",
    vr: "CS",
    name: "MagnificationType",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0080)": {
    tag: "(2010,0080)",
    vr: "CS",
    name: "SmoothingType",
    vm: "1",
    version: "DICOM"
  },
  "(2010,00A6)": {
    tag: "(2010,00A6)",
    vr: "CS",
    name: "DefaultMagnificationType",
    vm: "1",
    version: "DICOM"
  },
  "(2010,00A7)": {
    tag: "(2010,00A7)",
    vr: "CS",
    name: "OtherMagnificationTypesAvailable",
    vm: "1-n",
    version: "DICOM"
  },
  "(2010,00A8)": {
    tag: "(2010,00A8)",
    vr: "CS",
    name: "DefaultSmoothingType",
    vm: "1",
    version: "DICOM"
  },
  "(2010,00A9)": {
    tag: "(2010,00A9)",
    vr: "CS",
    name: "OtherSmoothingTypesAvailable",
    vm: "1-n",
    version: "DICOM"
  },
  "(2010,0100)": {
    tag: "(2010,0100)",
    vr: "CS",
    name: "BorderDensity",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0110)": {
    tag: "(2010,0110)",
    vr: "CS",
    name: "EmptyImageDensity",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0120)": {
    tag: "(2010,0120)",
    vr: "US",
    name: "MinDensity",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0130)": {
    tag: "(2010,0130)",
    vr: "US",
    name: "MaxDensity",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0140)": {
    tag: "(2010,0140)",
    vr: "CS",
    name: "Trim",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0150)": {
    tag: "(2010,0150)",
    vr: "ST",
    name: "ConfigurationInformation",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0152)": {
    tag: "(2010,0152)",
    vr: "LT",
    name: "ConfigurationInformationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0154)": {
    tag: "(2010,0154)",
    vr: "IS",
    name: "MaximumCollatedFilms",
    vm: "1",
    version: "DICOM"
  },
  "(2010,015E)": {
    tag: "(2010,015E)",
    vr: "US",
    name: "Illumination",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0160)": {
    tag: "(2010,0160)",
    vr: "US",
    name: "ReflectedAmbientLight",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0376)": {
    tag: "(2010,0376)",
    vr: "DS",
    name: "PrinterPixelSpacing",
    vm: "2",
    version: "DICOM"
  },
  "(2010,0500)": {
    tag: "(2010,0500)",
    vr: "SQ",
    name: "ReferencedFilmSessionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0510)": {
    tag: "(2010,0510)",
    vr: "SQ",
    name: "ReferencedImageBoxSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2010,0520)": {
    tag: "(2010,0520)",
    vr: "SQ",
    name: "ReferencedBasicAnnotationBoxSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2020,0010)": {
    tag: "(2020,0010)",
    vr: "US",
    name: "ImageBoxPosition",
    vm: "1",
    version: "DICOM"
  },
  "(2020,0020)": {
    tag: "(2020,0020)",
    vr: "CS",
    name: "Polarity",
    vm: "1",
    version: "DICOM"
  },
  "(2020,0030)": {
    tag: "(2020,0030)",
    vr: "DS",
    name: "RequestedImageSize",
    vm: "1",
    version: "DICOM"
  },
  "(2020,0040)": {
    tag: "(2020,0040)",
    vr: "CS",
    name: "RequestedDecimateCropBehavior",
    vm: "1",
    version: "DICOM"
  },
  "(2020,0050)": {
    tag: "(2020,0050)",
    vr: "CS",
    name: "RequestedResolutionID",
    vm: "1",
    version: "DICOM"
  },
  "(2020,00A0)": {
    tag: "(2020,00A0)",
    vr: "CS",
    name: "RequestedImageSizeFlag",
    vm: "1",
    version: "DICOM"
  },
  "(2020,00A2)": {
    tag: "(2020,00A2)",
    vr: "CS",
    name: "DecimateCropResult",
    vm: "1",
    version: "DICOM"
  },
  "(2020,0110)": {
    tag: "(2020,0110)",
    vr: "SQ",
    name: "BasicGrayscaleImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2020,0111)": {
    tag: "(2020,0111)",
    vr: "SQ",
    name: "BasicColorImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2030,0010)": {
    tag: "(2030,0010)",
    vr: "US",
    name: "AnnotationPosition",
    vm: "1",
    version: "DICOM"
  },
  "(2030,0020)": {
    tag: "(2030,0020)",
    vr: "LO",
    name: "TextString",
    vm: "1",
    version: "DICOM"
  },
  "(2050,0010)": {
    tag: "(2050,0010)",
    vr: "SQ",
    name: "PresentationLUTSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2050,0020)": {
    tag: "(2050,0020)",
    vr: "CS",
    name: "PresentationLUTShape",
    vm: "1",
    version: "DICOM"
  },
  "(2050,0500)": {
    tag: "(2050,0500)",
    vr: "SQ",
    name: "ReferencedPresentationLUTSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2100,0020)": {
    tag: "(2100,0020)",
    vr: "CS",
    name: "ExecutionStatus",
    vm: "1",
    version: "DICOM"
  },
  "(2100,0030)": {
    tag: "(2100,0030)",
    vr: "CS",
    name: "ExecutionStatusInfo",
    vm: "1",
    version: "DICOM"
  },
  "(2100,0040)": {
    tag: "(2100,0040)",
    vr: "DA",
    name: "CreationDate",
    vm: "1",
    version: "DICOM"
  },
  "(2100,0050)": {
    tag: "(2100,0050)",
    vr: "TM",
    name: "CreationTime",
    vm: "1",
    version: "DICOM"
  },
  "(2100,0070)": {
    tag: "(2100,0070)",
    vr: "AE",
    name: "Originator",
    vm: "1",
    version: "DICOM"
  },
  "(2100,0160)": {
    tag: "(2100,0160)",
    vr: "SH",
    name: "OwnerID",
    vm: "1",
    version: "DICOM"
  },
  "(2100,0170)": {
    tag: "(2100,0170)",
    vr: "IS",
    name: "NumberOfFilms",
    vm: "1",
    version: "DICOM"
  },
  "(2110,0010)": {
    tag: "(2110,0010)",
    vr: "CS",
    name: "PrinterStatus",
    vm: "1",
    version: "DICOM"
  },
  "(2110,0020)": {
    tag: "(2110,0020)",
    vr: "CS",
    name: "PrinterStatusInfo",
    vm: "1",
    version: "DICOM"
  },
  "(2110,0030)": {
    tag: "(2110,0030)",
    vr: "LO",
    name: "PrinterName",
    vm: "1",
    version: "DICOM"
  },
  "(2200,0001)": {
    tag: "(2200,0001)",
    vr: "CS",
    name: "LabelUsingInformationExtractedFromInstances",
    vm: "1",
    version: "DICOM"
  },
  "(2200,0002)": {
    tag: "(2200,0002)",
    vr: "UT",
    name: "LabelText",
    vm: "1",
    version: "DICOM"
  },
  "(2200,0003)": {
    tag: "(2200,0003)",
    vr: "CS",
    name: "LabelStyleSelection",
    vm: "1",
    version: "DICOM"
  },
  "(2200,0004)": {
    tag: "(2200,0004)",
    vr: "LT",
    name: "MediaDisposition",
    vm: "1",
    version: "DICOM"
  },
  "(2200,0005)": {
    tag: "(2200,0005)",
    vr: "LT",
    name: "BarcodeValue",
    vm: "1",
    version: "DICOM"
  },
  "(2200,0006)": {
    tag: "(2200,0006)",
    vr: "CS",
    name: "BarcodeSymbology",
    vm: "1",
    version: "DICOM"
  },
  "(2200,0007)": {
    tag: "(2200,0007)",
    vr: "CS",
    name: "AllowMediaSplitting",
    vm: "1",
    version: "DICOM"
  },
  "(2200,0008)": {
    tag: "(2200,0008)",
    vr: "CS",
    name: "IncludeNonDICOMObjects",
    vm: "1",
    version: "DICOM"
  },
  "(2200,0009)": {
    tag: "(2200,0009)",
    vr: "CS",
    name: "IncludeDisplayApplication",
    vm: "1",
    version: "DICOM"
  },
  "(2200,000A)": {
    tag: "(2200,000A)",
    vr: "CS",
    name: "PreserveCompositeInstancesAfterMediaCreation",
    vm: "1",
    version: "DICOM"
  },
  "(2200,000B)": {
    tag: "(2200,000B)",
    vr: "US",
    name: "TotalNumberOfPiecesOfMediaCreated",
    vm: "1",
    version: "DICOM"
  },
  "(2200,000C)": {
    tag: "(2200,000C)",
    vr: "LO",
    name: "RequestedMediaApplicationProfile",
    vm: "1",
    version: "DICOM"
  },
  "(2200,000D)": {
    tag: "(2200,000D)",
    vr: "SQ",
    name: "ReferencedStorageMediaSequence",
    vm: "1",
    version: "DICOM"
  },
  "(2200,000E)": {
    tag: "(2200,000E)",
    vr: "AT",
    name: "FailureAttributes",
    vm: "1-n",
    version: "DICOM"
  },
  "(2200,000F)": {
    tag: "(2200,000F)",
    vr: "CS",
    name: "AllowLossyCompression",
    vm: "1",
    version: "DICOM"
  },
  "(2200,0020)": {
    tag: "(2200,0020)",
    vr: "CS",
    name: "RequestPriority",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0002)": {
    tag: "(3002,0002)",
    vr: "SH",
    name: "RTImageLabel",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0003)": {
    tag: "(3002,0003)",
    vr: "LO",
    name: "RTImageName",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0004)": {
    tag: "(3002,0004)",
    vr: "ST",
    name: "RTImageDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3002,000A)": {
    tag: "(3002,000A)",
    vr: "CS",
    name: "ReportedValuesOrigin",
    vm: "1",
    version: "DICOM"
  },
  "(3002,000C)": {
    tag: "(3002,000C)",
    vr: "CS",
    name: "RTImagePlane",
    vm: "1",
    version: "DICOM"
  },
  "(3002,000D)": {
    tag: "(3002,000D)",
    vr: "DS",
    name: "XRayImageReceptorTranslation",
    vm: "3",
    version: "DICOM"
  },
  "(3002,000E)": {
    tag: "(3002,000E)",
    vr: "DS",
    name: "XRayImageReceptorAngle",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0010)": {
    tag: "(3002,0010)",
    vr: "DS",
    name: "RTImageOrientation",
    vm: "6",
    version: "DICOM"
  },
  "(3002,0011)": {
    tag: "(3002,0011)",
    vr: "DS",
    name: "ImagePlanePixelSpacing",
    vm: "2",
    version: "DICOM"
  },
  "(3002,0012)": {
    tag: "(3002,0012)",
    vr: "DS",
    name: "RTImagePosition",
    vm: "2",
    version: "DICOM"
  },
  "(3002,0020)": {
    tag: "(3002,0020)",
    vr: "SH",
    name: "RadiationMachineName",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0022)": {
    tag: "(3002,0022)",
    vr: "DS",
    name: "RadiationMachineSAD",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0024)": {
    tag: "(3002,0024)",
    vr: "DS",
    name: "RadiationMachineSSD",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0026)": {
    tag: "(3002,0026)",
    vr: "DS",
    name: "RTImageSID",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0028)": {
    tag: "(3002,0028)",
    vr: "DS",
    name: "SourceToReferenceObjectDistance",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0029)": {
    tag: "(3002,0029)",
    vr: "IS",
    name: "FractionNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0030)": {
    tag: "(3002,0030)",
    vr: "SQ",
    name: "ExposureSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0032)": {
    tag: "(3002,0032)",
    vr: "DS",
    name: "MetersetExposure",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0034)": {
    tag: "(3002,0034)",
    vr: "DS",
    name: "DiaphragmPosition",
    vm: "4",
    version: "DICOM"
  },
  "(3002,0040)": {
    tag: "(3002,0040)",
    vr: "SQ",
    name: "FluenceMapSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0041)": {
    tag: "(3002,0041)",
    vr: "CS",
    name: "FluenceDataSource",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0042)": {
    tag: "(3002,0042)",
    vr: "DS",
    name: "FluenceDataScale",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0050)": {
    tag: "(3002,0050)",
    vr: "SQ",
    name: "PrimaryFluenceModeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0051)": {
    tag: "(3002,0051)",
    vr: "CS",
    name: "FluenceMode",
    vm: "1",
    version: "DICOM"
  },
  "(3002,0052)": {
    tag: "(3002,0052)",
    vr: "SH",
    name: "FluenceModeID",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0001)": {
    tag: "(3004,0001)",
    vr: "CS",
    name: "DVHType",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0002)": {
    tag: "(3004,0002)",
    vr: "CS",
    name: "DoseUnits",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0004)": {
    tag: "(3004,0004)",
    vr: "CS",
    name: "DoseType",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0005)": {
    tag: "(3004,0005)",
    vr: "CS",
    name: "SpatialTransformOfDose",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0006)": {
    tag: "(3004,0006)",
    vr: "LO",
    name: "DoseComment",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0008)": {
    tag: "(3004,0008)",
    vr: "DS",
    name: "NormalizationPoint",
    vm: "3",
    version: "DICOM"
  },
  "(3004,000A)": {
    tag: "(3004,000A)",
    vr: "CS",
    name: "DoseSummationType",
    vm: "1",
    version: "DICOM"
  },
  "(3004,000C)": {
    tag: "(3004,000C)",
    vr: "DS",
    name: "GridFrameOffsetVector",
    vm: "2-n",
    version: "DICOM"
  },
  "(3004,000E)": {
    tag: "(3004,000E)",
    vr: "DS",
    name: "DoseGridScaling",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0010)": {
    tag: "(3004,0010)",
    vr: "SQ",
    name: "RTDoseROISequence",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0012)": {
    tag: "(3004,0012)",
    vr: "DS",
    name: "DoseValue",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0014)": {
    tag: "(3004,0014)",
    vr: "CS",
    name: "TissueHeterogeneityCorrection",
    vm: "1-3",
    version: "DICOM"
  },
  "(3004,0040)": {
    tag: "(3004,0040)",
    vr: "DS",
    name: "DVHNormalizationPoint",
    vm: "3",
    version: "DICOM"
  },
  "(3004,0042)": {
    tag: "(3004,0042)",
    vr: "DS",
    name: "DVHNormalizationDoseValue",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0050)": {
    tag: "(3004,0050)",
    vr: "SQ",
    name: "DVHSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0052)": {
    tag: "(3004,0052)",
    vr: "DS",
    name: "DVHDoseScaling",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0054)": {
    tag: "(3004,0054)",
    vr: "CS",
    name: "DVHVolumeUnits",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0056)": {
    tag: "(3004,0056)",
    vr: "IS",
    name: "DVHNumberOfBins",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0058)": {
    tag: "(3004,0058)",
    vr: "DS",
    name: "DVHData",
    vm: "2-2n",
    version: "DICOM"
  },
  "(3004,0060)": {
    tag: "(3004,0060)",
    vr: "SQ",
    name: "DVHReferencedROISequence",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0062)": {
    tag: "(3004,0062)",
    vr: "CS",
    name: "DVHROIContributionType",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0070)": {
    tag: "(3004,0070)",
    vr: "DS",
    name: "DVHMinimumDose",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0072)": {
    tag: "(3004,0072)",
    vr: "DS",
    name: "DVHMaximumDose",
    vm: "1",
    version: "DICOM"
  },
  "(3004,0074)": {
    tag: "(3004,0074)",
    vr: "DS",
    name: "DVHMeanDose",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0002)": {
    tag: "(3006,0002)",
    vr: "SH",
    name: "StructureSetLabel",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0004)": {
    tag: "(3006,0004)",
    vr: "LO",
    name: "StructureSetName",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0006)": {
    tag: "(3006,0006)",
    vr: "ST",
    name: "StructureSetDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0008)": {
    tag: "(3006,0008)",
    vr: "DA",
    name: "StructureSetDate",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0009)": {
    tag: "(3006,0009)",
    vr: "TM",
    name: "StructureSetTime",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0010)": {
    tag: "(3006,0010)",
    vr: "SQ",
    name: "ReferencedFrameOfReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0012)": {
    tag: "(3006,0012)",
    vr: "SQ",
    name: "RTReferencedStudySequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0014)": {
    tag: "(3006,0014)",
    vr: "SQ",
    name: "RTReferencedSeriesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0016)": {
    tag: "(3006,0016)",
    vr: "SQ",
    name: "ContourImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0018)": {
    tag: "(3006,0018)",
    vr: "SQ",
    name: "PredecessorStructureSetSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0020)": {
    tag: "(3006,0020)",
    vr: "SQ",
    name: "StructureSetROISequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0022)": {
    tag: "(3006,0022)",
    vr: "IS",
    name: "ROINumber",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0024)": {
    tag: "(3006,0024)",
    vr: "UI",
    name: "ReferencedFrameOfReferenceUID",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0026)": {
    tag: "(3006,0026)",
    vr: "LO",
    name: "ROIName",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0028)": {
    tag: "(3006,0028)",
    vr: "ST",
    name: "ROIDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3006,002A)": {
    tag: "(3006,002A)",
    vr: "IS",
    name: "ROIDisplayColor",
    vm: "3",
    version: "DICOM"
  },
  "(3006,002C)": {
    tag: "(3006,002C)",
    vr: "DS",
    name: "ROIVolume",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0030)": {
    tag: "(3006,0030)",
    vr: "SQ",
    name: "RTRelatedROISequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0033)": {
    tag: "(3006,0033)",
    vr: "CS",
    name: "RTROIRelationship",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0036)": {
    tag: "(3006,0036)",
    vr: "CS",
    name: "ROIGenerationAlgorithm",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0037)": {
    tag: "(3006,0037)",
    vr: "SQ",
    name: "ROIDerivationAlgorithmIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0038)": {
    tag: "(3006,0038)",
    vr: "LO",
    name: "ROIGenerationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0039)": {
    tag: "(3006,0039)",
    vr: "SQ",
    name: "ROIContourSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0040)": {
    tag: "(3006,0040)",
    vr: "SQ",
    name: "ContourSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0042)": {
    tag: "(3006,0042)",
    vr: "CS",
    name: "ContourGeometricType",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0044)": {
    tag: "(3006,0044)",
    vr: "DS",
    name: "ContourSlabThickness",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0045)": {
    tag: "(3006,0045)",
    vr: "DS",
    name: "ContourOffsetVector",
    vm: "3",
    version: "DICOM"
  },
  "(3006,0046)": {
    tag: "(3006,0046)",
    vr: "IS",
    name: "NumberOfContourPoints",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0048)": {
    tag: "(3006,0048)",
    vr: "IS",
    name: "ContourNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0049)": {
    tag: "(3006,0049)",
    vr: "IS",
    name: "AttachedContours",
    vm: "1-n",
    version: "DICOM"
  },
  "(3006,004A)": {
    tag: "(3006,004A)",
    vr: "SQ",
    name: "SourcePixelPlanesCharacteristicsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0050)": {
    tag: "(3006,0050)",
    vr: "DS",
    name: "ContourData",
    vm: "3-3n",
    version: "DICOM"
  },
  "(3006,0080)": {
    tag: "(3006,0080)",
    vr: "SQ",
    name: "RTROIObservationsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0082)": {
    tag: "(3006,0082)",
    vr: "IS",
    name: "ObservationNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0084)": {
    tag: "(3006,0084)",
    vr: "IS",
    name: "ReferencedROINumber",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0085)": {
    tag: "(3006,0085)",
    vr: "SH",
    name: "ROIObservationLabel",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0086)": {
    tag: "(3006,0086)",
    vr: "SQ",
    name: "RTROIIdentificationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,0088)": {
    tag: "(3006,0088)",
    vr: "ST",
    name: "ROIObservationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00A0)": {
    tag: "(3006,00A0)",
    vr: "SQ",
    name: "RelatedRTROIObservationsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00A4)": {
    tag: "(3006,00A4)",
    vr: "CS",
    name: "RTROIInterpretedType",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00A6)": {
    tag: "(3006,00A6)",
    vr: "PN",
    name: "ROIInterpreter",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00B0)": {
    tag: "(3006,00B0)",
    vr: "SQ",
    name: "ROIPhysicalPropertiesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00B2)": {
    tag: "(3006,00B2)",
    vr: "CS",
    name: "ROIPhysicalProperty",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00B4)": {
    tag: "(3006,00B4)",
    vr: "DS",
    name: "ROIPhysicalPropertyValue",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00B6)": {
    tag: "(3006,00B6)",
    vr: "SQ",
    name: "ROIElementalCompositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00B7)": {
    tag: "(3006,00B7)",
    vr: "US",
    name: "ROIElementalCompositionAtomicNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00B8)": {
    tag: "(3006,00B8)",
    vr: "FL",
    name: "ROIElementalCompositionAtomicMassFraction",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00B9)": {
    tag: "(3006,00B9)",
    vr: "SQ",
    name: "AdditionalRTROIIdentificationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00C6)": {
    tag: "(3006,00C6)",
    vr: "DS",
    name: "FrameOfReferenceTransformationMatrix",
    vm: "16",
    version: "DICOM"
  },
  "(3006,00C8)": {
    tag: "(3006,00C8)",
    vr: "LO",
    name: "FrameOfReferenceTransformationComment",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00C9)": {
    tag: "(3006,00C9)",
    vr: "SQ",
    name: "PatientLocationCoordinatesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00CA)": {
    tag: "(3006,00CA)",
    vr: "SQ",
    name: "PatientLocationCoordinatesCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3006,00CB)": {
    tag: "(3006,00CB)",
    vr: "SQ",
    name: "PatientSupportPositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0010)": {
    tag: "(3008,0010)",
    vr: "SQ",
    name: "MeasuredDoseReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0012)": {
    tag: "(3008,0012)",
    vr: "ST",
    name: "MeasuredDoseDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0014)": {
    tag: "(3008,0014)",
    vr: "CS",
    name: "MeasuredDoseType",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0016)": {
    tag: "(3008,0016)",
    vr: "DS",
    name: "MeasuredDoseValue",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0020)": {
    tag: "(3008,0020)",
    vr: "SQ",
    name: "TreatmentSessionBeamSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0021)": {
    tag: "(3008,0021)",
    vr: "SQ",
    name: "TreatmentSessionIonBeamSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0022)": {
    tag: "(3008,0022)",
    vr: "IS",
    name: "CurrentFractionNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0024)": {
    tag: "(3008,0024)",
    vr: "DA",
    name: "TreatmentControlPointDate",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0025)": {
    tag: "(3008,0025)",
    vr: "TM",
    name: "TreatmentControlPointTime",
    vm: "1",
    version: "DICOM"
  },
  "(3008,002A)": {
    tag: "(3008,002A)",
    vr: "CS",
    name: "TreatmentTerminationStatus",
    vm: "1",
    version: "DICOM"
  },
  "(3008,002B)": {
    tag: "(3008,002B)",
    vr: "SH",
    name: "TreatmentTerminationCode",
    vm: "1",
    version: "DICOM"
  },
  "(3008,002C)": {
    tag: "(3008,002C)",
    vr: "CS",
    name: "TreatmentVerificationStatus",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0030)": {
    tag: "(3008,0030)",
    vr: "SQ",
    name: "ReferencedTreatmentRecordSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0032)": {
    tag: "(3008,0032)",
    vr: "DS",
    name: "SpecifiedPrimaryMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0033)": {
    tag: "(3008,0033)",
    vr: "DS",
    name: "SpecifiedSecondaryMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0036)": {
    tag: "(3008,0036)",
    vr: "DS",
    name: "DeliveredPrimaryMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0037)": {
    tag: "(3008,0037)",
    vr: "DS",
    name: "DeliveredSecondaryMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(3008,003A)": {
    tag: "(3008,003A)",
    vr: "DS",
    name: "SpecifiedTreatmentTime",
    vm: "1",
    version: "DICOM"
  },
  "(3008,003B)": {
    tag: "(3008,003B)",
    vr: "DS",
    name: "DeliveredTreatmentTime",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0040)": {
    tag: "(3008,0040)",
    vr: "SQ",
    name: "ControlPointDeliverySequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0041)": {
    tag: "(3008,0041)",
    vr: "SQ",
    name: "IonControlPointDeliverySequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0042)": {
    tag: "(3008,0042)",
    vr: "DS",
    name: "SpecifiedMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0044)": {
    tag: "(3008,0044)",
    vr: "DS",
    name: "DeliveredMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0045)": {
    tag: "(3008,0045)",
    vr: "FL",
    name: "MetersetRateSet",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0046)": {
    tag: "(3008,0046)",
    vr: "FL",
    name: "MetersetRateDelivered",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0047)": {
    tag: "(3008,0047)",
    vr: "FL",
    name: "ScanSpotMetersetsDelivered",
    vm: "1-n",
    version: "DICOM"
  },
  "(3008,0048)": {
    tag: "(3008,0048)",
    vr: "DS",
    name: "DoseRateDelivered",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0050)": {
    tag: "(3008,0050)",
    vr: "SQ",
    name: "TreatmentSummaryCalculatedDoseReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0052)": {
    tag: "(3008,0052)",
    vr: "DS",
    name: "CumulativeDoseToDoseReference",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0054)": {
    tag: "(3008,0054)",
    vr: "DA",
    name: "FirstTreatmentDate",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0056)": {
    tag: "(3008,0056)",
    vr: "DA",
    name: "MostRecentTreatmentDate",
    vm: "1",
    version: "DICOM"
  },
  "(3008,005A)": {
    tag: "(3008,005A)",
    vr: "IS",
    name: "NumberOfFractionsDelivered",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0060)": {
    tag: "(3008,0060)",
    vr: "SQ",
    name: "OverrideSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0061)": {
    tag: "(3008,0061)",
    vr: "AT",
    name: "ParameterSequencePointer",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0062)": {
    tag: "(3008,0062)",
    vr: "AT",
    name: "OverrideParameterPointer",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0063)": {
    tag: "(3008,0063)",
    vr: "IS",
    name: "ParameterItemIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0064)": {
    tag: "(3008,0064)",
    vr: "IS",
    name: "MeasuredDoseReferenceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0065)": {
    tag: "(3008,0065)",
    vr: "AT",
    name: "ParameterPointer",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0066)": {
    tag: "(3008,0066)",
    vr: "ST",
    name: "OverrideReason",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0067)": {
    tag: "(3008,0067)",
    vr: "US",
    name: "ParameterValueNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0068)": {
    tag: "(3008,0068)",
    vr: "SQ",
    name: "CorrectedParameterSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,006A)": {
    tag: "(3008,006A)",
    vr: "FL",
    name: "CorrectionValue",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0070)": {
    tag: "(3008,0070)",
    vr: "SQ",
    name: "CalculatedDoseReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0072)": {
    tag: "(3008,0072)",
    vr: "IS",
    name: "CalculatedDoseReferenceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0074)": {
    tag: "(3008,0074)",
    vr: "ST",
    name: "CalculatedDoseReferenceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0076)": {
    tag: "(3008,0076)",
    vr: "DS",
    name: "CalculatedDoseReferenceDoseValue",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0078)": {
    tag: "(3008,0078)",
    vr: "DS",
    name: "StartMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(3008,007A)": {
    tag: "(3008,007A)",
    vr: "DS",
    name: "EndMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0080)": {
    tag: "(3008,0080)",
    vr: "SQ",
    name: "ReferencedMeasuredDoseReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0082)": {
    tag: "(3008,0082)",
    vr: "IS",
    name: "ReferencedMeasuredDoseReferenceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0090)": {
    tag: "(3008,0090)",
    vr: "SQ",
    name: "ReferencedCalculatedDoseReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0092)": {
    tag: "(3008,0092)",
    vr: "IS",
    name: "ReferencedCalculatedDoseReferenceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,00A0)": {
    tag: "(3008,00A0)",
    vr: "SQ",
    name: "BeamLimitingDeviceLeafPairsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,00B0)": {
    tag: "(3008,00B0)",
    vr: "SQ",
    name: "RecordedWedgeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,00C0)": {
    tag: "(3008,00C0)",
    vr: "SQ",
    name: "RecordedCompensatorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,00D0)": {
    tag: "(3008,00D0)",
    vr: "SQ",
    name: "RecordedBlockSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,00E0)": {
    tag: "(3008,00E0)",
    vr: "SQ",
    name: "TreatmentSummaryMeasuredDoseReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,00F0)": {
    tag: "(3008,00F0)",
    vr: "SQ",
    name: "RecordedSnoutSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,00F2)": {
    tag: "(3008,00F2)",
    vr: "SQ",
    name: "RecordedRangeShifterSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,00F4)": {
    tag: "(3008,00F4)",
    vr: "SQ",
    name: "RecordedLateralSpreadingDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,00F6)": {
    tag: "(3008,00F6)",
    vr: "SQ",
    name: "RecordedRangeModulatorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0100)": {
    tag: "(3008,0100)",
    vr: "SQ",
    name: "RecordedSourceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0105)": {
    tag: "(3008,0105)",
    vr: "LO",
    name: "SourceSerialNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0110)": {
    tag: "(3008,0110)",
    vr: "SQ",
    name: "TreatmentSessionApplicationSetupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0116)": {
    tag: "(3008,0116)",
    vr: "CS",
    name: "ApplicationSetupCheck",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0120)": {
    tag: "(3008,0120)",
    vr: "SQ",
    name: "RecordedBrachyAccessoryDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0122)": {
    tag: "(3008,0122)",
    vr: "IS",
    name: "ReferencedBrachyAccessoryDeviceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0130)": {
    tag: "(3008,0130)",
    vr: "SQ",
    name: "RecordedChannelSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0132)": {
    tag: "(3008,0132)",
    vr: "DS",
    name: "SpecifiedChannelTotalTime",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0134)": {
    tag: "(3008,0134)",
    vr: "DS",
    name: "DeliveredChannelTotalTime",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0136)": {
    tag: "(3008,0136)",
    vr: "IS",
    name: "SpecifiedNumberOfPulses",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0138)": {
    tag: "(3008,0138)",
    vr: "IS",
    name: "DeliveredNumberOfPulses",
    vm: "1",
    version: "DICOM"
  },
  "(3008,013A)": {
    tag: "(3008,013A)",
    vr: "DS",
    name: "SpecifiedPulseRepetitionInterval",
    vm: "1",
    version: "DICOM"
  },
  "(3008,013C)": {
    tag: "(3008,013C)",
    vr: "DS",
    name: "DeliveredPulseRepetitionInterval",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0140)": {
    tag: "(3008,0140)",
    vr: "SQ",
    name: "RecordedSourceApplicatorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0142)": {
    tag: "(3008,0142)",
    vr: "IS",
    name: "ReferencedSourceApplicatorNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0150)": {
    tag: "(3008,0150)",
    vr: "SQ",
    name: "RecordedChannelShieldSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0152)": {
    tag: "(3008,0152)",
    vr: "IS",
    name: "ReferencedChannelShieldNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0160)": {
    tag: "(3008,0160)",
    vr: "SQ",
    name: "BrachyControlPointDeliveredSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0162)": {
    tag: "(3008,0162)",
    vr: "DA",
    name: "SafePositionExitDate",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0164)": {
    tag: "(3008,0164)",
    vr: "TM",
    name: "SafePositionExitTime",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0166)": {
    tag: "(3008,0166)",
    vr: "DA",
    name: "SafePositionReturnDate",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0168)": {
    tag: "(3008,0168)",
    vr: "TM",
    name: "SafePositionReturnTime",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0171)": {
    tag: "(3008,0171)",
    vr: "SQ",
    name: "PulseSpecificBrachyControlPointDeliveredSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0172)": {
    tag: "(3008,0172)",
    vr: "US",
    name: "PulseNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0173)": {
    tag: "(3008,0173)",
    vr: "SQ",
    name: "BrachyPulseControlPointDeliveredSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0200)": {
    tag: "(3008,0200)",
    vr: "CS",
    name: "CurrentTreatmentStatus",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0202)": {
    tag: "(3008,0202)",
    vr: "ST",
    name: "TreatmentStatusComment",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0220)": {
    tag: "(3008,0220)",
    vr: "SQ",
    name: "FractionGroupSummarySequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0223)": {
    tag: "(3008,0223)",
    vr: "IS",
    name: "ReferencedFractionNumber",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0224)": {
    tag: "(3008,0224)",
    vr: "CS",
    name: "FractionGroupType",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0230)": {
    tag: "(3008,0230)",
    vr: "CS",
    name: "BeamStopperPosition",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0240)": {
    tag: "(3008,0240)",
    vr: "SQ",
    name: "FractionStatusSummarySequence",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0250)": {
    tag: "(3008,0250)",
    vr: "DA",
    name: "TreatmentDate",
    vm: "1",
    version: "DICOM"
  },
  "(3008,0251)": {
    tag: "(3008,0251)",
    vr: "TM",
    name: "TreatmentTime",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0002)": {
    tag: "(300A,0002)",
    vr: "SH",
    name: "RTPlanLabel",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0003)": {
    tag: "(300A,0003)",
    vr: "LO",
    name: "RTPlanName",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0004)": {
    tag: "(300A,0004)",
    vr: "ST",
    name: "RTPlanDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0006)": {
    tag: "(300A,0006)",
    vr: "DA",
    name: "RTPlanDate",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0007)": {
    tag: "(300A,0007)",
    vr: "TM",
    name: "RTPlanTime",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0009)": {
    tag: "(300A,0009)",
    vr: "LO",
    name: "TreatmentProtocols",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,000A)": {
    tag: "(300A,000A)",
    vr: "CS",
    name: "PlanIntent",
    vm: "1",
    version: "DICOM"
  },
  "(300A,000B)": {
    tag: "(300A,000B)",
    vr: "LO",
    name: "TreatmentSites",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,000C)": {
    tag: "(300A,000C)",
    vr: "CS",
    name: "RTPlanGeometry",
    vm: "1",
    version: "DICOM"
  },
  "(300A,000E)": {
    tag: "(300A,000E)",
    vr: "ST",
    name: "PrescriptionDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0010)": {
    tag: "(300A,0010)",
    vr: "SQ",
    name: "DoseReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0012)": {
    tag: "(300A,0012)",
    vr: "IS",
    name: "DoseReferenceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0013)": {
    tag: "(300A,0013)",
    vr: "UI",
    name: "DoseReferenceUID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0014)": {
    tag: "(300A,0014)",
    vr: "CS",
    name: "DoseReferenceStructureType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0015)": {
    tag: "(300A,0015)",
    vr: "CS",
    name: "NominalBeamEnergyUnit",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0016)": {
    tag: "(300A,0016)",
    vr: "LO",
    name: "DoseReferenceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0018)": {
    tag: "(300A,0018)",
    vr: "DS",
    name: "DoseReferencePointCoordinates",
    vm: "3",
    version: "DICOM"
  },
  "(300A,001A)": {
    tag: "(300A,001A)",
    vr: "DS",
    name: "NominalPriorDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0020)": {
    tag: "(300A,0020)",
    vr: "CS",
    name: "DoseReferenceType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0021)": {
    tag: "(300A,0021)",
    vr: "DS",
    name: "ConstraintWeight",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0022)": {
    tag: "(300A,0022)",
    vr: "DS",
    name: "DeliveryWarningDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0023)": {
    tag: "(300A,0023)",
    vr: "DS",
    name: "DeliveryMaximumDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0025)": {
    tag: "(300A,0025)",
    vr: "DS",
    name: "TargetMinimumDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0026)": {
    tag: "(300A,0026)",
    vr: "DS",
    name: "TargetPrescriptionDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0027)": {
    tag: "(300A,0027)",
    vr: "DS",
    name: "TargetMaximumDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0028)": {
    tag: "(300A,0028)",
    vr: "DS",
    name: "TargetUnderdoseVolumeFraction",
    vm: "1",
    version: "DICOM"
  },
  "(300A,002A)": {
    tag: "(300A,002A)",
    vr: "DS",
    name: "OrganAtRiskFullVolumeDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,002B)": {
    tag: "(300A,002B)",
    vr: "DS",
    name: "OrganAtRiskLimitDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,002C)": {
    tag: "(300A,002C)",
    vr: "DS",
    name: "OrganAtRiskMaximumDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,002D)": {
    tag: "(300A,002D)",
    vr: "DS",
    name: "OrganAtRiskOverdoseVolumeFraction",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0040)": {
    tag: "(300A,0040)",
    vr: "SQ",
    name: "ToleranceTableSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0042)": {
    tag: "(300A,0042)",
    vr: "IS",
    name: "ToleranceTableNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0043)": {
    tag: "(300A,0043)",
    vr: "SH",
    name: "ToleranceTableLabel",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0044)": {
    tag: "(300A,0044)",
    vr: "DS",
    name: "GantryAngleTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0046)": {
    tag: "(300A,0046)",
    vr: "DS",
    name: "BeamLimitingDeviceAngleTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0048)": {
    tag: "(300A,0048)",
    vr: "SQ",
    name: "BeamLimitingDeviceToleranceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,004A)": {
    tag: "(300A,004A)",
    vr: "DS",
    name: "BeamLimitingDevicePositionTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,004B)": {
    tag: "(300A,004B)",
    vr: "FL",
    name: "SnoutPositionTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,004C)": {
    tag: "(300A,004C)",
    vr: "DS",
    name: "PatientSupportAngleTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,004E)": {
    tag: "(300A,004E)",
    vr: "DS",
    name: "TableTopEccentricAngleTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,004F)": {
    tag: "(300A,004F)",
    vr: "FL",
    name: "TableTopPitchAngleTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0050)": {
    tag: "(300A,0050)",
    vr: "FL",
    name: "TableTopRollAngleTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0051)": {
    tag: "(300A,0051)",
    vr: "DS",
    name: "TableTopVerticalPositionTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0052)": {
    tag: "(300A,0052)",
    vr: "DS",
    name: "TableTopLongitudinalPositionTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0053)": {
    tag: "(300A,0053)",
    vr: "DS",
    name: "TableTopLateralPositionTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0055)": {
    tag: "(300A,0055)",
    vr: "CS",
    name: "RTPlanRelationship",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0070)": {
    tag: "(300A,0070)",
    vr: "SQ",
    name: "FractionGroupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0071)": {
    tag: "(300A,0071)",
    vr: "IS",
    name: "FractionGroupNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0072)": {
    tag: "(300A,0072)",
    vr: "LO",
    name: "FractionGroupDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0078)": {
    tag: "(300A,0078)",
    vr: "IS",
    name: "NumberOfFractionsPlanned",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0079)": {
    tag: "(300A,0079)",
    vr: "IS",
    name: "NumberOfFractionPatternDigitsPerDay",
    vm: "1",
    version: "DICOM"
  },
  "(300A,007A)": {
    tag: "(300A,007A)",
    vr: "IS",
    name: "RepeatFractionCycleLength",
    vm: "1",
    version: "DICOM"
  },
  "(300A,007B)": {
    tag: "(300A,007B)",
    vr: "LT",
    name: "FractionPattern",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0080)": {
    tag: "(300A,0080)",
    vr: "IS",
    name: "NumberOfBeams",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0082)": {
    tag: "(300A,0082)",
    vr: "DS",
    name: "BeamDoseSpecificationPoint",
    vm: "3",
    version: "DICOM"
  },
  "(300A,0083)": {
    tag: "(300A,0083)",
    vr: "UI",
    name: "ReferencedDoseReferenceUID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0084)": {
    tag: "(300A,0084)",
    vr: "DS",
    name: "BeamDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0086)": {
    tag: "(300A,0086)",
    vr: "DS",
    name: "BeamMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(300A,008B)": {
    tag: "(300A,008B)",
    vr: "CS",
    name: "BeamDoseMeaning",
    vm: "1",
    version: "DICOM"
  },
  "(300A,008C)": {
    tag: "(300A,008C)",
    vr: "SQ",
    name: "BeamDoseVerificationControlPointSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,008D)": {
    tag: "(300A,008D)",
    vr: "FL",
    name: "AverageBeamDosePointDepth",
    vm: "1",
    version: "DICOM"
  },
  "(300A,008E)": {
    tag: "(300A,008E)",
    vr: "FL",
    name: "AverageBeamDosePointEquivalentDepth",
    vm: "1",
    version: "DICOM"
  },
  "(300A,008F)": {
    tag: "(300A,008F)",
    vr: "FL",
    name: "AverageBeamDosePointSSD",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0090)": {
    tag: "(300A,0090)",
    vr: "CS",
    name: "BeamDoseType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0091)": {
    tag: "(300A,0091)",
    vr: "DS",
    name: "AlternateBeamDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0092)": {
    tag: "(300A,0092)",
    vr: "CS",
    name: "AlternateBeamDoseType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0093)": {
    tag: "(300A,0093)",
    vr: "CS",
    name: "DepthValueAveragingFlag",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0094)": {
    tag: "(300A,0094)",
    vr: "DS",
    name: "BeamDosePointSourceToExternalContourDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00A0)": {
    tag: "(300A,00A0)",
    vr: "IS",
    name: "NumberOfBrachyApplicationSetups",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00A2)": {
    tag: "(300A,00A2)",
    vr: "DS",
    name: "BrachyApplicationSetupDoseSpecificationPoint",
    vm: "3",
    version: "DICOM"
  },
  "(300A,00A4)": {
    tag: "(300A,00A4)",
    vr: "DS",
    name: "BrachyApplicationSetupDose",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00B0)": {
    tag: "(300A,00B0)",
    vr: "SQ",
    name: "BeamSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00B2)": {
    tag: "(300A,00B2)",
    vr: "SH",
    name: "TreatmentMachineName",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00B3)": {
    tag: "(300A,00B3)",
    vr: "CS",
    name: "PrimaryDosimeterUnit",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00B4)": {
    tag: "(300A,00B4)",
    vr: "DS",
    name: "SourceAxisDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00B6)": {
    tag: "(300A,00B6)",
    vr: "SQ",
    name: "BeamLimitingDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00B8)": {
    tag: "(300A,00B8)",
    vr: "CS",
    name: "RTBeamLimitingDeviceType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00BA)": {
    tag: "(300A,00BA)",
    vr: "DS",
    name: "SourceToBeamLimitingDeviceDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00BB)": {
    tag: "(300A,00BB)",
    vr: "FL",
    name: "IsocenterToBeamLimitingDeviceDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00BC)": {
    tag: "(300A,00BC)",
    vr: "IS",
    name: "NumberOfLeafJawPairs",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00BE)": {
    tag: "(300A,00BE)",
    vr: "DS",
    name: "LeafPositionBoundaries",
    vm: "3-n",
    version: "DICOM"
  },
  "(300A,00C0)": {
    tag: "(300A,00C0)",
    vr: "IS",
    name: "BeamNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00C2)": {
    tag: "(300A,00C2)",
    vr: "LO",
    name: "BeamName",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00C3)": {
    tag: "(300A,00C3)",
    vr: "ST",
    name: "BeamDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00C4)": {
    tag: "(300A,00C4)",
    vr: "CS",
    name: "BeamType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00C5)": {
    tag: "(300A,00C5)",
    vr: "FD",
    name: "BeamDeliveryDurationLimit",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00C6)": {
    tag: "(300A,00C6)",
    vr: "CS",
    name: "RadiationType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00C7)": {
    tag: "(300A,00C7)",
    vr: "CS",
    name: "HighDoseTechniqueType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00C8)": {
    tag: "(300A,00C8)",
    vr: "IS",
    name: "ReferenceImageNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00CA)": {
    tag: "(300A,00CA)",
    vr: "SQ",
    name: "PlannedVerificationImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00CC)": {
    tag: "(300A,00CC)",
    vr: "LO",
    name: "ImagingDeviceSpecificAcquisitionParameters",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,00CE)": {
    tag: "(300A,00CE)",
    vr: "CS",
    name: "TreatmentDeliveryType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00D0)": {
    tag: "(300A,00D0)",
    vr: "IS",
    name: "NumberOfWedges",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00D1)": {
    tag: "(300A,00D1)",
    vr: "SQ",
    name: "WedgeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00D2)": {
    tag: "(300A,00D2)",
    vr: "IS",
    name: "WedgeNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00D3)": {
    tag: "(300A,00D3)",
    vr: "CS",
    name: "WedgeType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00D4)": {
    tag: "(300A,00D4)",
    vr: "SH",
    name: "WedgeID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00D5)": {
    tag: "(300A,00D5)",
    vr: "IS",
    name: "WedgeAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00D6)": {
    tag: "(300A,00D6)",
    vr: "DS",
    name: "WedgeFactor",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00D7)": {
    tag: "(300A,00D7)",
    vr: "FL",
    name: "TotalWedgeTrayWaterEquivalentThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00D8)": {
    tag: "(300A,00D8)",
    vr: "DS",
    name: "WedgeOrientation",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00D9)": {
    tag: "(300A,00D9)",
    vr: "FL",
    name: "IsocenterToWedgeTrayDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00DA)": {
    tag: "(300A,00DA)",
    vr: "DS",
    name: "SourceToWedgeTrayDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00DB)": {
    tag: "(300A,00DB)",
    vr: "FL",
    name: "WedgeThinEdgePosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00DC)": {
    tag: "(300A,00DC)",
    vr: "SH",
    name: "BolusID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00DD)": {
    tag: "(300A,00DD)",
    vr: "ST",
    name: "BolusDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00DE)": {
    tag: "(300A,00DE)",
    vr: "DS",
    name: "EffectiveWedgeAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00E0)": {
    tag: "(300A,00E0)",
    vr: "IS",
    name: "NumberOfCompensators",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00E1)": {
    tag: "(300A,00E1)",
    vr: "SH",
    name: "MaterialID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00E2)": {
    tag: "(300A,00E2)",
    vr: "DS",
    name: "TotalCompensatorTrayFactor",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00E3)": {
    tag: "(300A,00E3)",
    vr: "SQ",
    name: "CompensatorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00E4)": {
    tag: "(300A,00E4)",
    vr: "IS",
    name: "CompensatorNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00E5)": {
    tag: "(300A,00E5)",
    vr: "SH",
    name: "CompensatorID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00E6)": {
    tag: "(300A,00E6)",
    vr: "DS",
    name: "SourceToCompensatorTrayDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00E7)": {
    tag: "(300A,00E7)",
    vr: "IS",
    name: "CompensatorRows",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00E8)": {
    tag: "(300A,00E8)",
    vr: "IS",
    name: "CompensatorColumns",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00E9)": {
    tag: "(300A,00E9)",
    vr: "DS",
    name: "CompensatorPixelSpacing",
    vm: "2",
    version: "DICOM"
  },
  "(300A,00EA)": {
    tag: "(300A,00EA)",
    vr: "DS",
    name: "CompensatorPosition",
    vm: "2",
    version: "DICOM"
  },
  "(300A,00EB)": {
    tag: "(300A,00EB)",
    vr: "DS",
    name: "CompensatorTransmissionData",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,00EC)": {
    tag: "(300A,00EC)",
    vr: "DS",
    name: "CompensatorThicknessData",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,00ED)": {
    tag: "(300A,00ED)",
    vr: "IS",
    name: "NumberOfBoli",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00EE)": {
    tag: "(300A,00EE)",
    vr: "CS",
    name: "CompensatorType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00EF)": {
    tag: "(300A,00EF)",
    vr: "SH",
    name: "CompensatorTrayID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00F0)": {
    tag: "(300A,00F0)",
    vr: "IS",
    name: "NumberOfBlocks",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00F2)": {
    tag: "(300A,00F2)",
    vr: "DS",
    name: "TotalBlockTrayFactor",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00F3)": {
    tag: "(300A,00F3)",
    vr: "FL",
    name: "TotalBlockTrayWaterEquivalentThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00F4)": {
    tag: "(300A,00F4)",
    vr: "SQ",
    name: "BlockSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00F5)": {
    tag: "(300A,00F5)",
    vr: "SH",
    name: "BlockTrayID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00F6)": {
    tag: "(300A,00F6)",
    vr: "DS",
    name: "SourceToBlockTrayDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00F7)": {
    tag: "(300A,00F7)",
    vr: "FL",
    name: "IsocenterToBlockTrayDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00F8)": {
    tag: "(300A,00F8)",
    vr: "CS",
    name: "BlockType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00F9)": {
    tag: "(300A,00F9)",
    vr: "LO",
    name: "AccessoryCode",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00FA)": {
    tag: "(300A,00FA)",
    vr: "CS",
    name: "BlockDivergence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00FB)": {
    tag: "(300A,00FB)",
    vr: "CS",
    name: "BlockMountingPosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00FC)": {
    tag: "(300A,00FC)",
    vr: "IS",
    name: "BlockNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,00FE)": {
    tag: "(300A,00FE)",
    vr: "LO",
    name: "BlockName",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0100)": {
    tag: "(300A,0100)",
    vr: "DS",
    name: "BlockThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0102)": {
    tag: "(300A,0102)",
    vr: "DS",
    name: "BlockTransmission",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0104)": {
    tag: "(300A,0104)",
    vr: "IS",
    name: "BlockNumberOfPoints",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0106)": {
    tag: "(300A,0106)",
    vr: "DS",
    name: "BlockData",
    vm: "2-2n",
    version: "DICOM"
  },
  "(300A,0107)": {
    tag: "(300A,0107)",
    vr: "SQ",
    name: "ApplicatorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0108)": {
    tag: "(300A,0108)",
    vr: "SH",
    name: "ApplicatorID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0109)": {
    tag: "(300A,0109)",
    vr: "CS",
    name: "ApplicatorType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,010A)": {
    tag: "(300A,010A)",
    vr: "LO",
    name: "ApplicatorDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,010C)": {
    tag: "(300A,010C)",
    vr: "DS",
    name: "CumulativeDoseReferenceCoefficient",
    vm: "1",
    version: "DICOM"
  },
  "(300A,010E)": {
    tag: "(300A,010E)",
    vr: "DS",
    name: "FinalCumulativeMetersetWeight",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0110)": {
    tag: "(300A,0110)",
    vr: "IS",
    name: "NumberOfControlPoints",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0111)": {
    tag: "(300A,0111)",
    vr: "SQ",
    name: "ControlPointSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0112)": {
    tag: "(300A,0112)",
    vr: "IS",
    name: "ControlPointIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0114)": {
    tag: "(300A,0114)",
    vr: "DS",
    name: "NominalBeamEnergy",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0115)": {
    tag: "(300A,0115)",
    vr: "DS",
    name: "DoseRateSet",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0116)": {
    tag: "(300A,0116)",
    vr: "SQ",
    name: "WedgePositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0118)": {
    tag: "(300A,0118)",
    vr: "CS",
    name: "WedgePosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,011A)": {
    tag: "(300A,011A)",
    vr: "SQ",
    name: "BeamLimitingDevicePositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,011C)": {
    tag: "(300A,011C)",
    vr: "DS",
    name: "LeafJawPositions",
    vm: "2-2n",
    version: "DICOM"
  },
  "(300A,011E)": {
    tag: "(300A,011E)",
    vr: "DS",
    name: "GantryAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,011F)": {
    tag: "(300A,011F)",
    vr: "CS",
    name: "GantryRotationDirection",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0120)": {
    tag: "(300A,0120)",
    vr: "DS",
    name: "BeamLimitingDeviceAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0121)": {
    tag: "(300A,0121)",
    vr: "CS",
    name: "BeamLimitingDeviceRotationDirection",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0122)": {
    tag: "(300A,0122)",
    vr: "DS",
    name: "PatientSupportAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0123)": {
    tag: "(300A,0123)",
    vr: "CS",
    name: "PatientSupportRotationDirection",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0124)": {
    tag: "(300A,0124)",
    vr: "DS",
    name: "TableTopEccentricAxisDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0125)": {
    tag: "(300A,0125)",
    vr: "DS",
    name: "TableTopEccentricAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0126)": {
    tag: "(300A,0126)",
    vr: "CS",
    name: "TableTopEccentricRotationDirection",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0128)": {
    tag: "(300A,0128)",
    vr: "DS",
    name: "TableTopVerticalPosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0129)": {
    tag: "(300A,0129)",
    vr: "DS",
    name: "TableTopLongitudinalPosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,012A)": {
    tag: "(300A,012A)",
    vr: "DS",
    name: "TableTopLateralPosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,012C)": {
    tag: "(300A,012C)",
    vr: "DS",
    name: "IsocenterPosition",
    vm: "3",
    version: "DICOM"
  },
  "(300A,012E)": {
    tag: "(300A,012E)",
    vr: "DS",
    name: "SurfaceEntryPoint",
    vm: "3",
    version: "DICOM"
  },
  "(300A,0130)": {
    tag: "(300A,0130)",
    vr: "DS",
    name: "SourceToSurfaceDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0131)": {
    tag: "(300A,0131)",
    vr: "FL",
    name: "AverageBeamDosePointSourceToExternalContourSurfaceDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0132)": {
    tag: "(300A,0132)",
    vr: "FL",
    name: "SourceToExternalContourDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0133)": {
    tag: "(300A,0133)",
    vr: "FL",
    name: "ExternalContourEntryPoint",
    vm: "3",
    version: "DICOM"
  },
  "(300A,0134)": {
    tag: "(300A,0134)",
    vr: "DS",
    name: "CumulativeMetersetWeight",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0140)": {
    tag: "(300A,0140)",
    vr: "FL",
    name: "TableTopPitchAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0142)": {
    tag: "(300A,0142)",
    vr: "CS",
    name: "TableTopPitchRotationDirection",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0144)": {
    tag: "(300A,0144)",
    vr: "FL",
    name: "TableTopRollAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0146)": {
    tag: "(300A,0146)",
    vr: "CS",
    name: "TableTopRollRotationDirection",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0148)": {
    tag: "(300A,0148)",
    vr: "FL",
    name: "HeadFixationAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,014A)": {
    tag: "(300A,014A)",
    vr: "FL",
    name: "GantryPitchAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,014C)": {
    tag: "(300A,014C)",
    vr: "CS",
    name: "GantryPitchRotationDirection",
    vm: "1",
    version: "DICOM"
  },
  "(300A,014E)": {
    tag: "(300A,014E)",
    vr: "FL",
    name: "GantryPitchAngleTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0150)": {
    tag: "(300A,0150)",
    vr: "CS",
    name: "FixationEye",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0151)": {
    tag: "(300A,0151)",
    vr: "DS",
    name: "ChairHeadFramePosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0152)": {
    tag: "(300A,0152)",
    vr: "DS",
    name: "HeadFixationAngleTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0153)": {
    tag: "(300A,0153)",
    vr: "DS",
    name: "ChairHeadFramePositionTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0154)": {
    tag: "(300A,0154)",
    vr: "DS",
    name: "FixationLightAzimuthalAngleTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0155)": {
    tag: "(300A,0155)",
    vr: "DS",
    name: "FixationLightPolarAngleTolerance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0180)": {
    tag: "(300A,0180)",
    vr: "SQ",
    name: "PatientSetupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0182)": {
    tag: "(300A,0182)",
    vr: "IS",
    name: "PatientSetupNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0183)": {
    tag: "(300A,0183)",
    vr: "LO",
    name: "PatientSetupLabel",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0184)": {
    tag: "(300A,0184)",
    vr: "LO",
    name: "PatientAdditionalPosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0190)": {
    tag: "(300A,0190)",
    vr: "SQ",
    name: "FixationDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0192)": {
    tag: "(300A,0192)",
    vr: "CS",
    name: "FixationDeviceType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0194)": {
    tag: "(300A,0194)",
    vr: "SH",
    name: "FixationDeviceLabel",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0196)": {
    tag: "(300A,0196)",
    vr: "ST",
    name: "FixationDeviceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0198)": {
    tag: "(300A,0198)",
    vr: "SH",
    name: "FixationDevicePosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0199)": {
    tag: "(300A,0199)",
    vr: "FL",
    name: "FixationDevicePitchAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,019A)": {
    tag: "(300A,019A)",
    vr: "FL",
    name: "FixationDeviceRollAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01A0)": {
    tag: "(300A,01A0)",
    vr: "SQ",
    name: "ShieldingDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01A2)": {
    tag: "(300A,01A2)",
    vr: "CS",
    name: "ShieldingDeviceType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01A4)": {
    tag: "(300A,01A4)",
    vr: "SH",
    name: "ShieldingDeviceLabel",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01A6)": {
    tag: "(300A,01A6)",
    vr: "ST",
    name: "ShieldingDeviceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01A8)": {
    tag: "(300A,01A8)",
    vr: "SH",
    name: "ShieldingDevicePosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01B0)": {
    tag: "(300A,01B0)",
    vr: "CS",
    name: "SetupTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01B2)": {
    tag: "(300A,01B2)",
    vr: "ST",
    name: "SetupTechniqueDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01B4)": {
    tag: "(300A,01B4)",
    vr: "SQ",
    name: "SetupDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01B6)": {
    tag: "(300A,01B6)",
    vr: "CS",
    name: "SetupDeviceType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01B8)": {
    tag: "(300A,01B8)",
    vr: "SH",
    name: "SetupDeviceLabel",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01BA)": {
    tag: "(300A,01BA)",
    vr: "ST",
    name: "SetupDeviceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01BC)": {
    tag: "(300A,01BC)",
    vr: "DS",
    name: "SetupDeviceParameter",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01D0)": {
    tag: "(300A,01D0)",
    vr: "ST",
    name: "SetupReferenceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01D2)": {
    tag: "(300A,01D2)",
    vr: "DS",
    name: "TableTopVerticalSetupDisplacement",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01D4)": {
    tag: "(300A,01D4)",
    vr: "DS",
    name: "TableTopLongitudinalSetupDisplacement",
    vm: "1",
    version: "DICOM"
  },
  "(300A,01D6)": {
    tag: "(300A,01D6)",
    vr: "DS",
    name: "TableTopLateralSetupDisplacement",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0200)": {
    tag: "(300A,0200)",
    vr: "CS",
    name: "BrachyTreatmentTechnique",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0202)": {
    tag: "(300A,0202)",
    vr: "CS",
    name: "BrachyTreatmentType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0206)": {
    tag: "(300A,0206)",
    vr: "SQ",
    name: "TreatmentMachineSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0210)": {
    tag: "(300A,0210)",
    vr: "SQ",
    name: "SourceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0212)": {
    tag: "(300A,0212)",
    vr: "IS",
    name: "SourceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0214)": {
    tag: "(300A,0214)",
    vr: "CS",
    name: "SourceType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0216)": {
    tag: "(300A,0216)",
    vr: "LO",
    name: "SourceManufacturer",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0218)": {
    tag: "(300A,0218)",
    vr: "DS",
    name: "ActiveSourceDiameter",
    vm: "1",
    version: "DICOM"
  },
  "(300A,021A)": {
    tag: "(300A,021A)",
    vr: "DS",
    name: "ActiveSourceLength",
    vm: "1",
    version: "DICOM"
  },
  "(300A,021B)": {
    tag: "(300A,021B)",
    vr: "SH",
    name: "SourceModelID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,021C)": {
    tag: "(300A,021C)",
    vr: "LO",
    name: "SourceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0222)": {
    tag: "(300A,0222)",
    vr: "DS",
    name: "SourceEncapsulationNominalThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0224)": {
    tag: "(300A,0224)",
    vr: "DS",
    name: "SourceEncapsulationNominalTransmission",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0226)": {
    tag: "(300A,0226)",
    vr: "LO",
    name: "SourceIsotopeName",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0228)": {
    tag: "(300A,0228)",
    vr: "DS",
    name: "SourceIsotopeHalfLife",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0229)": {
    tag: "(300A,0229)",
    vr: "CS",
    name: "SourceStrengthUnits",
    vm: "1",
    version: "DICOM"
  },
  "(300A,022A)": {
    tag: "(300A,022A)",
    vr: "DS",
    name: "ReferenceAirKermaRate",
    vm: "1",
    version: "DICOM"
  },
  "(300A,022B)": {
    tag: "(300A,022B)",
    vr: "DS",
    name: "SourceStrength",
    vm: "1",
    version: "DICOM"
  },
  "(300A,022C)": {
    tag: "(300A,022C)",
    vr: "DA",
    name: "SourceStrengthReferenceDate",
    vm: "1",
    version: "DICOM"
  },
  "(300A,022E)": {
    tag: "(300A,022E)",
    vr: "TM",
    name: "SourceStrengthReferenceTime",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0230)": {
    tag: "(300A,0230)",
    vr: "SQ",
    name: "ApplicationSetupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0232)": {
    tag: "(300A,0232)",
    vr: "CS",
    name: "ApplicationSetupType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0234)": {
    tag: "(300A,0234)",
    vr: "IS",
    name: "ApplicationSetupNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0236)": {
    tag: "(300A,0236)",
    vr: "LO",
    name: "ApplicationSetupName",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0238)": {
    tag: "(300A,0238)",
    vr: "LO",
    name: "ApplicationSetupManufacturer",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0240)": {
    tag: "(300A,0240)",
    vr: "IS",
    name: "TemplateNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0242)": {
    tag: "(300A,0242)",
    vr: "SH",
    name: "TemplateType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0244)": {
    tag: "(300A,0244)",
    vr: "LO",
    name: "TemplateName",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0250)": {
    tag: "(300A,0250)",
    vr: "DS",
    name: "TotalReferenceAirKerma",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0260)": {
    tag: "(300A,0260)",
    vr: "SQ",
    name: "BrachyAccessoryDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0262)": {
    tag: "(300A,0262)",
    vr: "IS",
    name: "BrachyAccessoryDeviceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0263)": {
    tag: "(300A,0263)",
    vr: "SH",
    name: "BrachyAccessoryDeviceID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0264)": {
    tag: "(300A,0264)",
    vr: "CS",
    name: "BrachyAccessoryDeviceType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0266)": {
    tag: "(300A,0266)",
    vr: "LO",
    name: "BrachyAccessoryDeviceName",
    vm: "1",
    version: "DICOM"
  },
  "(300A,026A)": {
    tag: "(300A,026A)",
    vr: "DS",
    name: "BrachyAccessoryDeviceNominalThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,026C)": {
    tag: "(300A,026C)",
    vr: "DS",
    name: "BrachyAccessoryDeviceNominalTransmission",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0271)": {
    tag: "(300A,0271)",
    vr: "DS",
    name: "ChannelEffectiveLength",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0272)": {
    tag: "(300A,0272)",
    vr: "DS",
    name: "ChannelInnerLength",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0273)": {
    tag: "(300A,0273)",
    vr: "SH",
    name: "AfterloaderChannelID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0274)": {
    tag: "(300A,0274)",
    vr: "DS",
    name: "SourceApplicatorTipLength",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0280)": {
    tag: "(300A,0280)",
    vr: "SQ",
    name: "ChannelSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0282)": {
    tag: "(300A,0282)",
    vr: "IS",
    name: "ChannelNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0284)": {
    tag: "(300A,0284)",
    vr: "DS",
    name: "ChannelLength",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0286)": {
    tag: "(300A,0286)",
    vr: "DS",
    name: "ChannelTotalTime",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0288)": {
    tag: "(300A,0288)",
    vr: "CS",
    name: "SourceMovementType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,028A)": {
    tag: "(300A,028A)",
    vr: "IS",
    name: "NumberOfPulses",
    vm: "1",
    version: "DICOM"
  },
  "(300A,028C)": {
    tag: "(300A,028C)",
    vr: "DS",
    name: "PulseRepetitionInterval",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0290)": {
    tag: "(300A,0290)",
    vr: "IS",
    name: "SourceApplicatorNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0291)": {
    tag: "(300A,0291)",
    vr: "SH",
    name: "SourceApplicatorID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0292)": {
    tag: "(300A,0292)",
    vr: "CS",
    name: "SourceApplicatorType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0294)": {
    tag: "(300A,0294)",
    vr: "LO",
    name: "SourceApplicatorName",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0296)": {
    tag: "(300A,0296)",
    vr: "DS",
    name: "SourceApplicatorLength",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0298)": {
    tag: "(300A,0298)",
    vr: "LO",
    name: "SourceApplicatorManufacturer",
    vm: "1",
    version: "DICOM"
  },
  "(300A,029C)": {
    tag: "(300A,029C)",
    vr: "DS",
    name: "SourceApplicatorWallNominalThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,029E)": {
    tag: "(300A,029E)",
    vr: "DS",
    name: "SourceApplicatorWallNominalTransmission",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02A0)": {
    tag: "(300A,02A0)",
    vr: "DS",
    name: "SourceApplicatorStepSize",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02A2)": {
    tag: "(300A,02A2)",
    vr: "IS",
    name: "TransferTubeNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02A4)": {
    tag: "(300A,02A4)",
    vr: "DS",
    name: "TransferTubeLength",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02B0)": {
    tag: "(300A,02B0)",
    vr: "SQ",
    name: "ChannelShieldSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02B2)": {
    tag: "(300A,02B2)",
    vr: "IS",
    name: "ChannelShieldNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02B3)": {
    tag: "(300A,02B3)",
    vr: "SH",
    name: "ChannelShieldID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02B4)": {
    tag: "(300A,02B4)",
    vr: "LO",
    name: "ChannelShieldName",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02B8)": {
    tag: "(300A,02B8)",
    vr: "DS",
    name: "ChannelShieldNominalThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02BA)": {
    tag: "(300A,02BA)",
    vr: "DS",
    name: "ChannelShieldNominalTransmission",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02C8)": {
    tag: "(300A,02C8)",
    vr: "DS",
    name: "FinalCumulativeTimeWeight",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02D0)": {
    tag: "(300A,02D0)",
    vr: "SQ",
    name: "BrachyControlPointSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02D2)": {
    tag: "(300A,02D2)",
    vr: "DS",
    name: "ControlPointRelativePosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02D4)": {
    tag: "(300A,02D4)",
    vr: "DS",
    name: "ControlPoint3DPosition",
    vm: "3",
    version: "DICOM"
  },
  "(300A,02D6)": {
    tag: "(300A,02D6)",
    vr: "DS",
    name: "CumulativeTimeWeight",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02E0)": {
    tag: "(300A,02E0)",
    vr: "CS",
    name: "CompensatorDivergence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02E1)": {
    tag: "(300A,02E1)",
    vr: "CS",
    name: "CompensatorMountingPosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02E2)": {
    tag: "(300A,02E2)",
    vr: "DS",
    name: "SourceToCompensatorDistance",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,02E3)": {
    tag: "(300A,02E3)",
    vr: "FL",
    name: "TotalCompensatorTrayWaterEquivalentThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02E4)": {
    tag: "(300A,02E4)",
    vr: "FL",
    name: "IsocenterToCompensatorTrayDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02E5)": {
    tag: "(300A,02E5)",
    vr: "FL",
    name: "CompensatorColumnOffset",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02E6)": {
    tag: "(300A,02E6)",
    vr: "FL",
    name: "IsocenterToCompensatorDistances",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,02E7)": {
    tag: "(300A,02E7)",
    vr: "FL",
    name: "CompensatorRelativeStoppingPowerRatio",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02E8)": {
    tag: "(300A,02E8)",
    vr: "FL",
    name: "CompensatorMillingToolDiameter",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02EA)": {
    tag: "(300A,02EA)",
    vr: "SQ",
    name: "IonRangeCompensatorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,02EB)": {
    tag: "(300A,02EB)",
    vr: "LT",
    name: "CompensatorDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0302)": {
    tag: "(300A,0302)",
    vr: "IS",
    name: "RadiationMassNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0304)": {
    tag: "(300A,0304)",
    vr: "IS",
    name: "RadiationAtomicNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0306)": {
    tag: "(300A,0306)",
    vr: "SS",
    name: "RadiationChargeState",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0308)": {
    tag: "(300A,0308)",
    vr: "CS",
    name: "ScanMode",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0309)": {
    tag: "(300A,0309)",
    vr: "CS",
    name: "ModulatedScanModeType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,030A)": {
    tag: "(300A,030A)",
    vr: "FL",
    name: "VirtualSourceAxisDistances",
    vm: "2",
    version: "DICOM"
  },
  "(300A,030C)": {
    tag: "(300A,030C)",
    vr: "SQ",
    name: "SnoutSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,030D)": {
    tag: "(300A,030D)",
    vr: "FL",
    name: "SnoutPosition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,030F)": {
    tag: "(300A,030F)",
    vr: "SH",
    name: "SnoutID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0312)": {
    tag: "(300A,0312)",
    vr: "IS",
    name: "NumberOfRangeShifters",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0314)": {
    tag: "(300A,0314)",
    vr: "SQ",
    name: "RangeShifterSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0316)": {
    tag: "(300A,0316)",
    vr: "IS",
    name: "RangeShifterNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0318)": {
    tag: "(300A,0318)",
    vr: "SH",
    name: "RangeShifterID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0320)": {
    tag: "(300A,0320)",
    vr: "CS",
    name: "RangeShifterType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0322)": {
    tag: "(300A,0322)",
    vr: "LO",
    name: "RangeShifterDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0330)": {
    tag: "(300A,0330)",
    vr: "IS",
    name: "NumberOfLateralSpreadingDevices",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0332)": {
    tag: "(300A,0332)",
    vr: "SQ",
    name: "LateralSpreadingDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0334)": {
    tag: "(300A,0334)",
    vr: "IS",
    name: "LateralSpreadingDeviceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0336)": {
    tag: "(300A,0336)",
    vr: "SH",
    name: "LateralSpreadingDeviceID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0338)": {
    tag: "(300A,0338)",
    vr: "CS",
    name: "LateralSpreadingDeviceType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,033A)": {
    tag: "(300A,033A)",
    vr: "LO",
    name: "LateralSpreadingDeviceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,033C)": {
    tag: "(300A,033C)",
    vr: "FL",
    name: "LateralSpreadingDeviceWaterEquivalentThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0340)": {
    tag: "(300A,0340)",
    vr: "IS",
    name: "NumberOfRangeModulators",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0342)": {
    tag: "(300A,0342)",
    vr: "SQ",
    name: "RangeModulatorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0344)": {
    tag: "(300A,0344)",
    vr: "IS",
    name: "RangeModulatorNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0346)": {
    tag: "(300A,0346)",
    vr: "SH",
    name: "RangeModulatorID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0348)": {
    tag: "(300A,0348)",
    vr: "CS",
    name: "RangeModulatorType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,034A)": {
    tag: "(300A,034A)",
    vr: "LO",
    name: "RangeModulatorDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,034C)": {
    tag: "(300A,034C)",
    vr: "SH",
    name: "BeamCurrentModulationID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0350)": {
    tag: "(300A,0350)",
    vr: "CS",
    name: "PatientSupportType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0352)": {
    tag: "(300A,0352)",
    vr: "SH",
    name: "PatientSupportID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0354)": {
    tag: "(300A,0354)",
    vr: "LO",
    name: "PatientSupportAccessoryCode",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0355)": {
    tag: "(300A,0355)",
    vr: "LO",
    name: "TrayAccessoryCode",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0356)": {
    tag: "(300A,0356)",
    vr: "FL",
    name: "FixationLightAzimuthalAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0358)": {
    tag: "(300A,0358)",
    vr: "FL",
    name: "FixationLightPolarAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,035A)": {
    tag: "(300A,035A)",
    vr: "FL",
    name: "MetersetRate",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0360)": {
    tag: "(300A,0360)",
    vr: "SQ",
    name: "RangeShifterSettingsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0362)": {
    tag: "(300A,0362)",
    vr: "LO",
    name: "RangeShifterSetting",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0364)": {
    tag: "(300A,0364)",
    vr: "FL",
    name: "IsocenterToRangeShifterDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0366)": {
    tag: "(300A,0366)",
    vr: "FL",
    name: "RangeShifterWaterEquivalentThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0370)": {
    tag: "(300A,0370)",
    vr: "SQ",
    name: "LateralSpreadingDeviceSettingsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0372)": {
    tag: "(300A,0372)",
    vr: "LO",
    name: "LateralSpreadingDeviceSetting",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0374)": {
    tag: "(300A,0374)",
    vr: "FL",
    name: "IsocenterToLateralSpreadingDeviceDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0380)": {
    tag: "(300A,0380)",
    vr: "SQ",
    name: "RangeModulatorSettingsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0382)": {
    tag: "(300A,0382)",
    vr: "FL",
    name: "RangeModulatorGatingStartValue",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0384)": {
    tag: "(300A,0384)",
    vr: "FL",
    name: "RangeModulatorGatingStopValue",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0386)": {
    tag: "(300A,0386)",
    vr: "FL",
    name: "RangeModulatorGatingStartWaterEquivalentThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0388)": {
    tag: "(300A,0388)",
    vr: "FL",
    name: "RangeModulatorGatingStopWaterEquivalentThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,038A)": {
    tag: "(300A,038A)",
    vr: "FL",
    name: "IsocenterToRangeModulatorDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,038F)": {
    tag: "(300A,038F)",
    vr: "FL",
    name: "ScanSpotTimeOffset",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,0390)": {
    tag: "(300A,0390)",
    vr: "SH",
    name: "ScanSpotTuneID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0391)": {
    tag: "(300A,0391)",
    vr: "IS",
    name: "ScanSpotPrescribedIndices",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,0392)": {
    tag: "(300A,0392)",
    vr: "IS",
    name: "NumberOfScanSpotPositions",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0393)": {
    tag: "(300A,0393)",
    vr: "CS",
    name: "ScanSpotReordered",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0394)": {
    tag: "(300A,0394)",
    vr: "FL",
    name: "ScanSpotPositionMap",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,0395)": {
    tag: "(300A,0395)",
    vr: "CS",
    name: "ScanSpotReorderingAllowed",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0396)": {
    tag: "(300A,0396)",
    vr: "FL",
    name: "ScanSpotMetersetWeights",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,0398)": {
    tag: "(300A,0398)",
    vr: "FL",
    name: "ScanningSpotSize",
    vm: "2",
    version: "DICOM"
  },
  "(300A,0399)": {
    tag: "(300A,0399)",
    vr: "FL",
    name: "ScanSpotSizesDelivered",
    vm: "2-2n",
    version: "DICOM"
  },
  "(300A,039A)": {
    tag: "(300A,039A)",
    vr: "IS",
    name: "NumberOfPaintings",
    vm: "1",
    version: "DICOM"
  },
  "(300A,03A0)": {
    tag: "(300A,03A0)",
    vr: "SQ",
    name: "IonToleranceTableSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,03A2)": {
    tag: "(300A,03A2)",
    vr: "SQ",
    name: "IonBeamSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,03A4)": {
    tag: "(300A,03A4)",
    vr: "SQ",
    name: "IonBeamLimitingDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,03A6)": {
    tag: "(300A,03A6)",
    vr: "SQ",
    name: "IonBlockSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,03A8)": {
    tag: "(300A,03A8)",
    vr: "SQ",
    name: "IonControlPointSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,03AA)": {
    tag: "(300A,03AA)",
    vr: "SQ",
    name: "IonWedgeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,03AC)": {
    tag: "(300A,03AC)",
    vr: "SQ",
    name: "IonWedgePositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0401)": {
    tag: "(300A,0401)",
    vr: "SQ",
    name: "ReferencedSetupImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0402)": {
    tag: "(300A,0402)",
    vr: "ST",
    name: "SetupImageComment",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0410)": {
    tag: "(300A,0410)",
    vr: "SQ",
    name: "MotionSynchronizationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0412)": {
    tag: "(300A,0412)",
    vr: "FL",
    name: "ControlPointOrientation",
    vm: "3",
    version: "DICOM"
  },
  "(300A,0420)": {
    tag: "(300A,0420)",
    vr: "SQ",
    name: "GeneralAccessorySequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0421)": {
    tag: "(300A,0421)",
    vr: "SH",
    name: "GeneralAccessoryID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0422)": {
    tag: "(300A,0422)",
    vr: "ST",
    name: "GeneralAccessoryDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0423)": {
    tag: "(300A,0423)",
    vr: "CS",
    name: "GeneralAccessoryType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0424)": {
    tag: "(300A,0424)",
    vr: "IS",
    name: "GeneralAccessoryNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0425)": {
    tag: "(300A,0425)",
    vr: "FL",
    name: "SourceToGeneralAccessoryDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0426)": {
    tag: "(300A,0426)",
    vr: "DS",
    name: "IsocenterToGeneralAccessoryDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0431)": {
    tag: "(300A,0431)",
    vr: "SQ",
    name: "ApplicatorGeometrySequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0432)": {
    tag: "(300A,0432)",
    vr: "CS",
    name: "ApplicatorApertureShape",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0433)": {
    tag: "(300A,0433)",
    vr: "FL",
    name: "ApplicatorOpening",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0434)": {
    tag: "(300A,0434)",
    vr: "FL",
    name: "ApplicatorOpeningX",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0435)": {
    tag: "(300A,0435)",
    vr: "FL",
    name: "ApplicatorOpeningY",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0436)": {
    tag: "(300A,0436)",
    vr: "FL",
    name: "SourceToApplicatorMountingPositionDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0440)": {
    tag: "(300A,0440)",
    vr: "IS",
    name: "NumberOfBlockSlabItems",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0441)": {
    tag: "(300A,0441)",
    vr: "SQ",
    name: "BlockSlabSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0442)": {
    tag: "(300A,0442)",
    vr: "DS",
    name: "BlockSlabThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0443)": {
    tag: "(300A,0443)",
    vr: "US",
    name: "BlockSlabNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0450)": {
    tag: "(300A,0450)",
    vr: "SQ",
    name: "DeviceMotionControlSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0451)": {
    tag: "(300A,0451)",
    vr: "CS",
    name: "DeviceMotionExecutionMode",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0452)": {
    tag: "(300A,0452)",
    vr: "CS",
    name: "DeviceMotionObservationMode",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0453)": {
    tag: "(300A,0453)",
    vr: "SQ",
    name: "DeviceMotionParameterCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0501)": {
    tag: "(300A,0501)",
    vr: "FL",
    name: "DistalDepthFraction",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0502)": {
    tag: "(300A,0502)",
    vr: "FL",
    name: "DistalDepth",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0503)": {
    tag: "(300A,0503)",
    vr: "FL",
    name: "NominalRangeModulationFractions",
    vm: "2",
    version: "DICOM"
  },
  "(300A,0504)": {
    tag: "(300A,0504)",
    vr: "FL",
    name: "NominalRangeModulatedRegionDepths",
    vm: "2",
    version: "DICOM"
  },
  "(300A,0505)": {
    tag: "(300A,0505)",
    vr: "SQ",
    name: "DepthDoseParametersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0506)": {
    tag: "(300A,0506)",
    vr: "SQ",
    name: "DeliveredDepthDoseParametersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0507)": {
    tag: "(300A,0507)",
    vr: "FL",
    name: "DeliveredDistalDepthFraction",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0508)": {
    tag: "(300A,0508)",
    vr: "FL",
    name: "DeliveredDistalDepth",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0509)": {
    tag: "(300A,0509)",
    vr: "FL",
    name: "DeliveredNominalRangeModulationFractions",
    vm: "2",
    version: "DICOM"
  },
  "(300A,0510)": {
    tag: "(300A,0510)",
    vr: "FL",
    name: "DeliveredNominalRangeModulatedRegionDepths",
    vm: "2",
    version: "DICOM"
  },
  "(300A,0511)": {
    tag: "(300A,0511)",
    vr: "CS",
    name: "DeliveredReferenceDoseDefinition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0512)": {
    tag: "(300A,0512)",
    vr: "CS",
    name: "ReferenceDoseDefinition",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0600)": {
    tag: "(300A,0600)",
    vr: "US",
    name: "RTControlPointIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0601)": {
    tag: "(300A,0601)",
    vr: "US",
    name: "RadiationGenerationModeIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0602)": {
    tag: "(300A,0602)",
    vr: "US",
    name: "ReferencedDefinedDeviceIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0603)": {
    tag: "(300A,0603)",
    vr: "US",
    name: "RadiationDoseIdentificationIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0604)": {
    tag: "(300A,0604)",
    vr: "US",
    name: "NumberOfRTControlPoints",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0605)": {
    tag: "(300A,0605)",
    vr: "US",
    name: "ReferencedRadiationGenerationModeIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0606)": {
    tag: "(300A,0606)",
    vr: "US",
    name: "TreatmentPositionIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0607)": {
    tag: "(300A,0607)",
    vr: "US",
    name: "ReferencedDeviceIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0608)": {
    tag: "(300A,0608)",
    vr: "LO",
    name: "TreatmentPositionGroupLabel",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0609)": {
    tag: "(300A,0609)",
    vr: "UI",
    name: "TreatmentPositionGroupUID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,060A)": {
    tag: "(300A,060A)",
    vr: "SQ",
    name: "TreatmentPositionGroupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,060B)": {
    tag: "(300A,060B)",
    vr: "US",
    name: "ReferencedTreatmentPositionIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,060C)": {
    tag: "(300A,060C)",
    vr: "US",
    name: "ReferencedRadiationDoseIdentificationIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,060D)": {
    tag: "(300A,060D)",
    vr: "FD",
    name: "RTAccessoryHolderWaterEquivalentThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,060E)": {
    tag: "(300A,060E)",
    vr: "US",
    name: "ReferencedRTAccessoryHolderDeviceIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,060F)": {
    tag: "(300A,060F)",
    vr: "CS",
    name: "RTAccessoryHolderSlotExistenceFlag",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0610)": {
    tag: "(300A,0610)",
    vr: "SQ",
    name: "RTAccessoryHolderSlotSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0611)": {
    tag: "(300A,0611)",
    vr: "LO",
    name: "RTAccessoryHolderSlotID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0612)": {
    tag: "(300A,0612)",
    vr: "FD",
    name: "RTAccessoryHolderSlotDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0613)": {
    tag: "(300A,0613)",
    vr: "FD",
    name: "RTAccessorySlotDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0614)": {
    tag: "(300A,0614)",
    vr: "SQ",
    name: "RTAccessoryHolderDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0615)": {
    tag: "(300A,0615)",
    vr: "LO",
    name: "RTAccessoryDeviceSlotID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0616)": {
    tag: "(300A,0616)",
    vr: "SQ",
    name: "RTRadiationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0617)": {
    tag: "(300A,0617)",
    vr: "SQ",
    name: "RadiationDoseSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0618)": {
    tag: "(300A,0618)",
    vr: "SQ",
    name: "RadiationDoseIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0619)": {
    tag: "(300A,0619)",
    vr: "LO",
    name: "RadiationDoseIdentificationLabel",
    vm: "1",
    version: "DICOM"
  },
  "(300A,061A)": {
    tag: "(300A,061A)",
    vr: "CS",
    name: "ReferenceDoseType",
    vm: "1",
    version: "DICOM"
  },
  "(300A,061B)": {
    tag: "(300A,061B)",
    vr: "CS",
    name: "PrimaryDoseValueIndicator",
    vm: "1",
    version: "DICOM"
  },
  "(300A,061C)": {
    tag: "(300A,061C)",
    vr: "SQ",
    name: "DoseValuesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,061D)": {
    tag: "(300A,061D)",
    vr: "CS",
    name: "DoseValuePurpose",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,061E)": {
    tag: "(300A,061E)",
    vr: "FD",
    name: "ReferenceDosePointCoordinates",
    vm: "3",
    version: "DICOM"
  },
  "(300A,061F)": {
    tag: "(300A,061F)",
    vr: "SQ",
    name: "RadiationDoseValuesParametersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0620)": {
    tag: "(300A,0620)",
    vr: "SQ",
    name: "MetersetToDoseMappingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0621)": {
    tag: "(300A,0621)",
    vr: "SQ",
    name: "ExpectedInVivoMeasurementValuesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0622)": {
    tag: "(300A,0622)",
    vr: "US",
    name: "ExpectedInVivoMeasurementValueIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0623)": {
    tag: "(300A,0623)",
    vr: "LO",
    name: "RadiationDoseInVivoMeasurementLabel",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0624)": {
    tag: "(300A,0624)",
    vr: "FD",
    name: "RadiationDoseCentralAxisDisplacement",
    vm: "2",
    version: "DICOM"
  },
  "(300A,0625)": {
    tag: "(300A,0625)",
    vr: "FD",
    name: "RadiationDoseValue",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0626)": {
    tag: "(300A,0626)",
    vr: "FD",
    name: "RadiationDoseSourceToSkinDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0627)": {
    tag: "(300A,0627)",
    vr: "FD",
    name: "RadiationDoseMeasurementPointCoordinates",
    vm: "3",
    version: "DICOM"
  },
  "(300A,0628)": {
    tag: "(300A,0628)",
    vr: "FD",
    name: "RadiationDoseSourceToExternalContourDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0629)": {
    tag: "(300A,0629)",
    vr: "SQ",
    name: "RTToleranceSetSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,062A)": {
    tag: "(300A,062A)",
    vr: "LO",
    name: "RTToleranceSetLabel",
    vm: "1",
    version: "DICOM"
  },
  "(300A,062B)": {
    tag: "(300A,062B)",
    vr: "SQ",
    name: "AttributeToleranceValuesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,062C)": {
    tag: "(300A,062C)",
    vr: "FD",
    name: "ToleranceValue",
    vm: "1",
    version: "DICOM"
  },
  "(300A,062D)": {
    tag: "(300A,062D)",
    vr: "SQ",
    name: "PatientSupportPositionToleranceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,062E)": {
    tag: "(300A,062E)",
    vr: "FD",
    name: "TreatmentTimeLimit",
    vm: "1",
    version: "DICOM"
  },
  "(300A,062F)": {
    tag: "(300A,062F)",
    vr: "SQ",
    name: "CArmPhotonElectronControlPointSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0630)": {
    tag: "(300A,0630)",
    vr: "SQ",
    name: "ReferencedRTRadiationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0631)": {
    tag: "(300A,0631)",
    vr: "SQ",
    name: "ReferencedRTInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0632)": {
    tag: "(300A,0632)",
    vr: "SQ",
    name: "ReferencedRTPatientSetupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0634)": {
    tag: "(300A,0634)",
    vr: "FD",
    name: "SourceToPatientSurfaceDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0635)": {
    tag: "(300A,0635)",
    vr: "SQ",
    name: "TreatmentMachineSpecialModeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0636)": {
    tag: "(300A,0636)",
    vr: "US",
    name: "IntendedNumberOfFractions",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0637)": {
    tag: "(300A,0637)",
    vr: "CS",
    name: "RTRadiationSetIntent",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0638)": {
    tag: "(300A,0638)",
    vr: "CS",
    name: "RTRadiationPhysicalAndGeometricContentDetailFlag",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0639)": {
    tag: "(300A,0639)",
    vr: "CS",
    name: "RTRecordFlag",
    vm: "1",
    version: "DICOM"
  },
  "(300A,063A)": {
    tag: "(300A,063A)",
    vr: "SQ",
    name: "TreatmentDeviceIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,063B)": {
    tag: "(300A,063B)",
    vr: "SQ",
    name: "ReferencedRTPhysicianIntentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,063C)": {
    tag: "(300A,063C)",
    vr: "FD",
    name: "CumulativeMeterset",
    vm: "1",
    version: "DICOM"
  },
  "(300A,063D)": {
    tag: "(300A,063D)",
    vr: "FD",
    name: "DeliveryRate",
    vm: "1",
    version: "DICOM"
  },
  "(300A,063E)": {
    tag: "(300A,063E)",
    vr: "SQ",
    name: "DeliveryRateUnitSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,063F)": {
    tag: "(300A,063F)",
    vr: "SQ",
    name: "TreatmentPositionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0640)": {
    tag: "(300A,0640)",
    vr: "FD",
    name: "RadiationSourceAxisDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0641)": {
    tag: "(300A,0641)",
    vr: "US",
    name: "NumberOfRTBeamLimitingDevices",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0642)": {
    tag: "(300A,0642)",
    vr: "FD",
    name: "RTBeamLimitingDeviceProximalDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0643)": {
    tag: "(300A,0643)",
    vr: "FD",
    name: "RTBeamLimitingDeviceDistalDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0644)": {
    tag: "(300A,0644)",
    vr: "SQ",
    name: "ParallelRTBeamDelimiterDeviceOrientationLabelCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0645)": {
    tag: "(300A,0645)",
    vr: "FD",
    name: "BeamModifierOrientationAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0646)": {
    tag: "(300A,0646)",
    vr: "SQ",
    name: "FixedRTBeamDelimiterDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0647)": {
    tag: "(300A,0647)",
    vr: "SQ",
    name: "ParallelRTBeamDelimiterDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0648)": {
    tag: "(300A,0648)",
    vr: "US",
    name: "NumberOfParallelRTBeamDelimiters",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0649)": {
    tag: "(300A,0649)",
    vr: "FD",
    name: "ParallelRTBeamDelimiterBoundaries",
    vm: "2-n",
    version: "DICOM"
  },
  "(300A,064A)": {
    tag: "(300A,064A)",
    vr: "FD",
    name: "ParallelRTBeamDelimiterPositions",
    vm: "2-n",
    version: "DICOM"
  },
  "(300A,064B)": {
    tag: "(300A,064B)",
    vr: "FD",
    name: "RTBeamLimitingDeviceOffset",
    vm: "2",
    version: "DICOM"
  },
  "(300A,064C)": {
    tag: "(300A,064C)",
    vr: "SQ",
    name: "RTBeamDelimiterGeometrySequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,064D)": {
    tag: "(300A,064D)",
    vr: "SQ",
    name: "RTBeamLimitingDeviceDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,064E)": {
    tag: "(300A,064E)",
    vr: "CS",
    name: "ParallelRTBeamDelimiterOpeningMode",
    vm: "1",
    version: "DICOM"
  },
  "(300A,064F)": {
    tag: "(300A,064F)",
    vr: "CS",
    name: "ParallelRTBeamDelimiterLeafMountingSide",
    vm: "1-n",
    version: "DICOM"
  },
  "(300A,0650)": {
    tag: "(300A,0650)",
    vr: "UI",
    name: "PatientSetupUID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0651)": {
    tag: "(300A,0651)",
    vr: "SQ",
    name: "WedgeDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0652)": {
    tag: "(300A,0652)",
    vr: "FD",
    name: "RadiationBeamWedgeAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0653)": {
    tag: "(300A,0653)",
    vr: "FD",
    name: "RadiationBeamWedgeThinEdgeDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0654)": {
    tag: "(300A,0654)",
    vr: "FD",
    name: "RadiationBeamEffectiveWedgeAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0655)": {
    tag: "(300A,0655)",
    vr: "US",
    name: "NumberOfWedgePositions",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0656)": {
    tag: "(300A,0656)",
    vr: "SQ",
    name: "RTBeamLimitingDeviceOpeningSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0657)": {
    tag: "(300A,0657)",
    vr: "US",
    name: "NumberOfRTBeamLimitingDeviceOpenings",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0658)": {
    tag: "(300A,0658)",
    vr: "SQ",
    name: "RadiationDosimeterUnitSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0659)": {
    tag: "(300A,0659)",
    vr: "SQ",
    name: "RTDeviceDistanceReferenceLocationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,065A)": {
    tag: "(300A,065A)",
    vr: "SQ",
    name: "RadiationDeviceConfigurationAndCommissioningKeySequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,065B)": {
    tag: "(300A,065B)",
    vr: "SQ",
    name: "PatientSupportPositionParameterSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,065C)": {
    tag: "(300A,065C)",
    vr: "CS",
    name: "PatientSupportPositionSpecificationMethod",
    vm: "1",
    version: "DICOM"
  },
  "(300A,065D)": {
    tag: "(300A,065D)",
    vr: "SQ",
    name: "PatientSupportPositionDeviceParameterSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,065E)": {
    tag: "(300A,065E)",
    vr: "US",
    name: "DeviceOrderIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,065F)": {
    tag: "(300A,065F)",
    vr: "US",
    name: "PatientSupportPositionParameterOrderIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0660)": {
    tag: "(300A,0660)",
    vr: "SQ",
    name: "PatientSupportPositionDeviceToleranceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0661)": {
    tag: "(300A,0661)",
    vr: "US",
    name: "PatientSupportPositionToleranceOrderIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0662)": {
    tag: "(300A,0662)",
    vr: "SQ",
    name: "CompensatorDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0663)": {
    tag: "(300A,0663)",
    vr: "CS",
    name: "CompensatorMapOrientation",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0664)": {
    tag: "(300A,0664)",
    vr: "OF",
    name: "CompensatorProximalThicknessMap",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0665)": {
    tag: "(300A,0665)",
    vr: "OF",
    name: "CompensatorDistalThicknessMap",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0666)": {
    tag: "(300A,0666)",
    vr: "FD",
    name: "CompensatorBasePlaneOffset",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0667)": {
    tag: "(300A,0667)",
    vr: "SQ",
    name: "CompensatorShapeFabricationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0668)": {
    tag: "(300A,0668)",
    vr: "SQ",
    name: "CompensatorShapeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0669)": {
    tag: "(300A,0669)",
    vr: "FD",
    name: "RadiationBeamCompensatorMillingToolDiameter",
    vm: "1",
    version: "DICOM"
  },
  "(300A,066A)": {
    tag: "(300A,066A)",
    vr: "SQ",
    name: "BlockDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,066B)": {
    tag: "(300A,066B)",
    vr: "OF",
    name: "BlockEdgeData",
    vm: "1",
    version: "DICOM"
  },
  "(300A,066C)": {
    tag: "(300A,066C)",
    vr: "CS",
    name: "BlockOrientation",
    vm: "1",
    version: "DICOM"
  },
  "(300A,066D)": {
    tag: "(300A,066D)",
    vr: "FD",
    name: "RadiationBeamBlockThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,066E)": {
    tag: "(300A,066E)",
    vr: "FD",
    name: "RadiationBeamBlockSlabThickness",
    vm: "1",
    version: "DICOM"
  },
  "(300A,066F)": {
    tag: "(300A,066F)",
    vr: "SQ",
    name: "BlockEdgeDataSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0670)": {
    tag: "(300A,0670)",
    vr: "US",
    name: "NumberOfRTAccessoryHolders",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0671)": {
    tag: "(300A,0671)",
    vr: "SQ",
    name: "GeneralAccessoryDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0672)": {
    tag: "(300A,0672)",
    vr: "US",
    name: "NumberOfGeneralAccessories",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0673)": {
    tag: "(300A,0673)",
    vr: "SQ",
    name: "BolusDefinitionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0674)": {
    tag: "(300A,0674)",
    vr: "US",
    name: "NumberOfBoluses",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0675)": {
    tag: "(300A,0675)",
    vr: "UI",
    name: "EquipmentFrameOfReferenceUID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0676)": {
    tag: "(300A,0676)",
    vr: "ST",
    name: "EquipmentFrameOfReferenceDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0677)": {
    tag: "(300A,0677)",
    vr: "SQ",
    name: "EquipmentReferencePointCoordinatesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0678)": {
    tag: "(300A,0678)",
    vr: "SQ",
    name: "EquipmentReferencePointCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0679)": {
    tag: "(300A,0679)",
    vr: "FD",
    name: "RTBeamLimitingDeviceAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,067A)": {
    tag: "(300A,067A)",
    vr: "FD",
    name: "SourceRollAngle",
    vm: "1",
    version: "DICOM"
  },
  "(300A,067B)": {
    tag: "(300A,067B)",
    vr: "SQ",
    name: "RadiationGenerationModeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,067C)": {
    tag: "(300A,067C)",
    vr: "SH",
    name: "RadiationGenerationModeLabel",
    vm: "1",
    version: "DICOM"
  },
  "(300A,067D)": {
    tag: "(300A,067D)",
    vr: "ST",
    name: "RadiationGenerationModeDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,067E)": {
    tag: "(300A,067E)",
    vr: "SQ",
    name: "RadiationGenerationModeMachineCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,067F)": {
    tag: "(300A,067F)",
    vr: "SQ",
    name: "RadiationTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0680)": {
    tag: "(300A,0680)",
    vr: "DS",
    name: "NominalEnergy",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0681)": {
    tag: "(300A,0681)",
    vr: "DS",
    name: "MinimumNominalEnergy",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0682)": {
    tag: "(300A,0682)",
    vr: "DS",
    name: "MaximumNominalEnergy",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0683)": {
    tag: "(300A,0683)",
    vr: "SQ",
    name: "RadiationFluenceModifierCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0684)": {
    tag: "(300A,0684)",
    vr: "SQ",
    name: "EnergyUnitCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0685)": {
    tag: "(300A,0685)",
    vr: "US",
    name: "NumberOfRadiationGenerationModes",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0686)": {
    tag: "(300A,0686)",
    vr: "SQ",
    name: "PatientSupportDevicesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0687)": {
    tag: "(300A,0687)",
    vr: "US",
    name: "NumberOfPatientSupportDevices",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0688)": {
    tag: "(300A,0688)",
    vr: "FD",
    name: "RTBeamModifierDefinitionDistance",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0689)": {
    tag: "(300A,0689)",
    vr: "SQ",
    name: "BeamAreaLimitSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,068A)": {
    tag: "(300A,068A)",
    vr: "SQ",
    name: "ReferencedRTPrescriptionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0700)": {
    tag: "(300A,0700)",
    vr: "UI",
    name: "TreatmentSessionUID",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0701)": {
    tag: "(300A,0701)",
    vr: "CS",
    name: "RTRadiationUsage",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0702)": {
    tag: "(300A,0702)",
    vr: "SQ",
    name: "ReferencedRTRadiationSetSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0703)": {
    tag: "(300A,0703)",
    vr: "SQ",
    name: "ReferencedRTRadiationRecordSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0704)": {
    tag: "(300A,0704)",
    vr: "US",
    name: "RTRadiationSetDeliveryNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0705)": {
    tag: "(300A,0705)",
    vr: "US",
    name: "ClinicalFractionNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0706)": {
    tag: "(300A,0706)",
    vr: "CS",
    name: "RTTreatmentFractionCompletionStatus",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0707)": {
    tag: "(300A,0707)",
    vr: "CS",
    name: "RTRadiationSetUsage",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0708)": {
    tag: "(300A,0708)",
    vr: "CS",
    name: "TreatmentDeliveryContinuationFlag",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0709)": {
    tag: "(300A,0709)",
    vr: "CS",
    name: "TreatmentRecordContentOrigin",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0714)": {
    tag: "(300A,0714)",
    vr: "CS",
    name: "RTTreatmentTerminationStatus",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0715)": {
    tag: "(300A,0715)",
    vr: "SQ",
    name: "RTTreatmentTerminationReasonCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0716)": {
    tag: "(300A,0716)",
    vr: "SQ",
    name: "MachineSpecificTreatmentTerminationCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0722)": {
    tag: "(300A,0722)",
    vr: "SQ",
    name: "RTRadiationSalvageRecordControlPointSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0723)": {
    tag: "(300A,0723)",
    vr: "CS",
    name: "StartingMetersetValueKnownFlag",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0730)": {
    tag: "(300A,0730)",
    vr: "ST",
    name: "TreatmentTerminationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0731)": {
    tag: "(300A,0731)",
    vr: "SQ",
    name: "TreatmentToleranceViolationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0732)": {
    tag: "(300A,0732)",
    vr: "CS",
    name: "TreatmentToleranceViolationCategory",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0733)": {
    tag: "(300A,0733)",
    vr: "SQ",
    name: "TreatmentToleranceViolationAttributeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0734)": {
    tag: "(300A,0734)",
    vr: "ST",
    name: "TreatmentToleranceViolationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0735)": {
    tag: "(300A,0735)",
    vr: "ST",
    name: "TreatmentToleranceViolationIdentification",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0736)": {
    tag: "(300A,0736)",
    vr: "DT",
    name: "TreatmentToleranceViolationDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(300A,073A)": {
    tag: "(300A,073A)",
    vr: "DT",
    name: "RecordedRTControlPointDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(300A,073B)": {
    tag: "(300A,073B)",
    vr: "US",
    name: "ReferencedRadiationRTControlPointIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,073E)": {
    tag: "(300A,073E)",
    vr: "SQ",
    name: "AlternateValueSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,073F)": {
    tag: "(300A,073F)",
    vr: "SQ",
    name: "ConfirmationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0740)": {
    tag: "(300A,0740)",
    vr: "SQ",
    name: "InterlockSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0741)": {
    tag: "(300A,0741)",
    vr: "DT",
    name: "InterlockDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0742)": {
    tag: "(300A,0742)",
    vr: "ST",
    name: "InterlockDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0743)": {
    tag: "(300A,0743)",
    vr: "SQ",
    name: "InterlockOriginatingDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0744)": {
    tag: "(300A,0744)",
    vr: "SQ",
    name: "InterlockCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0745)": {
    tag: "(300A,0745)",
    vr: "SQ",
    name: "InterlockResolutionCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0746)": {
    tag: "(300A,0746)",
    vr: "SQ",
    name: "InterlockResolutionUserSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0760)": {
    tag: "(300A,0760)",
    vr: "DT",
    name: "OverrideDateTime",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0761)": {
    tag: "(300A,0761)",
    vr: "SQ",
    name: "TreatmentToleranceViolationTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0762)": {
    tag: "(300A,0762)",
    vr: "SQ",
    name: "TreatmentToleranceViolationCauseCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0772)": {
    tag: "(300A,0772)",
    vr: "SQ",
    name: "MeasuredMetersetToDoseMappingSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0773)": {
    tag: "(300A,0773)",
    vr: "US",
    name: "ReferencedExpectedInVivoMeasurementValueIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0774)": {
    tag: "(300A,0774)",
    vr: "SQ",
    name: "DoseMeasurementDeviceCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0780)": {
    tag: "(300A,0780)",
    vr: "SQ",
    name: "AdditionalParameterRecordingInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300A,0783)": {
    tag: "(300A,0783)",
    vr: "ST",
    name: "InterlockOriginDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0002)": {
    tag: "(300C,0002)",
    vr: "SQ",
    name: "ReferencedRTPlanSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0004)": {
    tag: "(300C,0004)",
    vr: "SQ",
    name: "ReferencedBeamSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0006)": {
    tag: "(300C,0006)",
    vr: "IS",
    name: "ReferencedBeamNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0007)": {
    tag: "(300C,0007)",
    vr: "IS",
    name: "ReferencedReferenceImageNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0008)": {
    tag: "(300C,0008)",
    vr: "DS",
    name: "StartCumulativeMetersetWeight",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0009)": {
    tag: "(300C,0009)",
    vr: "DS",
    name: "EndCumulativeMetersetWeight",
    vm: "1",
    version: "DICOM"
  },
  "(300C,000A)": {
    tag: "(300C,000A)",
    vr: "SQ",
    name: "ReferencedBrachyApplicationSetupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,000C)": {
    tag: "(300C,000C)",
    vr: "IS",
    name: "ReferencedBrachyApplicationSetupNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,000E)": {
    tag: "(300C,000E)",
    vr: "IS",
    name: "ReferencedSourceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0020)": {
    tag: "(300C,0020)",
    vr: "SQ",
    name: "ReferencedFractionGroupSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0022)": {
    tag: "(300C,0022)",
    vr: "IS",
    name: "ReferencedFractionGroupNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0040)": {
    tag: "(300C,0040)",
    vr: "SQ",
    name: "ReferencedVerificationImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0042)": {
    tag: "(300C,0042)",
    vr: "SQ",
    name: "ReferencedReferenceImageSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0050)": {
    tag: "(300C,0050)",
    vr: "SQ",
    name: "ReferencedDoseReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0051)": {
    tag: "(300C,0051)",
    vr: "IS",
    name: "ReferencedDoseReferenceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0055)": {
    tag: "(300C,0055)",
    vr: "SQ",
    name: "BrachyReferencedDoseReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0060)": {
    tag: "(300C,0060)",
    vr: "SQ",
    name: "ReferencedStructureSetSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,006A)": {
    tag: "(300C,006A)",
    vr: "IS",
    name: "ReferencedPatientSetupNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0080)": {
    tag: "(300C,0080)",
    vr: "SQ",
    name: "ReferencedDoseSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,00A0)": {
    tag: "(300C,00A0)",
    vr: "IS",
    name: "ReferencedToleranceTableNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,00B0)": {
    tag: "(300C,00B0)",
    vr: "SQ",
    name: "ReferencedBolusSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,00C0)": {
    tag: "(300C,00C0)",
    vr: "IS",
    name: "ReferencedWedgeNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,00D0)": {
    tag: "(300C,00D0)",
    vr: "IS",
    name: "ReferencedCompensatorNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,00E0)": {
    tag: "(300C,00E0)",
    vr: "IS",
    name: "ReferencedBlockNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,00F0)": {
    tag: "(300C,00F0)",
    vr: "IS",
    name: "ReferencedControlPointIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300C,00F2)": {
    tag: "(300C,00F2)",
    vr: "SQ",
    name: "ReferencedControlPointSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,00F4)": {
    tag: "(300C,00F4)",
    vr: "IS",
    name: "ReferencedStartControlPointIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300C,00F6)": {
    tag: "(300C,00F6)",
    vr: "IS",
    name: "ReferencedStopControlPointIndex",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0100)": {
    tag: "(300C,0100)",
    vr: "IS",
    name: "ReferencedRangeShifterNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0102)": {
    tag: "(300C,0102)",
    vr: "IS",
    name: "ReferencedLateralSpreadingDeviceNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0104)": {
    tag: "(300C,0104)",
    vr: "IS",
    name: "ReferencedRangeModulatorNumber",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0111)": {
    tag: "(300C,0111)",
    vr: "SQ",
    name: "OmittedBeamTaskSequence",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0112)": {
    tag: "(300C,0112)",
    vr: "CS",
    name: "ReasonForOmission",
    vm: "1",
    version: "DICOM"
  },
  "(300C,0113)": {
    tag: "(300C,0113)",
    vr: "LO",
    name: "ReasonForOmissionDescription",
    vm: "1",
    version: "DICOM"
  },
  "(300E,0002)": {
    tag: "(300E,0002)",
    vr: "CS",
    name: "ApprovalStatus",
    vm: "1",
    version: "DICOM"
  },
  "(300E,0004)": {
    tag: "(300E,0004)",
    vr: "DA",
    name: "ReviewDate",
    vm: "1",
    version: "DICOM"
  },
  "(300E,0005)": {
    tag: "(300E,0005)",
    vr: "TM",
    name: "ReviewTime",
    vm: "1",
    version: "DICOM"
  },
  "(300E,0008)": {
    tag: "(300E,0008)",
    vr: "PN",
    name: "ReviewerName",
    vm: "1",
    version: "DICOM"
  },
  "(4010,0001)": {
    tag: "(4010,0001)",
    vr: "CS",
    name: "LowEnergyDetectors",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,0002)": {
    tag: "(4010,0002)",
    vr: "CS",
    name: "HighEnergyDetectors",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,0004)": {
    tag: "(4010,0004)",
    vr: "SQ",
    name: "DetectorGeometrySequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1001)": {
    tag: "(4010,1001)",
    vr: "SQ",
    name: "ThreatROIVoxelSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1004)": {
    tag: "(4010,1004)",
    vr: "FL",
    name: "ThreatROIBase",
    vm: "3",
    version: "DICOM/DICOS"
  },
  "(4010,1005)": {
    tag: "(4010,1005)",
    vr: "FL",
    name: "ThreatROIExtents",
    vm: "3",
    version: "DICOM/DICOS"
  },
  "(4010,1006)": {
    tag: "(4010,1006)",
    vr: "OB",
    name: "ThreatROIBitmap",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1007)": {
    tag: "(4010,1007)",
    vr: "SH",
    name: "RouteSegmentID",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1008)": {
    tag: "(4010,1008)",
    vr: "CS",
    name: "GantryType",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1009)": {
    tag: "(4010,1009)",
    vr: "CS",
    name: "OOIOwnerType",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,100A)": {
    tag: "(4010,100A)",
    vr: "SQ",
    name: "RouteSegmentSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1010)": {
    tag: "(4010,1010)",
    vr: "US",
    name: "PotentialThreatObjectID",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1011)": {
    tag: "(4010,1011)",
    vr: "SQ",
    name: "ThreatSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1012)": {
    tag: "(4010,1012)",
    vr: "CS",
    name: "ThreatCategory",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1013)": {
    tag: "(4010,1013)",
    vr: "LT",
    name: "ThreatCategoryDescription",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1014)": {
    tag: "(4010,1014)",
    vr: "CS",
    name: "ATDAbilityAssessment",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1015)": {
    tag: "(4010,1015)",
    vr: "CS",
    name: "ATDAssessmentFlag",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1016)": {
    tag: "(4010,1016)",
    vr: "FL",
    name: "ATDAssessmentProbability",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1017)": {
    tag: "(4010,1017)",
    vr: "FL",
    name: "Mass",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1018)": {
    tag: "(4010,1018)",
    vr: "FL",
    name: "Density",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1019)": {
    tag: "(4010,1019)",
    vr: "FL",
    name: "ZEffective",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,101A)": {
    tag: "(4010,101A)",
    vr: "SH",
    name: "BoardingPassID",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,101B)": {
    tag: "(4010,101B)",
    vr: "FL",
    name: "CenterOfMass",
    vm: "3",
    version: "DICOM/DICOS"
  },
  "(4010,101C)": {
    tag: "(4010,101C)",
    vr: "FL",
    name: "CenterOfPTO",
    vm: "3",
    version: "DICOM/DICOS"
  },
  "(4010,101D)": {
    tag: "(4010,101D)",
    vr: "FL",
    name: "BoundingPolygon",
    vm: "6-n",
    version: "DICOM/DICOS"
  },
  "(4010,101E)": {
    tag: "(4010,101E)",
    vr: "SH",
    name: "RouteSegmentStartLocationID",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,101F)": {
    tag: "(4010,101F)",
    vr: "SH",
    name: "RouteSegmentEndLocationID",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1020)": {
    tag: "(4010,1020)",
    vr: "CS",
    name: "RouteSegmentLocationIDType",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1021)": {
    tag: "(4010,1021)",
    vr: "CS",
    name: "AbortReason",
    vm: "1-n",
    version: "DICOM/DICOS"
  },
  "(4010,1023)": {
    tag: "(4010,1023)",
    vr: "FL",
    name: "VolumeOfPTO",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1024)": {
    tag: "(4010,1024)",
    vr: "CS",
    name: "AbortFlag",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1025)": {
    tag: "(4010,1025)",
    vr: "DT",
    name: "RouteSegmentStartTime",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1026)": {
    tag: "(4010,1026)",
    vr: "DT",
    name: "RouteSegmentEndTime",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1027)": {
    tag: "(4010,1027)",
    vr: "CS",
    name: "TDRType",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1028)": {
    tag: "(4010,1028)",
    vr: "CS",
    name: "InternationalRouteSegment",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1029)": {
    tag: "(4010,1029)",
    vr: "LO",
    name: "ThreatDetectionAlgorithmandVersion",
    vm: "1-n",
    version: "DICOM/DICOS"
  },
  "(4010,102A)": {
    tag: "(4010,102A)",
    vr: "SH",
    name: "AssignedLocation",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,102B)": {
    tag: "(4010,102B)",
    vr: "DT",
    name: "AlarmDecisionTime",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1031)": {
    tag: "(4010,1031)",
    vr: "CS",
    name: "AlarmDecision",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1033)": {
    tag: "(4010,1033)",
    vr: "US",
    name: "NumberOfTotalObjects",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1034)": {
    tag: "(4010,1034)",
    vr: "US",
    name: "NumberOfAlarmObjects",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1037)": {
    tag: "(4010,1037)",
    vr: "SQ",
    name: "PTORepresentationSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1038)": {
    tag: "(4010,1038)",
    vr: "SQ",
    name: "ATDAssessmentSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1039)": {
    tag: "(4010,1039)",
    vr: "CS",
    name: "TIPType",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,103A)": {
    tag: "(4010,103A)",
    vr: "CS",
    name: "DICOSVersion",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1041)": {
    tag: "(4010,1041)",
    vr: "DT",
    name: "OOIOwnerCreationTime",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1042)": {
    tag: "(4010,1042)",
    vr: "CS",
    name: "OOIType",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1043)": {
    tag: "(4010,1043)",
    vr: "FL",
    name: "OOISize",
    vm: "3",
    version: "DICOM/DICOS"
  },
  "(4010,1044)": {
    tag: "(4010,1044)",
    vr: "CS",
    name: "AcquisitionStatus",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1045)": {
    tag: "(4010,1045)",
    vr: "SQ",
    name: "BasisMaterialsCodeSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1046)": {
    tag: "(4010,1046)",
    vr: "CS",
    name: "PhantomType",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1047)": {
    tag: "(4010,1047)",
    vr: "SQ",
    name: "OOIOwnerSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1048)": {
    tag: "(4010,1048)",
    vr: "CS",
    name: "ScanType",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1051)": {
    tag: "(4010,1051)",
    vr: "LO",
    name: "ItineraryID",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1052)": {
    tag: "(4010,1052)",
    vr: "SH",
    name: "ItineraryIDType",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1053)": {
    tag: "(4010,1053)",
    vr: "LO",
    name: "ItineraryIDAssigningAuthority",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1054)": {
    tag: "(4010,1054)",
    vr: "SH",
    name: "RouteID",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1055)": {
    tag: "(4010,1055)",
    vr: "SH",
    name: "RouteIDAssigningAuthority",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1056)": {
    tag: "(4010,1056)",
    vr: "CS",
    name: "InboundArrivalType",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1058)": {
    tag: "(4010,1058)",
    vr: "SH",
    name: "CarrierID",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1059)": {
    tag: "(4010,1059)",
    vr: "CS",
    name: "CarrierIDAssigningAuthority",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1060)": {
    tag: "(4010,1060)",
    vr: "FL",
    name: "SourceOrientation",
    vm: "3",
    version: "DICOM/DICOS"
  },
  "(4010,1061)": {
    tag: "(4010,1061)",
    vr: "FL",
    name: "SourcePosition",
    vm: "3",
    version: "DICOM/DICOS"
  },
  "(4010,1062)": {
    tag: "(4010,1062)",
    vr: "FL",
    name: "BeltHeight",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1064)": {
    tag: "(4010,1064)",
    vr: "SQ",
    name: "AlgorithmRoutingCodeSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1067)": {
    tag: "(4010,1067)",
    vr: "CS",
    name: "TransportClassification",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1068)": {
    tag: "(4010,1068)",
    vr: "LT",
    name: "OOITypeDescriptor",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1069)": {
    tag: "(4010,1069)",
    vr: "FL",
    name: "TotalProcessingTime",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,106C)": {
    tag: "(4010,106C)",
    vr: "OB",
    name: "DetectorCalibrationData",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,106D)": {
    tag: "(4010,106D)",
    vr: "CS",
    name: "AdditionalScreeningPerformed",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,106E)": {
    tag: "(4010,106E)",
    vr: "CS",
    name: "AdditionalInspectionSelectionCriteria",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,106F)": {
    tag: "(4010,106F)",
    vr: "SQ",
    name: "AdditionalInspectionMethodSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1070)": {
    tag: "(4010,1070)",
    vr: "CS",
    name: "AITDeviceType",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1071)": {
    tag: "(4010,1071)",
    vr: "SQ",
    name: "QRMeasurementsSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1072)": {
    tag: "(4010,1072)",
    vr: "SQ",
    name: "TargetMaterialSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1073)": {
    tag: "(4010,1073)",
    vr: "FD",
    name: "SNRThreshold",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1075)": {
    tag: "(4010,1075)",
    vr: "DS",
    name: "ImageScaleRepresentation",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1076)": {
    tag: "(4010,1076)",
    vr: "SQ",
    name: "ReferencedPTOSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1077)": {
    tag: "(4010,1077)",
    vr: "SQ",
    name: "ReferencedTDRInstanceSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1078)": {
    tag: "(4010,1078)",
    vr: "ST",
    name: "PTOLocationDescription",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,1079)": {
    tag: "(4010,1079)",
    vr: "SQ",
    name: "AnomalyLocatorIndicatorSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,107A)": {
    tag: "(4010,107A)",
    vr: "FL",
    name: "AnomalyLocatorIndicator",
    vm: "3",
    version: "DICOM/DICOS"
  },
  "(4010,107B)": {
    tag: "(4010,107B)",
    vr: "SQ",
    name: "PTORegionSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,107C)": {
    tag: "(4010,107C)",
    vr: "CS",
    name: "InspectionSelectionCriteria",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,107D)": {
    tag: "(4010,107D)",
    vr: "SQ",
    name: "SecondaryInspectionMethodSequence",
    vm: "1",
    version: "DICOM/DICOS"
  },
  "(4010,107E)": {
    tag: "(4010,107E)",
    vr: "DS",
    name: "PRCSToRCSOrientation",
    vm: "6",
    version: "DICOM/DICOS"
  },
  "(3010,0001)": {
    tag: "(3010,0001)",
    vr: "SQ",
    name: "RadiobiologicalDoseEffectSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0002)": {
    tag: "(3010,0002)",
    vr: "CS",
    name: "RadiobiologicalDoseEffectFlag",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0003)": {
    tag: "(3010,0003)",
    vr: "SQ",
    name: "EffectiveDoseCalculationMethodCategoryCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0004)": {
    tag: "(3010,0004)",
    vr: "SQ",
    name: "EffectiveDoseCalculationMethodCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0005)": {
    tag: "(3010,0005)",
    vr: "LO",
    name: "EffectiveDoseCalculationMethodDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0006)": {
    tag: "(3010,0006)",
    vr: "UI",
    name: "ConceptualVolumeUID",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0007)": {
    tag: "(3010,0007)",
    vr: "SQ",
    name: "OriginatingSOPInstanceReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0008)": {
    tag: "(3010,0008)",
    vr: "SQ",
    name: "ConceptualVolumeConstituentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0009)": {
    tag: "(3010,0009)",
    vr: "SQ",
    name: "EquivalentConceptualVolumeInstanceReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,000A)": {
    tag: "(3010,000A)",
    vr: "SQ",
    name: "EquivalentConceptualVolumesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,000B)": {
    tag: "(3010,000B)",
    vr: "UI",
    name: "ReferencedConceptualVolumeUID",
    vm: "1",
    version: "DICOM"
  },
  "(3010,000C)": {
    tag: "(3010,000C)",
    vr: "UT",
    name: "ConceptualVolumeCombinationExpression",
    vm: "1",
    version: "DICOM"
  },
  "(3010,000D)": {
    tag: "(3010,000D)",
    vr: "US",
    name: "ConceptualVolumeConstituentIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,000E)": {
    tag: "(3010,000E)",
    vr: "CS",
    name: "ConceptualVolumeCombinationFlag",
    vm: "1",
    version: "DICOM"
  },
  "(3010,000F)": {
    tag: "(3010,000F)",
    vr: "ST",
    name: "ConceptualVolumeCombinationDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0010)": {
    tag: "(3010,0010)",
    vr: "CS",
    name: "ConceptualVolumeSegmentationDefinedFlag",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0011)": {
    tag: "(3010,0011)",
    vr: "SQ",
    name: "ConceptualVolumeSegmentationReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0012)": {
    tag: "(3010,0012)",
    vr: "SQ",
    name: "ConceptualVolumeConstituentSegmentationReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0013)": {
    tag: "(3010,0013)",
    vr: "UI",
    name: "ConstituentConceptualVolumeUID",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0014)": {
    tag: "(3010,0014)",
    vr: "SQ",
    name: "DerivationConceptualVolumeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0015)": {
    tag: "(3010,0015)",
    vr: "UI",
    name: "SourceConceptualVolumeUID",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0016)": {
    tag: "(3010,0016)",
    vr: "SQ",
    name: "ConceptualVolumeDerivationAlgorithmSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0017)": {
    tag: "(3010,0017)",
    vr: "ST",
    name: "ConceptualVolumeDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0018)": {
    tag: "(3010,0018)",
    vr: "SQ",
    name: "SourceConceptualVolumeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0019)": {
    tag: "(3010,0019)",
    vr: "SQ",
    name: "AuthorIdentificationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,001A)": {
    tag: "(3010,001A)",
    vr: "LO",
    name: "ManufacturerModelVersion",
    vm: "1",
    version: "DICOM"
  },
  "(3010,001B)": {
    tag: "(3010,001B)",
    vr: "UC",
    name: "DeviceAlternateIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(3010,001C)": {
    tag: "(3010,001C)",
    vr: "CS",
    name: "DeviceAlternateIdentifierType",
    vm: "1",
    version: "DICOM"
  },
  "(3010,001D)": {
    tag: "(3010,001D)",
    vr: "LT",
    name: "DeviceAlternateIdentifierFormat",
    vm: "1",
    version: "DICOM"
  },
  "(3010,001E)": {
    tag: "(3010,001E)",
    vr: "LO",
    name: "SegmentationCreationTemplateLabel",
    vm: "1",
    version: "DICOM"
  },
  "(3010,001F)": {
    tag: "(3010,001F)",
    vr: "UI",
    name: "SegmentationTemplateUID",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0020)": {
    tag: "(3010,0020)",
    vr: "US",
    name: "ReferencedSegmentReferenceIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0021)": {
    tag: "(3010,0021)",
    vr: "SQ",
    name: "SegmentReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0022)": {
    tag: "(3010,0022)",
    vr: "US",
    name: "SegmentReferenceIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0023)": {
    tag: "(3010,0023)",
    vr: "SQ",
    name: "DirectSegmentReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0024)": {
    tag: "(3010,0024)",
    vr: "SQ",
    name: "CombinationSegmentReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0025)": {
    tag: "(3010,0025)",
    vr: "SQ",
    name: "ConceptualVolumeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0026)": {
    tag: "(3010,0026)",
    vr: "SQ",
    name: "SegmentedRTAccessoryDeviceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0027)": {
    tag: "(3010,0027)",
    vr: "SQ",
    name: "SegmentCharacteristicsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0028)": {
    tag: "(3010,0028)",
    vr: "SQ",
    name: "RelatedSegmentCharacteristicsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0029)": {
    tag: "(3010,0029)",
    vr: "US",
    name: "SegmentCharacteristicsPrecedence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,002A)": {
    tag: "(3010,002A)",
    vr: "SQ",
    name: "RTSegmentAnnotationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,002B)": {
    tag: "(3010,002B)",
    vr: "SQ",
    name: "SegmentAnnotationCategoryCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,002C)": {
    tag: "(3010,002C)",
    vr: "SQ",
    name: "SegmentAnnotationTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,002D)": {
    tag: "(3010,002D)",
    vr: "LO",
    name: "DeviceLabel",
    vm: "1",
    version: "DICOM"
  },
  "(3010,002E)": {
    tag: "(3010,002E)",
    vr: "SQ",
    name: "DeviceTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,002F)": {
    tag: "(3010,002F)",
    vr: "SQ",
    name: "SegmentAnnotationTypeModifierCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0030)": {
    tag: "(3010,0030)",
    vr: "SQ",
    name: "PatientEquipmentRelationshipCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0031)": {
    tag: "(3010,0031)",
    vr: "UI",
    name: "ReferencedFiducialsUID",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0032)": {
    tag: "(3010,0032)",
    vr: "SQ",
    name: "PatientTreatmentOrientationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0033)": {
    tag: "(3010,0033)",
    vr: "SH",
    name: "UserContentLabel",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0034)": {
    tag: "(3010,0034)",
    vr: "LO",
    name: "UserContentLongLabel",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0035)": {
    tag: "(3010,0035)",
    vr: "SH",
    name: "EntityLabel",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0036)": {
    tag: "(3010,0036)",
    vr: "LO",
    name: "EntityName",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0037)": {
    tag: "(3010,0037)",
    vr: "ST",
    name: "EntityDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0038)": {
    tag: "(3010,0038)",
    vr: "LO",
    name: "EntityLongLabel",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0039)": {
    tag: "(3010,0039)",
    vr: "US",
    name: "DeviceIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,003A)": {
    tag: "(3010,003A)",
    vr: "US",
    name: "RTTreatmentPhaseIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,003B)": {
    tag: "(3010,003B)",
    vr: "UI",
    name: "RTTreatmentPhaseUID",
    vm: "1",
    version: "DICOM"
  },
  "(3010,003C)": {
    tag: "(3010,003C)",
    vr: "US",
    name: "RTPrescriptionIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,003D)": {
    tag: "(3010,003D)",
    vr: "US",
    name: "RTSegmentAnnotationIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,003E)": {
    tag: "(3010,003E)",
    vr: "US",
    name: "BasisRTTreatmentPhaseIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,003F)": {
    tag: "(3010,003F)",
    vr: "US",
    name: "RelatedRTTreatmentPhaseIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0040)": {
    tag: "(3010,0040)",
    vr: "US",
    name: "ReferencedRTTreatmentPhaseIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0041)": {
    tag: "(3010,0041)",
    vr: "US",
    name: "ReferencedRTPrescriptionIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0042)": {
    tag: "(3010,0042)",
    vr: "US",
    name: "ReferencedParentRTPrescriptionIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0043)": {
    tag: "(3010,0043)",
    vr: "ST",
    name: "ManufacturerDeviceIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0044)": {
    tag: "(3010,0044)",
    vr: "SQ",
    name: "InstanceLevelReferencedPerformedProcedureStepSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0045)": {
    tag: "(3010,0045)",
    vr: "CS",
    name: "RTTreatmentPhaseIntentPresenceFlag",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0046)": {
    tag: "(3010,0046)",
    vr: "CS",
    name: "RadiotherapyTreatmentType",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0047)": {
    tag: "(3010,0047)",
    vr: "CS",
    name: "TeletherapyRadiationType",
    vm: "1-n",
    version: "DICOM"
  },
  "(3010,0048)": {
    tag: "(3010,0048)",
    vr: "CS",
    name: "BrachytherapySourceType",
    vm: "1-n",
    version: "DICOM"
  },
  "(3010,0049)": {
    tag: "(3010,0049)",
    vr: "SQ",
    name: "ReferencedRTTreatmentPhaseSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,004A)": {
    tag: "(3010,004A)",
    vr: "SQ",
    name: "ReferencedDirectSegmentInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,004B)": {
    tag: "(3010,004B)",
    vr: "SQ",
    name: "IntendedRTTreatmentPhaseSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,004C)": {
    tag: "(3010,004C)",
    vr: "DA",
    name: "IntendedPhaseStartDate",
    vm: "1",
    version: "DICOM"
  },
  "(3010,004D)": {
    tag: "(3010,004D)",
    vr: "DA",
    name: "IntendedPhaseEndDate",
    vm: "1",
    version: "DICOM"
  },
  "(3010,004E)": {
    tag: "(3010,004E)",
    vr: "SQ",
    name: "RTTreatmentPhaseIntervalSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,004F)": {
    tag: "(3010,004F)",
    vr: "CS",
    name: "TemporalRelationshipIntervalAnchor",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0050)": {
    tag: "(3010,0050)",
    vr: "FD",
    name: "MinimumNumberOfIntervalDays",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0051)": {
    tag: "(3010,0051)",
    vr: "FD",
    name: "MaximumNumberOfIntervalDays",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0052)": {
    tag: "(3010,0052)",
    vr: "UI",
    name: "PertinentSOPClassesInStudy",
    vm: "1-n",
    version: "DICOM"
  },
  "(3010,0053)": {
    tag: "(3010,0053)",
    vr: "UI",
    name: "PertinentSOPClassesInSeries",
    vm: "1-n",
    version: "DICOM"
  },
  "(3010,0054)": {
    tag: "(3010,0054)",
    vr: "LO",
    name: "RTPrescriptionLabel",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0055)": {
    tag: "(3010,0055)",
    vr: "SQ",
    name: "RTPhysicianIntentPredecessorSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0056)": {
    tag: "(3010,0056)",
    vr: "LO",
    name: "RTTreatmentApproachLabel",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0057)": {
    tag: "(3010,0057)",
    vr: "SQ",
    name: "RTPhysicianIntentSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0058)": {
    tag: "(3010,0058)",
    vr: "US",
    name: "RTPhysicianIntentIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0059)": {
    tag: "(3010,0059)",
    vr: "CS",
    name: "RTTreatmentIntentType",
    vm: "1",
    version: "DICOM"
  },
  "(3010,005A)": {
    tag: "(3010,005A)",
    vr: "UT",
    name: "RTPhysicianIntentNarrative",
    vm: "1",
    version: "DICOM"
  },
  "(3010,005B)": {
    tag: "(3010,005B)",
    vr: "SQ",
    name: "RTProtocolCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,005C)": {
    tag: "(3010,005C)",
    vr: "ST",
    name: "ReasonForSuperseding",
    vm: "1",
    version: "DICOM"
  },
  "(3010,005D)": {
    tag: "(3010,005D)",
    vr: "SQ",
    name: "RTDiagnosisCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,005E)": {
    tag: "(3010,005E)",
    vr: "US",
    name: "ReferencedRTPhysicianIntentIndex",
    vm: "1",
    version: "DICOM"
  },
  "(3010,005F)": {
    tag: "(3010,005F)",
    vr: "SQ",
    name: "RTPhysicianIntentInputInstanceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0060)": {
    tag: "(3010,0060)",
    vr: "SQ",
    name: "RTAnatomicPrescriptionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0061)": {
    tag: "(3010,0061)",
    vr: "UT",
    name: "PriorTreatmentDoseDescription",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0062)": {
    tag: "(3010,0062)",
    vr: "SQ",
    name: "PriorTreatmentReferenceSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0063)": {
    tag: "(3010,0063)",
    vr: "CS",
    name: "DosimetricObjectiveEvaluationScope",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0064)": {
    tag: "(3010,0064)",
    vr: "SQ",
    name: "TherapeuticRoleCategoryCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0065)": {
    tag: "(3010,0065)",
    vr: "SQ",
    name: "TherapeuticRoleTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0066)": {
    tag: "(3010,0066)",
    vr: "US",
    name: "ConceptualVolumeOptimizationPrecedence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0067)": {
    tag: "(3010,0067)",
    vr: "SQ",
    name: "ConceptualVolumeCategoryCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0068)": {
    tag: "(3010,0068)",
    vr: "CS",
    name: "ConceptualVolumeBlockingConstraint",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0069)": {
    tag: "(3010,0069)",
    vr: "SQ",
    name: "ConceptualVolumeTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,006A)": {
    tag: "(3010,006A)",
    vr: "SQ",
    name: "ConceptualVolumeTypeModifierCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,006B)": {
    tag: "(3010,006B)",
    vr: "SQ",
    name: "RTPrescriptionSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,006C)": {
    tag: "(3010,006C)",
    vr: "SQ",
    name: "DosimetricObjectiveSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,006D)": {
    tag: "(3010,006D)",
    vr: "SQ",
    name: "DosimetricObjectiveTypeCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,006E)": {
    tag: "(3010,006E)",
    vr: "UI",
    name: "DosimetricObjectiveUID",
    vm: "1",
    version: "DICOM"
  },
  "(3010,006F)": {
    tag: "(3010,006F)",
    vr: "UI",
    name: "ReferencedDosimetricObjectiveUID",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0070)": {
    tag: "(3010,0070)",
    vr: "SQ",
    name: "DosimetricObjectiveParameterSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0071)": {
    tag: "(3010,0071)",
    vr: "SQ",
    name: "ReferencedDosimetricObjectivesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0073)": {
    tag: "(3010,0073)",
    vr: "CS",
    name: "AbsoluteDosimetricObjectiveFlag",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0074)": {
    tag: "(3010,0074)",
    vr: "FD",
    name: "DosimetricObjectiveWeight",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0075)": {
    tag: "(3010,0075)",
    vr: "CS",
    name: "DosimetricObjectivePurpose",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0076)": {
    tag: "(3010,0076)",
    vr: "SQ",
    name: "PlanningInputInformationSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0077)": {
    tag: "(3010,0077)",
    vr: "LO",
    name: "TreatmentSite",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0078)": {
    tag: "(3010,0078)",
    vr: "SQ",
    name: "TreatmentSiteCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0079)": {
    tag: "(3010,0079)",
    vr: "SQ",
    name: "FractionPatternSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,007A)": {
    tag: "(3010,007A)",
    vr: "UT",
    name: "TreatmentTechniqueNotes",
    vm: "1",
    version: "DICOM"
  },
  "(3010,007B)": {
    tag: "(3010,007B)",
    vr: "UT",
    name: "PrescriptionNotes",
    vm: "1",
    version: "DICOM"
  },
  "(3010,007C)": {
    tag: "(3010,007C)",
    vr: "IS",
    name: "NumberOfIntervalFractions",
    vm: "1",
    version: "DICOM"
  },
  "(3010,007D)": {
    tag: "(3010,007D)",
    vr: "US",
    name: "NumberOfFractions",
    vm: "1",
    version: "DICOM"
  },
  "(3010,007E)": {
    tag: "(3010,007E)",
    vr: "US",
    name: "IntendedDeliveryDuration",
    vm: "1",
    version: "DICOM"
  },
  "(3010,007F)": {
    tag: "(3010,007F)",
    vr: "UT",
    name: "FractionationNotes",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0080)": {
    tag: "(3010,0080)",
    vr: "SQ",
    name: "RTTreatmentTechniqueCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0081)": {
    tag: "(3010,0081)",
    vr: "SQ",
    name: "PrescriptionNotesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0082)": {
    tag: "(3010,0082)",
    vr: "SQ",
    name: "FractionBasedRelationshipSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0083)": {
    tag: "(3010,0083)",
    vr: "CS",
    name: "FractionBasedRelationshipIntervalAnchor",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0084)": {
    tag: "(3010,0084)",
    vr: "FD",
    name: "MinimumHoursBetweenFractions",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0085)": {
    tag: "(3010,0085)",
    vr: "TM",
    name: "IntendedFractionStartTime",
    vm: "1-n",
    version: "DICOM"
  },
  "(3010,0086)": {
    tag: "(3010,0086)",
    vr: "LT",
    name: "IntendedStartDayOfWeek",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0087)": {
    tag: "(3010,0087)",
    vr: "SQ",
    name: "WeekdayFractionPatternSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0088)": {
    tag: "(3010,0088)",
    vr: "SQ",
    name: "DeliveryTimeStructureCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0089)": {
    tag: "(3010,0089)",
    vr: "SQ",
    name: "TreatmentSiteModifierCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0090)": {
    tag: "(3010,0090)",
    vr: "CS",
    name: "RoboticBaseLocationIndicator",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0091)": {
    tag: "(3010,0091)",
    vr: "SQ",
    name: "RoboticPathNodeSetCodeSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0092)": {
    tag: "(3010,0092)",
    vr: "UL",
    name: "RoboticNodeIdentifier",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0093)": {
    tag: "(3010,0093)",
    vr: "FD",
    name: "RTTreatmentSourceCoordinates",
    vm: "3",
    version: "DICOM"
  },
  "(3010,0094)": {
    tag: "(3010,0094)",
    vr: "FD",
    name: "RadiationSourceCoordinateSystemYawAngle",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0095)": {
    tag: "(3010,0095)",
    vr: "FD",
    name: "RadiationSourceCoordinateSystemRollAngle",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0096)": {
    tag: "(3010,0096)",
    vr: "FD",
    name: "RadiationSourceCoordinateSystemPitchAngle",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0097)": {
    tag: "(3010,0097)",
    vr: "SQ",
    name: "RoboticPathControlPointSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0098)": {
    tag: "(3010,0098)",
    vr: "SQ",
    name: "TomotherapeuticControlPointSequence",
    vm: "1",
    version: "DICOM"
  },
  "(3010,0099)": {
    tag: "(3010,0099)",
    vr: "FD",
    name: "TomotherapeuticLeafOpenDurations",
    vm: "1-n",
    version: "DICOM"
  },
  "(3010,009A)": {
    tag: "(3010,009A)",
    vr: "FD",
    name: "TomotherapeuticLeafInitialClosedDurations",
    vm: "1-n",
    version: "DICOM"
  },
  "(4FFE,0001)": {
    tag: "(4FFE,0001)",
    vr: "SQ",
    name: "MACParametersSequence",
    vm: "1",
    version: "DICOM"
  },
  "(5200,9229)": {
    tag: "(5200,9229)",
    vr: "SQ",
    name: "SharedFunctionalGroupsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(5200,9230)": {
    tag: "(5200,9230)",
    vr: "SQ",
    name: "PerFrameFunctionalGroupsSequence",
    vm: "1",
    version: "DICOM"
  },
  "(5400,0100)": {
    tag: "(5400,0100)",
    vr: "SQ",
    name: "WaveformSequence",
    vm: "1",
    version: "DICOM"
  },
  "(5400,0110)": {
    tag: "(5400,0110)",
    vr: "ox",
    name: "ChannelMinimumValue",
    vm: "1",
    version: "DICOM"
  },
  "(5400,0112)": {
    tag: "(5400,0112)",
    vr: "ox",
    name: "ChannelMaximumValue",
    vm: "1",
    version: "DICOM"
  },
  "(5400,1004)": {
    tag: "(5400,1004)",
    vr: "US",
    name: "WaveformBitsAllocated",
    vm: "1",
    version: "DICOM"
  },
  "(5400,1006)": {
    tag: "(5400,1006)",
    vr: "CS",
    name: "WaveformSampleInterpretation",
    vm: "1",
    version: "DICOM"
  },
  "(5400,100A)": {
    tag: "(5400,100A)",
    vr: "ox",
    name: "WaveformPaddingValue",
    vm: "1",
    version: "DICOM"
  },
  "(5400,1010)": {
    tag: "(5400,1010)",
    vr: "ox",
    name: "WaveformData",
    vm: "1",
    version: "DICOM"
  },
  "(5600,0010)": {
    tag: "(5600,0010)",
    vr: "OF",
    name: "FirstOrderPhaseCorrectionAngle",
    vm: "1",
    version: "DICOM"
  },
  "(5600,0020)": {
    tag: "(5600,0020)",
    vr: "OF",
    name: "SpectroscopyData",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,0010)": {
    tag: "(6000-60FF,0010)",
    vr: "US",
    name: "OverlayRows",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,0011)": {
    tag: "(6000-60FF,0011)",
    vr: "US",
    name: "OverlayColumns",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,0015)": {
    tag: "(6000-60FF,0015)",
    vr: "IS",
    name: "NumberOfFramesInOverlay",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,0022)": {
    tag: "(6000-60FF,0022)",
    vr: "LO",
    name: "OverlayDescription",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,0040)": {
    tag: "(6000-60FF,0040)",
    vr: "CS",
    name: "OverlayType",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,0045)": {
    tag: "(6000-60FF,0045)",
    vr: "LO",
    name: "OverlaySubtype",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,0050)": {
    tag: "(6000-60FF,0050)",
    vr: "SS",
    name: "OverlayOrigin",
    vm: "2",
    version: "DICOM"
  },
  "(6000-60FF,0051)": {
    tag: "(6000-60FF,0051)",
    vr: "US",
    name: "ImageFrameOrigin",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,0100)": {
    tag: "(6000-60FF,0100)",
    vr: "US",
    name: "OverlayBitsAllocated",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,0102)": {
    tag: "(6000-60FF,0102)",
    vr: "US",
    name: "OverlayBitPosition",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,1001)": {
    tag: "(6000-60FF,1001)",
    vr: "CS",
    name: "OverlayActivationLayer",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,1301)": {
    tag: "(6000-60FF,1301)",
    vr: "IS",
    name: "ROIArea",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,1302)": {
    tag: "(6000-60FF,1302)",
    vr: "DS",
    name: "ROIMean",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,1303)": {
    tag: "(6000-60FF,1303)",
    vr: "DS",
    name: "ROIStandardDeviation",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,1500)": {
    tag: "(6000-60FF,1500)",
    vr: "LO",
    name: "OverlayLabel",
    vm: "1",
    version: "DICOM"
  },
  "(6000-60FF,3000)": {
    tag: "(6000-60FF,3000)",
    vr: "ox",
    name: "OverlayData",
    vm: "1",
    version: "DICOM"
  },
  "(7FE0,0001)": {
    tag: "(7FE0,0001)",
    vr: "OV",
    name: "ExtendedOffsetTable",
    vm: "1",
    version: "DICOM"
  },
  "(7FE0,0002)": {
    tag: "(7FE0,0002)",
    vr: "OV",
    name: "ExtendedOffsetTableLengths",
    vm: "1",
    version: "DICOM"
  },
  "(7FE0,0008)": {
    tag: "(7FE0,0008)",
    vr: "OF",
    name: "FloatPixelData",
    vm: "1",
    version: "DICOM"
  },
  "(7FE0,0009)": {
    tag: "(7FE0,0009)",
    vr: "OD",
    name: "DoubleFloatPixelData",
    vm: "1",
    version: "DICOM"
  },
  "(7FE0,0010)": {
    tag: "(7FE0,0010)",
    vr: "ox",
    name: "PixelData",
    vm: "1",
    version: "DICOM"
  },
  "(FFFA,FFFA)": {
    tag: "(FFFA,FFFA)",
    vr: "SQ",
    name: "DigitalSignaturesSequence",
    vm: "1",
    version: "DICOM"
  },
  "(FFFC,FFFC)": {
    tag: "(FFFC,FFFC)",
    vr: "OB",
    name: "DataSetTrailingPadding",
    vm: "1",
    version: "DICOM"
  },
  "(FFFE,E000)": {
    tag: "(FFFE,E000)",
    vr: "na",
    name: "Item",
    vm: "1",
    version: "DICOM"
  },
  "(FFFE,E00D)": {
    tag: "(FFFE,E00D)",
    vr: "na",
    name: "ItemDelimitationItem",
    vm: "1",
    version: "DICOM"
  },
  "(FFFE,E0DD)": {
    tag: "(FFFE,E0DD)",
    vr: "na",
    name: "SequenceDelimitationItem",
    vm: "1",
    version: "DICOM"
  },
  "(0028,1224)": {
    tag: "(0028,1224)",
    vr: "OW",
    name: "SegmentedAlphaPaletteColorLookupTableData",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1101)": {
    tag: "(0070,1101)",
    vr: "UI",
    name: "PresentationDisplayCollectionUID",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1102)": {
    tag: "(0070,1102)",
    vr: "UI",
    name: "PresentationSequenceCollectionUID",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1103)": {
    tag: "(0070,1103)",
    vr: "US",
    name: "PresentationSequencePositionIndex",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1104)": {
    tag: "(0070,1104)",
    vr: "SQ",
    name: "RenderedImageReferenceSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1201)": {
    tag: "(0070,1201)",
    vr: "SQ",
    name: "VolumetricPresentationStateInputSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1202)": {
    tag: "(0070,1202)",
    vr: "CS",
    name: "PresentationInputType",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1203)": {
    tag: "(0070,1203)",
    vr: "US",
    name: "InputSequencePositionIndex",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1204)": {
    tag: "(0070,1204)",
    vr: "CS",
    name: "Crop",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1205)": {
    tag: "(0070,1205)",
    vr: "US",
    name: "CroppingSpecificationIndex",
    vm: "1-n",
    version: "Supplement_156"
  },
  "(0070,1206)": {
    tag: "(0070,1206)",
    vr: "CS",
    name: "CompositingMethod",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1207)": {
    tag: "(0070,1207)",
    vr: "US",
    name: "VolumetricPresentationInputNumber",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1208)": {
    tag: "(0070,1208)",
    vr: "CS",
    name: "ImageVolumeGeometry",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1301)": {
    tag: "(0070,1301)",
    vr: "SQ",
    name: "VolumeCroppingSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1302)": {
    tag: "(0070,1302)",
    vr: "CS",
    name: "VolumeCroppingMethod",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1303)": {
    tag: "(0070,1303)",
    vr: "FD",
    name: "BoundingBoxCrop",
    vm: "6",
    version: "Supplement_156"
  },
  "(0070,1304)": {
    tag: "(0070,1304)",
    vr: "SQ",
    name: "ObliqueCroppingPlaneSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1305)": {
    tag: "(0070,1305)",
    vr: "FD",
    name: "ObliqueCroppingPlane",
    vm: "4",
    version: "Supplement_156"
  },
  "(0070,1306)": {
    tag: "(0070,1306)",
    vr: "FD",
    name: "ObliqueCroppingPlaneNormal",
    vm: "3",
    version: "Supplement_156"
  },
  "(0070,1309)": {
    tag: "(0070,1309)",
    vr: "US",
    name: "CroppingSpecificationNumber",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1501)": {
    tag: "(0070,1501)",
    vr: "CS",
    name: "MultiPlanarReconstructionStyle",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1502)": {
    tag: "(0070,1502)",
    vr: "CS",
    name: "MPRThicknessType",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1503)": {
    tag: "(0070,1503)",
    vr: "FD",
    name: "MPRSlabThickness",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1505)": {
    tag: "(0070,1505)",
    vr: "FD",
    name: "MPRTopLeftHandCorner",
    vm: "3",
    version: "Supplement_156"
  },
  "(0070,1507)": {
    tag: "(0070,1507)",
    vr: "FD",
    name: "MPRViewWidthDirection",
    vm: "3",
    version: "Supplement_156"
  },
  "(0070,1508)": {
    tag: "(0070,1508)",
    vr: "FD",
    name: "MPRViewWidth",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,150C)": {
    tag: "(0070,150C)",
    vr: "FL",
    name: "NumberOfVolumetricCurvePoints",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,150D)": {
    tag: "(0070,150D)",
    vr: "OD",
    name: "VolumetricCurvePoints",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1511)": {
    tag: "(0070,1511)",
    vr: "FD",
    name: "MPRViewHeightDirection",
    vm: "3",
    version: "Supplement_156"
  },
  "(0070,1512)": {
    tag: "(0070,1512)",
    vr: "FD",
    name: "MPRViewHeight",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1801)": {
    tag: "(0070,1801)",
    vr: "SQ",
    name: "PresentationStateClassificationComponentSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1802)": {
    tag: "(0070,1802)",
    vr: "CS",
    name: "ComponentType",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1803)": {
    tag: "(0070,1803)",
    vr: "SQ",
    name: "ComponentInputSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1804)": {
    tag: "(0070,1804)",
    vr: "US",
    name: "VolumetricPresentationInputIndex",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1805)": {
    tag: "(0070,1805)",
    vr: "SQ",
    name: "PresentationStateCompositorComponentSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1806)": {
    tag: "(0070,1806)",
    vr: "SQ",
    name: "WeightingTransferFunctionSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1807)": {
    tag: "(0070,1807)",
    vr: "US",
    name: "WeightingLookupTableDescriptor",
    vm: "3",
    version: "Supplement_156"
  },
  "(0070,1808)": {
    tag: "(0070,1808)",
    vr: "OB",
    name: "WeightingLookupTableData",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1901)": {
    tag: "(0070,1901)",
    vr: "SQ",
    name: "VolumetricAnnotationSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1903)": {
    tag: "(0070,1903)",
    vr: "SQ",
    name: "ReferencedStructuredContextSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1904)": {
    tag: "(0070,1904)",
    vr: "UI",
    name: "ReferencedContentItem",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1905)": {
    tag: "(0070,1905)",
    vr: "SQ",
    name: "VolumetricPresentationInputAnnotationSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1907)": {
    tag: "(0070,1907)",
    vr: "CS",
    name: "AnnotationClipping",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1A01)": {
    tag: "(0070,1A01)",
    vr: "CS",
    name: "PresentationAnimationStyle",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1A03)": {
    tag: "(0070,1A03)",
    vr: "FD",
    name: "RecommendedAnimationRate",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1A04)": {
    tag: "(0070,1A04)",
    vr: "SQ",
    name: "AnimationCurveSequence",
    vm: "1",
    version: "Supplement_156"
  },
  "(0070,1A05)": {
    tag: "(0070,1A05)",
    vr: "FD",
    name: "AnimationStepSize",
    vm: "1",
    version: "Supplement_156"
  },
  "(0040,4070)": {
    tag: "(0040,4070)",
    vr: "SQ",
    name: "OutputDestinationSequence",
    vm: "1",
    version: "CP_1441"
  },
  "(0040,4071)": {
    tag: "(0040,4071)",
    vr: "SQ",
    name: "DICOMStorageSequence",
    vm: "1",
    version: "CP_1441"
  },
  "(0040,4072)": {
    tag: "(0040,4072)",
    vr: "SQ",
    name: "STOWRSStorageSequence",
    vm: "1",
    version: "CP_1441"
  },
  "(0040,4073)": {
    tag: "(0040,4073)",
    vr: "UR",
    name: "StorageURL",
    vm: "1",
    version: "CP_1441"
  },
  "(0040,4074)": {
    tag: "(0040,4074)",
    vr: "SQ",
    name: "XDSStorageSequence",
    vm: "1",
    version: "CP_1441"
  },
  "(0028,2002)": {
    tag: "(0028,2002)",
    vr: "CS",
    name: "ColorSpace",
    vm: "1",
    version: "CP_1454"
  },
  "(0040,9213)": {
    tag: "(0040,9213)",
    vr: "FD",
    name: "DoubleFloatRealWorldValueLastValueMapped",
    vm: "1",
    version: "CP_1458"
  },
  "(0040,9214)": {
    tag: "(0040,9214)",
    vr: "FD",
    name: "DoubleFloatRealWorldValueFirstValueMapped",
    vm: "1",
    version: "CP_1458"
  },
  "(0018,1320)": {
    tag: "(0018,1320)",
    vr: "FL",
    name: "B1rms",
    vm: "1",
    version: "CP_1461"
  },
  "(0009-o-FFFF,0000)": {
    tag: "(0009-o-FFFF,0000)",
    vr: "UL",
    name: "PrivateGroupLength",
    vm: "1",
    version: "PRIVATE"
  },
  "(0009-o-FFFF,0010-u-00FF)": {
    tag: "(0009-o-FFFF,0010-u-00FF)",
    vr: "LO",
    name: "PrivateCreator",
    vm: "1",
    version: "PRIVATE"
  },
  "(0001-o-0007,0000)": {
    tag: "(0001-o-0007,0000)",
    vr: "UL",
    name: "IllegalGroupLength",
    vm: "1",
    version: "ILLEGAL"
  },
  "(0001-o-0007,0010-u-00FF)": {
    tag: "(0001-o-0007,0010-u-00FF)",
    vr: "LO",
    name: "IllegalPrivateCreator",
    vm: "1",
    version: "ILLEGAL"
  },
  "(0000-u-FFFF,0000)": {
    tag: "(0000-u-FFFF,0000)",
    vr: "UL",
    name: "GenericGroupLength",
    vm: "1",
    version: "GENERIC"
  },
  "(0000,0001)": {
    tag: "(0000,0001)",
    vr: "UL",
    name: "RETIRED_CommandLengthToEnd",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,0010)": {
    tag: "(0000,0010)",
    vr: "SH",
    name: "RETIRED_CommandRecognitionCode",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,0200)": {
    tag: "(0000,0200)",
    vr: "AE",
    name: "RETIRED_Initiator",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,0300)": {
    tag: "(0000,0300)",
    vr: "AE",
    name: "RETIRED_Receiver",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,0400)": {
    tag: "(0000,0400)",
    vr: "AE",
    name: "RETIRED_FindLocation",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,0850)": {
    tag: "(0000,0850)",
    vr: "US",
    name: "RETIRED_NumberOfMatches",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,0860)": {
    tag: "(0000,0860)",
    vr: "US",
    name: "RETIRED_ResponseSequenceNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,4000)": {
    tag: "(0000,4000)",
    vr: "LT",
    name: "RETIRED_DialogReceiver",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,4010)": {
    tag: "(0000,4010)",
    vr: "LT",
    name: "RETIRED_TerminalType",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,5010)": {
    tag: "(0000,5010)",
    vr: "SH",
    name: "RETIRED_MessageSetID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,5020)": {
    tag: "(0000,5020)",
    vr: "SH",
    name: "RETIRED_EndMessageID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,5110)": {
    tag: "(0000,5110)",
    vr: "LT",
    name: "RETIRED_DisplayFormat",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,5120)": {
    tag: "(0000,5120)",
    vr: "LT",
    name: "RETIRED_PagePositionID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,5130)": {
    tag: "(0000,5130)",
    vr: "CS",
    name: "RETIRED_TextFormatID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,5140)": {
    tag: "(0000,5140)",
    vr: "CS",
    name: "RETIRED_NormalReverse",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,5150)": {
    tag: "(0000,5150)",
    vr: "CS",
    name: "RETIRED_AddGrayScale",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,5160)": {
    tag: "(0000,5160)",
    vr: "CS",
    name: "RETIRED_Borders",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,5170)": {
    tag: "(0000,5170)",
    vr: "IS",
    name: "RETIRED_Copies",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,5180)": {
    tag: "(0000,5180)",
    vr: "CS",
    name: "RETIRED_CommandMagnificationType",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,5190)": {
    tag: "(0000,5190)",
    vr: "CS",
    name: "RETIRED_Erase",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,51A0)": {
    tag: "(0000,51A0)",
    vr: "CS",
    name: "RETIRED_Print",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0000,51B0)": {
    tag: "(0000,51B0)",
    vr: "US",
    name: "RETIRED_Overlays",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0004,1504)": {
    tag: "(0004,1504)",
    vr: "up",
    name: "RETIRED_MRDRDirectoryRecordOffset",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0004,1600)": {
    tag: "(0004,1600)",
    vr: "UL",
    name: "RETIRED_NumberOfReferences",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,0001)": {
    tag: "(0008,0001)",
    vr: "UL",
    name: "RETIRED_LengthToEnd",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,0010)": {
    tag: "(0008,0010)",
    vr: "SH",
    name: "RETIRED_RecognitionCode",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,0024)": {
    tag: "(0008,0024)",
    vr: "DA",
    name: "RETIRED_OverlayDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,0025)": {
    tag: "(0008,0025)",
    vr: "DA",
    name: "RETIRED_CurveDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,0034)": {
    tag: "(0008,0034)",
    vr: "TM",
    name: "RETIRED_OverlayTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,0035)": {
    tag: "(0008,0035)",
    vr: "TM",
    name: "RETIRED_CurveTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,0040)": {
    tag: "(0008,0040)",
    vr: "US",
    name: "RETIRED_DataSetType",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,0041)": {
    tag: "(0008,0041)",
    vr: "LO",
    name: "RETIRED_DataSetSubtype",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,0042)": {
    tag: "(0008,0042)",
    vr: "CS",
    name: "RETIRED_NuclearMedicineSeriesType",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,1000)": {
    tag: "(0008,1000)",
    vr: "AE",
    name: "RETIRED_NetworkID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,1100)": {
    tag: "(0008,1100)",
    vr: "SQ",
    name: "RETIRED_ReferencedResultsSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,1130)": {
    tag: "(0008,1130)",
    vr: "SQ",
    name: "RETIRED_ReferencedOverlaySequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,1145)": {
    tag: "(0008,1145)",
    vr: "SQ",
    name: "RETIRED_ReferencedCurveSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2110)": {
    tag: "(0008,2110)",
    vr: "CS",
    name: "RETIRED_LossyImageCompressionRetired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2200)": {
    tag: "(0008,2200)",
    vr: "CS",
    name: "RETIRED_TransducerPosition",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2204)": {
    tag: "(0008,2204)",
    vr: "CS",
    name: "RETIRED_TransducerOrientation",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2208)": {
    tag: "(0008,2208)",
    vr: "CS",
    name: "RETIRED_AnatomicStructure",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2240)": {
    tag: "(0008,2240)",
    vr: "SQ",
    name: "RETIRED_TransducerPositionSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2242)": {
    tag: "(0008,2242)",
    vr: "SQ",
    name: "RETIRED_TransducerPositionModifierSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2244)": {
    tag: "(0008,2244)",
    vr: "SQ",
    name: "RETIRED_TransducerOrientationSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2246)": {
    tag: "(0008,2246)",
    vr: "SQ",
    name: "RETIRED_TransducerOrientationModifierSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2251)": {
    tag: "(0008,2251)",
    vr: "SQ",
    name: "RETIRED_AnatomicStructureSpaceOrRegionCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2253)": {
    tag: "(0008,2253)",
    vr: "SQ",
    name: "RETIRED_AnatomicPortalOfEntranceCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2255)": {
    tag: "(0008,2255)",
    vr: "SQ",
    name: "RETIRED_AnatomicApproachDirectionCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2256)": {
    tag: "(0008,2256)",
    vr: "ST",
    name: "RETIRED_AnatomicPerspectiveDescriptionTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2257)": {
    tag: "(0008,2257)",
    vr: "SQ",
    name: "RETIRED_AnatomicPerspectiveCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2258)": {
    tag: "(0008,2258)",
    vr: "ST",
    name: "RETIRED_AnatomicLocationOfExaminingInstrumentDescriptionTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,2259)": {
    tag: "(0008,2259)",
    vr: "SQ",
    name: "RETIRED_AnatomicLocationOfExaminingInstrumentCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,225A)": {
    tag: "(0008,225A)",
    vr: "SQ",
    name: "RETIRED_AnatomicStructureSpaceOrRegionModifierCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,225C)": {
    tag: "(0008,225C)",
    vr: "SQ",
    name: "RETIRED_OnAxisBackgroundAnatomicStructureCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0008,4000)": {
    tag: "(0008,4000)",
    vr: "LT",
    name: "RETIRED_IdentifyingComments",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0010,1050)": {
    tag: "(0010,1050)",
    vr: "LO",
    name: "RETIRED_InsurancePlanIdentification",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0014,0023)": {
    tag: "(0014,0023)",
    vr: "ST",
    name: "RETIRED_CADFileFormat",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0014,0024)": {
    tag: "(0014,0024)",
    vr: "ST",
    name: "RETIRED_ComponentReferenceSystem",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0014,0045)": {
    tag: "(0014,0045)",
    vr: "ST",
    name: "RETIRED_MaterialPropertiesFileFormatRetired",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0018,0030)": {
    tag: "(0018,0030)",
    vr: "LO",
    name: "RETIRED_Radionuclide",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0018,0032)": {
    tag: "(0018,0032)",
    vr: "DS",
    name: "RETIRED_EnergyWindowCenterline",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,0033)": {
    tag: "(0018,0033)",
    vr: "DS",
    name: "RETIRED_EnergyWindowTotalWidth",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0018,0037)": {
    tag: "(0018,0037)",
    vr: "CS",
    name: "RETIRED_TherapyType",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,0039)": {
    tag: "(0018,0039)",
    vr: "CS",
    name: "RETIRED_TherapyDescription",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,0061)": {
    tag: "(0018,0061)",
    vr: "DS",
    name: "RETIRED_undefined",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,1011)": {
    tag: "(0018,1011)",
    vr: "LO",
    name: "RETIRED_HardcopyCreationDeviceID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,1017)": {
    tag: "(0018,1017)",
    vr: "LO",
    name: "RETIRED_HardcopyDeviceManufacturer",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,101A)": {
    tag: "(0018,101A)",
    vr: "LO",
    name: "RETIRED_HardcopyDeviceSoftwareVersion",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0018,101B)": {
    tag: "(0018,101B)",
    vr: "LO",
    name: "RETIRED_HardcopyDeviceManufacturerModelName",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,1141)": {
    tag: "(0018,1141)",
    vr: "DS",
    name: "RETIRED_AngularPosition",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,1146)": {
    tag: "(0018,1146)",
    vr: "DS",
    name: "RETIRED_RotationOffset",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0018,1240)": {
    tag: "(0018,1240)",
    vr: "IS",
    name: "RETIRED_UpperLowerPixelValues",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0018,4000)": {
    tag: "(0018,4000)",
    vr: "LT",
    name: "RETIRED_AcquisitionComments",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,5021)": {
    tag: "(0018,5021)",
    vr: "LO",
    name: "RETIRED_PostprocessingFunction",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,5030)": {
    tag: "(0018,5030)",
    vr: "DS",
    name: "RETIRED_DynamicRange",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,5040)": {
    tag: "(0018,5040)",
    vr: "DS",
    name: "RETIRED_TotalGain",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,5210)": {
    tag: "(0018,5210)",
    vr: "DS",
    name: "RETIRED_ImageTransformationMatrix",
    vm: "6",
    version: "DICOM/retired"
  },
  "(0018,5212)": {
    tag: "(0018,5212)",
    vr: "DS",
    name: "RETIRED_ImageTranslationVector",
    vm: "3",
    version: "DICOM/retired"
  },
  "(0018,6038)": {
    tag: "(0018,6038)",
    vr: "UL",
    name: "RETIRED_DopplerSampleVolumeXPositionRetired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,603A)": {
    tag: "(0018,603A)",
    vr: "UL",
    name: "RETIRED_DopplerSampleVolumeYPositionRetired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,603C)": {
    tag: "(0018,603C)",
    vr: "UL",
    name: "RETIRED_TMLinePositionX0Retired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,603E)": {
    tag: "(0018,603E)",
    vr: "UL",
    name: "RETIRED_TMLinePositionY0Retired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,6040)": {
    tag: "(0018,6040)",
    vr: "UL",
    name: "RETIRED_TMLinePositionX1Retired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,6042)": {
    tag: "(0018,6042)",
    vr: "UL",
    name: "RETIRED_TMLinePositionY1Retired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,9096)": {
    tag: "(0018,9096)",
    vr: "FD",
    name: "RETIRED_ParallelReductionFactorInPlaneRetired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,9166)": {
    tag: "(0018,9166)",
    vr: "CS",
    name: "RETIRED_BulkMotionStatus",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,9195)": {
    tag: "(0018,9195)",
    vr: "FD",
    name: "RETIRED_ChemicalShiftMinimumIntegrationLimitInHz",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0018,9196)": {
    tag: "(0018,9196)",
    vr: "FD",
    name: "RETIRED_ChemicalShiftMaximumIntegrationLimitInHz",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,0014)": {
    tag: "(0020,0014)",
    vr: "IS",
    name: "RETIRED_IsotopeNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,0015)": {
    tag: "(0020,0015)",
    vr: "IS",
    name: "RETIRED_PhaseNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,0016)": {
    tag: "(0020,0016)",
    vr: "IS",
    name: "RETIRED_IntervalNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,0017)": {
    tag: "(0020,0017)",
    vr: "IS",
    name: "RETIRED_TimeSlotNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,0018)": {
    tag: "(0020,0018)",
    vr: "IS",
    name: "RETIRED_AngleNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,0022)": {
    tag: "(0020,0022)",
    vr: "IS",
    name: "RETIRED_OverlayNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,0024)": {
    tag: "(0020,0024)",
    vr: "IS",
    name: "RETIRED_CurveNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,0026)": {
    tag: "(0020,0026)",
    vr: "IS",
    name: "RETIRED_LUTNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,0030)": {
    tag: "(0020,0030)",
    vr: "DS",
    name: "RETIRED_ImagePosition",
    vm: "3",
    version: "DICOM/retired"
  },
  "(0020,0035)": {
    tag: "(0020,0035)",
    vr: "DS",
    name: "RETIRED_ImageOrientation",
    vm: "6",
    version: "DICOM/retired"
  },
  "(0020,0050)": {
    tag: "(0020,0050)",
    vr: "DS",
    name: "RETIRED_Location",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,0070)": {
    tag: "(0020,0070)",
    vr: "LO",
    name: "RETIRED_ImageGeometryType",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,0080)": {
    tag: "(0020,0080)",
    vr: "CS",
    name: "RETIRED_MaskingImage",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0020,00AA)": {
    tag: "(0020,00AA)",
    vr: "IS",
    name: "RETIRED_ReportNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,1000)": {
    tag: "(0020,1000)",
    vr: "IS",
    name: "RETIRED_SeriesInStudy",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,1001)": {
    tag: "(0020,1001)",
    vr: "IS",
    name: "RETIRED_AcquisitionsInSeries",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,1003)": {
    tag: "(0020,1003)",
    vr: "IS",
    name: "RETIRED_ImagesInSeries",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,1004)": {
    tag: "(0020,1004)",
    vr: "IS",
    name: "RETIRED_AcquisitionsInStudy",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,1005)": {
    tag: "(0020,1005)",
    vr: "IS",
    name: "RETIRED_ImagesInStudy",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,1020)": {
    tag: "(0020,1020)",
    vr: "LO",
    name: "RETIRED_Reference",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0020,1070)": {
    tag: "(0020,1070)",
    vr: "IS",
    name: "RETIRED_OtherStudyNumbers",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0020,3100-31FF)": {
    tag: "(0020,3100-31FF)",
    vr: "CS",
    name: "RETIRED_SourceImageIDs",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0020,3401)": {
    tag: "(0020,3401)",
    vr: "CS",
    name: "RETIRED_ModifyingDeviceID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,3402)": {
    tag: "(0020,3402)",
    vr: "CS",
    name: "RETIRED_ModifiedImageID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,3403)": {
    tag: "(0020,3403)",
    vr: "DA",
    name: "RETIRED_ModifiedImageDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,3404)": {
    tag: "(0020,3404)",
    vr: "LO",
    name: "RETIRED_ModifyingDeviceManufacturer",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,3405)": {
    tag: "(0020,3405)",
    vr: "TM",
    name: "RETIRED_ModifiedImageTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,3406)": {
    tag: "(0020,3406)",
    vr: "LO",
    name: "RETIRED_ModifiedImageDescription",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0020,5000)": {
    tag: "(0020,5000)",
    vr: "AT",
    name: "RETIRED_OriginalImageIdentification",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0020,5002)": {
    tag: "(0020,5002)",
    vr: "LO",
    name: "RETIRED_OriginalImageIdentificationNomenclature",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0022,1094)": {
    tag: "(0022,1094)",
    vr: "LO",
    name: "RETIRED_LensConstantDescription",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0022,1153)": {
    tag: "(0022,1153)",
    vr: "SQ",
    name: "RETIRED_OphthalmicAxialLengthAcquisitionMethodCodeSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0022,1265)": {
    tag: "(0022,1265)",
    vr: "SQ",
    name: "RETIRED_OphthalmicAxialLengthQualityMetricTypeCodeSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0022,1273)": {
    tag: "(0022,1273)",
    vr: "LO",
    name: "RETIRED_OphthalmicAxialLengthQualityMetricTypeDescription",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0005)": {
    tag: "(0028,0005)",
    vr: "US",
    name: "RETIRED_ImageDimensions",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0012)": {
    tag: "(0028,0012)",
    vr: "US",
    name: "RETIRED_Planes",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0040)": {
    tag: "(0028,0040)",
    vr: "CS",
    name: "RETIRED_ImageFormat",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0050)": {
    tag: "(0028,0050)",
    vr: "LO",
    name: "RETIRED_ManipulatedImage",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,005F)": {
    tag: "(0028,005F)",
    vr: "LO",
    name: "RETIRED_CompressionRecognitionCode",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0060)": {
    tag: "(0028,0060)",
    vr: "CS",
    name: "RETIRED_CompressionCode",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0061)": {
    tag: "(0028,0061)",
    vr: "SH",
    name: "RETIRED_CompressionOriginator",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0062)": {
    tag: "(0028,0062)",
    vr: "LO",
    name: "RETIRED_CompressionLabel",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0063)": {
    tag: "(0028,0063)",
    vr: "SH",
    name: "RETIRED_CompressionDescription",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0065)": {
    tag: "(0028,0065)",
    vr: "CS",
    name: "RETIRED_CompressionSequence",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0066)": {
    tag: "(0028,0066)",
    vr: "AT",
    name: "RETIRED_CompressionStepPointers",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0068)": {
    tag: "(0028,0068)",
    vr: "US",
    name: "RETIRED_RepeatInterval",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0069)": {
    tag: "(0028,0069)",
    vr: "US",
    name: "RETIRED_BitsGrouped",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0070)": {
    tag: "(0028,0070)",
    vr: "US",
    name: "RETIRED_PerimeterTable",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0071)": {
    tag: "(0028,0071)",
    vr: "xs",
    name: "RETIRED_PerimeterValue",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0080)": {
    tag: "(0028,0080)",
    vr: "US",
    name: "RETIRED_PredictorRows",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0081)": {
    tag: "(0028,0081)",
    vr: "US",
    name: "RETIRED_PredictorColumns",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0082)": {
    tag: "(0028,0082)",
    vr: "US",
    name: "RETIRED_PredictorConstants",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0090)": {
    tag: "(0028,0090)",
    vr: "CS",
    name: "RETIRED_BlockedPixels",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0091)": {
    tag: "(0028,0091)",
    vr: "US",
    name: "RETIRED_BlockRows",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0092)": {
    tag: "(0028,0092)",
    vr: "US",
    name: "RETIRED_BlockColumns",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0093)": {
    tag: "(0028,0093)",
    vr: "US",
    name: "RETIRED_RowOverlap",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0094)": {
    tag: "(0028,0094)",
    vr: "US",
    name: "RETIRED_ColumnOverlap",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0104)": {
    tag: "(0028,0104)",
    vr: "xs",
    name: "RETIRED_SmallestValidPixelValue",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0105)": {
    tag: "(0028,0105)",
    vr: "xs",
    name: "RETIRED_LargestValidPixelValue",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0110)": {
    tag: "(0028,0110)",
    vr: "xs",
    name: "RETIRED_SmallestImagePixelValueInPlane",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0111)": {
    tag: "(0028,0111)",
    vr: "xs",
    name: "RETIRED_LargestImagePixelValueInPlane",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0200)": {
    tag: "(0028,0200)",
    vr: "US",
    name: "RETIRED_ImageLocation",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0400)": {
    tag: "(0028,0400)",
    vr: "LO",
    name: "RETIRED_TransformLabel",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0401)": {
    tag: "(0028,0401)",
    vr: "LO",
    name: "RETIRED_TransformVersionNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0402)": {
    tag: "(0028,0402)",
    vr: "US",
    name: "RETIRED_NumberOfTransformSteps",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0403)": {
    tag: "(0028,0403)",
    vr: "LO",
    name: "RETIRED_SequenceOfCompressedData",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0404)": {
    tag: "(0028,0404)",
    vr: "AT",
    name: "RETIRED_DetailsOfCoefficients",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0410)": {
    tag: "(0028,0410)",
    vr: "US",
    name: "RETIRED_RowsForNthOrderCoefficients",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0411)": {
    tag: "(0028,0411)",
    vr: "US",
    name: "RETIRED_ColumnsForNthOrderCoefficients",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0412)": {
    tag: "(0028,0412)",
    vr: "LO",
    name: "RETIRED_CoefficientCoding",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0413)": {
    tag: "(0028,0413)",
    vr: "AT",
    name: "RETIRED_CoefficientCodingPointers",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0700)": {
    tag: "(0028,0700)",
    vr: "LO",
    name: "RETIRED_DCTLabel",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0701)": {
    tag: "(0028,0701)",
    vr: "CS",
    name: "RETIRED_DataBlockDescription",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0702)": {
    tag: "(0028,0702)",
    vr: "AT",
    name: "RETIRED_DataBlock",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0710)": {
    tag: "(0028,0710)",
    vr: "US",
    name: "RETIRED_NormalizationFactorFormat",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0720)": {
    tag: "(0028,0720)",
    vr: "US",
    name: "RETIRED_ZonalMapNumberFormat",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0721)": {
    tag: "(0028,0721)",
    vr: "AT",
    name: "RETIRED_ZonalMapLocation",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0722)": {
    tag: "(0028,0722)",
    vr: "US",
    name: "RETIRED_ZonalMapFormat",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0730)": {
    tag: "(0028,0730)",
    vr: "US",
    name: "RETIRED_AdaptiveMapFormat",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0740)": {
    tag: "(0028,0740)",
    vr: "US",
    name: "RETIRED_CodeNumberFormat",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0800)": {
    tag: "(0028,0800)",
    vr: "CS",
    name: "RETIRED_CodeLabel",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0802)": {
    tag: "(0028,0802)",
    vr: "US",
    name: "RETIRED_NumberOfTables",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0803)": {
    tag: "(0028,0803)",
    vr: "AT",
    name: "RETIRED_CodeTableLocation",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,0804)": {
    tag: "(0028,0804)",
    vr: "US",
    name: "RETIRED_BitsForCodeWord",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,0808)": {
    tag: "(0028,0808)",
    vr: "AT",
    name: "RETIRED_ImageDataLocation",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,1080)": {
    tag: "(0028,1080)",
    vr: "CS",
    name: "RETIRED_GrayScale",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,1100)": {
    tag: "(0028,1100)",
    vr: "xs",
    name: "RETIRED_GrayLookupTableDescriptor",
    vm: "3",
    version: "DICOM/retired"
  },
  "(0028,1111)": {
    tag: "(0028,1111)",
    vr: "xs",
    name: "RETIRED_LargeRedPaletteColorLookupTableDescriptor",
    vm: "4",
    version: "DICOM/retired"
  },
  "(0028,1112)": {
    tag: "(0028,1112)",
    vr: "xs",
    name: "RETIRED_LargeGreenPaletteColorLookupTableDescriptor",
    vm: "4",
    version: "DICOM/retired"
  },
  "(0028,1113)": {
    tag: "(0028,1113)",
    vr: "xs",
    name: "RETIRED_LargeBluePaletteColorLookupTableDescriptor",
    vm: "4",
    version: "DICOM/retired"
  },
  "(0028,1200)": {
    tag: "(0028,1200)",
    vr: "lt",
    name: "RETIRED_GrayLookupTableData",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,1211)": {
    tag: "(0028,1211)",
    vr: "OW",
    name: "RETIRED_LargeRedPaletteColorLookupTableData",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,1212)": {
    tag: "(0028,1212)",
    vr: "OW",
    name: "RETIRED_LargeGreenPaletteColorLookupTableData",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,1213)": {
    tag: "(0028,1213)",
    vr: "OW",
    name: "RETIRED_LargeBluePaletteColorLookupTableData",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,1214)": {
    tag: "(0028,1214)",
    vr: "UI",
    name: "RETIRED_LargePaletteColorLookupTableUID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,4000)": {
    tag: "(0028,4000)",
    vr: "LT",
    name: "RETIRED_ImagePresentationComments",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,5000)": {
    tag: "(0028,5000)",
    vr: "SQ",
    name: "RETIRED_BiPlaneAcquisitionSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0028,6030)": {
    tag: "(0028,6030)",
    vr: "US",
    name: "RETIRED_MaskPointers",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0028,9099)": {
    tag: "(0028,9099)",
    vr: "US",
    name: "RETIRED_LargestMonochromePixelValue",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,000A)": {
    tag: "(0032,000A)",
    vr: "CS",
    name: "RETIRED_StudyStatusID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,000C)": {
    tag: "(0032,000C)",
    vr: "CS",
    name: "RETIRED_StudyPriorityID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,0012)": {
    tag: "(0032,0012)",
    vr: "LO",
    name: "RETIRED_StudyIDIssuer",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,0032)": {
    tag: "(0032,0032)",
    vr: "DA",
    name: "RETIRED_StudyVerifiedDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,0033)": {
    tag: "(0032,0033)",
    vr: "TM",
    name: "RETIRED_StudyVerifiedTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,0034)": {
    tag: "(0032,0034)",
    vr: "DA",
    name: "RETIRED_StudyReadDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,0035)": {
    tag: "(0032,0035)",
    vr: "TM",
    name: "RETIRED_StudyReadTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,1000)": {
    tag: "(0032,1000)",
    vr: "DA",
    name: "RETIRED_ScheduledStudyStartDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,1001)": {
    tag: "(0032,1001)",
    vr: "TM",
    name: "RETIRED_ScheduledStudyStartTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,1010)": {
    tag: "(0032,1010)",
    vr: "DA",
    name: "RETIRED_ScheduledStudyStopDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,1011)": {
    tag: "(0032,1011)",
    vr: "TM",
    name: "RETIRED_ScheduledStudyStopTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,1020)": {
    tag: "(0032,1020)",
    vr: "LO",
    name: "RETIRED_ScheduledStudyLocation",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,1021)": {
    tag: "(0032,1021)",
    vr: "AE",
    name: "RETIRED_ScheduledStudyLocationAETitle",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0032,1030)": {
    tag: "(0032,1030)",
    vr: "LO",
    name: "RETIRED_ReasonForStudy",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,1040)": {
    tag: "(0032,1040)",
    vr: "DA",
    name: "RETIRED_StudyArrivalDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,1041)": {
    tag: "(0032,1041)",
    vr: "TM",
    name: "RETIRED_StudyArrivalTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,1050)": {
    tag: "(0032,1050)",
    vr: "DA",
    name: "RETIRED_StudyCompletionDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,1051)": {
    tag: "(0032,1051)",
    vr: "TM",
    name: "RETIRED_StudyCompletionTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,1055)": {
    tag: "(0032,1055)",
    vr: "CS",
    name: "RETIRED_StudyComponentStatusID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0032,4000)": {
    tag: "(0032,4000)",
    vr: "LT",
    name: "RETIRED_StudyComments",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0038,0011)": {
    tag: "(0038,0011)",
    vr: "LO",
    name: "RETIRED_IssuerOfAdmissionID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0038,001A)": {
    tag: "(0038,001A)",
    vr: "DA",
    name: "RETIRED_ScheduledAdmissionDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0038,001B)": {
    tag: "(0038,001B)",
    vr: "TM",
    name: "RETIRED_ScheduledAdmissionTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0038,001C)": {
    tag: "(0038,001C)",
    vr: "DA",
    name: "RETIRED_ScheduledDischargeDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0038,001D)": {
    tag: "(0038,001D)",
    vr: "TM",
    name: "RETIRED_ScheduledDischargeTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0038,001E)": {
    tag: "(0038,001E)",
    vr: "LO",
    name: "RETIRED_ScheduledPatientInstitutionResidence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0038,0030)": {
    tag: "(0038,0030)",
    vr: "DA",
    name: "RETIRED_DischargeDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0038,0032)": {
    tag: "(0038,0032)",
    vr: "TM",
    name: "RETIRED_DischargeTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0038,0040)": {
    tag: "(0038,0040)",
    vr: "LO",
    name: "RETIRED_DischargeDiagnosisDescription",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0038,0044)": {
    tag: "(0038,0044)",
    vr: "SQ",
    name: "RETIRED_DischargeDiagnosisCodeSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0038,0061)": {
    tag: "(0038,0061)",
    vr: "LO",
    name: "RETIRED_IssuerOfServiceEpisodeID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,0307)": {
    tag: "(0040,0307)",
    vr: "DS",
    name: "RETIRED_DistanceSourceToSupport",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,0330)": {
    tag: "(0040,0330)",
    vr: "SQ",
    name: "RETIRED_ReferencedProcedureStepSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,050A)": {
    tag: "(0040,050A)",
    vr: "LO",
    name: "RETIRED_SpecimenAccessionNumber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,0550)": {
    tag: "(0040,0550)",
    vr: "SQ",
    name: "RETIRED_SpecimenSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,0552)": {
    tag: "(0040,0552)",
    vr: "SQ",
    name: "RETIRED_SpecimenDescriptionSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,0553)": {
    tag: "(0040,0553)",
    vr: "ST",
    name: "RETIRED_SpecimenDescriptionTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,06FA)": {
    tag: "(0040,06FA)",
    vr: "LO",
    name: "RETIRED_SlideIdentifier",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,08D8)": {
    tag: "(0040,08D8)",
    vr: "SQ",
    name: "RETIRED_PixelSpacingSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,08DA)": {
    tag: "(0040,08DA)",
    vr: "SQ",
    name: "RETIRED_CoordinateSystemAxisCodeSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,09F8)": {
    tag: "(0040,09F8)",
    vr: "SQ",
    name: "RETIRED_VitalStainCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,1006)": {
    tag: "(0040,1006)",
    vr: "SH",
    name: "RETIRED_PlacerOrderNumberProcedure",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,1007)": {
    tag: "(0040,1007)",
    vr: "SH",
    name: "RETIRED_FillerOrderNumberProcedure",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,1060)": {
    tag: "(0040,1060)",
    vr: "LO",
    name: "RETIRED_RequestedProcedureDescriptionTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,2001)": {
    tag: "(0040,2001)",
    vr: "LO",
    name: "RETIRED_ReasonForTheImagingServiceRequest",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,2006)": {
    tag: "(0040,2006)",
    vr: "SH",
    name: "RETIRED_PlacerOrderNumberImagingServiceRequestRetired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,2007)": {
    tag: "(0040,2007)",
    vr: "SH",
    name: "RETIRED_FillerOrderNumberImagingServiceRequestRetired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,4001)": {
    tag: "(0040,4001)",
    vr: "CS",
    name: "RETIRED_GeneralPurposeScheduledProcedureStepStatus",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,4002)": {
    tag: "(0040,4002)",
    vr: "CS",
    name: "RETIRED_GeneralPurposePerformedProcedureStepStatus",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,4003)": {
    tag: "(0040,4003)",
    vr: "CS",
    name: "RETIRED_GeneralPurposeScheduledProcedureStepPriority",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,4004)": {
    tag: "(0040,4004)",
    vr: "SQ",
    name: "RETIRED_ScheduledProcessingApplicationsCodeSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,4006)": {
    tag: "(0040,4006)",
    vr: "CS",
    name: "RETIRED_MultipleCopiesFlag",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,4015)": {
    tag: "(0040,4015)",
    vr: "SQ",
    name: "RETIRED_ResultingGeneralPurposePerformedProcedureStepsSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,4016)": {
    tag: "(0040,4016)",
    vr: "SQ",
    name: "RETIRED_ReferencedGeneralPurposeScheduledProcedureStepSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,4022)": {
    tag: "(0040,4022)",
    vr: "SQ",
    name: "RETIRED_RelevantInformationSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,4023)": {
    tag: "(0040,4023)",
    vr: "UI",
    name: "RETIRED_ReferencedGeneralPurposeScheduledProcedureStepTransactionUID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,4031)": {
    tag: "(0040,4031)",
    vr: "SQ",
    name: "RETIRED_RequestedSubsequentWorkitemCodeSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,4032)": {
    tag: "(0040,4032)",
    vr: "SQ",
    name: "RETIRED_NonDICOMOutputCodeSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A007)": {
    tag: "(0040,A007)",
    vr: "CS",
    name: "RETIRED_FindingsFlagTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A020)": {
    tag: "(0040,A020)",
    vr: "SQ",
    name: "RETIRED_FindingsSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A021)": {
    tag: "(0040,A021)",
    vr: "UI",
    name: "RETIRED_FindingsGroupUIDTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A022)": {
    tag: "(0040,A022)",
    vr: "UI",
    name: "RETIRED_ReferencedFindingsGroupUIDTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A023)": {
    tag: "(0040,A023)",
    vr: "DA",
    name: "RETIRED_FindingsGroupRecordingDateTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A024)": {
    tag: "(0040,A024)",
    vr: "TM",
    name: "RETIRED_FindingsGroupRecordingTimeTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A026)": {
    tag: "(0040,A026)",
    vr: "SQ",
    name: "RETIRED_FindingsSourceCategoryCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A028)": {
    tag: "(0040,A028)",
    vr: "SQ",
    name: "RETIRED_DocumentingOrganizationIdentifierCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A047)": {
    tag: "(0040,A047)",
    vr: "LO",
    name: "RETIRED_MeasurementPrecisionDescriptionTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A057)": {
    tag: "(0040,A057)",
    vr: "CS",
    name: "RETIRED_UrgencyOrPriorityAlertsTrial",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0040,A060)": {
    tag: "(0040,A060)",
    vr: "LO",
    name: "RETIRED_SequencingIndicatorTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A066)": {
    tag: "(0040,A066)",
    vr: "SQ",
    name: "RETIRED_DocumentIdentifierCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A067)": {
    tag: "(0040,A067)",
    vr: "PN",
    name: "RETIRED_DocumentAuthorTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A068)": {
    tag: "(0040,A068)",
    vr: "SQ",
    name: "RETIRED_DocumentAuthorIdentifierCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A070)": {
    tag: "(0040,A070)",
    vr: "SQ",
    name: "RETIRED_IdentifierCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A074)": {
    tag: "(0040,A074)",
    vr: "OB",
    name: "RETIRED_ObjectBinaryIdentifierTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A076)": {
    tag: "(0040,A076)",
    vr: "SQ",
    name: "RETIRED_DocumentingObserverIdentifierCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A085)": {
    tag: "(0040,A085)",
    vr: "SQ",
    name: "RETIRED_ProcedureIdentifierCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A089)": {
    tag: "(0040,A089)",
    vr: "OB",
    name: "RETIRED_ObjectDirectoryBinaryIdentifierTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A090)": {
    tag: "(0040,A090)",
    vr: "SQ",
    name: "RETIRED_EquivalentCDADocumentSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A110)": {
    tag: "(0040,A110)",
    vr: "DA",
    name: "RETIRED_DateOfDocumentOrVerbalTransactionTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A112)": {
    tag: "(0040,A112)",
    vr: "TM",
    name: "RETIRED_TimeOfDocumentCreationOrVerbalTransactionTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A125)": {
    tag: "(0040,A125)",
    vr: "CS",
    name: "RETIRED_ReportStatusIDTrial",
    vm: "2",
    version: "DICOM/retired"
  },
  "(0040,A167)": {
    tag: "(0040,A167)",
    vr: "SQ",
    name: "RETIRED_ObservationCategoryCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A16A)": {
    tag: "(0040,A16A)",
    vr: "ST",
    name: "RETIRED_BibliographicCitationTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A172)": {
    tag: "(0040,A172)",
    vr: "UI",
    name: "RETIRED_ReferencedObservationUIDTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A173)": {
    tag: "(0040,A173)",
    vr: "CS",
    name: "RETIRED_ReferencedObservationClassTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A174)": {
    tag: "(0040,A174)",
    vr: "CS",
    name: "RETIRED_ReferencedObjectObservationClassTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A192)": {
    tag: "(0040,A192)",
    vr: "DA",
    name: "RETIRED_ObservationDateTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A193)": {
    tag: "(0040,A193)",
    vr: "TM",
    name: "RETIRED_ObservationTimeTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A194)": {
    tag: "(0040,A194)",
    vr: "CS",
    name: "RETIRED_MeasurementAutomationTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A224)": {
    tag: "(0040,A224)",
    vr: "ST",
    name: "RETIRED_IdentificationDescriptionTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A290)": {
    tag: "(0040,A290)",
    vr: "CS",
    name: "RETIRED_CoordinatesSetGeometricTypeTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A296)": {
    tag: "(0040,A296)",
    vr: "SQ",
    name: "RETIRED_AlgorithmCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A297)": {
    tag: "(0040,A297)",
    vr: "ST",
    name: "RETIRED_AlgorithmDescriptionTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A29A)": {
    tag: "(0040,A29A)",
    vr: "SL",
    name: "RETIRED_PixelCoordinatesSetTrial",
    vm: "2-2n",
    version: "DICOM/retired"
  },
  "(0040,A307)": {
    tag: "(0040,A307)",
    vr: "PN",
    name: "RETIRED_CurrentObserverTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A313)": {
    tag: "(0040,A313)",
    vr: "SQ",
    name: "RETIRED_ReferencedAccessionSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A33A)": {
    tag: "(0040,A33A)",
    vr: "ST",
    name: "RETIRED_ReportStatusCommentTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A340)": {
    tag: "(0040,A340)",
    vr: "SQ",
    name: "RETIRED_ProcedureContextSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A352)": {
    tag: "(0040,A352)",
    vr: "PN",
    name: "RETIRED_VerbalSourceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A353)": {
    tag: "(0040,A353)",
    vr: "ST",
    name: "RETIRED_AddressTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A354)": {
    tag: "(0040,A354)",
    vr: "LO",
    name: "RETIRED_TelephoneNumberTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A358)": {
    tag: "(0040,A358)",
    vr: "SQ",
    name: "RETIRED_VerbalSourceIdentifierCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A380)": {
    tag: "(0040,A380)",
    vr: "SQ",
    name: "RETIRED_ReportDetailSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A402)": {
    tag: "(0040,A402)",
    vr: "UI",
    name: "RETIRED_ObservationSubjectUIDTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A403)": {
    tag: "(0040,A403)",
    vr: "CS",
    name: "RETIRED_ObservationSubjectClassTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A404)": {
    tag: "(0040,A404)",
    vr: "SQ",
    name: "RETIRED_ObservationSubjectTypeCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A600)": {
    tag: "(0040,A600)",
    vr: "CS",
    name: "RETIRED_ObservationSubjectContextFlagTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A601)": {
    tag: "(0040,A601)",
    vr: "CS",
    name: "RETIRED_ObserverContextFlagTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A603)": {
    tag: "(0040,A603)",
    vr: "CS",
    name: "RETIRED_ProcedureContextFlagTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A731)": {
    tag: "(0040,A731)",
    vr: "SQ",
    name: "RETIRED_RelationshipSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A732)": {
    tag: "(0040,A732)",
    vr: "SQ",
    name: "RETIRED_RelationshipTypeCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A744)": {
    tag: "(0040,A744)",
    vr: "SQ",
    name: "RETIRED_LanguageCodeSequenceTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,A992)": {
    tag: "(0040,A992)",
    vr: "ST",
    name: "RETIRED_UniformResourceLocatorTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,DB06)": {
    tag: "(0040,DB06)",
    vr: "DT",
    name: "RETIRED_TemplateVersion",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,DB07)": {
    tag: "(0040,DB07)",
    vr: "DT",
    name: "RETIRED_TemplateLocalVersion",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,DB0B)": {
    tag: "(0040,DB0B)",
    vr: "CS",
    name: "RETIRED_TemplateExtensionFlag",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,DB0C)": {
    tag: "(0040,DB0C)",
    vr: "UI",
    name: "RETIRED_TemplateExtensionOrganizationUID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0040,DB0D)": {
    tag: "(0040,DB0D)",
    vr: "UI",
    name: "RETIRED_TemplateExtensionCreatorUID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0054,1400)": {
    tag: "(0054,1400)",
    vr: "CS",
    name: "RETIRED_CountsIncluded",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(0054,1401)": {
    tag: "(0054,1401)",
    vr: "CS",
    name: "RETIRED_DeadTimeCorrectionFlag",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0070,0040)": {
    tag: "(0070,0040)",
    vr: "IS",
    name: "RETIRED_ImageRotationRetired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0070,0050)": {
    tag: "(0070,0050)",
    vr: "US",
    name: "RETIRED_DisplayedAreaTopLeftHandCornerTrial",
    vm: "2",
    version: "DICOM/retired"
  },
  "(0070,0051)": {
    tag: "(0070,0051)",
    vr: "US",
    name: "RETIRED_DisplayedAreaBottomRightHandCornerTrial",
    vm: "2",
    version: "DICOM/retired"
  },
  "(0070,0067)": {
    tag: "(0070,0067)",
    vr: "US",
    name: "RETIRED_GraphicLayerRecommendedDisplayRGBValue",
    vm: "3",
    version: "DICOM/retired"
  },
  "(0074,1024)": {
    tag: "(0074,1024)",
    vr: "IS",
    name: "RETIRED_BeamOrderIndexTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0074,1038)": {
    tag: "(0074,1038)",
    vr: "DS",
    name: "RETIRED_DoubleExposureMetersetTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0074,103A)": {
    tag: "(0074,103A)",
    vr: "DS",
    name: "RETIRED_DoubleExposureFieldDeltaTrial",
    vm: "4",
    version: "DICOM/retired"
  },
  "(0074,1220)": {
    tag: "(0074,1220)",
    vr: "SQ",
    name: "RETIRED_RelatedProcedureStepSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0074,1222)": {
    tag: "(0074,1222)",
    vr: "LO",
    name: "RETIRED_ProcedureStepRelationshipType",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0088,0904)": {
    tag: "(0088,0904)",
    vr: "LO",
    name: "RETIRED_TopicTitle",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0088,0906)": {
    tag: "(0088,0906)",
    vr: "ST",
    name: "RETIRED_TopicSubject",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0088,0910)": {
    tag: "(0088,0910)",
    vr: "LO",
    name: "RETIRED_TopicAuthor",
    vm: "1",
    version: "DICOM/retired"
  },
  "(0088,0912)": {
    tag: "(0088,0912)",
    vr: "LO",
    name: "RETIRED_TopicKeywords",
    vm: "1-32",
    version: "DICOM/retired"
  },
  "(0400,0315)": {
    tag: "(0400,0315)",
    vr: "FL",
    name: "RETIRED_undefined",
    vm: "1",
    version: "DICOM/retired"
  },
  "(1000,0010)": {
    tag: "(1000,0010)",
    vr: "US",
    name: "RETIRED_EscapeTriplet",
    vm: "3",
    version: "DICOM/retired"
  },
  "(1000,0011)": {
    tag: "(1000,0011)",
    vr: "US",
    name: "RETIRED_RunLengthTriplet",
    vm: "3",
    version: "DICOM/retired"
  },
  "(1000,0012)": {
    tag: "(1000,0012)",
    vr: "US",
    name: "RETIRED_HuffmanTableSize",
    vm: "1",
    version: "DICOM/retired"
  },
  "(1000,0013)": {
    tag: "(1000,0013)",
    vr: "US",
    name: "RETIRED_HuffmanTableTriplet",
    vm: "3",
    version: "DICOM/retired"
  },
  "(1000,0014)": {
    tag: "(1000,0014)",
    vr: "US",
    name: "RETIRED_ShiftTableSize",
    vm: "1",
    version: "DICOM/retired"
  },
  "(1000,0015)": {
    tag: "(1000,0015)",
    vr: "US",
    name: "RETIRED_ShiftTableTriplet",
    vm: "3",
    version: "DICOM/retired"
  },
  "(1010,0004)": {
    tag: "(1010,0004)",
    vr: "US",
    name: "RETIRED_ZonalMap",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(2000,0062)": {
    tag: "(2000,0062)",
    vr: "CS",
    name: "RETIRED_ColorImagePrintingFlag",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2000,0063)": {
    tag: "(2000,0063)",
    vr: "CS",
    name: "RETIRED_CollationFlag",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2000,0065)": {
    tag: "(2000,0065)",
    vr: "CS",
    name: "RETIRED_AnnotationFlag",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2000,0067)": {
    tag: "(2000,0067)",
    vr: "CS",
    name: "RETIRED_ImageOverlayFlag",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2000,0069)": {
    tag: "(2000,0069)",
    vr: "CS",
    name: "RETIRED_PresentationLUTFlag",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2000,006A)": {
    tag: "(2000,006A)",
    vr: "CS",
    name: "RETIRED_ImageBoxPresentationLUTFlag",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2000,0510)": {
    tag: "(2000,0510)",
    vr: "SQ",
    name: "RETIRED_ReferencedStoredPrintSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2020,0130)": {
    tag: "(2020,0130)",
    vr: "SQ",
    name: "RETIRED_ReferencedImageOverlayBoxSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2020,0140)": {
    tag: "(2020,0140)",
    vr: "SQ",
    name: "RETIRED_ReferencedVOILUTBoxSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2040,0010)": {
    tag: "(2040,0010)",
    vr: "SQ",
    name: "RETIRED_ReferencedOverlayPlaneSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2040,0011)": {
    tag: "(2040,0011)",
    vr: "US",
    name: "RETIRED_ReferencedOverlayPlaneGroups",
    vm: "1-99",
    version: "DICOM/retired"
  },
  "(2040,0020)": {
    tag: "(2040,0020)",
    vr: "SQ",
    name: "RETIRED_OverlayPixelDataSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2040,0060)": {
    tag: "(2040,0060)",
    vr: "CS",
    name: "RETIRED_OverlayMagnificationType",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2040,0070)": {
    tag: "(2040,0070)",
    vr: "CS",
    name: "RETIRED_OverlaySmoothingType",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2040,0072)": {
    tag: "(2040,0072)",
    vr: "CS",
    name: "RETIRED_OverlayOrImageMagnification",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2040,0074)": {
    tag: "(2040,0074)",
    vr: "US",
    name: "RETIRED_MagnifyToNumberOfColumns",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2040,0080)": {
    tag: "(2040,0080)",
    vr: "CS",
    name: "RETIRED_OverlayForegroundDensity",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2040,0082)": {
    tag: "(2040,0082)",
    vr: "CS",
    name: "RETIRED_OverlayBackgroundDensity",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2040,0090)": {
    tag: "(2040,0090)",
    vr: "CS",
    name: "RETIRED_OverlayMode",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2040,0100)": {
    tag: "(2040,0100)",
    vr: "CS",
    name: "RETIRED_ThresholdDensity",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2040,0500)": {
    tag: "(2040,0500)",
    vr: "SQ",
    name: "RETIRED_ReferencedImageBoxSequenceRetired",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2100,0010)": {
    tag: "(2100,0010)",
    vr: "SH",
    name: "RETIRED_PrintJobID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2100,0140)": {
    tag: "(2100,0140)",
    vr: "AE",
    name: "RETIRED_DestinationAE",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2100,0500)": {
    tag: "(2100,0500)",
    vr: "SQ",
    name: "RETIRED_ReferencedPrintJobSequencePullStoredPrint",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2110,0099)": {
    tag: "(2110,0099)",
    vr: "SH",
    name: "RETIRED_PrintQueueID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2120,0010)": {
    tag: "(2120,0010)",
    vr: "CS",
    name: "RETIRED_QueueStatus",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2120,0050)": {
    tag: "(2120,0050)",
    vr: "SQ",
    name: "RETIRED_PrintJobDescriptionSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2120,0070)": {
    tag: "(2120,0070)",
    vr: "SQ",
    name: "RETIRED_ReferencedPrintJobSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2130,0010)": {
    tag: "(2130,0010)",
    vr: "SQ",
    name: "RETIRED_PrintManagementCapabilitiesSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2130,0015)": {
    tag: "(2130,0015)",
    vr: "SQ",
    name: "RETIRED_PrinterCharacteristicsSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2130,0030)": {
    tag: "(2130,0030)",
    vr: "SQ",
    name: "RETIRED_FilmBoxContentSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2130,0040)": {
    tag: "(2130,0040)",
    vr: "SQ",
    name: "RETIRED_ImageBoxContentSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2130,0050)": {
    tag: "(2130,0050)",
    vr: "SQ",
    name: "RETIRED_AnnotationContentSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2130,0060)": {
    tag: "(2130,0060)",
    vr: "SQ",
    name: "RETIRED_ImageOverlayBoxContentSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2130,0080)": {
    tag: "(2130,0080)",
    vr: "SQ",
    name: "RETIRED_PresentationLUTContentSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2130,00A0)": {
    tag: "(2130,00A0)",
    vr: "SQ",
    name: "RETIRED_ProposedStudySequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(2130,00C0)": {
    tag: "(2130,00C0)",
    vr: "SQ",
    name: "RETIRED_OriginalImageSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(3006,00C0)": {
    tag: "(3006,00C0)",
    vr: "SQ",
    name: "RETIRED_FrameOfReferenceRelationshipSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(3006,00C2)": {
    tag: "(3006,00C2)",
    vr: "UI",
    name: "RETIRED_RelatedFrameOfReferenceUID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(3006,00C4)": {
    tag: "(3006,00C4)",
    vr: "CS",
    name: "RETIRED_FrameOfReferenceTransformationType",
    vm: "1",
    version: "DICOM/retired"
  },
  "(300A,0088)": {
    tag: "(300A,0088)",
    vr: "FL",
    name: "RETIRED_BeamDosePointDepth",
    vm: "1",
    version: "DICOM/retired"
  },
  "(300A,0089)": {
    tag: "(300A,0089)",
    vr: "FL",
    name: "RETIRED_BeamDosePointEquivalentDepth",
    vm: "1",
    version: "DICOM/retired"
  },
  "(300A,008A)": {
    tag: "(300A,008A)",
    vr: "FL",
    name: "RETIRED_BeamDosePointSSD",
    vm: "1",
    version: "DICOM/retired"
  },
  "(300A,0782)": {
    tag: "(300A,0782)",
    vr: "US",
    name: "RETIRED_undefined",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4000,0010)": {
    tag: "(4000,0010)",
    vr: "LT",
    name: "RETIRED_Arbitrary",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4000,4000)": {
    tag: "(4000,4000)",
    vr: "LT",
    name: "RETIRED_TextComments",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0040)": {
    tag: "(4008,0040)",
    vr: "SH",
    name: "RETIRED_ResultsID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0042)": {
    tag: "(4008,0042)",
    vr: "LO",
    name: "RETIRED_ResultsIDIssuer",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0050)": {
    tag: "(4008,0050)",
    vr: "SQ",
    name: "RETIRED_ReferencedInterpretationSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,00FF)": {
    tag: "(4008,00FF)",
    vr: "CS",
    name: "RETIRED_ReportProductionStatusTrial",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0100)": {
    tag: "(4008,0100)",
    vr: "DA",
    name: "RETIRED_InterpretationRecordedDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0101)": {
    tag: "(4008,0101)",
    vr: "TM",
    name: "RETIRED_InterpretationRecordedTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0102)": {
    tag: "(4008,0102)",
    vr: "PN",
    name: "RETIRED_InterpretationRecorder",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0103)": {
    tag: "(4008,0103)",
    vr: "LO",
    name: "RETIRED_ReferenceToRecordedSound",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0108)": {
    tag: "(4008,0108)",
    vr: "DA",
    name: "RETIRED_InterpretationTranscriptionDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0109)": {
    tag: "(4008,0109)",
    vr: "TM",
    name: "RETIRED_InterpretationTranscriptionTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,010A)": {
    tag: "(4008,010A)",
    vr: "PN",
    name: "RETIRED_InterpretationTranscriber",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,010B)": {
    tag: "(4008,010B)",
    vr: "ST",
    name: "RETIRED_InterpretationText",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,010C)": {
    tag: "(4008,010C)",
    vr: "PN",
    name: "RETIRED_InterpretationAuthor",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0111)": {
    tag: "(4008,0111)",
    vr: "SQ",
    name: "RETIRED_InterpretationApproverSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0112)": {
    tag: "(4008,0112)",
    vr: "DA",
    name: "RETIRED_InterpretationApprovalDate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0113)": {
    tag: "(4008,0113)",
    vr: "TM",
    name: "RETIRED_InterpretationApprovalTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0114)": {
    tag: "(4008,0114)",
    vr: "PN",
    name: "RETIRED_PhysicianApprovingInterpretation",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0115)": {
    tag: "(4008,0115)",
    vr: "LT",
    name: "RETIRED_InterpretationDiagnosisDescription",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0117)": {
    tag: "(4008,0117)",
    vr: "SQ",
    name: "RETIRED_InterpretationDiagnosisCodeSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0118)": {
    tag: "(4008,0118)",
    vr: "SQ",
    name: "RETIRED_ResultsDistributionListSequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0119)": {
    tag: "(4008,0119)",
    vr: "PN",
    name: "RETIRED_DistributionName",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,011A)": {
    tag: "(4008,011A)",
    vr: "LO",
    name: "RETIRED_DistributionAddress",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0200)": {
    tag: "(4008,0200)",
    vr: "SH",
    name: "RETIRED_InterpretationID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0202)": {
    tag: "(4008,0202)",
    vr: "LO",
    name: "RETIRED_InterpretationIDIssuer",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0210)": {
    tag: "(4008,0210)",
    vr: "CS",
    name: "RETIRED_InterpretationTypeID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0212)": {
    tag: "(4008,0212)",
    vr: "CS",
    name: "RETIRED_InterpretationStatusID",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,0300)": {
    tag: "(4008,0300)",
    vr: "ST",
    name: "RETIRED_Impressions",
    vm: "1",
    version: "DICOM/retired"
  },
  "(4008,4000)": {
    tag: "(4008,4000)",
    vr: "ST",
    name: "RETIRED_ResultsComments",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,0005)": {
    tag: "(5000-50FF,0005)",
    vr: "US",
    name: "RETIRED_CurveDimensions",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,0010)": {
    tag: "(5000-50FF,0010)",
    vr: "US",
    name: "RETIRED_NumberOfPoints",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,0020)": {
    tag: "(5000-50FF,0020)",
    vr: "CS",
    name: "RETIRED_TypeOfData",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,0022)": {
    tag: "(5000-50FF,0022)",
    vr: "LO",
    name: "RETIRED_CurveDescription",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,0030)": {
    tag: "(5000-50FF,0030)",
    vr: "SH",
    name: "RETIRED_AxisUnits",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(5000-50FF,0040)": {
    tag: "(5000-50FF,0040)",
    vr: "SH",
    name: "RETIRED_AxisLabels",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(5000-50FF,0103)": {
    tag: "(5000-50FF,0103)",
    vr: "US",
    name: "RETIRED_DataValueRepresentation",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,0104)": {
    tag: "(5000-50FF,0104)",
    vr: "US",
    name: "RETIRED_MinimumCoordinateValue",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(5000-50FF,0105)": {
    tag: "(5000-50FF,0105)",
    vr: "US",
    name: "RETIRED_MaximumCoordinateValue",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(5000-50FF,0106)": {
    tag: "(5000-50FF,0106)",
    vr: "SH",
    name: "RETIRED_CurveRange",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(5000-50FF,0110)": {
    tag: "(5000-50FF,0110)",
    vr: "US",
    name: "RETIRED_CurveDataDescriptor",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(5000-50FF,0112)": {
    tag: "(5000-50FF,0112)",
    vr: "US",
    name: "RETIRED_CoordinateStartValue",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(5000-50FF,0114)": {
    tag: "(5000-50FF,0114)",
    vr: "US",
    name: "RETIRED_CoordinateStepValue",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(5000-50FF,1001)": {
    tag: "(5000-50FF,1001)",
    vr: "CS",
    name: "RETIRED_CurveActivationLayer",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,2000)": {
    tag: "(5000-50FF,2000)",
    vr: "US",
    name: "RETIRED_AudioType",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,2002)": {
    tag: "(5000-50FF,2002)",
    vr: "US",
    name: "RETIRED_AudioSampleFormat",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,2004)": {
    tag: "(5000-50FF,2004)",
    vr: "US",
    name: "RETIRED_NumberOfChannels",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,2006)": {
    tag: "(5000-50FF,2006)",
    vr: "UL",
    name: "RETIRED_NumberOfSamples",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,2008)": {
    tag: "(5000-50FF,2008)",
    vr: "UL",
    name: "RETIRED_SampleRate",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,200A)": {
    tag: "(5000-50FF,200A)",
    vr: "UL",
    name: "RETIRED_TotalTime",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,200C)": {
    tag: "(5000-50FF,200C)",
    vr: "ox",
    name: "RETIRED_AudioSampleData",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,200E)": {
    tag: "(5000-50FF,200E)",
    vr: "LT",
    name: "RETIRED_AudioComments",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,2500)": {
    tag: "(5000-50FF,2500)",
    vr: "LO",
    name: "RETIRED_CurveLabel",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,2600)": {
    tag: "(5000-50FF,2600)",
    vr: "SQ",
    name: "RETIRED_CurveReferencedOverlaySequence",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,2610)": {
    tag: "(5000-50FF,2610)",
    vr: "US",
    name: "RETIRED_CurveReferencedOverlayGroup",
    vm: "1",
    version: "DICOM/retired"
  },
  "(5000-50FF,3000)": {
    tag: "(5000-50FF,3000)",
    vr: "ox",
    name: "RETIRED_CurveData",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0012)": {
    tag: "(6000-60FF,0012)",
    vr: "US",
    name: "RETIRED_OverlayPlanes",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0052)": {
    tag: "(6000-60FF,0052)",
    vr: "US",
    name: "RETIRED_OverlayPlaneOrigin",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0060)": {
    tag: "(6000-60FF,0060)",
    vr: "CS",
    name: "RETIRED_OverlayCompressionCode",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0061)": {
    tag: "(6000-60FF,0061)",
    vr: "SH",
    name: "RETIRED_OverlayCompressionOriginator",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0062)": {
    tag: "(6000-60FF,0062)",
    vr: "SH",
    name: "RETIRED_OverlayCompressionLabel",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0063)": {
    tag: "(6000-60FF,0063)",
    vr: "CS",
    name: "RETIRED_OverlayCompressionDescription",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0066)": {
    tag: "(6000-60FF,0066)",
    vr: "AT",
    name: "RETIRED_OverlayCompressionStepPointers",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(6000-60FF,0068)": {
    tag: "(6000-60FF,0068)",
    vr: "US",
    name: "RETIRED_OverlayRepeatInterval",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0069)": {
    tag: "(6000-60FF,0069)",
    vr: "US",
    name: "RETIRED_OverlayBitsGrouped",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0110)": {
    tag: "(6000-60FF,0110)",
    vr: "CS",
    name: "RETIRED_OverlayFormat",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0200)": {
    tag: "(6000-60FF,0200)",
    vr: "US",
    name: "RETIRED_OverlayLocation",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0800)": {
    tag: "(6000-60FF,0800)",
    vr: "CS",
    name: "RETIRED_OverlayCodeLabel",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(6000-60FF,0802)": {
    tag: "(6000-60FF,0802)",
    vr: "US",
    name: "RETIRED_OverlayNumberOfTables",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,0803)": {
    tag: "(6000-60FF,0803)",
    vr: "AT",
    name: "RETIRED_OverlayCodeTableLocation",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(6000-60FF,0804)": {
    tag: "(6000-60FF,0804)",
    vr: "US",
    name: "RETIRED_OverlayBitsForCodeWord",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,1100)": {
    tag: "(6000-60FF,1100)",
    vr: "US",
    name: "RETIRED_OverlayDescriptorGray",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,1101)": {
    tag: "(6000-60FF,1101)",
    vr: "US",
    name: "RETIRED_OverlayDescriptorRed",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,1102)": {
    tag: "(6000-60FF,1102)",
    vr: "US",
    name: "RETIRED_OverlayDescriptorGreen",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,1103)": {
    tag: "(6000-60FF,1103)",
    vr: "US",
    name: "RETIRED_OverlayDescriptorBlue",
    vm: "1",
    version: "DICOM/retired"
  },
  "(6000-60FF,1200)": {
    tag: "(6000-60FF,1200)",
    vr: "US",
    name: "RETIRED_OverlaysGray",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(6000-60FF,1201)": {
    tag: "(6000-60FF,1201)",
    vr: "US",
    name: "RETIRED_OverlaysRed",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(6000-60FF,1202)": {
    tag: "(6000-60FF,1202)",
    vr: "US",
    name: "RETIRED_OverlaysGreen",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(6000-60FF,1203)": {
    tag: "(6000-60FF,1203)",
    vr: "US",
    name: "RETIRED_OverlaysBlue",
    vm: "1-n",
    version: "DICOM/retired"
  },
  "(6000-60FF,4000)": {
    tag: "(6000-60FF,4000)",
    vr: "LT",
    name: "RETIRED_OverlayComments",
    vm: "1",
    version: "DICOM/retired"
  },
  "(7FE0,0020)": {
    tag: "(7FE0,0020)",
    vr: "OW",
    name: "RETIRED_CoefficientsSDVN",
    vm: "1",
    version: "DICOM/retired"
  },
  "(7FE0,0030)": {
    tag: "(7FE0,0030)",
    vr: "OW",
    name: "RETIRED_CoefficientsSDHN",
    vm: "1",
    version: "DICOM/retired"
  },
  "(7FE0,0040)": {
    tag: "(7FE0,0040)",
    vr: "OW",
    name: "RETIRED_CoefficientsSDDN",
    vm: "1",
    version: "DICOM/retired"
  },
  "(7F00-7FFF,0010)": {
    tag: "(7F00-7FFF,0010)",
    vr: "ox",
    name: "RETIRED_VariablePixelData",
    vm: "1",
    version: "DICOM/retired"
  },
  "(7F00-7FFF,0011)": {
    tag: "(7F00-7FFF,0011)",
    vr: "US",
    name: "RETIRED_VariableNextDataGroup",
    vm: "1",
    version: "DICOM/retired"
  },
  "(7F00-7FFF,0020)": {
    tag: "(7F00-7FFF,0020)",
    vr: "OW",
    name: "RETIRED_VariableCoefficientsSDVN",
    vm: "1",
    version: "DICOM/retired"
  },
  "(7F00-7FFF,0030)": {
    tag: "(7F00-7FFF,0030)",
    vr: "OW",
    name: "RETIRED_VariableCoefficientsSDHN",
    vm: "1",
    version: "DICOM/retired"
  },
  "(7F00-7FFF,0040)": {
    tag: "(7F00-7FFF,0040)",
    vr: "OW",
    name: "RETIRED_VariableCoefficientsSDDN",
    vm: "1",
    version: "DICOM/retired"
  },
  "": {
    tag: ""
  },
  '(0019,"1.2.840.113681",10)': {
    tag: '(0019,"1.2.840.113681",10)',
    vr: "ST",
    name: "CRImageParamsCommon",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"1.2.840.113681",11)': {
    tag: '(0019,"1.2.840.113681",11)',
    vr: "ST",
    name: "CRImageIPParamsSingle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"1.2.840.113681",12)': {
    tag: '(0019,"1.2.840.113681",12)',
    vr: "ST",
    name: "CRImageIPParamsLeft",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"1.2.840.113681",13)': {
    tag: '(0019,"1.2.840.113681",13)',
    vr: "ST",
    name: "CRImageIPParamsRight",
    vm: "1",
    version: "PrivateTag"
  },
  '(0087,"1.2.840.113708.794.1.1.2.0",10)': {
    tag: '(0087,"1.2.840.113708.794.1.1.2.0",10)',
    vr: "CS",
    name: "MediaType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0087,"1.2.840.113708.794.1.1.2.0",20)': {
    tag: '(0087,"1.2.840.113708.794.1.1.2.0",20)',
    vr: "CS",
    name: "MediaLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0087,"1.2.840.113708.794.1.1.2.0",50)': {
    tag: '(0087,"1.2.840.113708.794.1.1.2.0",50)',
    vr: "IS",
    name: "EstimatedRetrieveTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",00)': {
    tag: '(0009,"ACUSON",00)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",01)': {
    tag: '(0009,"ACUSON",01)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",02)': {
    tag: '(0009,"ACUSON",02)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",03)': {
    tag: '(0009,"ACUSON",03)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",04)': {
    tag: '(0009,"ACUSON",04)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",05)': {
    tag: '(0009,"ACUSON",05)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",06)': {
    tag: '(0009,"ACUSON",06)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",07)': {
    tag: '(0009,"ACUSON",07)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",08)': {
    tag: '(0009,"ACUSON",08)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",09)': {
    tag: '(0009,"ACUSON",09)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",0a)': {
    tag: '(0009,"ACUSON",0a)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",0b)': {
    tag: '(0009,"ACUSON",0b)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",0c)': {
    tag: '(0009,"ACUSON",0c)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",0d)': {
    tag: '(0009,"ACUSON",0d)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",0e)': {
    tag: '(0009,"ACUSON",0e)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",0f)': {
    tag: '(0009,"ACUSON",0f)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",10)': {
    tag: '(0009,"ACUSON",10)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",11)': {
    tag: '(0009,"ACUSON",11)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",12)': {
    tag: '(0009,"ACUSON",12)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",13)': {
    tag: '(0009,"ACUSON",13)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",14)': {
    tag: '(0009,"ACUSON",14)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ACUSON",15)': {
    tag: '(0009,"ACUSON",15)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0003,"AEGIS_DICOM_2.00",00)': {
    tag: '(0003,"AEGIS_DICOM_2.00",00)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0005,"AEGIS_DICOM_2.00",00)': {
    tag: '(0005,"AEGIS_DICOM_2.00",00)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0009,"AEGIS_DICOM_2.00",00)': {
    tag: '(0009,"AEGIS_DICOM_2.00",00)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"AEGIS_DICOM_2.00",00)': {
    tag: '(0019,"AEGIS_DICOM_2.00",00)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0029,"AEGIS_DICOM_2.00",00)': {
    tag: '(0029,"AEGIS_DICOM_2.00",00)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(1369,"AEGIS_DICOM_2.00",00)': {
    tag: '(1369,"AEGIS_DICOM_2.00",00)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0009,"AGFA",10)': {
    tag: '(0009,"AGFA",10)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"AGFA",11)': {
    tag: '(0009,"AGFA",11)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"AGFA",13)': {
    tag: '(0009,"AGFA",13)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"AGFA",14)': {
    tag: '(0009,"AGFA",14)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"AGFA",15)': {
    tag: '(0009,"AGFA",15)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0031,"AGFA PACS Archive Mirroring 1.0",00)': {
    tag: '(0031,"AGFA PACS Archive Mirroring 1.0",00)',
    vr: "CS",
    name: "StudyStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0031,"AGFA PACS Archive Mirroring 1.0",01)': {
    tag: '(0031,"AGFA PACS Archive Mirroring 1.0",01)',
    vr: "UL",
    name: "DateTimeVerified",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CAMTRONICS IP",10)': {
    tag: '(0029,"CAMTRONICS IP",10)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CAMTRONICS IP",20)': {
    tag: '(0029,"CAMTRONICS IP",20)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CAMTRONICS IP",30)': {
    tag: '(0029,"CAMTRONICS IP",30)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CAMTRONICS IP",40)': {
    tag: '(0029,"CAMTRONICS IP",40)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CAMTRONICS",10)': {
    tag: '(0029,"CAMTRONICS",10)',
    vr: "LT",
    name: "Commentline",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CAMTRONICS",20)': {
    tag: '(0029,"CAMTRONICS",20)',
    vr: "DS",
    name: "EdgeEnhancementCoefficient",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CAMTRONICS",50)': {
    tag: '(0029,"CAMTRONICS",50)',
    vr: "LT",
    name: "SceneText",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CAMTRONICS",60)': {
    tag: '(0029,"CAMTRONICS",60)',
    vr: "LT",
    name: "ImageText",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CAMTRONICS",70)': {
    tag: '(0029,"CAMTRONICS",70)',
    vr: "IS",
    name: "PixelShiftHorizontal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CAMTRONICS",80)': {
    tag: '(0029,"CAMTRONICS",80)',
    vr: "IS",
    name: "PixelShiftVertical",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CAMTRONICS",90)': {
    tag: '(0029,"CAMTRONICS",90)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"CARDIO-D.R. 1.0",00)': {
    tag: '(0009,"CARDIO-D.R. 1.0",00)',
    vr: "UL",
    name: "FileLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"CARDIO-D.R. 1.0",01)': {
    tag: '(0009,"CARDIO-D.R. 1.0",01)',
    vr: "UL",
    name: "FileSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"CARDIO-D.R. 1.0",40)': {
    tag: '(0009,"CARDIO-D.R. 1.0",40)',
    vr: "SQ",
    name: "AlternateImageSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"CARDIO-D.R. 1.0",00)': {
    tag: '(0019,"CARDIO-D.R. 1.0",00)',
    vr: "CS",
    name: "ImageBlankingShape",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"CARDIO-D.R. 1.0",02)': {
    tag: '(0019,"CARDIO-D.R. 1.0",02)',
    vr: "IS",
    name: "ImageBlankingLeftVerticalEdge",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"CARDIO-D.R. 1.0",04)': {
    tag: '(0019,"CARDIO-D.R. 1.0",04)',
    vr: "IS",
    name: "ImageBlankingRightVerticalEdge",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"CARDIO-D.R. 1.0",06)': {
    tag: '(0019,"CARDIO-D.R. 1.0",06)',
    vr: "IS",
    name: "ImageBlankingUpperHorizontalEdge",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"CARDIO-D.R. 1.0",08)': {
    tag: '(0019,"CARDIO-D.R. 1.0",08)',
    vr: "IS",
    name: "ImageBlankingLowerHorizontalEdge",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"CARDIO-D.R. 1.0",10)': {
    tag: '(0019,"CARDIO-D.R. 1.0",10)',
    vr: "IS",
    name: "CenterOfCircularImageBlanking",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"CARDIO-D.R. 1.0",12)': {
    tag: '(0019,"CARDIO-D.R. 1.0",12)',
    vr: "IS",
    name: "RadiusOfCircularImageBlanking",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"CARDIO-D.R. 1.0",30)': {
    tag: '(0019,"CARDIO-D.R. 1.0",30)',
    vr: "UL",
    name: "MaximumImageFrameSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"CARDIO-D.R. 1.0",13)': {
    tag: '(0021,"CARDIO-D.R. 1.0",13)',
    vr: "IS",
    name: "ImageSequenceNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CARDIO-D.R. 1.0",00)': {
    tag: '(0029,"CARDIO-D.R. 1.0",00)',
    vr: "SQ",
    name: "EdgeEnhancementSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"CARDIO-D.R. 1.0",01)': {
    tag: '(0029,"CARDIO-D.R. 1.0",01)',
    vr: "US",
    name: "ConvolutionKernelSize",
    vm: "2",
    version: "PrivateTag"
  },
  '(0029,"CARDIO-D.R. 1.0",02)': {
    tag: '(0029,"CARDIO-D.R. 1.0",02)',
    vr: "DS",
    name: "ConvolutionKernelCoefficients",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0029,"CARDIO-D.R. 1.0",03)': {
    tag: '(0029,"CARDIO-D.R. 1.0",03)',
    vr: "DS",
    name: "EdgeEnhancementGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"CMR42 CIRCLECVI",1010)': {
    tag: '(0025,"CMR42 CIRCLECVI",1010)',
    vr: "LO",
    name: "WorkspaceID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"CMR42 CIRCLECVI",1020)': {
    tag: '(0025,"CMR42 CIRCLECVI",1020)',
    vr: "LO",
    name: "WorkspaceTimeString",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"CMR42 CIRCLECVI",1030)': {
    tag: '(0025,"CMR42 CIRCLECVI",1030)',
    vr: "OB",
    name: "WorkspaceStream",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"DCMTK_ANONYMIZER",00)': {
    tag: '(0009,"DCMTK_ANONYMIZER",00)',
    vr: "SQ",
    name: "AnonymizerUIDMap",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"DCMTK_ANONYMIZER",10)': {
    tag: '(0009,"DCMTK_ANONYMIZER",10)',
    vr: "UI",
    name: "AnonymizerUIDKey",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"DCMTK_ANONYMIZER",20)': {
    tag: '(0009,"DCMTK_ANONYMIZER",20)',
    vr: "UI",
    name: "AnonymizerUIDValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"DCMTK_ANONYMIZER",30)': {
    tag: '(0009,"DCMTK_ANONYMIZER",30)',
    vr: "SQ",
    name: "AnonymizerPatientIDMap",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"DCMTK_ANONYMIZER",40)': {
    tag: '(0009,"DCMTK_ANONYMIZER",40)',
    vr: "LO",
    name: "AnonymizerPatientIDKey",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"DCMTK_ANONYMIZER",50)': {
    tag: '(0009,"DCMTK_ANONYMIZER",50)',
    vr: "LO",
    name: "AnonymizerPatientIDValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",22)': {
    tag: '(0019,"DIDI TO PCR 1.1",22)',
    vr: "UN",
    name: "RouteAET",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",23)': {
    tag: '(0019,"DIDI TO PCR 1.1",23)',
    vr: "DS",
    name: "PCRPrintScale",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",24)': {
    tag: '(0019,"DIDI TO PCR 1.1",24)',
    vr: "UN",
    name: "PCRPrintJobEnd",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",25)': {
    tag: '(0019,"DIDI TO PCR 1.1",25)',
    vr: "IS",
    name: "PCRNoFilmCopies",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",26)': {
    tag: '(0019,"DIDI TO PCR 1.1",26)',
    vr: "IS",
    name: "PCRFilmLayoutPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",27)': {
    tag: '(0019,"DIDI TO PCR 1.1",27)',
    vr: "UN",
    name: "PCRPrintReportName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",70)': {
    tag: '(0019,"DIDI TO PCR 1.1",70)',
    vr: "UN",
    name: "RADProtocolPrinter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",71)': {
    tag: '(0019,"DIDI TO PCR 1.1",71)',
    vr: "UN",
    name: "RADProtocolMedium",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",90)': {
    tag: '(0019,"DIDI TO PCR 1.1",90)',
    vr: "LO",
    name: "UnprocessedFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",91)': {
    tag: '(0019,"DIDI TO PCR 1.1",91)',
    vr: "UN",
    name: "KeyValues",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",92)': {
    tag: '(0019,"DIDI TO PCR 1.1",92)',
    vr: "UN",
    name: "DestinationPostprocessingFunction",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",A0)': {
    tag: '(0019,"DIDI TO PCR 1.1",A0)',
    vr: "UN",
    name: "Version",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",A1)': {
    tag: '(0019,"DIDI TO PCR 1.1",A1)',
    vr: "UN",
    name: "RangingMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",A2)': {
    tag: '(0019,"DIDI TO PCR 1.1",A2)',
    vr: "UN",
    name: "AbdomenBrightness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",A3)': {
    tag: '(0019,"DIDI TO PCR 1.1",A3)',
    vr: "UN",
    name: "FixedBrightness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",A4)': {
    tag: '(0019,"DIDI TO PCR 1.1",A4)',
    vr: "UN",
    name: "DetailContrast",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",A5)': {
    tag: '(0019,"DIDI TO PCR 1.1",A5)',
    vr: "UN",
    name: "ContrastBalance",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",A6)': {
    tag: '(0019,"DIDI TO PCR 1.1",A6)',
    vr: "UN",
    name: "StructureBoost",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",A7)': {
    tag: '(0019,"DIDI TO PCR 1.1",A7)',
    vr: "UN",
    name: "StructurePreference",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",A8)': {
    tag: '(0019,"DIDI TO PCR 1.1",A8)',
    vr: "UN",
    name: "NoiseRobustness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",A9)': {
    tag: '(0019,"DIDI TO PCR 1.1",A9)',
    vr: "UN",
    name: "NoiseDoseLimit",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",AA)': {
    tag: '(0019,"DIDI TO PCR 1.1",AA)',
    vr: "UN",
    name: "NoiseDoseStep",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",AB)': {
    tag: '(0019,"DIDI TO PCR 1.1",AB)',
    vr: "UN",
    name: "NoiseFrequencyLimit",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",AC)': {
    tag: '(0019,"DIDI TO PCR 1.1",AC)',
    vr: "UN",
    name: "WeakContrastLimit",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",AD)': {
    tag: '(0019,"DIDI TO PCR 1.1",AD)',
    vr: "UN",
    name: "StrongContrastLimit",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",AE)': {
    tag: '(0019,"DIDI TO PCR 1.1",AE)',
    vr: "UN",
    name: "StructureBoostOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",AF)': {
    tag: '(0019,"DIDI TO PCR 1.1",AF)',
    vr: "UN",
    name: "SmoothGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",B0)': {
    tag: '(0019,"DIDI TO PCR 1.1",B0)',
    vr: "UN",
    name: "MeasureField1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",B1)': {
    tag: '(0019,"DIDI TO PCR 1.1",B1)',
    vr: "UN",
    name: "MeasureField2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",B2)': {
    tag: '(0019,"DIDI TO PCR 1.1",B2)',
    vr: "UN",
    name: "KeyPercentile1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",B3)': {
    tag: '(0019,"DIDI TO PCR 1.1",B3)',
    vr: "UN",
    name: "KeyPercentile2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",B4)': {
    tag: '(0019,"DIDI TO PCR 1.1",B4)',
    vr: "UN",
    name: "DensityLUT",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",B5)': {
    tag: '(0019,"DIDI TO PCR 1.1",B5)',
    vr: "UN",
    name: "Brightness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DIDI TO PCR 1.1",B6)': {
    tag: '(0019,"DIDI TO PCR 1.1",B6)',
    vr: "UN",
    name: "Gamma",
    vm: "1",
    version: "PrivateTag"
  },
  '(0089,"DIDI TO PCR 1.1",10)': {
    tag: '(0089,"DIDI TO PCR 1.1",10)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"DIGISCAN IMAGE",31)': {
    tag: '(0029,"DIGISCAN IMAGE",31)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0029,"DIGISCAN IMAGE",32)': {
    tag: '(0029,"DIGISCAN IMAGE",32)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0029,"DIGISCAN IMAGE",33)': {
    tag: '(0029,"DIGISCAN IMAGE",33)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"DIGISCAN IMAGE",34)': {
    tag: '(0029,"DIGISCAN IMAGE",34)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(7001-o-70ff,"DLX_ANNOT_01",04)': {
    tag: '(7001-o-70ff,"DLX_ANNOT_01",04)',
    vr: "ST",
    name: "TextAnnotation",
    vm: "1",
    version: "PrivateTag"
  },
  '(7001-o-70ff,"DLX_ANNOT_01",05)': {
    tag: '(7001-o-70ff,"DLX_ANNOT_01",05)',
    vr: "IS",
    name: "Box",
    vm: "2",
    version: "PrivateTag"
  },
  '(7001-o-70ff,"DLX_ANNOT_01",07)': {
    tag: '(7001-o-70ff,"DLX_ANNOT_01",07)',
    vr: "IS",
    name: "ArrowEnd",
    vm: "2",
    version: "PrivateTag"
  },
  '(0015,"DLX_EXAMS_01",01)': {
    tag: '(0015,"DLX_EXAMS_01",01)',
    vr: "DS",
    name: "StenosisCalibrationRatio",
    vm: "1",
    version: "PrivateTag"
  },
  '(0015,"DLX_EXAMS_01",02)': {
    tag: '(0015,"DLX_EXAMS_01",02)',
    vr: "DS",
    name: "StenosisMagnification",
    vm: "1",
    version: "PrivateTag"
  },
  '(0015,"DLX_EXAMS_01",03)': {
    tag: '(0015,"DLX_EXAMS_01",03)',
    vr: "DS",
    name: "CardiacCalibrationRatio",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"DLX_LKUP_01",01)': {
    tag: '(6001-o-60ff,"DLX_LKUP_01",01)',
    vr: "US",
    name: "GrayPaletteColorLookupTableDescriptor",
    vm: "3",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"DLX_LKUP_01",02)': {
    tag: '(6001-o-60ff,"DLX_LKUP_01",02)',
    vr: "US",
    name: "GrayPaletteColorLookupTableData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"DLX_PATNT_01",01)': {
    tag: '(0011,"DLX_PATNT_01",01)',
    vr: "LT",
    name: "PatientDOB",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",01)': {
    tag: '(0019,"DLX_SERIE_01",01)',
    vr: "DS",
    name: "AngleValueLArm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",02)': {
    tag: '(0019,"DLX_SERIE_01",02)',
    vr: "DS",
    name: "AngleValuePArm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",03)': {
    tag: '(0019,"DLX_SERIE_01",03)',
    vr: "DS",
    name: "AngleValueCArm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",04)': {
    tag: '(0019,"DLX_SERIE_01",04)',
    vr: "CS",
    name: "AngleLabelLArm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",05)': {
    tag: '(0019,"DLX_SERIE_01",05)',
    vr: "CS",
    name: "AngleLabelPArm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",06)': {
    tag: '(0019,"DLX_SERIE_01",06)',
    vr: "CS",
    name: "AngleLabelCArm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",07)': {
    tag: '(0019,"DLX_SERIE_01",07)',
    vr: "ST",
    name: "ProcedureName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",08)': {
    tag: '(0019,"DLX_SERIE_01",08)',
    vr: "ST",
    name: "ExamName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",09)': {
    tag: '(0019,"DLX_SERIE_01",09)',
    vr: "SH",
    name: "PatientSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",0a)': {
    tag: '(0019,"DLX_SERIE_01",0a)',
    vr: "IS",
    name: "RecordView",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",10)': {
    tag: '(0019,"DLX_SERIE_01",10)',
    vr: "DS",
    name: "InjectorDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",11)': {
    tag: '(0019,"DLX_SERIE_01",11)',
    vr: "CS",
    name: "AutoInject",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",14)': {
    tag: '(0019,"DLX_SERIE_01",14)',
    vr: "IS",
    name: "AcquisitionMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",15)': {
    tag: '(0019,"DLX_SERIE_01",15)',
    vr: "CS",
    name: "CameraRotationEnabled",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",16)': {
    tag: '(0019,"DLX_SERIE_01",16)',
    vr: "CS",
    name: "ReverseSweep",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",17)': {
    tag: '(0019,"DLX_SERIE_01",17)',
    vr: "IS",
    name: "SpatialFilterStrength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",18)': {
    tag: '(0019,"DLX_SERIE_01",18)',
    vr: "IS",
    name: "ZoomFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",19)': {
    tag: '(0019,"DLX_SERIE_01",19)',
    vr: "IS",
    name: "XZoomCenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",1a)': {
    tag: '(0019,"DLX_SERIE_01",1a)',
    vr: "IS",
    name: "YZoomCenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",1b)': {
    tag: '(0019,"DLX_SERIE_01",1b)',
    vr: "DS",
    name: "Focus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",1c)': {
    tag: '(0019,"DLX_SERIE_01",1c)',
    vr: "CS",
    name: "Dose",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",1d)': {
    tag: '(0019,"DLX_SERIE_01",1d)',
    vr: "IS",
    name: "SideMark",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",1e)': {
    tag: '(0019,"DLX_SERIE_01",1e)',
    vr: "IS",
    name: "PercentageLandscape",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"DLX_SERIE_01",1f)': {
    tag: '(0019,"DLX_SERIE_01",1f)',
    vr: "DS",
    name: "ExposureDuration",
    vm: "1",
    version: "PrivateTag"
  },
  '(00E1,"ELSCINT1",01)': {
    tag: '(00E1,"ELSCINT1",01)',
    vr: "US",
    name: "DataDictionaryVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(00E1,"ELSCINT1",14)': {
    tag: '(00E1,"ELSCINT1",14)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(00E1,"ELSCINT1",22)': {
    tag: '(00E1,"ELSCINT1",22)',
    vr: "DS",
    name: "Unknown",
    vm: "2",
    version: "PrivateTag"
  },
  '(00E1,"ELSCINT1",23)': {
    tag: '(00E1,"ELSCINT1",23)',
    vr: "DS",
    name: "Unknown",
    vm: "2",
    version: "PrivateTag"
  },
  '(00E1,"ELSCINT1",24)': {
    tag: '(00E1,"ELSCINT1",24)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(00E1,"ELSCINT1",25)': {
    tag: '(00E1,"ELSCINT1",25)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(00E1,"ELSCINT1",40)': {
    tag: '(00E1,"ELSCINT1",40)',
    vr: "SH",
    name: "OffsetFromCTMRImages",
    vm: "1",
    version: "PrivateTag"
  },
  '(0601,"ELSCINT1",00)': {
    tag: '(0601,"ELSCINT1",00)',
    vr: "SH",
    name: "ImplementationVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0601,"ELSCINT1",20)': {
    tag: '(0601,"ELSCINT1",20)',
    vr: "DS",
    name: "RelativeTablePosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0601,"ELSCINT1",21)': {
    tag: '(0601,"ELSCINT1",21)',
    vr: "DS",
    name: "RelativeTableHeight",
    vm: "1",
    version: "PrivateTag"
  },
  '(0601,"ELSCINT1",30)': {
    tag: '(0601,"ELSCINT1",30)',
    vr: "SH",
    name: "SurviewDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0601,"ELSCINT1",31)': {
    tag: '(0601,"ELSCINT1",31)',
    vr: "DS",
    name: "SurviewLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0601,"ELSCINT1",50)': {
    tag: '(0601,"ELSCINT1",50)',
    vr: "SH",
    name: "ImageViewType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0601,"ELSCINT1",70)': {
    tag: '(0601,"ELSCINT1",70)',
    vr: "DS",
    name: "BatchNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0601,"ELSCINT1",71)': {
    tag: '(0601,"ELSCINT1",71)',
    vr: "DS",
    name: "BatchSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0601,"ELSCINT1",72)': {
    tag: '(0601,"ELSCINT1",72)',
    vr: "DS",
    name: "BatchSliceNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FDMS 1.0",04)': {
    tag: '(0009,"FDMS 1.0",04)',
    vr: "SH",
    name: "ImageControlUnit",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FDMS 1.0",05)': {
    tag: '(0009,"FDMS 1.0",05)',
    vr: "OW",
    name: "ImageUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FDMS 1.0",06)': {
    tag: '(0009,"FDMS 1.0",06)',
    vr: "OW",
    name: "RouteImageUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FDMS 1.0",08)': {
    tag: '(0009,"FDMS 1.0",08)',
    vr: "UL",
    name: "ImageDisplayInformationVersionNo",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FDMS 1.0",09)': {
    tag: '(0009,"FDMS 1.0",09)',
    vr: "UL",
    name: "PatientInformationVersionNo",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FDMS 1.0",0C)': {
    tag: '(0009,"FDMS 1.0",0C)',
    vr: "OW",
    name: "FilmUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FDMS 1.0",10)': {
    tag: '(0009,"FDMS 1.0",10)',
    vr: "CS",
    name: "ExposureUnitTypeCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FDMS 1.0",80)': {
    tag: '(0009,"FDMS 1.0",80)',
    vr: "LO",
    name: "KanjiHospitalName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FDMS 1.0",90)': {
    tag: '(0009,"FDMS 1.0",90)',
    vr: "ST",
    name: "DistributionCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FDMS 1.0",92)': {
    tag: '(0009,"FDMS 1.0",92)',
    vr: "SH",
    name: "KanjiDepartmentName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FDMS 1.0",F0)': {
    tag: '(0009,"FDMS 1.0",F0)',
    vr: "CS",
    name: "BlackeningProcessFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"FDMS 1.0",15)': {
    tag: '(0019,"FDMS 1.0",15)',
    vr: "LO",
    name: "KanjiBodyPartForExposure",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"FDMS 1.0",32)': {
    tag: '(0019,"FDMS 1.0",32)',
    vr: "LO",
    name: "KanjiMenuName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"FDMS 1.0",40)': {
    tag: '(0019,"FDMS 1.0",40)',
    vr: "CS",
    name: "ImageProcessingType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"FDMS 1.0",50)': {
    tag: '(0019,"FDMS 1.0",50)',
    vr: "CS",
    name: "EDRMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"FDMS 1.0",60)': {
    tag: '(0019,"FDMS 1.0",60)',
    vr: "SH",
    name: "RadiographersCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"FDMS 1.0",70)': {
    tag: '(0019,"FDMS 1.0",70)',
    vr: "IS",
    name: "SplitExposureFormat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"FDMS 1.0",71)': {
    tag: '(0019,"FDMS 1.0",71)',
    vr: "IS",
    name: "NoOfSplitExposureFrames",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"FDMS 1.0",80)': {
    tag: '(0019,"FDMS 1.0",80)',
    vr: "IS",
    name: "ReadingPositionSpecification",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"FDMS 1.0",81)': {
    tag: '(0019,"FDMS 1.0",81)',
    vr: "IS",
    name: "ReadingSensitivityCenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"FDMS 1.0",90)': {
    tag: '(0019,"FDMS 1.0",90)',
    vr: "SH",
    name: "FilmAnnotationCharacterString1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"FDMS 1.0",91)': {
    tag: '(0019,"FDMS 1.0",91)',
    vr: "SH",
    name: "FilmAnnotationCharacterString2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"FDMS 1.0",10)': {
    tag: '(0021,"FDMS 1.0",10)',
    vr: "CS",
    name: "FCRImageID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"FDMS 1.0",30)': {
    tag: '(0021,"FDMS 1.0",30)',
    vr: "CS",
    name: "SetNo",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"FDMS 1.0",40)': {
    tag: '(0021,"FDMS 1.0",40)',
    vr: "IS",
    name: "ImageNoInTheSet",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"FDMS 1.0",50)': {
    tag: '(0021,"FDMS 1.0",50)',
    vr: "CS",
    name: "PairProcessingInformation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"FDMS 1.0",80)': {
    tag: '(0021,"FDMS 1.0",80)',
    vr: "OB",
    name: "EquipmentTypeSpecificInformation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"FDMS 1.0",10)': {
    tag: '(0023,"FDMS 1.0",10)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"FDMS 1.0",20)': {
    tag: '(0023,"FDMS 1.0",20)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"FDMS 1.0",30)': {
    tag: '(0023,"FDMS 1.0",30)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",10)': {
    tag: '(0025,"FDMS 1.0",10)',
    vr: "US",
    name: "RelativeLightEmissionAmountSk",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",11)': {
    tag: '(0025,"FDMS 1.0",11)',
    vr: "US",
    name: "TermOfCorrectionForEachIPTypeSt",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",12)': {
    tag: '(0025,"FDMS 1.0",12)',
    vr: "US",
    name: "ReadingGainGp",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",13)': {
    tag: '(0025,"FDMS 1.0",13)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",15)': {
    tag: '(0025,"FDMS 1.0",15)',
    vr: "CS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",20)': {
    tag: '(0025,"FDMS 1.0",20)',
    vr: "US",
    name: "Unknown",
    vm: "2",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",21)': {
    tag: '(0025,"FDMS 1.0",21)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",30)': {
    tag: '(0025,"FDMS 1.0",30)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",31)': {
    tag: '(0025,"FDMS 1.0",31)',
    vr: "SS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",32)': {
    tag: '(0025,"FDMS 1.0",32)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",33)': {
    tag: '(0025,"FDMS 1.0",33)',
    vr: "SS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",34)': {
    tag: '(0025,"FDMS 1.0",34)',
    vr: "SS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",40)': {
    tag: '(0025,"FDMS 1.0",40)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",41)': {
    tag: '(0025,"FDMS 1.0",41)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",42)': {
    tag: '(0025,"FDMS 1.0",42)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",43)': {
    tag: '(0025,"FDMS 1.0",43)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",50)': {
    tag: '(0025,"FDMS 1.0",50)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",51)': {
    tag: '(0025,"FDMS 1.0",51)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",52)': {
    tag: '(0025,"FDMS 1.0",52)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",53)': {
    tag: '(0025,"FDMS 1.0",53)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",60)': {
    tag: '(0025,"FDMS 1.0",60)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",61)': {
    tag: '(0025,"FDMS 1.0",61)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",62)': {
    tag: '(0025,"FDMS 1.0",62)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",63)': {
    tag: '(0025,"FDMS 1.0",63)',
    vr: "CS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",70)': {
    tag: '(0025,"FDMS 1.0",70)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",71)': {
    tag: '(0025,"FDMS 1.0",71)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",72)': {
    tag: '(0025,"FDMS 1.0",72)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",73)': {
    tag: '(0025,"FDMS 1.0",73)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",74)': {
    tag: '(0025,"FDMS 1.0",74)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",80)': {
    tag: '(0025,"FDMS 1.0",80)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",81)': {
    tag: '(0025,"FDMS 1.0",81)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",82)': {
    tag: '(0025,"FDMS 1.0",82)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",83)': {
    tag: '(0025,"FDMS 1.0",83)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",84)': {
    tag: '(0025,"FDMS 1.0",84)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",90)': {
    tag: '(0025,"FDMS 1.0",90)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",91)': {
    tag: '(0025,"FDMS 1.0",91)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",92)': {
    tag: '(0025,"FDMS 1.0",92)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",93)': {
    tag: '(0025,"FDMS 1.0",93)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",94)': {
    tag: '(0025,"FDMS 1.0",94)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",95)': {
    tag: '(0025,"FDMS 1.0",95)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",96)': {
    tag: '(0025,"FDMS 1.0",96)',
    vr: "CS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",a0)': {
    tag: '(0025,"FDMS 1.0",a0)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",a1)': {
    tag: '(0025,"FDMS 1.0",a1)',
    vr: "SS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",a2)': {
    tag: '(0025,"FDMS 1.0",a2)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"FDMS 1.0",a3)': {
    tag: '(0025,"FDMS 1.0",a3)',
    vr: "SS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",10)': {
    tag: '(0027,"FDMS 1.0",10)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",20)': {
    tag: '(0027,"FDMS 1.0",20)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",30)': {
    tag: '(0027,"FDMS 1.0",30)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",40)': {
    tag: '(0027,"FDMS 1.0",40)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",50)': {
    tag: '(0027,"FDMS 1.0",50)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",60)': {
    tag: '(0027,"FDMS 1.0",60)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",70)': {
    tag: '(0027,"FDMS 1.0",70)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",80)': {
    tag: '(0027,"FDMS 1.0",80)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",a0)': {
    tag: '(0027,"FDMS 1.0",a0)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",a1)': {
    tag: '(0027,"FDMS 1.0",a1)',
    vr: "CS",
    name: "Unknown",
    vm: "2",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",a2)': {
    tag: '(0027,"FDMS 1.0",a2)',
    vr: "CS",
    name: "Unknown",
    vm: "2",
    version: "PrivateTag"
  },
  '(0027,"FDMS 1.0",a3)': {
    tag: '(0027,"FDMS 1.0",a3)',
    vr: "SS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0029,"FDMS 1.0",20)': {
    tag: '(0029,"FDMS 1.0",20)',
    vr: "CS",
    name: "ImageScanningDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"FDMS 1.0",30)': {
    tag: '(0029,"FDMS 1.0",30)',
    vr: "CS",
    name: "ExtendedReadingSizeValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"FDMS 1.0",34)': {
    tag: '(0029,"FDMS 1.0",34)',
    vr: "US",
    name: "MagnificationReductionRatio",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"FDMS 1.0",44)': {
    tag: '(0029,"FDMS 1.0",44)',
    vr: "CS",
    name: "LineDensityCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"FDMS 1.0",50)': {
    tag: '(0029,"FDMS 1.0",50)',
    vr: "CS",
    name: "DataCompressionCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(2011,"FDMS 1.0",11)': {
    tag: '(2011,"FDMS 1.0",11)',
    vr: "CS",
    name: "ImagePosition SpecifyingFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(50F1,"FDMS 1.0",06)': {
    tag: '(50F1,"FDMS 1.0",06)',
    vr: "CS",
    name: "EnergySubtractionParam",
    vm: "1",
    version: "PrivateTag"
  },
  '(50F1,"FDMS 1.0",07)': {
    tag: '(50F1,"FDMS 1.0",07)',
    vr: "CS",
    name: "SubtractionRegistrationResult",
    vm: "1",
    version: "PrivateTag"
  },
  '(50F1,"FDMS 1.0",08)': {
    tag: '(50F1,"FDMS 1.0",08)',
    vr: "CS",
    name: "EnergySubtractionParam2",
    vm: "1",
    version: "PrivateTag"
  },
  '(50F1,"FDMS 1.0",09)': {
    tag: '(50F1,"FDMS 1.0",09)',
    vr: "SL",
    name: "AfinConversionCoefficient",
    vm: "1",
    version: "PrivateTag"
  },
  '(50F1,"FDMS 1.0",10)': {
    tag: '(50F1,"FDMS 1.0",10)',
    vr: "CS",
    name: "FilmOutputFormat",
    vm: "1",
    version: "PrivateTag"
  },
  '(50F1,"FDMS 1.0",20)': {
    tag: '(50F1,"FDMS 1.0",20)',
    vr: "CS",
    name: "ImageProcessingModificationFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"FFP DATA",01)': {
    tag: '(0009,"FFP DATA",01)',
    vr: "UN",
    name: "CRHeaderInformation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE ??? From Adantage Review CS",30)': {
    tag: '(0019,"GE ??? From Adantage Review CS",30)',
    vr: "LO",
    name: "CREDRMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE ??? From Adantage Review CS",40)': {
    tag: '(0019,"GE ??? From Adantage Review CS",40)',
    vr: "LO",
    name: "CRLatitude",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE ??? From Adantage Review CS",50)': {
    tag: '(0019,"GE ??? From Adantage Review CS",50)',
    vr: "LO",
    name: "CRGroupNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE ??? From Adantage Review CS",70)': {
    tag: '(0019,"GE ??? From Adantage Review CS",70)',
    vr: "LO",
    name: "CRImageSerialNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE ??? From Adantage Review CS",80)': {
    tag: '(0019,"GE ??? From Adantage Review CS",80)',
    vr: "LO",
    name: "CRBarCodeNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE ??? From Adantage Review CS",90)': {
    tag: '(0019,"GE ??? From Adantage Review CS",90)',
    vr: "LO",
    name: "CRFilmOutputExposures",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_ACQU_01",24)': {
    tag: '(0009,"GEMS_ACQU_01",24)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_ACQU_01",25)': {
    tag: '(0009,"GEMS_ACQU_01",25)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_ACQU_01",3e)': {
    tag: '(0009,"GEMS_ACQU_01",3e)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_ACQU_01",3f)': {
    tag: '(0009,"GEMS_ACQU_01",3f)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_ACQU_01",42)': {
    tag: '(0009,"GEMS_ACQU_01",42)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_ACQU_01",43)': {
    tag: '(0009,"GEMS_ACQU_01",43)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_ACQU_01",f8)': {
    tag: '(0009,"GEMS_ACQU_01",f8)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_ACQU_01",fb)': {
    tag: '(0009,"GEMS_ACQU_01",fb)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",01)': {
    tag: '(0019,"GEMS_ACQU_01",01)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",02)': {
    tag: '(0019,"GEMS_ACQU_01",02)',
    vr: "SL",
    name: "NumberOfCellsInDetector",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",03)': {
    tag: '(0019,"GEMS_ACQU_01",03)',
    vr: "DS",
    name: "CellNumberAtTheta",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",04)': {
    tag: '(0019,"GEMS_ACQU_01",04)',
    vr: "DS",
    name: "CellSpacing",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",05)': {
    tag: '(0019,"GEMS_ACQU_01",05)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",06)': {
    tag: '(0019,"GEMS_ACQU_01",06)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",0e)': {
    tag: '(0019,"GEMS_ACQU_01",0e)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",0f)': {
    tag: '(0019,"GEMS_ACQU_01",0f)',
    vr: "DS",
    name: "HorizontalFrameOfReference",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",11)': {
    tag: '(0019,"GEMS_ACQU_01",11)',
    vr: "SS",
    name: "SeriesContrast",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",12)': {
    tag: '(0019,"GEMS_ACQU_01",12)',
    vr: "SS",
    name: "LastPseq",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",13)': {
    tag: '(0019,"GEMS_ACQU_01",13)',
    vr: "SS",
    name: "StartNumberForBaseline",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",14)': {
    tag: '(0019,"GEMS_ACQU_01",14)',
    vr: "SS",
    name: "End NumberForBaseline",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",15)': {
    tag: '(0019,"GEMS_ACQU_01",15)',
    vr: "SS",
    name: "StartNumberForEnhancedScans",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",16)': {
    tag: '(0019,"GEMS_ACQU_01",16)',
    vr: "SS",
    name: "EndNumberForEnhancedScans",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",17)': {
    tag: '(0019,"GEMS_ACQU_01",17)',
    vr: "SS",
    name: "SeriesPlane",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",18)': {
    tag: '(0019,"GEMS_ACQU_01",18)',
    vr: "LO",
    name: "FirstScanRAS",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",19)': {
    tag: '(0019,"GEMS_ACQU_01",19)',
    vr: "DS",
    name: "FirstScanLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",1a)': {
    tag: '(0019,"GEMS_ACQU_01",1a)',
    vr: "LO",
    name: "LastScanRAS",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",1b)': {
    tag: '(0019,"GEMS_ACQU_01",1b)',
    vr: "DS",
    name: "LastScanLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",1e)': {
    tag: '(0019,"GEMS_ACQU_01",1e)',
    vr: "DS",
    name: "DisplayFieldOfView",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",20)': {
    tag: '(0019,"GEMS_ACQU_01",20)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",22)': {
    tag: '(0019,"GEMS_ACQU_01",22)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",23)': {
    tag: '(0019,"GEMS_ACQU_01",23)',
    vr: "DS",
    name: "TableSpeed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",24)': {
    tag: '(0019,"GEMS_ACQU_01",24)',
    vr: "DS",
    name: "MidScanTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",25)': {
    tag: '(0019,"GEMS_ACQU_01",25)',
    vr: "SS",
    name: "MidScanFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",26)': {
    tag: '(0019,"GEMS_ACQU_01",26)',
    vr: "SL",
    name: "DegreesOfAzimuth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",27)': {
    tag: '(0019,"GEMS_ACQU_01",27)',
    vr: "DS",
    name: "GantryPeriod",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",2a)': {
    tag: '(0019,"GEMS_ACQU_01",2a)',
    vr: "DS",
    name: "XrayOnPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",2b)': {
    tag: '(0019,"GEMS_ACQU_01",2b)',
    vr: "DS",
    name: "XrayOffPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",2c)': {
    tag: '(0019,"GEMS_ACQU_01",2c)',
    vr: "SL",
    name: "NumberOfTriggers",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",2d)': {
    tag: '(0019,"GEMS_ACQU_01",2d)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",2e)': {
    tag: '(0019,"GEMS_ACQU_01",2e)',
    vr: "DS",
    name: "AngleOfFirstView",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",2f)': {
    tag: '(0019,"GEMS_ACQU_01",2f)',
    vr: "DS",
    name: "TriggerFrequency",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",39)': {
    tag: '(0019,"GEMS_ACQU_01",39)',
    vr: "SS",
    name: "ScanFOVType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",3a)': {
    tag: '(0019,"GEMS_ACQU_01",3a)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",3b)': {
    tag: '(0019,"GEMS_ACQU_01",3b)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",3c)': {
    tag: '(0019,"GEMS_ACQU_01",3c)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",3e)': {
    tag: '(0019,"GEMS_ACQU_01",3e)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",3f)': {
    tag: '(0019,"GEMS_ACQU_01",3f)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",40)': {
    tag: '(0019,"GEMS_ACQU_01",40)',
    vr: "SS",
    name: "StatReconFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",41)': {
    tag: '(0019,"GEMS_ACQU_01",41)',
    vr: "SS",
    name: "ComputeType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",42)': {
    tag: '(0019,"GEMS_ACQU_01",42)',
    vr: "SS",
    name: "SegmentNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",43)': {
    tag: '(0019,"GEMS_ACQU_01",43)',
    vr: "SS",
    name: "TotalSegmentsRequested",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",44)': {
    tag: '(0019,"GEMS_ACQU_01",44)',
    vr: "DS",
    name: "InterscanDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",47)': {
    tag: '(0019,"GEMS_ACQU_01",47)',
    vr: "SS",
    name: "ViewCompressionFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",48)': {
    tag: '(0019,"GEMS_ACQU_01",48)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",49)': {
    tag: '(0019,"GEMS_ACQU_01",49)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",4a)': {
    tag: '(0019,"GEMS_ACQU_01",4a)',
    vr: "SS",
    name: "TotalNumberOfRefChannels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",4b)': {
    tag: '(0019,"GEMS_ACQU_01",4b)',
    vr: "SL",
    name: "DataSizeForScanData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",52)': {
    tag: '(0019,"GEMS_ACQU_01",52)',
    vr: "SS",
    name: "ReconPostProcessingFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",54)': {
    tag: '(0019,"GEMS_ACQU_01",54)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",57)': {
    tag: '(0019,"GEMS_ACQU_01",57)',
    vr: "SS",
    name: "CTWaterNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",58)': {
    tag: '(0019,"GEMS_ACQU_01",58)',
    vr: "SS",
    name: "CTBoneNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",5a)': {
    tag: '(0019,"GEMS_ACQU_01",5a)',
    vr: "FL",
    name: "AcquisitionDuration",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",5d)': {
    tag: '(0019,"GEMS_ACQU_01",5d)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",5e)': {
    tag: '(0019,"GEMS_ACQU_01",5e)',
    vr: "SL",
    name: "NumberOfChannels1To512",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",5f)': {
    tag: '(0019,"GEMS_ACQU_01",5f)',
    vr: "SL",
    name: "IncrementBetweenChannels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",60)': {
    tag: '(0019,"GEMS_ACQU_01",60)',
    vr: "SL",
    name: "StartingView",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",61)': {
    tag: '(0019,"GEMS_ACQU_01",61)',
    vr: "SL",
    name: "NumberOfViews",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",62)': {
    tag: '(0019,"GEMS_ACQU_01",62)',
    vr: "SL",
    name: "IncrementBetweenViews",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",6a)': {
    tag: '(0019,"GEMS_ACQU_01",6a)',
    vr: "SS",
    name: "DependantOnNumberOfViewsProcessed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",6b)': {
    tag: '(0019,"GEMS_ACQU_01",6b)',
    vr: "SS",
    name: "FieldOfViewInDetectorCells",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",70)': {
    tag: '(0019,"GEMS_ACQU_01",70)',
    vr: "SS",
    name: "ValueOfBackProjectionButton",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",71)': {
    tag: '(0019,"GEMS_ACQU_01",71)',
    vr: "SS",
    name: "SetIfFatqEstimatesWereUsed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",72)': {
    tag: '(0019,"GEMS_ACQU_01",72)',
    vr: "DS",
    name: "ZChannelAvgOverViews",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",73)': {
    tag: '(0019,"GEMS_ACQU_01",73)',
    vr: "DS",
    name: "AvgOfLeftRefChannelsOverViews",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",74)': {
    tag: '(0019,"GEMS_ACQU_01",74)',
    vr: "DS",
    name: "MaxLeftChannelOverViews",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",75)': {
    tag: '(0019,"GEMS_ACQU_01",75)',
    vr: "DS",
    name: "AvgOfRightRefChannelsOverViews",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",76)': {
    tag: '(0019,"GEMS_ACQU_01",76)',
    vr: "DS",
    name: "MaxRightChannelOverViews",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",7d)': {
    tag: '(0019,"GEMS_ACQU_01",7d)',
    vr: "DS",
    name: "SecondEcho",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",7e)': {
    tag: '(0019,"GEMS_ACQU_01",7e)',
    vr: "SS",
    name: "NumberOfEchos",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",7f)': {
    tag: '(0019,"GEMS_ACQU_01",7f)',
    vr: "DS",
    name: "TableDelta",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",81)': {
    tag: '(0019,"GEMS_ACQU_01",81)',
    vr: "SS",
    name: "Contiguous",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",82)': {
    tag: '(0019,"GEMS_ACQU_01",82)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",83)': {
    tag: '(0019,"GEMS_ACQU_01",83)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",84)': {
    tag: '(0019,"GEMS_ACQU_01",84)',
    vr: "DS",
    name: "PeakSAR",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",85)': {
    tag: '(0019,"GEMS_ACQU_01",85)',
    vr: "SS",
    name: "MonitorSAR",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",86)': {
    tag: '(0019,"GEMS_ACQU_01",86)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",87)': {
    tag: '(0019,"GEMS_ACQU_01",87)',
    vr: "DS",
    name: "CardiacRepetition Time",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",88)': {
    tag: '(0019,"GEMS_ACQU_01",88)',
    vr: "SS",
    name: "ImagesPerCardiacCycle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",8a)': {
    tag: '(0019,"GEMS_ACQU_01",8a)',
    vr: "SS",
    name: "ActualReceiveGainAnalog",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",8b)': {
    tag: '(0019,"GEMS_ACQU_01",8b)',
    vr: "SS",
    name: "ActualReceiveGainDigital",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",8d)': {
    tag: '(0019,"GEMS_ACQU_01",8d)',
    vr: "DS",
    name: "DelayAfterTrigger",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",8f)': {
    tag: '(0019,"GEMS_ACQU_01",8f)',
    vr: "SS",
    name: "SwapPhaseFrequency",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",90)': {
    tag: '(0019,"GEMS_ACQU_01",90)',
    vr: "SS",
    name: "PauseInterval",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",91)': {
    tag: '(0019,"GEMS_ACQU_01",91)',
    vr: "DS",
    name: "PulseTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",92)': {
    tag: '(0019,"GEMS_ACQU_01",92)',
    vr: "SL",
    name: "SliceOffsetOnFrequencyAxis",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",93)': {
    tag: '(0019,"GEMS_ACQU_01",93)',
    vr: "DS",
    name: "CenterFrequency",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",94)': {
    tag: '(0019,"GEMS_ACQU_01",94)',
    vr: "SS",
    name: "TransmitGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",95)': {
    tag: '(0019,"GEMS_ACQU_01",95)',
    vr: "SS",
    name: "AnalogReceiverGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",96)': {
    tag: '(0019,"GEMS_ACQU_01",96)',
    vr: "SS",
    name: "DigitalReceiverGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",97)': {
    tag: '(0019,"GEMS_ACQU_01",97)',
    vr: "SL",
    name: "BitmapDefiningCVs",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",98)': {
    tag: '(0019,"GEMS_ACQU_01",98)',
    vr: "SS",
    name: "CenterFrequencyMethod",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",99)': {
    tag: '(0019,"GEMS_ACQU_01",99)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",9b)': {
    tag: '(0019,"GEMS_ACQU_01",9b)',
    vr: "SS",
    name: "PulseSequenceMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",9c)': {
    tag: '(0019,"GEMS_ACQU_01",9c)',
    vr: "LO",
    name: "PulseSequenceName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",9d)': {
    tag: '(0019,"GEMS_ACQU_01",9d)',
    vr: "DT",
    name: "PulseSequenceDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",9e)': {
    tag: '(0019,"GEMS_ACQU_01",9e)',
    vr: "LO",
    name: "InternalPulseSequenceName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",9f)': {
    tag: '(0019,"GEMS_ACQU_01",9f)',
    vr: "SS",
    name: "TransmittingCoil",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",a0)': {
    tag: '(0019,"GEMS_ACQU_01",a0)',
    vr: "SS",
    name: "SurfaceCoilType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",a1)': {
    tag: '(0019,"GEMS_ACQU_01",a1)',
    vr: "SS",
    name: "ExtremityCoilFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",a2)': {
    tag: '(0019,"GEMS_ACQU_01",a2)',
    vr: "SL",
    name: "RawDataRunNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",a3)': {
    tag: '(0019,"GEMS_ACQU_01",a3)',
    vr: "UL",
    name: "CalibratedFieldStrength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",a4)': {
    tag: '(0019,"GEMS_ACQU_01",a4)',
    vr: "SS",
    name: "SATFatWaterBone",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",a5)': {
    tag: '(0019,"GEMS_ACQU_01",a5)',
    vr: "DS",
    name: "ReceiveBandwidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",a7)': {
    tag: '(0019,"GEMS_ACQU_01",a7)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",a8)': {
    tag: '(0019,"GEMS_ACQU_01",a8)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",a9)': {
    tag: '(0019,"GEMS_ACQU_01",a9)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",aa)': {
    tag: '(0019,"GEMS_ACQU_01",aa)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",ab)': {
    tag: '(0019,"GEMS_ACQU_01",ab)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",ac)': {
    tag: '(0019,"GEMS_ACQU_01",ac)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",ad)': {
    tag: '(0019,"GEMS_ACQU_01",ad)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",ae)': {
    tag: '(0019,"GEMS_ACQU_01",ae)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",af)': {
    tag: '(0019,"GEMS_ACQU_01",af)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",b0)': {
    tag: '(0019,"GEMS_ACQU_01",b0)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",b1)': {
    tag: '(0019,"GEMS_ACQU_01",b1)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",b2)': {
    tag: '(0019,"GEMS_ACQU_01",b2)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",b3)': {
    tag: '(0019,"GEMS_ACQU_01",b3)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",b4)': {
    tag: '(0019,"GEMS_ACQU_01",b4)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",b5)': {
    tag: '(0019,"GEMS_ACQU_01",b5)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",b6)': {
    tag: '(0019,"GEMS_ACQU_01",b6)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",b7)': {
    tag: '(0019,"GEMS_ACQU_01",b7)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",b8)': {
    tag: '(0019,"GEMS_ACQU_01",b8)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",b9)': {
    tag: '(0019,"GEMS_ACQU_01",b9)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",ba)': {
    tag: '(0019,"GEMS_ACQU_01",ba)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",bb)': {
    tag: '(0019,"GEMS_ACQU_01",bb)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",bc)': {
    tag: '(0019,"GEMS_ACQU_01",bc)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",bd)': {
    tag: '(0019,"GEMS_ACQU_01",bd)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",be)': {
    tag: '(0019,"GEMS_ACQU_01",be)',
    vr: "DS",
    name: "ProjectionAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",c0)': {
    tag: '(0019,"GEMS_ACQU_01",c0)',
    vr: "SS",
    name: "SaturationPlanes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",c1)': {
    tag: '(0019,"GEMS_ACQU_01",c1)',
    vr: "SS",
    name: "SurfaceCoilIntensityCorrectionFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",c2)': {
    tag: '(0019,"GEMS_ACQU_01",c2)',
    vr: "SS",
    name: "SATLocationR",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",c3)': {
    tag: '(0019,"GEMS_ACQU_01",c3)',
    vr: "SS",
    name: "SATLocationL",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",c4)': {
    tag: '(0019,"GEMS_ACQU_01",c4)',
    vr: "SS",
    name: "SATLocationA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",c5)': {
    tag: '(0019,"GEMS_ACQU_01",c5)',
    vr: "SS",
    name: "SATLocationP",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",c6)': {
    tag: '(0019,"GEMS_ACQU_01",c6)',
    vr: "SS",
    name: "SATLocationH",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",c7)': {
    tag: '(0019,"GEMS_ACQU_01",c7)',
    vr: "SS",
    name: "SATLocationF",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",c8)': {
    tag: '(0019,"GEMS_ACQU_01",c8)',
    vr: "SS",
    name: "SATThicknessRL",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",c9)': {
    tag: '(0019,"GEMS_ACQU_01",c9)',
    vr: "SS",
    name: "SATThicknessAP",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",ca)': {
    tag: '(0019,"GEMS_ACQU_01",ca)',
    vr: "SS",
    name: "SATThicknessHF",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",cb)': {
    tag: '(0019,"GEMS_ACQU_01",cb)',
    vr: "SS",
    name: "PrescribedFlowAxis",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",cc)': {
    tag: '(0019,"GEMS_ACQU_01",cc)',
    vr: "SS",
    name: "VelocityEncoding",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",cd)': {
    tag: '(0019,"GEMS_ACQU_01",cd)',
    vr: "SS",
    name: "ThicknessDisclaimer",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",ce)': {
    tag: '(0019,"GEMS_ACQU_01",ce)',
    vr: "SS",
    name: "PrescanType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",cf)': {
    tag: '(0019,"GEMS_ACQU_01",cf)',
    vr: "SS",
    name: "PrescanStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",d0)': {
    tag: '(0019,"GEMS_ACQU_01",d0)',
    vr: "SH",
    name: "RawDataType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",d2)': {
    tag: '(0019,"GEMS_ACQU_01",d2)',
    vr: "SS",
    name: "ProjectionAlgorithm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",d3)': {
    tag: '(0019,"GEMS_ACQU_01",d3)',
    vr: "SH",
    name: "ProjectionAlgorithm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",d4)': {
    tag: '(0019,"GEMS_ACQU_01",d4)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",d5)': {
    tag: '(0019,"GEMS_ACQU_01",d5)',
    vr: "SS",
    name: "FractionalEcho",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",d6)': {
    tag: '(0019,"GEMS_ACQU_01",d6)',
    vr: "SS",
    name: "PrepPulse",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",d7)': {
    tag: '(0019,"GEMS_ACQU_01",d7)',
    vr: "SS",
    name: "CardiacPhases",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",d8)': {
    tag: '(0019,"GEMS_ACQU_01",d8)',
    vr: "SS",
    name: "VariableEchoFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",d9)': {
    tag: '(0019,"GEMS_ACQU_01",d9)',
    vr: "DS",
    name: "ConcatenatedSAT",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",da)': {
    tag: '(0019,"GEMS_ACQU_01",da)',
    vr: "SS",
    name: "ReferenceChannelUsed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",db)': {
    tag: '(0019,"GEMS_ACQU_01",db)',
    vr: "DS",
    name: "BackProjectorCoefficient",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",dc)': {
    tag: '(0019,"GEMS_ACQU_01",dc)',
    vr: "SS",
    name: "PrimarySpeedCorrectionUsed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",dd)': {
    tag: '(0019,"GEMS_ACQU_01",dd)',
    vr: "SS",
    name: "OverrangeCorrectionUsed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",de)': {
    tag: '(0019,"GEMS_ACQU_01",de)',
    vr: "DS",
    name: "DynamicZAlphaValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",df)': {
    tag: '(0019,"GEMS_ACQU_01",df)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",e0)': {
    tag: '(0019,"GEMS_ACQU_01",e0)',
    vr: "DS",
    name: "UserData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",e1)': {
    tag: '(0019,"GEMS_ACQU_01",e1)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",e2)': {
    tag: '(0019,"GEMS_ACQU_01",e2)',
    vr: "DS",
    name: "VelocityEncodeScale",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",e3)': {
    tag: '(0019,"GEMS_ACQU_01",e3)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",e4)': {
    tag: '(0019,"GEMS_ACQU_01",e4)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",e5)': {
    tag: '(0019,"GEMS_ACQU_01",e5)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",e6)': {
    tag: '(0019,"GEMS_ACQU_01",e6)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",e8)': {
    tag: '(0019,"GEMS_ACQU_01",e8)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",e9)': {
    tag: '(0019,"GEMS_ACQU_01",e9)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",eb)': {
    tag: '(0019,"GEMS_ACQU_01",eb)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",ec)': {
    tag: '(0019,"GEMS_ACQU_01",ec)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",f0)': {
    tag: '(0019,"GEMS_ACQU_01",f0)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",f1)': {
    tag: '(0019,"GEMS_ACQU_01",f1)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",f2)': {
    tag: '(0019,"GEMS_ACQU_01",f2)',
    vr: "SS",
    name: "FastPhases",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",f3)': {
    tag: '(0019,"GEMS_ACQU_01",f3)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",f4)': {
    tag: '(0019,"GEMS_ACQU_01",f4)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GEMS_ACQU_01",f9)': {
    tag: '(0019,"GEMS_ACQU_01",f9)',
    vr: "DS",
    name: "TransmitGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK1",00)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK1",00)',
    vr: "LO",
    name: "CRExposureMenuCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK1",10)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK1",10)',
    vr: "LO",
    name: "CRExposureMenuString",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK1",20)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK1",20)',
    vr: "LO",
    name: "CREDRMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK1",30)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK1",30)',
    vr: "LO",
    name: "CRLatitude",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK1",40)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK1",40)',
    vr: "LO",
    name: "CRGroupNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK1",50)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK1",50)',
    vr: "US",
    name: "CRImageSerialNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK1",60)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK1",60)',
    vr: "LO",
    name: "CRBarCodeNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK1",70)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK1",70)',
    vr: "LO",
    name: "CRFilmOutputExposure",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK1",80)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK1",80)',
    vr: "LO",
    name: "CRFilmFormat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK1",90)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK1",90)',
    vr: "LO",
    name: "CRSShiftString",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK2",00)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK2",00)',
    vr: "US",
    name: "CRSShift",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK2",10)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK2",10)',
    vr: "DS",
    name: "CRCShift",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK2",20)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK2",20)',
    vr: "DS",
    name: "CRGT",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK2",30)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK2",30)',
    vr: "DS",
    name: "CRGA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK2",40)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK2",40)',
    vr: "DS",
    name: "CRGC",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK2",50)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK2",50)',
    vr: "DS",
    name: "CRGS",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK2",60)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK2",60)',
    vr: "DS",
    name: "CRRT",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK2",70)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK2",70)',
    vr: "DS",
    name: "CRRE",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK2",80)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK2",80)',
    vr: "US",
    name: "CRRN",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK2",90)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK2",90)',
    vr: "DS",
    name: "CRDRT",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK3",00)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK3",00)',
    vr: "DS",
    name: "CRDRE",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK3",10)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK3",10)',
    vr: "US",
    name: "CRDRN",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK3",20)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK3",20)',
    vr: "DS",
    name: "CRORE",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK3",30)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK3",30)',
    vr: "US",
    name: "CRORN",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK3",40)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK3",40)',
    vr: "US",
    name: "CRORD",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK3",50)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK3",50)',
    vr: "LO",
    name: "CRCassetteSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK3",60)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK3",60)',
    vr: "LO",
    name: "CRMachineID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK3",70)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK3",70)',
    vr: "LO",
    name: "CRMachineType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK3",80)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK3",80)',
    vr: "LO",
    name: "CRTechnicianCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_1.0 BLOCK3",90)': {
    tag: '(0023,"GEMS_ACRQA_1.0 BLOCK3",90)',
    vr: "LO",
    name: "CREnergySubtractionParameters",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK1",00)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK1",00)',
    vr: "LO",
    name: "CRExposureMenuCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK1",10)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK1",10)',
    vr: "LO",
    name: "CRExposureMenuString",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK1",20)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK1",20)',
    vr: "LO",
    name: "CREDRMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK1",30)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK1",30)',
    vr: "LO",
    name: "CRLatitude",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK1",40)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK1",40)',
    vr: "LO",
    name: "CRGroupNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK1",50)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK1",50)',
    vr: "US",
    name: "CRImageSerialNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK1",60)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK1",60)',
    vr: "LO",
    name: "CRBarCodeNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK1",70)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK1",70)',
    vr: "LO",
    name: "CRFilmOutputExposure",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK1",80)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK1",80)',
    vr: "LO",
    name: "CRFilmFormat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK1",90)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK1",90)',
    vr: "LO",
    name: "CRSShiftString",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK2",00)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK2",00)',
    vr: "US",
    name: "CRSShift",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK2",10)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK2",10)',
    vr: "LO",
    name: "CRCShift",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK2",20)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK2",20)',
    vr: "LO",
    name: "CRGT",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK2",30)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK2",30)',
    vr: "DS",
    name: "CRGA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK2",40)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK2",40)',
    vr: "DS",
    name: "CRGC",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK2",50)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK2",50)',
    vr: "DS",
    name: "CRGS",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK2",60)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK2",60)',
    vr: "LO",
    name: "CRRT",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK2",70)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK2",70)',
    vr: "DS",
    name: "CRRE",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK2",80)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK2",80)',
    vr: "US",
    name: "CRRN",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK2",90)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK2",90)',
    vr: "DS",
    name: "CRDRT",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",00)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",00)',
    vr: "DS",
    name: "CRDRE",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",10)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",10)',
    vr: "US",
    name: "CRDRN",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",20)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",20)',
    vr: "DS",
    name: "CRORE",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",30)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",30)',
    vr: "US",
    name: "CRORN",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",40)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",40)',
    vr: "US",
    name: "CRORD",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",50)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",50)',
    vr: "LO",
    name: "CRCassetteSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",60)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",60)',
    vr: "LO",
    name: "CRMachineID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",70)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",70)',
    vr: "LO",
    name: "CRMachineType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",80)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",80)',
    vr: "LO",
    name: "CRTechnicianCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",90)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",90)',
    vr: "LO",
    name: "CREnergySubtractionParameters",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",f0)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",f0)',
    vr: "LO",
    name: "CRDistributionCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_ACRQA_2.0 BLOCK3",ff)': {
    tag: '(0023,"GEMS_ACRQA_2.0 BLOCK3",ff)',
    vr: "US",
    name: "CRShuttersApplied",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",01)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",01)',
    vr: "SQ",
    name: "Reconstruction Parameters Sequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",50)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",50)',
    vr: "UL",
    name: "VolumeVoxelCount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",51)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",51)',
    vr: "UL",
    name: "VolumeSegmentCount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",53)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",53)',
    vr: "US",
    name: "VolumeSliceSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",54)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",54)',
    vr: "US",
    name: "VolumeSliceCount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",55)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",55)',
    vr: "SL",
    name: "VolumeThresholdValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",57)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",57)',
    vr: "DS",
    name: "VolumeVoxelRatio",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",58)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",58)',
    vr: "DS",
    name: "VolumeVoxelSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",59)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",59)',
    vr: "US",
    name: "VolumeZPositionSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",60)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",60)',
    vr: "DS",
    name: "VolumeBaseLine",
    vm: "9",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",61)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",61)',
    vr: "DS",
    name: "VolumeCenterPoint",
    vm: "3",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",63)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",63)',
    vr: "SL",
    name: "VolumeSkewBase",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",64)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",64)',
    vr: "DS",
    name: "VolumeRegistrationTransformRotationMatrix",
    vm: "9",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",65)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",65)',
    vr: "DS",
    name: "VolumeRegistrationTransformTranslationVector",
    vm: "3",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",70)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",70)',
    vr: "DS",
    name: "KVPList",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",71)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",71)',
    vr: "IS",
    name: "XRayTubeCurrentList",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",72)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",72)',
    vr: "IS",
    name: "ExposureList",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",80)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",80)',
    vr: "LO",
    name: "AcquisitionDLXIdentifier",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",85)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",85)',
    vr: "SQ",
    name: "AcquisitionDLX2DSeriesSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",89)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",89)',
    vr: "DS",
    name: "ContrastAgentVolumeList",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",8A)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",8A)',
    vr: "US",
    name: "NumberOfInjections",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",8B)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",8B)',
    vr: "US",
    name: "FrameCount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",91)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",91)',
    vr: "LO",
    name: "XA3DReconstructionAlgorithmName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",92)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",92)',
    vr: "CS",
    name: "XA3DReconstructionAlgorithmVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",93)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",93)',
    vr: "DA",
    name: "DLXCalibrationDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",94)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",94)',
    vr: "TM",
    name: "DLXCalibrationTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",95)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",95)',
    vr: "CS",
    name: "DLXCalibrationStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",96)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",96)',
    vr: "IS",
    name: "UsedFrames",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",98)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",98)',
    vr: "US",
    name: "TransformCount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",99)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",99)',
    vr: "SQ",
    name: "TransformSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",9A)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",9A)',
    vr: "DS",
    name: "TransformRotationMatrix",
    vm: "9",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",9B)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",9B)',
    vr: "DS",
    name: "TransformTranslationVector",
    vm: "3",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",9C)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",9C)',
    vr: "LO",
    name: "TransformLabel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",B0)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",B0)',
    vr: "SQ",
    name: "WireframeList",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",B1)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",B1)',
    vr: "US",
    name: "WireframeCount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",B2)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",B2)',
    vr: "US",
    name: "LocationSystem",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",B5)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",B5)',
    vr: "LO",
    name: "WireframeName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",B6)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",B6)',
    vr: "LO",
    name: "WireframeGroupName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",B7)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",B7)',
    vr: "LO",
    name: "WireframeColor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",B8)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",B8)',
    vr: "SL",
    name: "WireframeAttributes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",B9)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",B9)',
    vr: "SL",
    name: "WireframePointCount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",BA)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",BA)',
    vr: "SL",
    name: "WireframeTimestamp",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",BB)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",BB)',
    vr: "SQ",
    name: "WireframePointList",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",BC)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",BC)',
    vr: "DS",
    name: "WireframePointsCoordinates",
    vm: "3",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",C0)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",C0)',
    vr: "DS",
    name: "VolumeUpperLeftHighCornerRAS",
    vm: "3",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",C1)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",C1)',
    vr: "DS",
    name: "VolumeSliceToRASRotationMatrix",
    vm: "9",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",C2)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",C2)',
    vr: "DS",
    name: "VolumeUpperLeftHighCornerTLOC",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",D1)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",D1)',
    vr: "OB",
    name: "VolumeSegmentList",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",D2)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",D2)',
    vr: "OB",
    name: "VolumeGradientList",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",D3)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",D3)',
    vr: "OB",
    name: "VolumeDensityList",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",D4)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",D4)',
    vr: "OB",
    name: "VolumeZPositionList",
    vm: "1",
    version: "PrivateTag"
  },
  '(0047,"GEMS_ADWSoft_3D1",D5)': {
    tag: '(0047,"GEMS_ADWSoft_3D1",D5)',
    vr: "OB",
    name: "VolumeOriginalIndexList",
    vm: "1",
    version: "PrivateTag"
  },
  '(0039,"GEMS_ADWSoft_DPO",80)': {
    tag: '(0039,"GEMS_ADWSoft_DPO",80)',
    vr: "IS",
    name: "PrivateEntityNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0039,"GEMS_ADWSoft_DPO",85)': {
    tag: '(0039,"GEMS_ADWSoft_DPO",85)',
    vr: "DA",
    name: "PrivateEntityDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0039,"GEMS_ADWSoft_DPO",90)': {
    tag: '(0039,"GEMS_ADWSoft_DPO",90)',
    vr: "TM",
    name: "PrivateEntityTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0039,"GEMS_ADWSoft_DPO",95)': {
    tag: '(0039,"GEMS_ADWSoft_DPO",95)',
    vr: "LO",
    name: "PrivateEntityLaunchCommand",
    vm: "1",
    version: "PrivateTag"
  },
  '(0039,"GEMS_ADWSoft_DPO",AA)': {
    tag: '(0039,"GEMS_ADWSoft_DPO",AA)',
    vr: "CS",
    name: "PrivateEntityType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0033,"GEMS_CTHD_01",02)': {
    tag: '(0033,"GEMS_CTHD_01",02)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0037,"GEMS_DRS_1",10)': {
    tag: '(0037,"GEMS_DRS_1",10)',
    vr: "LO",
    name: "ReferringDepartment",
    vm: "1",
    version: "PrivateTag"
  },
  '(0037,"GEMS_DRS_1",20)': {
    tag: '(0037,"GEMS_DRS_1",20)',
    vr: "US",
    name: "ScreenNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0037,"GEMS_DRS_1",40)': {
    tag: '(0037,"GEMS_DRS_1",40)',
    vr: "SH",
    name: "LeftOrientation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0037,"GEMS_DRS_1",42)': {
    tag: '(0037,"GEMS_DRS_1",42)',
    vr: "SH",
    name: "RightOrientation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0037,"GEMS_DRS_1",50)': {
    tag: '(0037,"GEMS_DRS_1",50)',
    vr: "CS",
    name: "Inversion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0037,"GEMS_DRS_1",60)': {
    tag: '(0037,"GEMS_DRS_1",60)',
    vr: "US",
    name: "DSA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",10)': {
    tag: '(0009,"GEMS_GENIE_1",10)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",11)': {
    tag: '(0009,"GEMS_GENIE_1",11)',
    vr: "SL",
    name: "StudyFlags",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",12)': {
    tag: '(0009,"GEMS_GENIE_1",12)',
    vr: "SL",
    name: "StudyType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",1e)': {
    tag: '(0009,"GEMS_GENIE_1",1e)',
    vr: "UI",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",20)': {
    tag: '(0009,"GEMS_GENIE_1",20)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",21)': {
    tag: '(0009,"GEMS_GENIE_1",21)',
    vr: "SL",
    name: "SeriesFlags",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",22)': {
    tag: '(0009,"GEMS_GENIE_1",22)',
    vr: "SH",
    name: "UserOrientation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",23)': {
    tag: '(0009,"GEMS_GENIE_1",23)',
    vr: "SL",
    name: "InitiationType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",24)': {
    tag: '(0009,"GEMS_GENIE_1",24)',
    vr: "SL",
    name: "InitiationDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",25)': {
    tag: '(0009,"GEMS_GENIE_1",25)',
    vr: "SL",
    name: "InitiationCountRate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",26)': {
    tag: '(0009,"GEMS_GENIE_1",26)',
    vr: "SL",
    name: "NumberEnergySets",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",27)': {
    tag: '(0009,"GEMS_GENIE_1",27)',
    vr: "SL",
    name: "NumberDetectors",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",29)': {
    tag: '(0009,"GEMS_GENIE_1",29)',
    vr: "SL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",2a)': {
    tag: '(0009,"GEMS_GENIE_1",2a)',
    vr: "SL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",2c)': {
    tag: '(0009,"GEMS_GENIE_1",2c)',
    vr: "LO",
    name: "SeriesComments",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",2d)': {
    tag: '(0009,"GEMS_GENIE_1",2d)',
    vr: "SL",
    name: "TrackBeatAverage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",2e)': {
    tag: '(0009,"GEMS_GENIE_1",2e)',
    vr: "FD",
    name: "DistancePrescribed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",30)': {
    tag: '(0009,"GEMS_GENIE_1",30)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",35)': {
    tag: '(0009,"GEMS_GENIE_1",35)',
    vr: "SL",
    name: "GantryLocusType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",37)': {
    tag: '(0009,"GEMS_GENIE_1",37)',
    vr: "SL",
    name: "StartingHeartRate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",38)': {
    tag: '(0009,"GEMS_GENIE_1",38)',
    vr: "SL",
    name: "RRWindowWidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",39)': {
    tag: '(0009,"GEMS_GENIE_1",39)',
    vr: "SL",
    name: "RRWindowOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",3a)': {
    tag: '(0009,"GEMS_GENIE_1",3a)',
    vr: "SL",
    name: "PercentCycleImaged",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",40)': {
    tag: '(0009,"GEMS_GENIE_1",40)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",41)': {
    tag: '(0009,"GEMS_GENIE_1",41)',
    vr: "SL",
    name: "PatientFlags",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",42)': {
    tag: '(0009,"GEMS_GENIE_1",42)',
    vr: "DA",
    name: "PatientCreationDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_GENIE_1",43)': {
    tag: '(0009,"GEMS_GENIE_1",43)',
    vr: "TM",
    name: "PatientCreationTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",0a)': {
    tag: '(0011,"GEMS_GENIE_1",0a)',
    vr: "SL",
    name: "SeriesType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",0b)': {
    tag: '(0011,"GEMS_GENIE_1",0b)',
    vr: "SL",
    name: "EffectiveSeriesDuration",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",0c)': {
    tag: '(0011,"GEMS_GENIE_1",0c)',
    vr: "SL",
    name: "NumBeats",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",0d)': {
    tag: '(0011,"GEMS_GENIE_1",0d)',
    vr: "LO",
    name: "RadioNuclideName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",10)': {
    tag: '(0011,"GEMS_GENIE_1",10)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",12)': {
    tag: '(0011,"GEMS_GENIE_1",12)',
    vr: "LO",
    name: "DatasetName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",13)': {
    tag: '(0011,"GEMS_GENIE_1",13)',
    vr: "SL",
    name: "DatasetType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",15)': {
    tag: '(0011,"GEMS_GENIE_1",15)',
    vr: "SL",
    name: "DetectorNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",16)': {
    tag: '(0011,"GEMS_GENIE_1",16)',
    vr: "SL",
    name: "EnergyNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",17)': {
    tag: '(0011,"GEMS_GENIE_1",17)',
    vr: "SL",
    name: "RRIntervalWindowNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",18)': {
    tag: '(0011,"GEMS_GENIE_1",18)',
    vr: "SL",
    name: "MGBinNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",19)': {
    tag: '(0011,"GEMS_GENIE_1",19)',
    vr: "FD",
    name: "RadiusOfRotation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",1a)': {
    tag: '(0011,"GEMS_GENIE_1",1a)',
    vr: "SL",
    name: "DetectorCountZone",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",1b)': {
    tag: '(0011,"GEMS_GENIE_1",1b)',
    vr: "SL",
    name: "NumEnergyWindows",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",1c)': {
    tag: '(0011,"GEMS_GENIE_1",1c)',
    vr: "SL",
    name: "EnergyOffset",
    vm: "4",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",1d)': {
    tag: '(0011,"GEMS_GENIE_1",1d)',
    vr: "SL",
    name: "EnergyRange",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",1f)': {
    tag: '(0011,"GEMS_GENIE_1",1f)',
    vr: "SL",
    name: "ImageOrientation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",23)': {
    tag: '(0011,"GEMS_GENIE_1",23)',
    vr: "SL",
    name: "UseFOVMask",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",24)': {
    tag: '(0011,"GEMS_GENIE_1",24)',
    vr: "SL",
    name: "FOVMaskYCutoffAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",25)': {
    tag: '(0011,"GEMS_GENIE_1",25)',
    vr: "SL",
    name: "FOVMaskCutoffAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",26)': {
    tag: '(0011,"GEMS_GENIE_1",26)',
    vr: "SL",
    name: "TableOrientation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",27)': {
    tag: '(0011,"GEMS_GENIE_1",27)',
    vr: "SL",
    name: "ROITopLeft",
    vm: "2",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",28)': {
    tag: '(0011,"GEMS_GENIE_1",28)',
    vr: "SL",
    name: "ROIBottomRight",
    vm: "2",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",30)': {
    tag: '(0011,"GEMS_GENIE_1",30)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",33)': {
    tag: '(0011,"GEMS_GENIE_1",33)',
    vr: "LO",
    name: "EnergyCorrectName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",34)': {
    tag: '(0011,"GEMS_GENIE_1",34)',
    vr: "LO",
    name: "SpatialCorrectName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",35)': {
    tag: '(0011,"GEMS_GENIE_1",35)',
    vr: "LO",
    name: "TuningCalibName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",36)': {
    tag: '(0011,"GEMS_GENIE_1",36)',
    vr: "LO",
    name: "UniformityCorrectName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",37)': {
    tag: '(0011,"GEMS_GENIE_1",37)',
    vr: "LO",
    name: "AcquisitionSpecificCorrectName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",38)': {
    tag: '(0011,"GEMS_GENIE_1",38)',
    vr: "SL",
    name: "ByteOrder",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",3a)': {
    tag: '(0011,"GEMS_GENIE_1",3a)',
    vr: "SL",
    name: "PictureFormat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",3b)': {
    tag: '(0011,"GEMS_GENIE_1",3b)',
    vr: "FD",
    name: "PixelScale",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",3c)': {
    tag: '(0011,"GEMS_GENIE_1",3c)',
    vr: "FD",
    name: "PixelOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",3e)': {
    tag: '(0011,"GEMS_GENIE_1",3e)',
    vr: "SL",
    name: "FOVShape",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",3f)': {
    tag: '(0011,"GEMS_GENIE_1",3f)',
    vr: "SL",
    name: "DatasetFlags",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",44)': {
    tag: '(0011,"GEMS_GENIE_1",44)',
    vr: "FD",
    name: "ThresholdCenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",45)': {
    tag: '(0011,"GEMS_GENIE_1",45)',
    vr: "FD",
    name: "ThresholdWidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",46)': {
    tag: '(0011,"GEMS_GENIE_1",46)',
    vr: "SL",
    name: "InterpolationType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",55)': {
    tag: '(0011,"GEMS_GENIE_1",55)',
    vr: "FD",
    name: "Period",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_GENIE_1",56)': {
    tag: '(0011,"GEMS_GENIE_1",56)',
    vr: "FD",
    name: "ElapsedTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",10)': {
    tag: '(0013,"GEMS_GENIE_1",10)',
    vr: "FD",
    name: "DigitalFOV",
    vm: "2",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",11)': {
    tag: '(0013,"GEMS_GENIE_1",11)',
    vr: "SL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",12)': {
    tag: '(0013,"GEMS_GENIE_1",12)',
    vr: "SL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",16)': {
    tag: '(0013,"GEMS_GENIE_1",16)',
    vr: "SL",
    name: "AutoTrackPeak",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",17)': {
    tag: '(0013,"GEMS_GENIE_1",17)',
    vr: "SL",
    name: "AutoTrackWidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",18)': {
    tag: '(0013,"GEMS_GENIE_1",18)',
    vr: "FD",
    name: "TransmissionScanTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",19)': {
    tag: '(0013,"GEMS_GENIE_1",19)',
    vr: "FD",
    name: "TransmissionMaskWidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",1a)': {
    tag: '(0013,"GEMS_GENIE_1",1a)',
    vr: "FD",
    name: "CopperAttenuatorThickness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",1c)': {
    tag: '(0013,"GEMS_GENIE_1",1c)',
    vr: "FD",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",1d)': {
    tag: '(0013,"GEMS_GENIE_1",1d)',
    vr: "FD",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",1e)': {
    tag: '(0013,"GEMS_GENIE_1",1e)',
    vr: "FD",
    name: "TomoViewOffset",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0013,"GEMS_GENIE_1",26)': {
    tag: '(0013,"GEMS_GENIE_1",26)',
    vr: "LT",
    name: "StudyComments",
    vm: "1",
    version: "PrivateTag"
  },
  '(0033,"GEMS_GNHD_01",01)': {
    tag: '(0033,"GEMS_GNHD_01",01)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0033,"GEMS_GNHD_01",02)': {
    tag: '(0033,"GEMS_GNHD_01",02)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",01)': {
    tag: '(0009,"GEMS_IDEN_01",01)',
    vr: "LO",
    name: "FullFidelity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",02)': {
    tag: '(0009,"GEMS_IDEN_01",02)',
    vr: "SH",
    name: "SuiteId",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",04)': {
    tag: '(0009,"GEMS_IDEN_01",04)',
    vr: "SH",
    name: "ProductId",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",17)': {
    tag: '(0009,"GEMS_IDEN_01",17)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",1a)': {
    tag: '(0009,"GEMS_IDEN_01",1a)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",20)': {
    tag: '(0009,"GEMS_IDEN_01",20)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",27)': {
    tag: '(0009,"GEMS_IDEN_01",27)',
    vr: "SL",
    name: "ImageActualDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",2f)': {
    tag: '(0009,"GEMS_IDEN_01",2f)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",30)': {
    tag: '(0009,"GEMS_IDEN_01",30)',
    vr: "SH",
    name: "ServiceId",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",31)': {
    tag: '(0009,"GEMS_IDEN_01",31)',
    vr: "SH",
    name: "MobileLocationNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",e2)': {
    tag: '(0009,"GEMS_IDEN_01",e2)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",e3)': {
    tag: '(0009,"GEMS_IDEN_01",e3)',
    vr: "UI",
    name: "EquipmentUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",e6)': {
    tag: '(0009,"GEMS_IDEN_01",e6)',
    vr: "SH",
    name: "GenesisVersionNow",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",e7)': {
    tag: '(0009,"GEMS_IDEN_01",e7)',
    vr: "UL",
    name: "ExamRecordChecksum",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",e8)': {
    tag: '(0009,"GEMS_IDEN_01",e8)',
    vr: "UL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"GEMS_IDEN_01",e9)': {
    tag: '(0009,"GEMS_IDEN_01",e9)',
    vr: "SL",
    name: "ActualSeriesDataTimeStamp",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",06)': {
    tag: '(0027,"GEMS_IMAG_01",06)',
    vr: "SL",
    name: "ImageArchiveFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",10)': {
    tag: '(0027,"GEMS_IMAG_01",10)',
    vr: "SS",
    name: "ScoutType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",1c)': {
    tag: '(0027,"GEMS_IMAG_01",1c)',
    vr: "SL",
    name: "VmaMamp",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",1d)': {
    tag: '(0027,"GEMS_IMAG_01",1d)',
    vr: "SS",
    name: "VmaPhase",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",1e)': {
    tag: '(0027,"GEMS_IMAG_01",1e)',
    vr: "SL",
    name: "VmaMod",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",1f)': {
    tag: '(0027,"GEMS_IMAG_01",1f)',
    vr: "SL",
    name: "VmaClip",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",20)': {
    tag: '(0027,"GEMS_IMAG_01",20)',
    vr: "SS",
    name: "SmartScanOnOffFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",30)': {
    tag: '(0027,"GEMS_IMAG_01",30)',
    vr: "SH",
    name: "ForeignImageRevision",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",31)': {
    tag: '(0027,"GEMS_IMAG_01",31)',
    vr: "SS",
    name: "ImagingMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",32)': {
    tag: '(0027,"GEMS_IMAG_01",32)',
    vr: "SS",
    name: "PulseSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",33)': {
    tag: '(0027,"GEMS_IMAG_01",33)',
    vr: "SL",
    name: "ImagingOptions",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",35)': {
    tag: '(0027,"GEMS_IMAG_01",35)',
    vr: "SS",
    name: "PlaneType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",36)': {
    tag: '(0027,"GEMS_IMAG_01",36)',
    vr: "SL",
    name: "ObliquePlane",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",40)': {
    tag: '(0027,"GEMS_IMAG_01",40)',
    vr: "SH",
    name: "RASLetterOfImageLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",41)': {
    tag: '(0027,"GEMS_IMAG_01",41)',
    vr: "FL",
    name: "ImageLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",42)': {
    tag: '(0027,"GEMS_IMAG_01",42)',
    vr: "FL",
    name: "CenterRCoordOfPlaneImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",43)': {
    tag: '(0027,"GEMS_IMAG_01",43)',
    vr: "FL",
    name: "CenterACoordOfPlaneImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",44)': {
    tag: '(0027,"GEMS_IMAG_01",44)',
    vr: "FL",
    name: "CenterSCoordOfPlaneImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",45)': {
    tag: '(0027,"GEMS_IMAG_01",45)',
    vr: "FL",
    name: "NormalRCoord",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",46)': {
    tag: '(0027,"GEMS_IMAG_01",46)',
    vr: "FL",
    name: "NormalACoord",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",47)': {
    tag: '(0027,"GEMS_IMAG_01",47)',
    vr: "FL",
    name: "NormalSCoord",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",48)': {
    tag: '(0027,"GEMS_IMAG_01",48)',
    vr: "FL",
    name: "RCoordOfTopRightCorner",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",49)': {
    tag: '(0027,"GEMS_IMAG_01",49)',
    vr: "FL",
    name: "ACoordOfTopRightCorner",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",4a)': {
    tag: '(0027,"GEMS_IMAG_01",4a)',
    vr: "FL",
    name: "SCoordOfTopRightCorner",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",4b)': {
    tag: '(0027,"GEMS_IMAG_01",4b)',
    vr: "FL",
    name: "RCoordOfBottomRightCorner",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",4c)': {
    tag: '(0027,"GEMS_IMAG_01",4c)',
    vr: "FL",
    name: "ACoordOfBottomRightCorner",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",4d)': {
    tag: '(0027,"GEMS_IMAG_01",4d)',
    vr: "FL",
    name: "SCoordOfBottomRightCorner",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",50)': {
    tag: '(0027,"GEMS_IMAG_01",50)',
    vr: "FL",
    name: "TableStartLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",51)': {
    tag: '(0027,"GEMS_IMAG_01",51)',
    vr: "FL",
    name: "TableEndLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",52)': {
    tag: '(0027,"GEMS_IMAG_01",52)',
    vr: "SH",
    name: "RASLetterForSideOfImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",53)': {
    tag: '(0027,"GEMS_IMAG_01",53)',
    vr: "SH",
    name: "RASLetterForAnteriorPosterior",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",54)': {
    tag: '(0027,"GEMS_IMAG_01",54)',
    vr: "SH",
    name: "RASLetterForScoutStartLoc",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",55)': {
    tag: '(0027,"GEMS_IMAG_01",55)',
    vr: "SH",
    name: "RASLetterForScoutEndLoc",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",60)': {
    tag: '(0027,"GEMS_IMAG_01",60)',
    vr: "FL",
    name: "ImageDimensionX",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",61)': {
    tag: '(0027,"GEMS_IMAG_01",61)',
    vr: "FL",
    name: "ImageDimensionY",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"GEMS_IMAG_01",62)': {
    tag: '(0027,"GEMS_IMAG_01",62)',
    vr: "FL",
    name: "NumberOfExcitations",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",04)': {
    tag: '(0029,"GEMS_IMPS_01",04)',
    vr: "SL",
    name: "LowerRangeOfPixels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",05)': {
    tag: '(0029,"GEMS_IMPS_01",05)',
    vr: "DS",
    name: "LowerRangeOfPixels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",06)': {
    tag: '(0029,"GEMS_IMPS_01",06)',
    vr: "DS",
    name: "LowerRangeOfPixels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",07)': {
    tag: '(0029,"GEMS_IMPS_01",07)',
    vr: "SL",
    name: "LowerRangeOfPixels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",08)': {
    tag: '(0029,"GEMS_IMPS_01",08)',
    vr: "SH",
    name: "LowerRangeOfPixels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",09)': {
    tag: '(0029,"GEMS_IMPS_01",09)',
    vr: "SH",
    name: "LowerRangeOfPixels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",0a)': {
    tag: '(0029,"GEMS_IMPS_01",0a)',
    vr: "SS",
    name: "LowerRangeOfPixels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",15)': {
    tag: '(0029,"GEMS_IMPS_01",15)',
    vr: "SL",
    name: "LowerRangeOfPixels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",16)': {
    tag: '(0029,"GEMS_IMPS_01",16)',
    vr: "SL",
    name: "LowerRangeOfPixels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",17)': {
    tag: '(0029,"GEMS_IMPS_01",17)',
    vr: "SL",
    name: "LowerRangeOfPixels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",18)': {
    tag: '(0029,"GEMS_IMPS_01",18)',
    vr: "SL",
    name: "UpperRangeOfPixels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",1a)': {
    tag: '(0029,"GEMS_IMPS_01",1a)',
    vr: "SL",
    name: "LengthOfTotalHeaderInBytes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",26)': {
    tag: '(0029,"GEMS_IMPS_01",26)',
    vr: "SS",
    name: "VersionOfHeaderStructure",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",34)': {
    tag: '(0029,"GEMS_IMPS_01",34)',
    vr: "SL",
    name: "AdvantageCompOverflow",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"GEMS_IMPS_01",35)': {
    tag: '(0029,"GEMS_IMPS_01",35)',
    vr: "SL",
    name: "AdvantageCompUnderflow",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",01)': {
    tag: '(0043,"GEMS_PARM_01",01)',
    vr: "SS",
    name: "BitmapOfPrescanOptions",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",02)': {
    tag: '(0043,"GEMS_PARM_01",02)',
    vr: "SS",
    name: "GradientOffsetInX",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",03)': {
    tag: '(0043,"GEMS_PARM_01",03)',
    vr: "SS",
    name: "GradientOffsetInY",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",04)': {
    tag: '(0043,"GEMS_PARM_01",04)',
    vr: "SS",
    name: "GradientOffsetInZ",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",05)': {
    tag: '(0043,"GEMS_PARM_01",05)',
    vr: "SS",
    name: "ImageIsOriginalOrUnoriginal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",06)': {
    tag: '(0043,"GEMS_PARM_01",06)',
    vr: "SS",
    name: "NumberOfEPIShots",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",07)': {
    tag: '(0043,"GEMS_PARM_01",07)',
    vr: "SS",
    name: "ViewsPerSegment",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",08)': {
    tag: '(0043,"GEMS_PARM_01",08)',
    vr: "SS",
    name: "RespiratoryRateInBPM",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",09)': {
    tag: '(0043,"GEMS_PARM_01",09)',
    vr: "SS",
    name: "RespiratoryTriggerPoint",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",0a)': {
    tag: '(0043,"GEMS_PARM_01",0a)',
    vr: "SS",
    name: "TypeOfReceiverUsed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",0b)': {
    tag: '(0043,"GEMS_PARM_01",0b)',
    vr: "DS",
    name: "PeakRateOfChangeOfGradientField",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",0c)': {
    tag: '(0043,"GEMS_PARM_01",0c)',
    vr: "DS",
    name: "LimitsInUnitsOfPercent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",0d)': {
    tag: '(0043,"GEMS_PARM_01",0d)',
    vr: "DS",
    name: "PSDEstimatedLimit",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",0e)': {
    tag: '(0043,"GEMS_PARM_01",0e)',
    vr: "DS",
    name: "PSDEstimatedLimitInTeslaPerSecond",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",0f)': {
    tag: '(0043,"GEMS_PARM_01",0f)',
    vr: "DS",
    name: "SARAvgHead",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",10)': {
    tag: '(0043,"GEMS_PARM_01",10)',
    vr: "US",
    name: "WindowValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",11)': {
    tag: '(0043,"GEMS_PARM_01",11)',
    vr: "US",
    name: "TotalInputViews",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",12)': {
    tag: '(0043,"GEMS_PARM_01",12)',
    vr: "SS",
    name: "XrayChain",
    vm: "3",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",13)': {
    tag: '(0043,"GEMS_PARM_01",13)',
    vr: "SS",
    name: "ReconKernelParameters",
    vm: "5",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",14)': {
    tag: '(0043,"GEMS_PARM_01",14)',
    vr: "SS",
    name: "CalibrationParameters",
    vm: "3",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",15)': {
    tag: '(0043,"GEMS_PARM_01",15)',
    vr: "SS",
    name: "TotalOutputViews",
    vm: "3",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",16)': {
    tag: '(0043,"GEMS_PARM_01",16)',
    vr: "SS",
    name: "NumberOfOverranges",
    vm: "5",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",17)': {
    tag: '(0043,"GEMS_PARM_01",17)',
    vr: "DS",
    name: "IBHImageScaleFactors",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",18)': {
    tag: '(0043,"GEMS_PARM_01",18)',
    vr: "DS",
    name: "BBHCoefficients",
    vm: "3",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",19)': {
    tag: '(0043,"GEMS_PARM_01",19)',
    vr: "SS",
    name: "NumberOfBBHChainsToBlend",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",1a)': {
    tag: '(0043,"GEMS_PARM_01",1a)',
    vr: "SL",
    name: "StartingChannelNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",1b)': {
    tag: '(0043,"GEMS_PARM_01",1b)',
    vr: "SS",
    name: "PPScanParameters",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",1c)': {
    tag: '(0043,"GEMS_PARM_01",1c)',
    vr: "SS",
    name: "GEImageIntegrity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",1d)': {
    tag: '(0043,"GEMS_PARM_01",1d)',
    vr: "SS",
    name: "LevelValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",1e)': {
    tag: '(0043,"GEMS_PARM_01",1e)',
    vr: "DS",
    name: "DeltaStartTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",1f)': {
    tag: '(0043,"GEMS_PARM_01",1f)',
    vr: "SL",
    name: "MaxOverrangesInAView",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",20)': {
    tag: '(0043,"GEMS_PARM_01",20)',
    vr: "DS",
    name: "AvgOverrangesAllViews",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",21)': {
    tag: '(0043,"GEMS_PARM_01",21)',
    vr: "SS",
    name: "CorrectedAfterglowTerms",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",25)': {
    tag: '(0043,"GEMS_PARM_01",25)',
    vr: "SS",
    name: "ReferenceChannels",
    vm: "6",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",26)': {
    tag: '(0043,"GEMS_PARM_01",26)',
    vr: "US",
    name: "NoViewsRefChannelsBlocked",
    vm: "6",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",27)': {
    tag: '(0043,"GEMS_PARM_01",27)',
    vr: "SH",
    name: "ScanPitchRatio",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",28)': {
    tag: '(0043,"GEMS_PARM_01",28)',
    vr: "OB",
    name: "UniqueImageIdentifier",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",29)': {
    tag: '(0043,"GEMS_PARM_01",29)',
    vr: "OB",
    name: "HistogramTables",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",2a)': {
    tag: '(0043,"GEMS_PARM_01",2a)',
    vr: "OB",
    name: "UserDefinedData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",2b)': {
    tag: '(0043,"GEMS_PARM_01",2b)',
    vr: "SS",
    name: "PrivateScanOptions",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",2c)': {
    tag: '(0043,"GEMS_PARM_01",2c)',
    vr: "SS",
    name: "EffectiveEchoSpacing",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",2d)': {
    tag: '(0043,"GEMS_PARM_01",2d)',
    vr: "SH",
    name: "StringSlopField1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",2e)': {
    tag: '(0043,"GEMS_PARM_01",2e)',
    vr: "SH",
    name: "StringSlopField2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",2f)': {
    tag: '(0043,"GEMS_PARM_01",2f)',
    vr: "SS",
    name: "RawDataType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",30)': {
    tag: '(0043,"GEMS_PARM_01",30)',
    vr: "SS",
    name: "RawDataType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",31)': {
    tag: '(0043,"GEMS_PARM_01",31)',
    vr: "DS",
    name: "RACoordOfTargetReconCentre",
    vm: "2",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",32)': {
    tag: '(0043,"GEMS_PARM_01",32)',
    vr: "SS",
    name: "RawDataType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",33)': {
    tag: '(0043,"GEMS_PARM_01",33)',
    vr: "FL",
    name: "NegScanSpacing",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",34)': {
    tag: '(0043,"GEMS_PARM_01",34)',
    vr: "IS",
    name: "OffsetFrequency",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",35)': {
    tag: '(0043,"GEMS_PARM_01",35)',
    vr: "UL",
    name: "UserUsageTag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",36)': {
    tag: '(0043,"GEMS_PARM_01",36)',
    vr: "UL",
    name: "UserFillMapMSW",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",37)': {
    tag: '(0043,"GEMS_PARM_01",37)',
    vr: "UL",
    name: "UserFillMapLSW",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",38)': {
    tag: '(0043,"GEMS_PARM_01",38)',
    vr: "FL",
    name: "User25ToUser48",
    vm: "24",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",39)': {
    tag: '(0043,"GEMS_PARM_01",39)',
    vr: "IS",
    name: "SlopInteger6ToSlopInteger9",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",40)': {
    tag: '(0043,"GEMS_PARM_01",40)',
    vr: "FL",
    name: "TriggerOnPosition",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",41)': {
    tag: '(0043,"GEMS_PARM_01",41)',
    vr: "FL",
    name: "DegreeOfRotation",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",42)': {
    tag: '(0043,"GEMS_PARM_01",42)',
    vr: "SL",
    name: "DASTriggerSource",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",43)': {
    tag: '(0043,"GEMS_PARM_01",43)',
    vr: "SL",
    name: "DASFpaGain",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",44)': {
    tag: '(0043,"GEMS_PARM_01",44)',
    vr: "SL",
    name: "DASOutputSource",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",45)': {
    tag: '(0043,"GEMS_PARM_01",45)',
    vr: "SL",
    name: "DASAdInput",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",46)': {
    tag: '(0043,"GEMS_PARM_01",46)',
    vr: "SL",
    name: "DASCalMode",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",47)': {
    tag: '(0043,"GEMS_PARM_01",47)',
    vr: "SL",
    name: "DASCalFrequency",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",48)': {
    tag: '(0043,"GEMS_PARM_01",48)',
    vr: "SL",
    name: "DASRegXm",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",49)': {
    tag: '(0043,"GEMS_PARM_01",49)',
    vr: "SL",
    name: "DASAutoZero",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",4a)': {
    tag: '(0043,"GEMS_PARM_01",4a)',
    vr: "SS",
    name: "StartingChannelOfView",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",4b)': {
    tag: '(0043,"GEMS_PARM_01",4b)',
    vr: "SL",
    name: "DASXmPattern",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",4c)': {
    tag: '(0043,"GEMS_PARM_01",4c)',
    vr: "SS",
    name: "TGGCTriggerMode",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",4d)': {
    tag: '(0043,"GEMS_PARM_01",4d)',
    vr: "FL",
    name: "StartScanToXrayOnDelay",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",4e)': {
    tag: '(0043,"GEMS_PARM_01",4e)',
    vr: "FL",
    name: "DurationOfXrayOn",
    vm: "4",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",60)': {
    tag: '(0043,"GEMS_PARM_01",60)',
    vr: "IS",
    name: "SlopInteger10ToSlopInteger17",
    vm: "8",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",61)': {
    tag: '(0043,"GEMS_PARM_01",61)',
    vr: "UI",
    name: "ScannerStudyEntityUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",62)': {
    tag: '(0043,"GEMS_PARM_01",62)',
    vr: "SH",
    name: "ScannerStudyID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",6f)': {
    tag: '(0043,"GEMS_PARM_01",6f)',
    vr: "DS",
    name: "ScannerTableEntry",
    vm: "3",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",70)': {
    tag: '(0043,"GEMS_PARM_01",70)',
    vr: "LO",
    name: "ParadigmName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",71)': {
    tag: '(0043,"GEMS_PARM_01",71)',
    vr: "ST",
    name: "ParadigmDescription",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",72)': {
    tag: '(0043,"GEMS_PARM_01",72)',
    vr: "UI",
    name: "ParadigmUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",73)': {
    tag: '(0043,"GEMS_PARM_01",73)',
    vr: "US",
    name: "ExperimentType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",74)': {
    tag: '(0043,"GEMS_PARM_01",74)',
    vr: "US",
    name: "NumberOfRestVolumes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",75)': {
    tag: '(0043,"GEMS_PARM_01",75)',
    vr: "US",
    name: "NumberOfActiveVolumes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",76)': {
    tag: '(0043,"GEMS_PARM_01",76)',
    vr: "US",
    name: "NumberOfDummyScans",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",77)': {
    tag: '(0043,"GEMS_PARM_01",77)',
    vr: "SH",
    name: "ApplicationName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",78)': {
    tag: '(0043,"GEMS_PARM_01",78)',
    vr: "SH",
    name: "ApplicationVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",79)': {
    tag: '(0043,"GEMS_PARM_01",79)',
    vr: "US",
    name: "SlicesPerVolume",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",7a)': {
    tag: '(0043,"GEMS_PARM_01",7a)',
    vr: "US",
    name: "ExpectedTimePoints",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",7b)': {
    tag: '(0043,"GEMS_PARM_01",7b)',
    vr: "FL",
    name: "RegressorValues",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",7c)': {
    tag: '(0043,"GEMS_PARM_01",7c)',
    vr: "FL",
    name: "DelayAfterSliceGroup",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",7d)': {
    tag: '(0043,"GEMS_PARM_01",7d)',
    vr: "US",
    name: "ReconModeFlagWord",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",7e)': {
    tag: '(0043,"GEMS_PARM_01",7e)',
    vr: "LO",
    name: "PACCSpecificInformation",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",7f)': {
    tag: '(0043,"GEMS_PARM_01",7f)',
    vr: "DS",
    name: "EDWIScaleFactor",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",80)': {
    tag: '(0043,"GEMS_PARM_01",80)',
    vr: "LO",
    name: "CoilIDData",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",81)': {
    tag: '(0043,"GEMS_PARM_01",81)',
    vr: "LO",
    name: "GECoilName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",82)': {
    tag: '(0043,"GEMS_PARM_01",82)',
    vr: "LO",
    name: "SystemConfigurationInformation",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",83)': {
    tag: '(0043,"GEMS_PARM_01",83)',
    vr: "DS",
    name: "AssetRFactors",
    vm: "1-2",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",84)': {
    tag: '(0043,"GEMS_PARM_01",84)',
    vr: "LO",
    name: "AdditionalAssetData",
    vm: "5-n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",85)': {
    tag: '(0043,"GEMS_PARM_01",85)',
    vr: "UT",
    name: "DebugDataTextFormat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",86)': {
    tag: '(0043,"GEMS_PARM_01",86)',
    vr: "OB",
    name: "DebugDataBinaryFormat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",87)': {
    tag: '(0043,"GEMS_PARM_01",87)',
    vr: "UT",
    name: "ScannerSoftwareVersionLongForm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",88)': {
    tag: '(0043,"GEMS_PARM_01",88)',
    vr: "UI",
    name: "PUREAcquisitionCalibrationSeriesUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",89)': {
    tag: '(0043,"GEMS_PARM_01",89)',
    vr: "LO",
    name: "GoverningBodydBdtAndSARDefinition",
    vm: "3",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",8a)': {
    tag: '(0043,"GEMS_PARM_01",8a)',
    vr: "CS",
    name: "PrivateInPlanePhaseEncodingDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",8b)': {
    tag: '(0043,"GEMS_PARM_01",8b)',
    vr: "OB",
    name: "FMRIBinaryDataBlock",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",8c)': {
    tag: '(0043,"GEMS_PARM_01",8c)',
    vr: "DS",
    name: "VoxelLocation",
    vm: "6",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",8d)': {
    tag: '(0043,"GEMS_PARM_01",8d)',
    vr: "DS",
    name: "SATBandLocations",
    vm: "7-7n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",8e)': {
    tag: '(0043,"GEMS_PARM_01",8e)',
    vr: "DS",
    name: "SpectroPrescanValues",
    vm: "3",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",8f)': {
    tag: '(0043,"GEMS_PARM_01",8f)',
    vr: "DS",
    name: "SpectroParameters",
    vm: "3",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",90)': {
    tag: '(0043,"GEMS_PARM_01",90)',
    vr: "LO",
    name: "SARDefinition",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",91)': {
    tag: '(0043,"GEMS_PARM_01",91)',
    vr: "DS",
    name: "SARValue",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",92)': {
    tag: '(0043,"GEMS_PARM_01",92)',
    vr: "LO",
    name: "ImageErrorText",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",93)': {
    tag: '(0043,"GEMS_PARM_01",93)',
    vr: "DS",
    name: "SpectroQuantitationValues",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",94)': {
    tag: '(0043,"GEMS_PARM_01",94)',
    vr: "DS",
    name: "SpectroRatioValues",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",95)': {
    tag: '(0043,"GEMS_PARM_01",95)',
    vr: "LO",
    name: "PrescanReuseString",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",96)': {
    tag: '(0043,"GEMS_PARM_01",96)',
    vr: "CS",
    name: "ContentQualification",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",97)': {
    tag: '(0043,"GEMS_PARM_01",97)',
    vr: "LO",
    name: "ImageFilteringParameters",
    vm: "9",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",98)': {
    tag: '(0043,"GEMS_PARM_01",98)',
    vr: "UI",
    name: "ASSETAcquisitionCalibrationSeriesUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",99)': {
    tag: '(0043,"GEMS_PARM_01",99)',
    vr: "LO",
    name: "ExtendedOptions",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",9a)': {
    tag: '(0043,"GEMS_PARM_01",9a)',
    vr: "IS",
    name: "RxStackIdentification",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",9b)': {
    tag: '(0043,"GEMS_PARM_01",9b)',
    vr: "DS",
    name: "NPWFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",9c)': {
    tag: '(0043,"GEMS_PARM_01",9c)',
    vr: "OB",
    name: "ResearchTag1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",9d)': {
    tag: '(0043,"GEMS_PARM_01",9d)',
    vr: "OB",
    name: "ResearchTag2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",9e)': {
    tag: '(0043,"GEMS_PARM_01",9e)',
    vr: "OB",
    name: "ResearchTag3",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GEMS_PARM_01",9f)': {
    tag: '(0043,"GEMS_PARM_01",9f)',
    vr: "OB",
    name: "ResearchTag4",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"GEMS_PATI_01",10)': {
    tag: '(0011,"GEMS_PATI_01",10)',
    vr: "SS",
    name: "PatientStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",03)': {
    tag: '(0021,"GEMS_RELA_01",03)',
    vr: "SS",
    name: "SeriesFromWhichPrescribed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",05)': {
    tag: '(0021,"GEMS_RELA_01",05)',
    vr: "SH",
    name: "GenesisVersionNow",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",07)': {
    tag: '(0021,"GEMS_RELA_01",07)',
    vr: "UL",
    name: "SeriesRecordChecksum",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",15)': {
    tag: '(0021,"GEMS_RELA_01",15)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",16)': {
    tag: '(0021,"GEMS_RELA_01",16)',
    vr: "SS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",18)': {
    tag: '(0021,"GEMS_RELA_01",18)',
    vr: "SH",
    name: "GenesisVersionNow",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",19)': {
    tag: '(0021,"GEMS_RELA_01",19)',
    vr: "UL",
    name: "AcqReconRecordChecksum",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",20)': {
    tag: '(0021,"GEMS_RELA_01",20)',
    vr: "DS",
    name: "TableStartLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",35)': {
    tag: '(0021,"GEMS_RELA_01",35)',
    vr: "SS",
    name: "SeriesFromWhichPrescribed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",36)': {
    tag: '(0021,"GEMS_RELA_01",36)',
    vr: "SS",
    name: "ImageFromWhichPrescribed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",37)': {
    tag: '(0021,"GEMS_RELA_01",37)',
    vr: "SS",
    name: "ScreenFormat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",4a)': {
    tag: '(0021,"GEMS_RELA_01",4a)',
    vr: "LO",
    name: "AnatomicalReferenceForScout",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",4e)': {
    tag: '(0021,"GEMS_RELA_01",4e)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",4f)': {
    tag: '(0021,"GEMS_RELA_01",4f)',
    vr: "SS",
    name: "LocationsInAcquisition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",50)': {
    tag: '(0021,"GEMS_RELA_01",50)',
    vr: "SS",
    name: "GraphicallyPrescribed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",51)': {
    tag: '(0021,"GEMS_RELA_01",51)',
    vr: "DS",
    name: "RotationFromSourceXRot",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",52)': {
    tag: '(0021,"GEMS_RELA_01",52)',
    vr: "DS",
    name: "RotationFromSourceYRot",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",53)': {
    tag: '(0021,"GEMS_RELA_01",53)',
    vr: "DS",
    name: "RotationFromSourceZRot",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",54)': {
    tag: '(0021,"GEMS_RELA_01",54)',
    vr: "SH",
    name: "ImagePosition",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",55)': {
    tag: '(0021,"GEMS_RELA_01",55)',
    vr: "SH",
    name: "ImageOrientation",
    vm: "6",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",56)': {
    tag: '(0021,"GEMS_RELA_01",56)',
    vr: "SL",
    name: "IntegerSlop",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",57)': {
    tag: '(0021,"GEMS_RELA_01",57)',
    vr: "SL",
    name: "IntegerSlop",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",58)': {
    tag: '(0021,"GEMS_RELA_01",58)',
    vr: "SL",
    name: "IntegerSlop",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",59)': {
    tag: '(0021,"GEMS_RELA_01",59)',
    vr: "SL",
    name: "IntegerSlop",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",5a)': {
    tag: '(0021,"GEMS_RELA_01",5a)',
    vr: "SL",
    name: "IntegerSlop",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",5b)': {
    tag: '(0021,"GEMS_RELA_01",5b)',
    vr: "DS",
    name: "FloatSlop",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",5c)': {
    tag: '(0021,"GEMS_RELA_01",5c)',
    vr: "DS",
    name: "FloatSlop",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",5d)': {
    tag: '(0021,"GEMS_RELA_01",5d)',
    vr: "DS",
    name: "FloatSlop",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",5e)': {
    tag: '(0021,"GEMS_RELA_01",5e)',
    vr: "DS",
    name: "FloatSlop",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",5f)': {
    tag: '(0021,"GEMS_RELA_01",5f)',
    vr: "DS",
    name: "FloatSlop",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",70)': {
    tag: '(0021,"GEMS_RELA_01",70)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",71)': {
    tag: '(0021,"GEMS_RELA_01",71)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",81)': {
    tag: '(0021,"GEMS_RELA_01",81)',
    vr: "DS",
    name: "AutoWindowLevelAlpha",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",82)': {
    tag: '(0021,"GEMS_RELA_01",82)',
    vr: "DS",
    name: "AutoWindowLevelBeta",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",83)': {
    tag: '(0021,"GEMS_RELA_01",83)',
    vr: "DS",
    name: "AutoWindowLevelWindow",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",84)': {
    tag: '(0021,"GEMS_RELA_01",84)',
    vr: "DS",
    name: "AutoWindowLevelLevel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",90)': {
    tag: '(0021,"GEMS_RELA_01",90)',
    vr: "SS",
    name: "TubeFocalSpotPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",91)': {
    tag: '(0021,"GEMS_RELA_01",91)',
    vr: "SS",
    name: "BiopsyPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",92)': {
    tag: '(0021,"GEMS_RELA_01",92)',
    vr: "FL",
    name: "BiopsyTLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"GEMS_RELA_01",93)': {
    tag: '(0021,"GEMS_RELA_01",93)',
    vr: "FL",
    name: "BiopsyRefLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",04)': {
    tag: '(0045,"GEMS_SENO_02",04)',
    vr: "CS",
    name: "AES",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",06)': {
    tag: '(0045,"GEMS_SENO_02",06)',
    vr: "DS",
    name: "Angulation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",09)': {
    tag: '(0045,"GEMS_SENO_02",09)',
    vr: "DS",
    name: "RealMagnificationFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",0b)': {
    tag: '(0045,"GEMS_SENO_02",0b)',
    vr: "CS",
    name: "SenographType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",0c)': {
    tag: '(0045,"GEMS_SENO_02",0c)',
    vr: "DS",
    name: "IntegrationTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",0d)': {
    tag: '(0045,"GEMS_SENO_02",0d)',
    vr: "DS",
    name: "ROIOriginXY",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",11)': {
    tag: '(0045,"GEMS_SENO_02",11)',
    vr: "DS",
    name: "ReceptorSizeCmXY",
    vm: "2",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",12)': {
    tag: '(0045,"GEMS_SENO_02",12)',
    vr: "IS",
    name: "ReceptorSizePixelsXY",
    vm: "2",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",13)': {
    tag: '(0045,"GEMS_SENO_02",13)',
    vr: "ST",
    name: "Screen",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",14)': {
    tag: '(0045,"GEMS_SENO_02",14)',
    vr: "DS",
    name: "PixelPitchMicrons",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",15)': {
    tag: '(0045,"GEMS_SENO_02",15)',
    vr: "IS",
    name: "PixelDepthBits",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",16)': {
    tag: '(0045,"GEMS_SENO_02",16)',
    vr: "IS",
    name: "BinningFactorXY",
    vm: "2",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",1B)': {
    tag: '(0045,"GEMS_SENO_02",1B)',
    vr: "CS",
    name: "ClinicalView",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",1D)': {
    tag: '(0045,"GEMS_SENO_02",1D)',
    vr: "DS",
    name: "MeanOfRawGrayLevels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",1E)': {
    tag: '(0045,"GEMS_SENO_02",1E)',
    vr: "DS",
    name: "MeanOfOffsetGrayLevels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",1F)': {
    tag: '(0045,"GEMS_SENO_02",1F)',
    vr: "DS",
    name: "MeanOfCorrectedGrayLevels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",20)': {
    tag: '(0045,"GEMS_SENO_02",20)',
    vr: "DS",
    name: "MeanOfRegionGrayLevels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",21)': {
    tag: '(0045,"GEMS_SENO_02",21)',
    vr: "DS",
    name: "MeanOfLogRegionGrayLevels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",22)': {
    tag: '(0045,"GEMS_SENO_02",22)',
    vr: "DS",
    name: "StandardDeviationOfRawGrayLevels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",23)': {
    tag: '(0045,"GEMS_SENO_02",23)',
    vr: "DS",
    name: "StandardDeviationOfCorrectedGrayLevels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",24)': {
    tag: '(0045,"GEMS_SENO_02",24)',
    vr: "DS",
    name: "StandardDeviationOfRegionGrayLevels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",25)': {
    tag: '(0045,"GEMS_SENO_02",25)',
    vr: "DS",
    name: "StandardDeviationOfLogRegionGrayLevels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",26)': {
    tag: '(0045,"GEMS_SENO_02",26)',
    vr: "OB",
    name: "MAOBuffer",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",27)': {
    tag: '(0045,"GEMS_SENO_02",27)',
    vr: "IS",
    name: "SetNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",28)': {
    tag: '(0045,"GEMS_SENO_02",28)',
    vr: "CS",
    name: "WindowingType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",29)': {
    tag: '(0045,"GEMS_SENO_02",29)',
    vr: "DS",
    name: "WindowingParameters",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",2a)': {
    tag: '(0045,"GEMS_SENO_02",2a)',
    vr: "IS",
    name: "CrosshairCursorXCoordinates",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",2b)': {
    tag: '(0045,"GEMS_SENO_02",2b)',
    vr: "IS",
    name: "CrosshairCursorYCoordinates",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",39)': {
    tag: '(0045,"GEMS_SENO_02",39)',
    vr: "US",
    name: "VignetteRows",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",3a)': {
    tag: '(0045,"GEMS_SENO_02",3a)',
    vr: "US",
    name: "VignetteColumns",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",3b)': {
    tag: '(0045,"GEMS_SENO_02",3b)',
    vr: "US",
    name: "VignetteBitsAllocated",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",3c)': {
    tag: '(0045,"GEMS_SENO_02",3c)',
    vr: "US",
    name: "VignetteBitsStored",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",3d)': {
    tag: '(0045,"GEMS_SENO_02",3d)',
    vr: "US",
    name: "VignetteHighBit",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",3e)': {
    tag: '(0045,"GEMS_SENO_02",3e)',
    vr: "US",
    name: "VignettePixelRepresentation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0045,"GEMS_SENO_02",3f)': {
    tag: '(0045,"GEMS_SENO_02",3f)',
    vr: "OB",
    name: "VignettePixelData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"GEMS_SERS_01",06)': {
    tag: '(0025,"GEMS_SERS_01",06)',
    vr: "SS",
    name: "LastPulseSequenceUsed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"GEMS_SERS_01",07)': {
    tag: '(0025,"GEMS_SERS_01",07)',
    vr: "SL",
    name: "ImagesInSeries",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"GEMS_SERS_01",10)': {
    tag: '(0025,"GEMS_SERS_01",10)',
    vr: "SL",
    name: "LandmarkCounter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"GEMS_SERS_01",11)': {
    tag: '(0025,"GEMS_SERS_01",11)',
    vr: "SS",
    name: "NumberOfAcquisitions",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"GEMS_SERS_01",14)': {
    tag: '(0025,"GEMS_SERS_01",14)',
    vr: "SL",
    name: "IndicatesNumberOfUpdatesToHeader",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"GEMS_SERS_01",17)': {
    tag: '(0025,"GEMS_SERS_01",17)',
    vr: "SL",
    name: "SeriesCompleteFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"GEMS_SERS_01",18)': {
    tag: '(0025,"GEMS_SERS_01",18)',
    vr: "SL",
    name: "NumberOfImagesArchived",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"GEMS_SERS_01",19)': {
    tag: '(0025,"GEMS_SERS_01",19)',
    vr: "SL",
    name: "LastImageNumberUsed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"GEMS_SERS_01",1a)': {
    tag: '(0025,"GEMS_SERS_01",1a)',
    vr: "SH",
    name: "PrimaryReceiverSuiteAndHost",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_STDY_01",01)': {
    tag: '(0023,"GEMS_STDY_01",01)',
    vr: "SL",
    name: "NumberOfSeriesInStudy",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_STDY_01",02)': {
    tag: '(0023,"GEMS_STDY_01",02)',
    vr: "SL",
    name: "NumberOfUnarchivedSeries",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_STDY_01",10)': {
    tag: '(0023,"GEMS_STDY_01",10)',
    vr: "SS",
    name: "ReferenceImageField",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_STDY_01",50)': {
    tag: '(0023,"GEMS_STDY_01",50)',
    vr: "SS",
    name: "SummaryImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_STDY_01",70)': {
    tag: '(0023,"GEMS_STDY_01",70)',
    vr: "FD",
    name: "StartTimeSecsInFirstAxial",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_STDY_01",74)': {
    tag: '(0023,"GEMS_STDY_01",74)',
    vr: "SL",
    name: "NumberOfUpdatesToHeader",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"GEMS_STDY_01",7d)': {
    tag: '(0023,"GEMS_STDY_01",7d)',
    vr: "SS",
    name: "IndicatesIfStudyHasCompleteInfo",
    vm: "1",
    version: "PrivateTag"
  },
  '(0033,"GEMS_YMHD_01",05)': {
    tag: '(0033,"GEMS_YMHD_01",05)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0033,"GEMS_YMHD_01",06)': {
    tag: '(0033,"GEMS_YMHD_01",06)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",39)': {
    tag: '(0019,"GE_GENESIS_REV3.0",39)',
    vr: "SS",
    name: "AxialType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",8f)': {
    tag: '(0019,"GE_GENESIS_REV3.0",8f)',
    vr: "SS",
    name: "SwapPhaseFrequency",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",9c)': {
    tag: '(0019,"GE_GENESIS_REV3.0",9c)',
    vr: "SS",
    name: "PulseSequenceName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",9f)': {
    tag: '(0019,"GE_GENESIS_REV3.0",9f)',
    vr: "SS",
    name: "CoilType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",a4)': {
    tag: '(0019,"GE_GENESIS_REV3.0",a4)',
    vr: "SS",
    name: "SATFatWaterBone",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",c0)': {
    tag: '(0019,"GE_GENESIS_REV3.0",c0)',
    vr: "SS",
    name: "BitmapOfSATSelections",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",c1)': {
    tag: '(0019,"GE_GENESIS_REV3.0",c1)',
    vr: "SS",
    name: "SurfaceCoilIntensityCorrectionFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",cb)': {
    tag: '(0019,"GE_GENESIS_REV3.0",cb)',
    vr: "SS",
    name: "PhaseContrastFlowAxis",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",cc)': {
    tag: '(0019,"GE_GENESIS_REV3.0",cc)',
    vr: "SS",
    name: "PhaseContrastVelocityEncoding",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",d5)': {
    tag: '(0019,"GE_GENESIS_REV3.0",d5)',
    vr: "SS",
    name: "FractionalEcho",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",d8)': {
    tag: '(0019,"GE_GENESIS_REV3.0",d8)',
    vr: "SS",
    name: "VariableEchoFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",d9)': {
    tag: '(0019,"GE_GENESIS_REV3.0",d9)',
    vr: "DS",
    name: "ConcatenatedSat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"GE_GENESIS_REV3.0",f2)': {
    tag: '(0019,"GE_GENESIS_REV3.0",f2)',
    vr: "SS",
    name: "NumberOfPhases",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GE_GENESIS_REV3.0",1e)': {
    tag: '(0043,"GE_GENESIS_REV3.0",1e)',
    vr: "DS",
    name: "DeltaStartTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0043,"GE_GENESIS_REV3.0",27)': {
    tag: '(0043,"GE_GENESIS_REV3.0",27)',
    vr: "SH",
    name: "ScanPitchRatio",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",01)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",01)',
    vr: "FD",
    name: "ImageCompressionFraction",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",02)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",02)',
    vr: "FD",
    name: "ImageQuality",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",03)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",03)',
    vr: "FD",
    name: "ImageBytesTransferred",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",10)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",10)',
    vr: "SH",
    name: "J2cParameterType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",11)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",11)',
    vr: "US",
    name: "J2cPixelRepresentation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",12)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",12)',
    vr: "US",
    name: "J2cBitsAllocated",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",13)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",13)',
    vr: "US",
    name: "J2cPixelShiftValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",14)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",14)',
    vr: "US",
    name: "J2cPlanarConfiguration",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",15)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",15)',
    vr: "DS",
    name: "J2cRescaleIntercept",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",20)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",20)',
    vr: "LO",
    name: "PixelDataMD5SumPerFrame",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",21)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",21)',
    vr: "US",
    name: "HistogramPercentileLabels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTELERAD MEDICAL SYSTEMS",22)': {
    tag: '(0029,"INTELERAD MEDICAL SYSTEMS",22)',
    vr: "FD",
    name: "HistogramPercentileValues",
    vm: "1",
    version: "PrivateTag"
  },
  '(3f01,"INTELERAD MEDICAL SYSTEMS",01)': {
    tag: '(3f01,"INTELERAD MEDICAL SYSTEMS",01)',
    vr: "LO",
    name: "InstitutionCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(3f01,"INTELERAD MEDICAL SYSTEMS",02)': {
    tag: '(3f01,"INTELERAD MEDICAL SYSTEMS",02)',
    vr: "LO",
    name: "RoutedTransferAE",
    vm: "1",
    version: "PrivateTag"
  },
  '(3f01,"INTELERAD MEDICAL SYSTEMS",03)': {
    tag: '(3f01,"INTELERAD MEDICAL SYSTEMS",03)',
    vr: "LO",
    name: "SourceAE",
    vm: "1",
    version: "PrivateTag"
  },
  '(3f01,"INTELERAD MEDICAL SYSTEMS",04)': {
    tag: '(3f01,"INTELERAD MEDICAL SYSTEMS",04)',
    vr: "SH",
    name: "DeferredValidation",
    vm: "1",
    version: "PrivateTag"
  },
  '(3f01,"INTELERAD MEDICAL SYSTEMS",05)': {
    tag: '(3f01,"INTELERAD MEDICAL SYSTEMS",05)',
    vr: "LO",
    name: "SeriesOwner",
    vm: "1",
    version: "PrivateTag"
  },
  '(3f01,"INTELERAD MEDICAL SYSTEMS",06)': {
    tag: '(3f01,"INTELERAD MEDICAL SYSTEMS",06)',
    vr: "LO",
    name: "OrderGroupNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(3f01,"INTELERAD MEDICAL SYSTEMS",07)': {
    tag: '(3f01,"INTELERAD MEDICAL SYSTEMS",07)',
    vr: "SH",
    name: "StrippedPixelData",
    vm: "1",
    version: "PrivateTag"
  },
  '(3f01,"INTELERAD MEDICAL SYSTEMS",08)': {
    tag: '(3f01,"INTELERAD MEDICAL SYSTEMS",08)',
    vr: "SH",
    name: "PendingMoveRequest",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"INTEGRIS 1.0",20)': {
    tag: '(0041,"INTEGRIS 1.0",20)',
    vr: "FL",
    name: "AccumulatedFluoroscopyDose",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"INTEGRIS 1.0",30)': {
    tag: '(0041,"INTEGRIS 1.0",30)',
    vr: "FL",
    name: "AccumulatedExposureDose",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"INTEGRIS 1.0",40)': {
    tag: '(0041,"INTEGRIS 1.0",40)',
    vr: "FL",
    name: "TotalDose",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"INTEGRIS 1.0",41)': {
    tag: '(0041,"INTEGRIS 1.0",41)',
    vr: "FL",
    name: "TotalNumberOfFrames",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"INTEGRIS 1.0",50)': {
    tag: '(0041,"INTEGRIS 1.0",50)',
    vr: "SQ",
    name: "ExposureInformationSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"INTEGRIS 1.0",08)': {
    tag: '(0009,"INTEGRIS 1.0",08)',
    vr: "CS",
    name: "ExposureChannel",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0009,"INTEGRIS 1.0",32)': {
    tag: '(0009,"INTEGRIS 1.0",32)',
    vr: "TM",
    name: "ExposureStartTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"INTEGRIS 1.0",00)': {
    tag: '(0019,"INTEGRIS 1.0",00)',
    vr: "LO",
    name: "APRName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"INTEGRIS 1.0",40)': {
    tag: '(0019,"INTEGRIS 1.0",40)',
    vr: "DS",
    name: "FrameRate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"INTEGRIS 1.0",12)': {
    tag: '(0021,"INTEGRIS 1.0",12)',
    vr: "IS",
    name: "ExposureNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"INTEGRIS 1.0",08)': {
    tag: '(0029,"INTEGRIS 1.0",08)',
    vr: "IS",
    name: "NumberOfExposureResults",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"ISG shadow",70)': {
    tag: '(0029,"ISG shadow",70)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"ISG shadow",80)': {
    tag: '(0029,"ISG shadow",80)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"ISG shadow",90)': {
    tag: '(0029,"ISG shadow",90)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"ISI",01)': {
    tag: '(0009,"ISI",01)',
    vr: "UN",
    name: "SIENETGeneralPurposeIMGEF",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"MERGE TECHNOLOGIES, INC.",00)': {
    tag: '(0009,"MERGE TECHNOLOGIES, INC.",00)',
    vr: "OB",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"OCULUS Optikgeraete GmbH",1010)': {
    tag: '(0029,"OCULUS Optikgeraete GmbH",1010)',
    vr: "OB",
    name: "OriginalMeasuringData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"OCULUS Optikgeraete GmbH",1012)': {
    tag: '(0029,"OCULUS Optikgeraete GmbH",1012)',
    vr: "UL",
    name: "OriginalMeasuringDataLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"OCULUS Optikgeraete GmbH",1020)': {
    tag: '(0029,"OCULUS Optikgeraete GmbH",1020)',
    vr: "OB",
    name: "OriginalMeasuringRawData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"OCULUS Optikgeraete GmbH",1022)': {
    tag: '(0029,"OCULUS Optikgeraete GmbH",1022)',
    vr: "UL",
    name: "OriginalMeasuringRawDataLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",00)': {
    tag: '(0041,"PAPYRUS 3.0",00)',
    vr: "LT",
    name: "PapyrusComments",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",10)': {
    tag: '(0041,"PAPYRUS 3.0",10)',
    vr: "SQ",
    name: "PointerSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",11)': {
    tag: '(0041,"PAPYRUS 3.0",11)',
    vr: "UL",
    name: "ImagePointer",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",12)': {
    tag: '(0041,"PAPYRUS 3.0",12)',
    vr: "UL",
    name: "PixelOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",13)': {
    tag: '(0041,"PAPYRUS 3.0",13)',
    vr: "SQ",
    name: "ImageIdentifierSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",14)': {
    tag: '(0041,"PAPYRUS 3.0",14)',
    vr: "SQ",
    name: "ExternalFileReferenceSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",15)': {
    tag: '(0041,"PAPYRUS 3.0",15)',
    vr: "US",
    name: "NumberOfImages",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",21)': {
    tag: '(0041,"PAPYRUS 3.0",21)',
    vr: "UI",
    name: "ReferencedSOPClassUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",22)': {
    tag: '(0041,"PAPYRUS 3.0",22)',
    vr: "UI",
    name: "ReferencedSOPInstanceUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",31)': {
    tag: '(0041,"PAPYRUS 3.0",31)',
    vr: "LT",
    name: "ReferencedFileName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",32)': {
    tag: '(0041,"PAPYRUS 3.0",32)',
    vr: "LT",
    name: "ReferencedFilePath",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",41)': {
    tag: '(0041,"PAPYRUS 3.0",41)',
    vr: "UI",
    name: "ReferencedImageSOPClassUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",42)': {
    tag: '(0041,"PAPYRUS 3.0",42)',
    vr: "UI",
    name: "ReferencedImageSOPInstanceUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS 3.0",50)': {
    tag: '(0041,"PAPYRUS 3.0",50)',
    vr: "SQ",
    name: "ImageSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",00)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",00)',
    vr: "IS",
    name: "OverlayID",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",01)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",01)',
    vr: "LT",
    name: "LinkedOverlays",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",10)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",10)',
    vr: "US",
    name: "OverlayRows",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",11)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",11)',
    vr: "US",
    name: "OverlayColumns",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",40)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",40)',
    vr: "LO",
    name: "OverlayType",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",50)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",50)',
    vr: "US",
    name: "OverlayOrigin",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",60)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",60)',
    vr: "LO",
    name: "Editable",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",70)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",70)',
    vr: "LO",
    name: "OverlayFont",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",72)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",72)',
    vr: "LO",
    name: "OverlayStyle",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",74)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",74)',
    vr: "US",
    name: "OverlayFontSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",76)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",76)',
    vr: "LO",
    name: "OverlayColor",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",78)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",78)',
    vr: "US",
    name: "ShadowSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",80)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",80)',
    vr: "LO",
    name: "FillPattern",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",82)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",82)',
    vr: "US",
    name: "OverlayPenSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",a0)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",a0)',
    vr: "LO",
    name: "Label",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",a2)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",a2)',
    vr: "LT",
    name: "PostItText",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",a4)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",a4)',
    vr: "US",
    name: "AnchorPoint",
    vm: "2",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",b0)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",b0)',
    vr: "LO",
    name: "ROIType",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",b2)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",b2)',
    vr: "LT",
    name: "AttachedAnnotation",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",ba)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",ba)',
    vr: "US",
    name: "ContourPoints",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",bc)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",bc)',
    vr: "US",
    name: "MaskData",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(6001-o-60ff,"PAPYRUS 3.0",c0)': {
    tag: '(6001-o-60ff,"PAPYRUS 3.0",c0)',
    vr: "SQ",
    name: "UINOverlaySequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"PAPYRUS",00)': {
    tag: '(0009,"PAPYRUS",00)',
    vr: "LT",
    name: "OriginalFileName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"PAPYRUS",10)': {
    tag: '(0009,"PAPYRUS",10)',
    vr: "LT",
    name: "OriginalFileLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"PAPYRUS",18)': {
    tag: '(0009,"PAPYRUS",18)',
    vr: "LT",
    name: "DataSetIdentifier",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",00)': {
    tag: '(0041,"PAPYRUS",00)',
    vr: "LT",
    name: "PapyrusComments",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",10)': {
    tag: '(0041,"PAPYRUS",10)',
    vr: "US",
    name: "FolderType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",11)': {
    tag: '(0041,"PAPYRUS",11)',
    vr: "LT",
    name: "PatientFolderDataSetID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",20)': {
    tag: '(0041,"PAPYRUS",20)',
    vr: "LT",
    name: "FolderName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",30)': {
    tag: '(0041,"PAPYRUS",30)',
    vr: "DA",
    name: "CreationDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",32)': {
    tag: '(0041,"PAPYRUS",32)',
    vr: "TM",
    name: "CreationTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",34)': {
    tag: '(0041,"PAPYRUS",34)',
    vr: "DA",
    name: "ModifiedDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",36)': {
    tag: '(0041,"PAPYRUS",36)',
    vr: "TM",
    name: "ModifiedTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",40)': {
    tag: '(0041,"PAPYRUS",40)',
    vr: "LT",
    name: "OwnerName",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",50)': {
    tag: '(0041,"PAPYRUS",50)',
    vr: "LT",
    name: "FolderStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",60)': {
    tag: '(0041,"PAPYRUS",60)',
    vr: "UL",
    name: "NumberOfImages",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",62)': {
    tag: '(0041,"PAPYRUS",62)',
    vr: "UL",
    name: "NumberOfOther",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",a0)': {
    tag: '(0041,"PAPYRUS",a0)',
    vr: "LT",
    name: "ExternalFolderElementDSID",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",a1)': {
    tag: '(0041,"PAPYRUS",a1)',
    vr: "US",
    name: "ExternalFolderElementDataSetType",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",a2)': {
    tag: '(0041,"PAPYRUS",a2)',
    vr: "LT",
    name: "ExternalFolderElementFileLocation",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",a3)': {
    tag: '(0041,"PAPYRUS",a3)',
    vr: "UL",
    name: "ExternalFolderElementLength",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",b0)': {
    tag: '(0041,"PAPYRUS",b0)',
    vr: "LT",
    name: "InternalFolderElementDSID",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",b1)': {
    tag: '(0041,"PAPYRUS",b1)',
    vr: "US",
    name: "InternalFolderElementDataSetType",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",b2)': {
    tag: '(0041,"PAPYRUS",b2)',
    vr: "UL",
    name: "InternalOffsetToDataSet",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0041,"PAPYRUS",b3)': {
    tag: '(0041,"PAPYRUS",b3)',
    vr: "UL",
    name: "InternalOffsetToImage",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",01)': {
    tag: '(2001,"Philips Imaging DD 001",01)',
    vr: "FL",
    name: "ChemicalShift",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",02)': {
    tag: '(2001,"Philips Imaging DD 001",02)',
    vr: "IS",
    name: "ChemicalShiftNumberMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",03)': {
    tag: '(2001,"Philips Imaging DD 001",03)',
    vr: "FL",
    name: "DiffusionBFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",04)': {
    tag: '(2001,"Philips Imaging DD 001",04)',
    vr: "CS",
    name: "DiffusionDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",06)': {
    tag: '(2001,"Philips Imaging DD 001",06)',
    vr: "CS",
    name: "ImageEnhanced",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",07)': {
    tag: '(2001,"Philips Imaging DD 001",07)',
    vr: "CS",
    name: "ImageTypeEDES",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",08)': {
    tag: '(2001,"Philips Imaging DD 001",08)',
    vr: "IS",
    name: "PhaseNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",09)': {
    tag: '(2001,"Philips Imaging DD 001",09)',
    vr: "FL",
    name: "ImagePrepulseDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",0a)': {
    tag: '(2001,"Philips Imaging DD 001",0a)',
    vr: "IS",
    name: "SliceNumberMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",0b)': {
    tag: '(2001,"Philips Imaging DD 001",0b)',
    vr: "CS",
    name: "SliceOrientation",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",0c)': {
    tag: '(2001,"Philips Imaging DD 001",0c)',
    vr: "CS",
    name: "ArrhythmiaRejection",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",0e)': {
    tag: '(2001,"Philips Imaging DD 001",0e)',
    vr: "CS",
    name: "CardiacCycled",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",0f)': {
    tag: '(2001,"Philips Imaging DD 001",0f)',
    vr: "SS",
    name: "CardiacGateWidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",10)': {
    tag: '(2001,"Philips Imaging DD 001",10)',
    vr: "CS",
    name: "CardiacSync",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",11)': {
    tag: '(2001,"Philips Imaging DD 001",11)',
    vr: "FL",
    name: "DiffusionEchoTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",12)': {
    tag: '(2001,"Philips Imaging DD 001",12)',
    vr: "CS",
    name: "DynamicSeries",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",13)': {
    tag: '(2001,"Philips Imaging DD 001",13)',
    vr: "SL",
    name: "EPIFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",14)': {
    tag: '(2001,"Philips Imaging DD 001",14)',
    vr: "SL",
    name: "NumberOfEchoes",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",15)': {
    tag: '(2001,"Philips Imaging DD 001",15)',
    vr: "SS",
    name: "NumberOfLocations",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",16)': {
    tag: '(2001,"Philips Imaging DD 001",16)',
    vr: "SS",
    name: "NumberOfPCDirections",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",17)': {
    tag: '(2001,"Philips Imaging DD 001",17)',
    vr: "SL",
    name: "NumberOfPhasesMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",18)': {
    tag: '(2001,"Philips Imaging DD 001",18)',
    vr: "SL",
    name: "NumberOfSlicesMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",19)': {
    tag: '(2001,"Philips Imaging DD 001",19)',
    vr: "CS",
    name: "PartialMatrixScanned",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",1a)': {
    tag: '(2001,"Philips Imaging DD 001",1a)',
    vr: "FL",
    name: "PCVelocity",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",1b)': {
    tag: '(2001,"Philips Imaging DD 001",1b)',
    vr: "FL",
    name: "PrepulseDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",1c)': {
    tag: '(2001,"Philips Imaging DD 001",1c)',
    vr: "CS",
    name: "PrepulseType",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",1d)': {
    tag: '(2001,"Philips Imaging DD 001",1d)',
    vr: "IS",
    name: "ReconstructionNumberMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",1f)': {
    tag: '(2001,"Philips Imaging DD 001",1f)',
    vr: "CS",
    name: "RespirationSync",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",20)': {
    tag: '(2001,"Philips Imaging DD 001",20)',
    vr: "LO",
    name: "ScanningTechnique",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",21)': {
    tag: '(2001,"Philips Imaging DD 001",21)',
    vr: "CS",
    name: "SPIR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",22)': {
    tag: '(2001,"Philips Imaging DD 001",22)',
    vr: "FL",
    name: "WaterFatShift",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",23)': {
    tag: '(2001,"Philips Imaging DD 001",23)',
    vr: "DS",
    name: "FlipAnglePhilips",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",24)': {
    tag: '(2001,"Philips Imaging DD 001",24)',
    vr: "CS",
    name: "SeriesIsInteractive",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",25)': {
    tag: '(2001,"Philips Imaging DD 001",25)',
    vr: "SH",
    name: "EchoTimeDisplayMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",26)': {
    tag: '(2001,"Philips Imaging DD 001",26)',
    vr: "CS",
    name: "PresentationStateSubtractionActive",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",2d)': {
    tag: '(2001,"Philips Imaging DD 001",2d)',
    vr: "SS",
    name: "StackNumberOfSlices",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",32)': {
    tag: '(2001,"Philips Imaging DD 001",32)',
    vr: "FL",
    name: "StackRadialAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",33)': {
    tag: '(2001,"Philips Imaging DD 001",33)',
    vr: "CS",
    name: "StackRadialAxis",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",35)': {
    tag: '(2001,"Philips Imaging DD 001",35)',
    vr: "SS",
    name: "StackSliceNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",36)': {
    tag: '(2001,"Philips Imaging DD 001",36)',
    vr: "CS",
    name: "StackType",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",3f)': {
    tag: '(2001,"Philips Imaging DD 001",3f)',
    vr: "CS",
    name: "ZoomMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",58)': {
    tag: '(2001,"Philips Imaging DD 001",58)',
    vr: "UL",
    name: "ContrastTransferTaste",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",5f)': {
    tag: '(2001,"Philips Imaging DD 001",5f)',
    vr: "SQ",
    name: "StackSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",60)': {
    tag: '(2001,"Philips Imaging DD 001",60)',
    vr: "SL",
    name: "NumberOfStacks",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",61)': {
    tag: '(2001,"Philips Imaging DD 001",61)',
    vr: "CS",
    name: "SeriesTransmitted",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",62)': {
    tag: '(2001,"Philips Imaging DD 001",62)',
    vr: "CS",
    name: "SeriesCommitted",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",63)': {
    tag: '(2001,"Philips Imaging DD 001",63)',
    vr: "CS",
    name: "ExaminationSource",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",67)': {
    tag: '(2001,"Philips Imaging DD 001",67)',
    vr: "CS",
    name: "LinearPresentationGLTrafoShapeSub",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",77)': {
    tag: '(2001,"Philips Imaging DD 001",77)',
    vr: "CS",
    name: "GLTrafoType",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",7b)': {
    tag: '(2001,"Philips Imaging DD 001",7b)',
    vr: "IS",
    name: "AcquisitionNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",81)': {
    tag: '(2001,"Philips Imaging DD 001",81)',
    vr: "IS",
    name: "NumberOfDynamicScans",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",9f)': {
    tag: '(2001,"Philips Imaging DD 001",9f)',
    vr: "US",
    name: "PixelProcessingKernelSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",a1)': {
    tag: '(2001,"Philips Imaging DD 001",a1)',
    vr: "CS",
    name: "IsRawImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",f1)': {
    tag: '(2001,"Philips Imaging DD 001",f1)',
    vr: "FL",
    name: "ProspectiveMotionCorrection",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"Philips Imaging DD 001",f2)': {
    tag: '(2001,"Philips Imaging DD 001",f2)',
    vr: "FL",
    name: "RetrospectiveMotionCorrection",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",01)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",01)',
    vr: "FL",
    name: "ChemicalShift",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",02)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",02)',
    vr: "IS",
    name: "ChemicalShiftNumberMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",03)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",03)',
    vr: "FL",
    name: "DiffusionBFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",04)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",04)',
    vr: "CS",
    name: "DiffusionDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",06)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",06)',
    vr: "CS",
    name: "ImageEnhanced",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",07)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",07)',
    vr: "CS",
    name: "ImageTypeEDES",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",08)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",08)',
    vr: "IS",
    name: "PhaseNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",09)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",09)',
    vr: "FL",
    name: "ImagePrepulseDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",0a)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",0a)',
    vr: "IS",
    name: "SliceNumberMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",0b)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",0b)',
    vr: "CS",
    name: "SliceOrientation",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",0c)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",0c)',
    vr: "CS",
    name: "ArrhythmiaRejection",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",0e)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",0e)',
    vr: "CS",
    name: "CardiacCycled",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",0f)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",0f)',
    vr: "SS",
    name: "CardiacGateWidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",10)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",10)',
    vr: "CS",
    name: "CardiacSync",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",11)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",11)',
    vr: "FL",
    name: "DiffusionEchoTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",12)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",12)',
    vr: "CS",
    name: "DynamicSeries",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",13)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",13)',
    vr: "SL",
    name: "EPIFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",14)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",14)',
    vr: "SL",
    name: "NumberOfEchoes",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",15)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",15)',
    vr: "SS",
    name: "NumberOfLocations",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",16)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",16)',
    vr: "SS",
    name: "NumberOfPCDirections",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",17)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",17)',
    vr: "SL",
    name: "NumberOfPhasesMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",18)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",18)',
    vr: "SL",
    name: "NumberOfSlicesMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",19)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",19)',
    vr: "CS",
    name: "PartialMatrixScanned",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",1a)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",1a)',
    vr: "FL",
    name: "PCVelocity",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",1b)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",1b)',
    vr: "FL",
    name: "PrepulseDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",1c)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",1c)',
    vr: "CS",
    name: "PrepulseType",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",1d)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",1d)',
    vr: "IS",
    name: "ReconstructionNumberMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",1f)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",1f)',
    vr: "CS",
    name: "RespirationSync",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",20)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",20)',
    vr: "LO",
    name: "ScanningTechnique",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",21)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",21)',
    vr: "CS",
    name: "SPIR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",22)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",22)',
    vr: "FL",
    name: "WaterFatShift",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",23)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",23)',
    vr: "DS",
    name: "FlipAnglePhilips",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",24)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",24)',
    vr: "CS",
    name: "SeriesIsInteractive",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",25)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",25)',
    vr: "SH",
    name: "EchoTimeDisplayMR",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",26)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",26)',
    vr: "CS",
    name: "PresentationStateSubtractionActive",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",2d)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",2d)',
    vr: "SS",
    name: "StackNumberOfSlices",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",32)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",32)',
    vr: "FL",
    name: "StackRadialAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",33)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",33)',
    vr: "CS",
    name: "StackRadialAxis",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",35)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",35)',
    vr: "SS",
    name: "StackSliceNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",36)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",36)',
    vr: "CS",
    name: "StackType",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",3f)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",3f)',
    vr: "CS",
    name: "ZoomMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",58)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",58)',
    vr: "UL",
    name: "ContrastTransferTaste",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",5f)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",5f)',
    vr: "SQ",
    name: "StackSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",60)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",60)',
    vr: "SL",
    name: "NumberOfStacks",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",61)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",61)',
    vr: "CS",
    name: "SeriesTransmitted",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",62)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",62)',
    vr: "CS",
    name: "SeriesCommitted",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",63)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",63)',
    vr: "CS",
    name: "ExaminationSource",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",67)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",67)',
    vr: "CS",
    name: "LinearPresentationGLTrafoShapeSub",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",77)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",77)',
    vr: "CS",
    name: "GLTrafoType",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",7b)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",7b)',
    vr: "IS",
    name: "AcquisitionNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",81)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",81)',
    vr: "IS",
    name: "NumberOfDynamicScans",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",9f)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",9f)',
    vr: "US",
    name: "PixelProcessingKernelSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",a1)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",a1)',
    vr: "CS",
    name: "IsRawImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",f1)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",f1)',
    vr: "FL",
    name: "ProspectiveMotionCorrection",
    vm: "1",
    version: "PrivateTag"
  },
  '(2001,"PHILIPS IMAGING DD 001",f2)': {
    tag: '(2001,"PHILIPS IMAGING DD 001",f2)',
    vr: "FL",
    name: "RetrospectiveMotionCorrection",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"Philips MR Imaging DD 001",05)': {
    tag: '(2005,"Philips MR Imaging DD 001",05)',
    vr: "CS",
    name: "SynergyReconstructionType",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"Philips MR Imaging DD 001",1e)': {
    tag: '(2005,"Philips MR Imaging DD 001",1e)',
    vr: "SH",
    name: "MIPProtocol",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"Philips MR Imaging DD 001",1f)': {
    tag: '(2005,"Philips MR Imaging DD 001",1f)',
    vr: "SH",
    name: "MPRProtocol",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"Philips MR Imaging DD 001",20)': {
    tag: '(2005,"Philips MR Imaging DD 001",20)',
    vr: "SL",
    name: "NumberOfChemicalShifts",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"Philips MR Imaging DD 001",2d)': {
    tag: '(2005,"Philips MR Imaging DD 001",2d)',
    vr: "SS",
    name: "NumberOfStackSlices",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"Philips MR Imaging DD 001",83)': {
    tag: '(2005,"Philips MR Imaging DD 001",83)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"Philips MR Imaging DD 001",a1)': {
    tag: '(2005,"Philips MR Imaging DD 001",a1)',
    vr: "CS",
    name: "SyncraScanType",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"Philips MR Imaging DD 001",b0)': {
    tag: '(2005,"Philips MR Imaging DD 001",b0)',
    vr: "FL",
    name: "DiffusionDirectionRL",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"Philips MR Imaging DD 001",b1)': {
    tag: '(2005,"Philips MR Imaging DD 001",b1)',
    vr: "FL",
    name: "DiffusionDirectionAP",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"Philips MR Imaging DD 001",b2)': {
    tag: '(2005,"Philips MR Imaging DD 001",b2)',
    vr: "FL",
    name: "DiffusionDirectionFH",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"Philips MR Imaging DD 005",02)': {
    tag: '(2005,"Philips MR Imaging DD 005",02)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"PHILIPS MR IMAGING DD 001",05)': {
    tag: '(2005,"PHILIPS MR IMAGING DD 001",05)',
    vr: "CS",
    name: "SynergyReconstructionType",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"PHILIPS MR IMAGING DD 001",1e)': {
    tag: '(2005,"PHILIPS MR IMAGING DD 001",1e)',
    vr: "SH",
    name: "MIPProtocol",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"PHILIPS MR IMAGING DD 001",1f)': {
    tag: '(2005,"PHILIPS MR IMAGING DD 001",1f)',
    vr: "SH",
    name: "MPRProtocol",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"PHILIPS MR IMAGING DD 001",20)': {
    tag: '(2005,"PHILIPS MR IMAGING DD 001",20)',
    vr: "SL",
    name: "NumberOfChemicalShifts",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"PHILIPS MR IMAGING DD 001",2d)': {
    tag: '(2005,"PHILIPS MR IMAGING DD 001",2d)',
    vr: "SS",
    name: "NumberOfStackSlices",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"PHILIPS MR IMAGING DD 001",83)': {
    tag: '(2005,"PHILIPS MR IMAGING DD 001",83)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"PHILIPS MR IMAGING DD 001",a1)': {
    tag: '(2005,"PHILIPS MR IMAGING DD 001",a1)',
    vr: "CS",
    name: "SyncraScanType",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"PHILIPS MR IMAGING DD 001",b0)': {
    tag: '(2005,"PHILIPS MR IMAGING DD 001",b0)',
    vr: "FL",
    name: "DiffusionDirectionRL",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"PHILIPS MR IMAGING DD 001",b1)': {
    tag: '(2005,"PHILIPS MR IMAGING DD 001",b1)',
    vr: "FL",
    name: "DiffusionDirectionAP",
    vm: "1",
    version: "PrivateTag"
  },
  '(2005,"PHILIPS MR IMAGING DD 001",b2)': {
    tag: '(2005,"PHILIPS MR IMAGING DD 001",b2)',
    vr: "FL",
    name: "DiffusionDirectionFH",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR R5.5/PART",1000)': {
    tag: '(0019,"PHILIPS MR R5.5/PART",1000)',
    vr: "DS",
    name: "FieldOfView",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR R5.6/PART",1000)': {
    tag: '(0019,"PHILIPS MR R5.6/PART",1000)',
    vr: "DS",
    name: "FieldOfView",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",01)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",01)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",02)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",02)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",03)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",03)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",04)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",04)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",05)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",05)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",06)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",06)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",07)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",07)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",08)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",08)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",09)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",09)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",10)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",10)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",12)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",12)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",13)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",13)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",14)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",14)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",15)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",15)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",16)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",16)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",17)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",17)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",18)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",18)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",20)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",20)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",21)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",21)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",22)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",22)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",23)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",23)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",24)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",24)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",25)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",25)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",26)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",26)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",27)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",27)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",28)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",28)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",29)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",29)',
    vr: "IS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",31)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",31)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",32)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",32)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",41)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",41)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",42)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",42)',
    vr: "IS",
    name: "Unknown",
    vm: "2",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",43)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",43)',
    vr: "IS",
    name: "Unknown",
    vm: "2",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",45)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",45)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",46)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",46)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",47)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",47)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",48)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",48)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",49)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",49)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",50)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",50)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",60)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",60)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",61)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",61)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",70)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",70)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",71)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",71)',
    vr: "IS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",72)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",72)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",73)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",73)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",74)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",74)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",76)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",76)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",77)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",77)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",78)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",78)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",79)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",79)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR SPECTRO;1",80)': {
    tag: '(0019,"PHILIPS MR SPECTRO;1",80)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"PHILIPS MR",10)': {
    tag: '(0009,"PHILIPS MR",10)',
    vr: "LO",
    name: "SPIRelease",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"PHILIPS MR",12)': {
    tag: '(0009,"PHILIPS MR",12)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",09)': {
    tag: '(0019,"PHILIPS MR/LAST",09)',
    vr: "DS",
    name: "MainMagneticField",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",0e)': {
    tag: '(0019,"PHILIPS MR/LAST",0e)',
    vr: "IS",
    name: "FlowCompensation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",b1)': {
    tag: '(0019,"PHILIPS MR/LAST",b1)',
    vr: "IS",
    name: "MinimumRRInterval",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",b2)': {
    tag: '(0019,"PHILIPS MR/LAST",b2)',
    vr: "IS",
    name: "MaximumRRInterval",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",b3)': {
    tag: '(0019,"PHILIPS MR/LAST",b3)',
    vr: "IS",
    name: "NumberOfRejections",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",b4)': {
    tag: '(0019,"PHILIPS MR/LAST",b4)',
    vr: "IS",
    name: "NumberOfRRIntervals",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",b5)': {
    tag: '(0019,"PHILIPS MR/LAST",b5)',
    vr: "IS",
    name: "ArrhythmiaRejection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",c0)': {
    tag: '(0019,"PHILIPS MR/LAST",c0)',
    vr: "DS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",c6)': {
    tag: '(0019,"PHILIPS MR/LAST",c6)',
    vr: "IS",
    name: "CycledMultipleSlice",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",ce)': {
    tag: '(0019,"PHILIPS MR/LAST",ce)',
    vr: "IS",
    name: "REST",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",d5)': {
    tag: '(0019,"PHILIPS MR/LAST",d5)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",d6)': {
    tag: '(0019,"PHILIPS MR/LAST",d6)',
    vr: "IS",
    name: "FourierInterpolation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",d9)': {
    tag: '(0019,"PHILIPS MR/LAST",d9)',
    vr: "IS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",e0)': {
    tag: '(0019,"PHILIPS MR/LAST",e0)',
    vr: "IS",
    name: "Prepulse",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",e1)': {
    tag: '(0019,"PHILIPS MR/LAST",e1)',
    vr: "DS",
    name: "PrepulseDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",e2)': {
    tag: '(0019,"PHILIPS MR/LAST",e2)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",e3)': {
    tag: '(0019,"PHILIPS MR/LAST",e3)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",f0)': {
    tag: '(0019,"PHILIPS MR/LAST",f0)',
    vr: "LT",
    name: "WSProtocolString1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",f1)': {
    tag: '(0019,"PHILIPS MR/LAST",f1)',
    vr: "LT",
    name: "WSProtocolString2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",f2)': {
    tag: '(0019,"PHILIPS MR/LAST",f2)',
    vr: "LT",
    name: "WSProtocolString3",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/LAST",f3)': {
    tag: '(0019,"PHILIPS MR/LAST",f3)',
    vr: "LT",
    name: "WSProtocolString4",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/LAST",00)': {
    tag: '(0021,"PHILIPS MR/LAST",00)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/LAST",10)': {
    tag: '(0021,"PHILIPS MR/LAST",10)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/LAST",20)': {
    tag: '(0021,"PHILIPS MR/LAST",20)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/LAST",21)': {
    tag: '(0021,"PHILIPS MR/LAST",21)',
    vr: "DS",
    name: "SliceGap",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/LAST",22)': {
    tag: '(0021,"PHILIPS MR/LAST",22)',
    vr: "DS",
    name: "StackRadialAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"PHILIPS MR/LAST",00)': {
    tag: '(0027,"PHILIPS MR/LAST",00)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"PHILIPS MR/LAST",11)': {
    tag: '(0027,"PHILIPS MR/LAST",11)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0027,"PHILIPS MR/LAST",12)': {
    tag: '(0027,"PHILIPS MR/LAST",12)',
    vr: "DS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0027,"PHILIPS MR/LAST",13)': {
    tag: '(0027,"PHILIPS MR/LAST",13)',
    vr: "DS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0027,"PHILIPS MR/LAST",14)': {
    tag: '(0027,"PHILIPS MR/LAST",14)',
    vr: "DS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0027,"PHILIPS MR/LAST",15)': {
    tag: '(0027,"PHILIPS MR/LAST",15)',
    vr: "DS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0027,"PHILIPS MR/LAST",16)': {
    tag: '(0027,"PHILIPS MR/LAST",16)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",10)': {
    tag: '(0029,"PHILIPS MR/LAST",10)',
    vr: "DS",
    name: "FPMin",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",20)': {
    tag: '(0029,"PHILIPS MR/LAST",20)',
    vr: "DS",
    name: "FPMax",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",30)': {
    tag: '(0029,"PHILIPS MR/LAST",30)',
    vr: "DS",
    name: "ScaledMinimum",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",40)': {
    tag: '(0029,"PHILIPS MR/LAST",40)',
    vr: "DS",
    name: "ScaledMaximum",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",50)': {
    tag: '(0029,"PHILIPS MR/LAST",50)',
    vr: "DS",
    name: "WindowMinimum",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",60)': {
    tag: '(0029,"PHILIPS MR/LAST",60)',
    vr: "DS",
    name: "WindowMaximum",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",61)': {
    tag: '(0029,"PHILIPS MR/LAST",61)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",70)': {
    tag: '(0029,"PHILIPS MR/LAST",70)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",71)': {
    tag: '(0029,"PHILIPS MR/LAST",71)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",72)': {
    tag: '(0029,"PHILIPS MR/LAST",72)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",80)': {
    tag: '(0029,"PHILIPS MR/LAST",80)',
    vr: "IS",
    name: "ViewCenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",81)': {
    tag: '(0029,"PHILIPS MR/LAST",81)',
    vr: "IS",
    name: "ViewSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",82)': {
    tag: '(0029,"PHILIPS MR/LAST",82)',
    vr: "IS",
    name: "ViewZoom",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/LAST",83)': {
    tag: '(0029,"PHILIPS MR/LAST",83)',
    vr: "IS",
    name: "ViewTransform",
    vm: "1",
    version: "PrivateTag"
  },
  '(6001,"PHILIPS MR/LAST",00)': {
    tag: '(6001,"PHILIPS MR/LAST",00)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1000)': {
    tag: '(0019,"PHILIPS MR/PART",1000)',
    vr: "DS",
    name: "FieldOfView",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1005)': {
    tag: '(0019,"PHILIPS MR/PART",1005)',
    vr: "DS",
    name: "CCAngulation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1006)': {
    tag: '(0019,"PHILIPS MR/PART",1006)',
    vr: "DS",
    name: "APAngulation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1007)': {
    tag: '(0019,"PHILIPS MR/PART",1007)',
    vr: "DS",
    name: "LRAngulation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1008)': {
    tag: '(0019,"PHILIPS MR/PART",1008)',
    vr: "IS",
    name: "PatientPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1009)': {
    tag: '(0019,"PHILIPS MR/PART",1009)',
    vr: "IS",
    name: "PatientOrientation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",100a)': {
    tag: '(0019,"PHILIPS MR/PART",100a)',
    vr: "IS",
    name: "SliceOrientation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",100b)': {
    tag: '(0019,"PHILIPS MR/PART",100b)',
    vr: "DS",
    name: "LROffcenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",100c)': {
    tag: '(0019,"PHILIPS MR/PART",100c)',
    vr: "DS",
    name: "CCOffcenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",100d)': {
    tag: '(0019,"PHILIPS MR/PART",100d)',
    vr: "DS",
    name: "APOffcenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",100e)': {
    tag: '(0019,"PHILIPS MR/PART",100e)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",100f)': {
    tag: '(0019,"PHILIPS MR/PART",100f)',
    vr: "IS",
    name: "NumberOfSlices",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1010)': {
    tag: '(0019,"PHILIPS MR/PART",1010)',
    vr: "DS",
    name: "SliceFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1011)': {
    tag: '(0019,"PHILIPS MR/PART",1011)',
    vr: "DS",
    name: "EchoTimes",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1015)': {
    tag: '(0019,"PHILIPS MR/PART",1015)',
    vr: "IS",
    name: "DynamicStudy",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1018)': {
    tag: '(0019,"PHILIPS MR/PART",1018)',
    vr: "DS",
    name: "HeartbeatInterval",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1019)': {
    tag: '(0019,"PHILIPS MR/PART",1019)',
    vr: "DS",
    name: "RepetitionTimeFFE",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",101a)': {
    tag: '(0019,"PHILIPS MR/PART",101a)',
    vr: "DS",
    name: "FFEFlipAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",101b)': {
    tag: '(0019,"PHILIPS MR/PART",101b)',
    vr: "IS",
    name: "NumberOfScans",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1021)': {
    tag: '(0019,"PHILIPS MR/PART",1021)',
    vr: "DS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1022)': {
    tag: '(0019,"PHILIPS MR/PART",1022)',
    vr: "DS",
    name: "DynamicScanTimeBegin",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1024)': {
    tag: '(0019,"PHILIPS MR/PART",1024)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1064)': {
    tag: '(0019,"PHILIPS MR/PART",1064)',
    vr: "DS",
    name: "RepetitionTimeSE",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1065)': {
    tag: '(0019,"PHILIPS MR/PART",1065)',
    vr: "DS",
    name: "RepetitionTimeIR",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1069)': {
    tag: '(0019,"PHILIPS MR/PART",1069)',
    vr: "IS",
    name: "NumberOfPhases",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",106a)': {
    tag: '(0019,"PHILIPS MR/PART",106a)',
    vr: "IS",
    name: "CardiacFrequency",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",106b)': {
    tag: '(0019,"PHILIPS MR/PART",106b)',
    vr: "DS",
    name: "InversionDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",106c)': {
    tag: '(0019,"PHILIPS MR/PART",106c)',
    vr: "DS",
    name: "GateDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",106d)': {
    tag: '(0019,"PHILIPS MR/PART",106d)',
    vr: "DS",
    name: "GateWidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",106e)': {
    tag: '(0019,"PHILIPS MR/PART",106e)',
    vr: "DS",
    name: "TriggerDelayTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1080)': {
    tag: '(0019,"PHILIPS MR/PART",1080)',
    vr: "IS",
    name: "NumberOfChemicalShifts",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1081)': {
    tag: '(0019,"PHILIPS MR/PART",1081)',
    vr: "DS",
    name: "ChemicalShift",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1084)': {
    tag: '(0019,"PHILIPS MR/PART",1084)',
    vr: "IS",
    name: "NumberOfRows",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1085)': {
    tag: '(0019,"PHILIPS MR/PART",1085)',
    vr: "IS",
    name: "NumberOfSamples",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1094)': {
    tag: '(0019,"PHILIPS MR/PART",1094)',
    vr: "LO",
    name: "MagnetizationTransferContrast",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1095)': {
    tag: '(0019,"PHILIPS MR/PART",1095)',
    vr: "LO",
    name: "SpectralPresaturationWithInversionRecovery",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1096)': {
    tag: '(0019,"PHILIPS MR/PART",1096)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1097)': {
    tag: '(0019,"PHILIPS MR/PART",1097)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10a0)': {
    tag: '(0019,"PHILIPS MR/PART",10a0)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10a1)': {
    tag: '(0019,"PHILIPS MR/PART",10a1)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10a3)': {
    tag: '(0019,"PHILIPS MR/PART",10a3)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10a4)': {
    tag: '(0019,"PHILIPS MR/PART",10a4)',
    vr: "CS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10c8)': {
    tag: '(0019,"PHILIPS MR/PART",10c8)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10c9)': {
    tag: '(0019,"PHILIPS MR/PART",10c9)',
    vr: "IS",
    name: "FoldoverDirectionTransverse",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10ca)': {
    tag: '(0019,"PHILIPS MR/PART",10ca)',
    vr: "IS",
    name: "FoldoverDirectionSagittal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10cb)': {
    tag: '(0019,"PHILIPS MR/PART",10cb)',
    vr: "IS",
    name: "FoldoverDirectionCoronal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10cc)': {
    tag: '(0019,"PHILIPS MR/PART",10cc)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10cd)': {
    tag: '(0019,"PHILIPS MR/PART",10cd)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10ce)': {
    tag: '(0019,"PHILIPS MR/PART",10ce)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10cf)': {
    tag: '(0019,"PHILIPS MR/PART",10cf)',
    vr: "IS",
    name: "NumberOfEchoes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10d0)': {
    tag: '(0019,"PHILIPS MR/PART",10d0)',
    vr: "IS",
    name: "ScanResolution",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10d2)': {
    tag: '(0019,"PHILIPS MR/PART",10d2)',
    vr: "LO",
    name: "WaterFatShift",
    vm: "2",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10d4)': {
    tag: '(0019,"PHILIPS MR/PART",10d4)',
    vr: "IS",
    name: "ArtifactReduction",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10d5)': {
    tag: '(0019,"PHILIPS MR/PART",10d5)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10d6)': {
    tag: '(0019,"PHILIPS MR/PART",10d6)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10d7)': {
    tag: '(0019,"PHILIPS MR/PART",10d7)',
    vr: "DS",
    name: "ScanPercentage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10d8)': {
    tag: '(0019,"PHILIPS MR/PART",10d8)',
    vr: "IS",
    name: "Halfscan",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10d9)': {
    tag: '(0019,"PHILIPS MR/PART",10d9)',
    vr: "IS",
    name: "EPIFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10da)': {
    tag: '(0019,"PHILIPS MR/PART",10da)',
    vr: "IS",
    name: "TurboFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10db)': {
    tag: '(0019,"PHILIPS MR/PART",10db)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10e0)': {
    tag: '(0019,"PHILIPS MR/PART",10e0)',
    vr: "IS",
    name: "PercentageOfScanCompleted",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",10e1)': {
    tag: '(0019,"PHILIPS MR/PART",10e1)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1100)': {
    tag: '(0019,"PHILIPS MR/PART",1100)',
    vr: "IS",
    name: "NumberOfStacks",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1101)': {
    tag: '(0019,"PHILIPS MR/PART",1101)',
    vr: "IS",
    name: "StackType",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1102)': {
    tag: '(0019,"PHILIPS MR/PART",1102)',
    vr: "IS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",110b)': {
    tag: '(0019,"PHILIPS MR/PART",110b)',
    vr: "DS",
    name: "LROffcenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",110c)': {
    tag: '(0019,"PHILIPS MR/PART",110c)',
    vr: "DS",
    name: "CCOffcenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",110d)': {
    tag: '(0019,"PHILIPS MR/PART",110d)',
    vr: "DS",
    name: "APOffcenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",1145)': {
    tag: '(0019,"PHILIPS MR/PART",1145)',
    vr: "IS",
    name: "ReconstructionResolution",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",11fc)': {
    tag: '(0019,"PHILIPS MR/PART",11fc)',
    vr: "IS",
    name: "ResonanceFrequency",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",12c0)': {
    tag: '(0019,"PHILIPS MR/PART",12c0)',
    vr: "DS",
    name: "TriggerDelayTimes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",12e0)': {
    tag: '(0019,"PHILIPS MR/PART",12e0)',
    vr: "IS",
    name: "PrepulseType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",12e1)': {
    tag: '(0019,"PHILIPS MR/PART",12e1)',
    vr: "DS",
    name: "PrepulseDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS MR/PART",12e3)': {
    tag: '(0019,"PHILIPS MR/PART",12e3)',
    vr: "DS",
    name: "PhaseContrastVelocity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1000)': {
    tag: '(0021,"PHILIPS MR/PART",1000)',
    vr: "IS",
    name: "ReconstructionNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1010)': {
    tag: '(0021,"PHILIPS MR/PART",1010)',
    vr: "IS",
    name: "ImageType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1020)': {
    tag: '(0021,"PHILIPS MR/PART",1020)',
    vr: "IS",
    name: "SliceNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1030)': {
    tag: '(0021,"PHILIPS MR/PART",1030)',
    vr: "IS",
    name: "EchoNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1031)': {
    tag: '(0021,"PHILIPS MR/PART",1031)',
    vr: "DS",
    name: "PatientReferenceID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1035)': {
    tag: '(0021,"PHILIPS MR/PART",1035)',
    vr: "IS",
    name: "ChemicalShiftNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1040)': {
    tag: '(0021,"PHILIPS MR/PART",1040)',
    vr: "IS",
    name: "PhaseNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1050)': {
    tag: '(0021,"PHILIPS MR/PART",1050)',
    vr: "IS",
    name: "DynamicScanNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1060)': {
    tag: '(0021,"PHILIPS MR/PART",1060)',
    vr: "IS",
    name: "NumberOfRowsInObject",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1061)': {
    tag: '(0021,"PHILIPS MR/PART",1061)',
    vr: "IS",
    name: "RowNumber",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1062)': {
    tag: '(0021,"PHILIPS MR/PART",1062)',
    vr: "IS",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1100)': {
    tag: '(0021,"PHILIPS MR/PART",1100)',
    vr: "DA",
    name: "ScanDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1110)': {
    tag: '(0021,"PHILIPS MR/PART",1110)',
    vr: "TM",
    name: "ScanTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS MR/PART",1221)': {
    tag: '(0021,"PHILIPS MR/PART",1221)',
    vr: "IS",
    name: "SliceGap",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/PART",00)': {
    tag: '(0029,"PHILIPS MR/PART",00)',
    vr: "DS",
    name: "Unknown",
    vm: "2",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/PART",04)': {
    tag: '(0029,"PHILIPS MR/PART",04)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/PART",10)': {
    tag: '(0029,"PHILIPS MR/PART",10)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/PART",11)': {
    tag: '(0029,"PHILIPS MR/PART",11)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/PART",20)': {
    tag: '(0029,"PHILIPS MR/PART",20)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/PART",31)': {
    tag: '(0029,"PHILIPS MR/PART",31)',
    vr: "DS",
    name: "Unknown",
    vm: "2",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/PART",32)': {
    tag: '(0029,"PHILIPS MR/PART",32)',
    vr: "DS",
    name: "Unknown",
    vm: "2",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/PART",c3)': {
    tag: '(0029,"PHILIPS MR/PART",c3)',
    vr: "IS",
    name: "ScanResolution",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/PART",c4)': {
    tag: '(0029,"PHILIPS MR/PART",c4)',
    vr: "IS",
    name: "FieldOfView",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"PHILIPS MR/PART",d5)': {
    tag: '(0029,"PHILIPS MR/PART",d5)',
    vr: "LT",
    name: "SliceThickness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS-MR-1",11)': {
    tag: '(0019,"PHILIPS-MR-1",11)',
    vr: "IS",
    name: "ChemicalShiftNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"PHILIPS-MR-1",12)': {
    tag: '(0019,"PHILIPS-MR-1",12)',
    vr: "IS",
    name: "PhaseNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS-MR-1",01)': {
    tag: '(0021,"PHILIPS-MR-1",01)',
    vr: "IS",
    name: "ReconstructionNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"PHILIPS-MR-1",02)': {
    tag: '(0021,"PHILIPS-MR-1",02)',
    vr: "IS",
    name: "SliceNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(7001,"Picker NM Private Group",01)': {
    tag: '(7001,"Picker NM Private Group",01)',
    vr: "UI",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(7001,"Picker NM Private Group",02)': {
    tag: '(7001,"Picker NM Private Group",02)',
    vr: "OB",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CM VA0  ACQU",10)': {
    tag: '(0019,"SIEMENS CM VA0  ACQU",10)',
    vr: "LT",
    name: "ParameterFileName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CM VA0  ACQU",11)': {
    tag: '(0019,"SIEMENS CM VA0  ACQU",11)',
    vr: "LO",
    name: "SequenceFileName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CM VA0  ACQU",12)': {
    tag: '(0019,"SIEMENS CM VA0  ACQU",12)',
    vr: "LT",
    name: "SequenceFileOwner",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CM VA0  ACQU",13)': {
    tag: '(0019,"SIEMENS CM VA0  ACQU",13)',
    vr: "LT",
    name: "SequenceDescription",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CM VA0  ACQU",14)': {
    tag: '(0019,"SIEMENS CM VA0  ACQU",14)',
    vr: "LT",
    name: "EPIFileName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  CMS",00)': {
    tag: '(0009,"SIEMENS CM VA0  CMS",00)',
    vr: "DS",
    name: "NumberOfMeasurements",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  CMS",10)': {
    tag: '(0009,"SIEMENS CM VA0  CMS",10)',
    vr: "LT",
    name: "StorageMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  CMS",12)': {
    tag: '(0009,"SIEMENS CM VA0  CMS",12)',
    vr: "UL",
    name: "EvaluationMaskImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  CMS",26)': {
    tag: '(0009,"SIEMENS CM VA0  CMS",26)',
    vr: "DA",
    name: "LastMoveDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  CMS",27)': {
    tag: '(0009,"SIEMENS CM VA0  CMS",27)',
    vr: "TM",
    name: "LastMoveTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS CM VA0  CMS",0a)': {
    tag: '(0011,"SIEMENS CM VA0  CMS",0a)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS CM VA0  CMS",10)': {
    tag: '(0011,"SIEMENS CM VA0  CMS",10)',
    vr: "DA",
    name: "RegistrationDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS CM VA0  CMS",11)': {
    tag: '(0011,"SIEMENS CM VA0  CMS",11)',
    vr: "TM",
    name: "RegistrationTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS CM VA0  CMS",22)': {
    tag: '(0011,"SIEMENS CM VA0  CMS",22)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS CM VA0  CMS",23)': {
    tag: '(0011,"SIEMENS CM VA0  CMS",23)',
    vr: "DS",
    name: "UsedPatientWeight",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS CM VA0  CMS",40)': {
    tag: '(0011,"SIEMENS CM VA0  CMS",40)',
    vr: "IS",
    name: "OrganCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",00)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",00)',
    vr: "LT",
    name: "ModifyingPhysician",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",10)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",10)',
    vr: "DA",
    name: "ModificationDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",12)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",12)',
    vr: "TM",
    name: "ModificationTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",20)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",20)',
    vr: "LO",
    name: "PatientName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",22)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",22)',
    vr: "LO",
    name: "PatientId",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",30)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",30)',
    vr: "DA",
    name: "PatientBirthdate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",31)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",31)',
    vr: "DS",
    name: "PatientWeight",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",32)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",32)',
    vr: "LT",
    name: "PatientsMaidenName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",33)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",33)',
    vr: "LT",
    name: "ReferringPhysician",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",34)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",34)',
    vr: "LT",
    name: "AdmittingDiagnosis",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",35)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",35)',
    vr: "LO",
    name: "PatientSex",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",40)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",40)',
    vr: "LO",
    name: "ProcedureDescription",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",42)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",42)',
    vr: "LO",
    name: "RestDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",44)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",44)',
    vr: "LO",
    name: "PatientPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",46)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",46)',
    vr: "LT",
    name: "ViewDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",50)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",50)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",51)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",51)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",52)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",52)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",53)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",53)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",54)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",54)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",55)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",55)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0013,"SIEMENS CM VA0  CMS",56)': {
    tag: '(0013,"SIEMENS CM VA0  CMS",56)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CM VA0  CMS",10)': {
    tag: '(0019,"SIEMENS CM VA0  CMS",10)',
    vr: "DS",
    name: "NetFrequency",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CM VA0  CMS",20)': {
    tag: '(0019,"SIEMENS CM VA0  CMS",20)',
    vr: "LT",
    name: "MeasurementMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CM VA0  CMS",30)': {
    tag: '(0019,"SIEMENS CM VA0  CMS",30)',
    vr: "LT",
    name: "CalculationMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CM VA0  CMS",50)': {
    tag: '(0019,"SIEMENS CM VA0  CMS",50)',
    vr: "IS",
    name: "NoiseLevel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CM VA0  CMS",60)': {
    tag: '(0019,"SIEMENS CM VA0  CMS",60)',
    vr: "IS",
    name: "NumberOfDataBytes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",20)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",20)',
    vr: "DS",
    name: "FoV",
    vm: "2",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",22)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",22)',
    vr: "DS",
    name: "ImageMagnificationFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",24)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",24)',
    vr: "DS",
    name: "ImageScrollOffset",
    vm: "2",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",26)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",26)',
    vr: "IS",
    name: "ImagePixelOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",30)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",30)',
    vr: "LT",
    name: "ViewDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",32)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",32)',
    vr: "CS",
    name: "PatientRestDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",60)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",60)',
    vr: "DS",
    name: "ImagePosition",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",61)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",61)',
    vr: "DS",
    name: "ImageNormal",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",63)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",63)',
    vr: "DS",
    name: "ImageDistance",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",65)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",65)',
    vr: "US",
    name: "ImagePositioningHistoryMask",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",6a)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",6a)',
    vr: "DS",
    name: "ImageRow",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",6b)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",6b)',
    vr: "DS",
    name: "ImageColumn",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",70)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",70)',
    vr: "LT",
    name: "PatientOrientationSet1",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",71)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",71)',
    vr: "LT",
    name: "PatientOrientationSet2",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",80)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",80)',
    vr: "LT",
    name: "StudyName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CM VA0  CMS",82)': {
    tag: '(0021,"SIEMENS CM VA0  CMS",82)',
    vr: "LT",
    name: "StudyType",
    vm: "3",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CM VA0  CMS",10)': {
    tag: '(0029,"SIEMENS CM VA0  CMS",10)',
    vr: "LT",
    name: "WindowStyle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CM VA0  CMS",11)': {
    tag: '(0029,"SIEMENS CM VA0  CMS",11)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CM VA0  CMS",13)': {
    tag: '(0029,"SIEMENS CM VA0  CMS",13)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CM VA0  CMS",20)': {
    tag: '(0029,"SIEMENS CM VA0  CMS",20)',
    vr: "LT",
    name: "PixelQualityCode",
    vm: "3",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CM VA0  CMS",22)': {
    tag: '(0029,"SIEMENS CM VA0  CMS",22)',
    vr: "IS",
    name: "PixelQualityValue",
    vm: "3",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CM VA0  CMS",50)': {
    tag: '(0029,"SIEMENS CM VA0  CMS",50)',
    vr: "LT",
    name: "ArchiveCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CM VA0  CMS",51)': {
    tag: '(0029,"SIEMENS CM VA0  CMS",51)',
    vr: "LT",
    name: "ExposureCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CM VA0  CMS",52)': {
    tag: '(0029,"SIEMENS CM VA0  CMS",52)',
    vr: "LT",
    name: "SortCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CM VA0  CMS",53)': {
    tag: '(0029,"SIEMENS CM VA0  CMS",53)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CM VA0  CMS",60)': {
    tag: '(0029,"SIEMENS CM VA0  CMS",60)',
    vr: "LT",
    name: "Splash",
    vm: "1",
    version: "PrivateTag"
  },
  '(0051,"SIEMENS CM VA0  CMS",10)': {
    tag: '(0051,"SIEMENS CM VA0  CMS",10)',
    vr: "LT",
    name: "ImageText",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(6021,"SIEMENS CM VA0  CMS",00)': {
    tag: '(6021,"SIEMENS CM VA0  CMS",00)',
    vr: "LT",
    name: "ImageGraphicsFormatCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(6021,"SIEMENS CM VA0  CMS",10)': {
    tag: '(6021,"SIEMENS CM VA0  CMS",10)',
    vr: "LT",
    name: "ImageGraphics",
    vm: "1",
    version: "PrivateTag"
  },
  '(7fe1,"SIEMENS CM VA0  CMS",00)': {
    tag: '(7fe1,"SIEMENS CM VA0  CMS",00)',
    vr: "OB",
    name: "BinaryData",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  LAB",10)': {
    tag: '(0009,"SIEMENS CM VA0  LAB",10)',
    vr: "LT",
    name: "GeneratorIdentificationLabel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  LAB",11)': {
    tag: '(0009,"SIEMENS CM VA0  LAB",11)',
    vr: "LT",
    name: "GantryIdentificationLabel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  LAB",12)': {
    tag: '(0009,"SIEMENS CM VA0  LAB",12)',
    vr: "LT",
    name: "X-RayTubeIdentificationLabel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  LAB",13)': {
    tag: '(0009,"SIEMENS CM VA0  LAB",13)',
    vr: "LT",
    name: "DetectorIdentificationLabel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  LAB",14)': {
    tag: '(0009,"SIEMENS CM VA0  LAB",14)',
    vr: "LT",
    name: "DASIdentificationLabel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  LAB",15)': {
    tag: '(0009,"SIEMENS CM VA0  LAB",15)',
    vr: "LT",
    name: "SMIIdentificationLabel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  LAB",16)': {
    tag: '(0009,"SIEMENS CM VA0  LAB",16)',
    vr: "LT",
    name: "CPUIdentificationLabel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CM VA0  LAB",20)': {
    tag: '(0009,"SIEMENS CM VA0  LAB",20)',
    vr: "LT",
    name: "HeaderVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CSA HEADER",08)': {
    tag: '(0029,"SIEMENS CSA HEADER",08)',
    vr: "CS",
    name: "CSAImageHeaderType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CSA HEADER",09)': {
    tag: '(0029,"SIEMENS CSA HEADER",09)',
    vr: "LO",
    name: "CSAImageHeaderVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CSA HEADER",10)': {
    tag: '(0029,"SIEMENS CSA HEADER",10)',
    vr: "OB",
    name: "CSAImageHeaderInfo",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CSA HEADER",18)': {
    tag: '(0029,"SIEMENS CSA HEADER",18)',
    vr: "CS",
    name: "CSASeriesHeaderType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CSA HEADER",19)': {
    tag: '(0029,"SIEMENS CSA HEADER",19)',
    vr: "LO",
    name: "CSASeriesHeaderVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CSA HEADER",20)': {
    tag: '(0029,"SIEMENS CSA HEADER",20)',
    vr: "OB",
    name: "CSASeriesHeaderInfo",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CSA NON-IMAGE",08)': {
    tag: '(0029,"SIEMENS CSA NON-IMAGE",08)',
    vr: "CS",
    name: "CSADataType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CSA NON-IMAGE",09)': {
    tag: '(0029,"SIEMENS CSA NON-IMAGE",09)',
    vr: "LO",
    name: "CSADataVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS CSA NON-IMAGE",10)': {
    tag: '(0029,"SIEMENS CSA NON-IMAGE",10)',
    vr: "OB",
    name: "CSADataInfo",
    vm: "1",
    version: "PrivateTag"
  },
  '(7FE1,"SIEMENS CSA NON-IMAGE",10)': {
    tag: '(7FE1,"SIEMENS CSA NON-IMAGE",10)',
    vr: "OB",
    name: "CSAData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",10)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",10)',
    vr: "DS",
    name: "DistanceSourceToSourceSideCollimator",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",11)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",11)',
    vr: "DS",
    name: "DistanceSourceToDetectorSideCollimator",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",20)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",20)',
    vr: "IS",
    name: "NumberOfPossibleChannels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",21)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",21)',
    vr: "IS",
    name: "MeanChannelNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",22)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",22)',
    vr: "DS",
    name: "DetectorSpacing",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",23)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",23)',
    vr: "DS",
    name: "DetectorCenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",24)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",24)',
    vr: "DS",
    name: "ReadingIntegrationTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",50)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",50)',
    vr: "DS",
    name: "DetectorAlignment",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",52)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",52)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",54)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",54)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",60)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",60)',
    vr: "DS",
    name: "FocusAlignment",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",65)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",65)',
    vr: "UL",
    name: "FocalSpotDeflectionAmplitude",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",66)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",66)',
    vr: "UL",
    name: "FocalSpotDeflectionPhase",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",67)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",67)',
    vr: "UL",
    name: "FocalSpotDeflectionOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",70)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",70)',
    vr: "DS",
    name: "WaterScalingFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",71)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",71)',
    vr: "DS",
    name: "InterpolationFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",80)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",80)',
    vr: "LT",
    name: "PatientRegion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",82)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",82)',
    vr: "LT",
    name: "PatientPhaseOfLife",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",90)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",90)',
    vr: "DS",
    name: "OsteoOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",92)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",92)',
    vr: "DS",
    name: "OsteoRegressionLineSlope",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",93)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",93)',
    vr: "DS",
    name: "OsteoRegressionLineIntercept",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",94)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",94)',
    vr: "DS",
    name: "OsteoStandardizationCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",96)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",96)',
    vr: "IS",
    name: "OsteoPhantomNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",A3)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",A3)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",A4)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",A4)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",A5)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",A5)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",A6)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",A6)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",A7)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",A7)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",A8)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",A8)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",A9)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",A9)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",AA)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",AA)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",AB)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",AB)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",AC)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",AC)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",AD)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",AD)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",AE)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",AE)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",AF)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",AF)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",B0)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",B0)',
    vr: "DS",
    name: "FeedPerRotation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",BD)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",BD)',
    vr: "IS",
    name: "PulmoTriggerLevel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",BE)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",BE)',
    vr: "DS",
    name: "ExpiratoricReserveVolume",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",BF)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",BF)',
    vr: "DS",
    name: "VitalCapacity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",C0)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",C0)',
    vr: "DS",
    name: "PulmoWater",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",C1)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",C1)',
    vr: "DS",
    name: "PulmoAir",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",C2)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",C2)',
    vr: "DA",
    name: "PulmoDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  COAD",C3)': {
    tag: '(0019,"SIEMENS CT VA0  COAD",C3)',
    vr: "TM",
    name: "PulmoTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",10)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",10)',
    vr: "DS",
    name: "SourceSideCollimatorAperture",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",11)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",11)',
    vr: "DS",
    name: "DetectorSideCollimatorAperture",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",20)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",20)',
    vr: "DS",
    name: "ExposureTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",21)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",21)',
    vr: "DS",
    name: "ExposureCurrent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",25)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",25)',
    vr: "DS",
    name: "KVPGeneratorPowerCurrent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",26)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",26)',
    vr: "DS",
    name: "GeneratorVoltage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",40)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",40)',
    vr: "UL",
    name: "MasterControlMask",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",42)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",42)',
    vr: "US",
    name: "ProcessingMask",
    vm: "5",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",44)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",44)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",45)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",45)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",62)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",62)',
    vr: "IS",
    name: "NumberOfVirtuellChannels",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",70)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",70)',
    vr: "IS",
    name: "NumberOfReadings",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",71)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",71)',
    vr: "LT",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",74)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",74)',
    vr: "IS",
    name: "NumberOfProjections",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",75)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",75)',
    vr: "IS",
    name: "NumberOfBytes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",80)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",80)',
    vr: "LT",
    name: "ReconstructionAlgorithmSet",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",81)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",81)',
    vr: "LT",
    name: "ReconstructionAlgorithmIndex",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",82)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",82)',
    vr: "LT",
    name: "RegenerationSoftwareVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS CT VA0  GEN",88)': {
    tag: '(0019,"SIEMENS CT VA0  GEN",88)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",10)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",10)',
    vr: "IS",
    name: "RotationAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",11)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",11)',
    vr: "IS",
    name: "StartAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",20)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",20)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",30)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",30)',
    vr: "IS",
    name: "TopogramTubePosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",32)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",32)',
    vr: "DS",
    name: "LengthOfTopogram",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",34)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",34)',
    vr: "DS",
    name: "TopogramCorrectionFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",36)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",36)',
    vr: "DS",
    name: "MaximumTablePosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",40)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",40)',
    vr: "IS",
    name: "TableMoveDirectionCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",45)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",45)',
    vr: "IS",
    name: "VOIStartRow",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",46)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",46)',
    vr: "IS",
    name: "VOIStopRow",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",47)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",47)',
    vr: "IS",
    name: "VOIStartColumn",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",48)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",48)',
    vr: "IS",
    name: "VOIStopColumn",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",49)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",49)',
    vr: "IS",
    name: "VOIStartSlice",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",4a)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",4a)',
    vr: "IS",
    name: "VOIStopSlice",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",50)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",50)',
    vr: "IS",
    name: "VectorStartRow",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",51)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",51)',
    vr: "IS",
    name: "VectorRowStep",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",52)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",52)',
    vr: "IS",
    name: "VectorStartColumn",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",53)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",53)',
    vr: "IS",
    name: "VectorColumnStep",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",60)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",60)',
    vr: "IS",
    name: "RangeTypeCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",62)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",62)',
    vr: "IS",
    name: "ReferenceTypeCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",70)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",70)',
    vr: "DS",
    name: "ObjectOrientation",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",72)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",72)',
    vr: "DS",
    name: "LightOrientation",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",75)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",75)',
    vr: "DS",
    name: "LightBrightness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",76)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",76)',
    vr: "DS",
    name: "LightContrast",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",7a)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",7a)',
    vr: "IS",
    name: "OverlayThreshold",
    vm: "2",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",7b)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",7b)',
    vr: "IS",
    name: "SurfaceThreshold",
    vm: "2",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",7c)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",7c)',
    vr: "IS",
    name: "GreyScaleThreshold",
    vm: "2",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",a0)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",a0)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",a2)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",a2)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  GEN",a7)': {
    tag: '(0021,"SIEMENS CT VA0  GEN",a7)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CT VA0  IDE",10)': {
    tag: '(0009,"SIEMENS CT VA0  IDE",10)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CT VA0  IDE",30)': {
    tag: '(0009,"SIEMENS CT VA0  IDE",30)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CT VA0  IDE",31)': {
    tag: '(0009,"SIEMENS CT VA0  IDE",31)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CT VA0  IDE",32)': {
    tag: '(0009,"SIEMENS CT VA0  IDE",32)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CT VA0  IDE",34)': {
    tag: '(0009,"SIEMENS CT VA0  IDE",34)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CT VA0  IDE",40)': {
    tag: '(0009,"SIEMENS CT VA0  IDE",40)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CT VA0  IDE",42)': {
    tag: '(0009,"SIEMENS CT VA0  IDE",42)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CT VA0  IDE",50)': {
    tag: '(0009,"SIEMENS CT VA0  IDE",50)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CT VA0  IDE",51)': {
    tag: '(0009,"SIEMENS CT VA0  IDE",51)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CT VA0  ORI",20)': {
    tag: '(0009,"SIEMENS CT VA0  ORI",20)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS CT VA0  ORI",30)': {
    tag: '(0009,"SIEMENS CT VA0  ORI",30)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(6021,"SIEMENS CT VA0  OST",00)': {
    tag: '(6021,"SIEMENS CT VA0  OST",00)',
    vr: "LT",
    name: "OsteoContourComment",
    vm: "1",
    version: "PrivateTag"
  },
  '(6021,"SIEMENS CT VA0  OST",10)': {
    tag: '(6021,"SIEMENS CT VA0  OST",10)',
    vr: "US",
    name: "OsteoContourBuffer",
    vm: "256",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  RAW",10)': {
    tag: '(0021,"SIEMENS CT VA0  RAW",10)',
    vr: "UL",
    name: "CreationMask",
    vm: "2",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  RAW",20)': {
    tag: '(0021,"SIEMENS CT VA0  RAW",20)',
    vr: "UL",
    name: "EvaluationMask",
    vm: "2",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  RAW",30)': {
    tag: '(0021,"SIEMENS CT VA0  RAW",30)',
    vr: "US",
    name: "ExtendedProcessingMask",
    vm: "7",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  RAW",40)': {
    tag: '(0021,"SIEMENS CT VA0  RAW",40)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  RAW",41)': {
    tag: '(0021,"SIEMENS CT VA0  RAW",41)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  RAW",42)': {
    tag: '(0021,"SIEMENS CT VA0  RAW",42)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  RAW",43)': {
    tag: '(0021,"SIEMENS CT VA0  RAW",43)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  RAW",44)': {
    tag: '(0021,"SIEMENS CT VA0  RAW",44)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS CT VA0  RAW",50)': {
    tag: '(0021,"SIEMENS CT VA0  RAW",50)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS DICOM",10)': {
    tag: '(0009,"SIEMENS DICOM",10)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS DICOM",12)': {
    tag: '(0009,"SIEMENS DICOM",12)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",10)': {
    tag: '(0019,"SIEMENS DLR.01",10)',
    vr: "LT",
    name: "MeasurementMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",11)': {
    tag: '(0019,"SIEMENS DLR.01",11)',
    vr: "LT",
    name: "ImageType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",15)': {
    tag: '(0019,"SIEMENS DLR.01",15)',
    vr: "LT",
    name: "SoftwareVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",20)': {
    tag: '(0019,"SIEMENS DLR.01",20)',
    vr: "LT",
    name: "MPMCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",21)': {
    tag: '(0019,"SIEMENS DLR.01",21)',
    vr: "LT",
    name: "Latitude",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",22)': {
    tag: '(0019,"SIEMENS DLR.01",22)',
    vr: "LT",
    name: "Sensitivity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",23)': {
    tag: '(0019,"SIEMENS DLR.01",23)',
    vr: "LT",
    name: "EDR",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",24)': {
    tag: '(0019,"SIEMENS DLR.01",24)',
    vr: "LT",
    name: "LFix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",25)': {
    tag: '(0019,"SIEMENS DLR.01",25)',
    vr: "LT",
    name: "SFix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",26)': {
    tag: '(0019,"SIEMENS DLR.01",26)',
    vr: "LT",
    name: "PresetMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",27)': {
    tag: '(0019,"SIEMENS DLR.01",27)',
    vr: "LT",
    name: "Region",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",28)': {
    tag: '(0019,"SIEMENS DLR.01",28)',
    vr: "LT",
    name: "Subregion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",30)': {
    tag: '(0019,"SIEMENS DLR.01",30)',
    vr: "LT",
    name: "Orientation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",31)': {
    tag: '(0019,"SIEMENS DLR.01",31)',
    vr: "LT",
    name: "MarkOnFilm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",32)': {
    tag: '(0019,"SIEMENS DLR.01",32)',
    vr: "LT",
    name: "RotationOnDRC",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",40)': {
    tag: '(0019,"SIEMENS DLR.01",40)',
    vr: "LT",
    name: "ReaderType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",41)': {
    tag: '(0019,"SIEMENS DLR.01",41)',
    vr: "LT",
    name: "SubModality",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",42)': {
    tag: '(0019,"SIEMENS DLR.01",42)',
    vr: "LT",
    name: "ReaderSerialNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",50)': {
    tag: '(0019,"SIEMENS DLR.01",50)',
    vr: "LT",
    name: "CassetteScale",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",51)': {
    tag: '(0019,"SIEMENS DLR.01",51)',
    vr: "LT",
    name: "CassetteMatrix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",52)': {
    tag: '(0019,"SIEMENS DLR.01",52)',
    vr: "LT",
    name: "CassetteSubmatrix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",53)': {
    tag: '(0019,"SIEMENS DLR.01",53)',
    vr: "LT",
    name: "Barcode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",60)': {
    tag: '(0019,"SIEMENS DLR.01",60)',
    vr: "LT",
    name: "ContrastType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",61)': {
    tag: '(0019,"SIEMENS DLR.01",61)',
    vr: "LT",
    name: "RotationAmount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",62)': {
    tag: '(0019,"SIEMENS DLR.01",62)',
    vr: "LT",
    name: "RotationCenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",63)': {
    tag: '(0019,"SIEMENS DLR.01",63)',
    vr: "LT",
    name: "DensityShift",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",64)': {
    tag: '(0019,"SIEMENS DLR.01",64)',
    vr: "US",
    name: "FrequencyRank",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",65)': {
    tag: '(0019,"SIEMENS DLR.01",65)',
    vr: "LT",
    name: "FrequencyEnhancement",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",66)': {
    tag: '(0019,"SIEMENS DLR.01",66)',
    vr: "LT",
    name: "FrequencyType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",67)': {
    tag: '(0019,"SIEMENS DLR.01",67)',
    vr: "LT",
    name: "KernelLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",68)': {
    tag: '(0019,"SIEMENS DLR.01",68)',
    vr: "UL",
    name: "KernelMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",69)': {
    tag: '(0019,"SIEMENS DLR.01",69)',
    vr: "UL",
    name: "ConvolutionMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",70)': {
    tag: '(0019,"SIEMENS DLR.01",70)',
    vr: "LT",
    name: "PLASource",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",71)': {
    tag: '(0019,"SIEMENS DLR.01",71)',
    vr: "LT",
    name: "PLADestination",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",75)': {
    tag: '(0019,"SIEMENS DLR.01",75)',
    vr: "LT",
    name: "UIDOriginalImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",76)': {
    tag: '(0019,"SIEMENS DLR.01",76)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",80)': {
    tag: '(0019,"SIEMENS DLR.01",80)',
    vr: "LT",
    name: "ReaderHeader",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",90)': {
    tag: '(0019,"SIEMENS DLR.01",90)',
    vr: "LT",
    name: "PLAOfSecondaryDestination",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",a0)': {
    tag: '(0019,"SIEMENS DLR.01",a0)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS DLR.01",a1)': {
    tag: '(0019,"SIEMENS DLR.01",a1)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"SIEMENS DLR.01",10)': {
    tag: '(0041,"SIEMENS DLR.01",10)',
    vr: "US",
    name: "NumberOfHardcopies",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"SIEMENS DLR.01",20)': {
    tag: '(0041,"SIEMENS DLR.01",20)',
    vr: "LT",
    name: "FilmFormat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"SIEMENS DLR.01",30)': {
    tag: '(0041,"SIEMENS DLR.01",30)',
    vr: "LT",
    name: "FilmSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0041,"SIEMENS DLR.01",31)': {
    tag: '(0041,"SIEMENS DLR.01",31)',
    vr: "LT",
    name: "FullFilmFormat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0003,"SIEMENS ISI",08)': {
    tag: '(0003,"SIEMENS ISI",08)',
    vr: "US",
    name: "ISICommandField",
    vm: "1",
    version: "PrivateTag"
  },
  '(0003,"SIEMENS ISI",11)': {
    tag: '(0003,"SIEMENS ISI",11)',
    vr: "US",
    name: "AttachIDApplicationCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0003,"SIEMENS ISI",12)': {
    tag: '(0003,"SIEMENS ISI",12)',
    vr: "UL",
    name: "AttachIDMessageCount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0003,"SIEMENS ISI",13)': {
    tag: '(0003,"SIEMENS ISI",13)',
    vr: "DA",
    name: "AttachIDDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0003,"SIEMENS ISI",14)': {
    tag: '(0003,"SIEMENS ISI",14)',
    vr: "TM",
    name: "AttachIDTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0003,"SIEMENS ISI",20)': {
    tag: '(0003,"SIEMENS ISI",20)',
    vr: "US",
    name: "MessageType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0003,"SIEMENS ISI",30)': {
    tag: '(0003,"SIEMENS ISI",30)',
    vr: "DA",
    name: "MaxWaitingDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0003,"SIEMENS ISI",31)': {
    tag: '(0003,"SIEMENS ISI",31)',
    vr: "TM",
    name: "MaxWaitingTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS ISI",01)': {
    tag: '(0009,"SIEMENS ISI",01)',
    vr: "UN",
    name: "RISPatientInfoIMGEF",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",03)': {
    tag: '(0011,"SIEMENS ISI",03)',
    vr: "LT",
    name: "PatientUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",04)': {
    tag: '(0011,"SIEMENS ISI",04)',
    vr: "LT",
    name: "PatientID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",0a)': {
    tag: '(0011,"SIEMENS ISI",0a)',
    vr: "LT",
    name: "CaseID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",22)': {
    tag: '(0011,"SIEMENS ISI",22)',
    vr: "LT",
    name: "RequestID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",23)': {
    tag: '(0011,"SIEMENS ISI",23)',
    vr: "LT",
    name: "ExaminationUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",a1)': {
    tag: '(0011,"SIEMENS ISI",a1)',
    vr: "DA",
    name: "PatientRegistrationDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",a2)': {
    tag: '(0011,"SIEMENS ISI",a2)',
    vr: "TM",
    name: "PatientRegistrationTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",b0)': {
    tag: '(0011,"SIEMENS ISI",b0)',
    vr: "LT",
    name: "PatientLastName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",b2)': {
    tag: '(0011,"SIEMENS ISI",b2)',
    vr: "LT",
    name: "PatientFirstName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",b4)': {
    tag: '(0011,"SIEMENS ISI",b4)',
    vr: "LT",
    name: "PatientHospitalStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",bc)': {
    tag: '(0011,"SIEMENS ISI",bc)',
    vr: "TM",
    name: "CurrentLocationTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",c0)': {
    tag: '(0011,"SIEMENS ISI",c0)',
    vr: "LT",
    name: "PatientInsuranceStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",d0)': {
    tag: '(0011,"SIEMENS ISI",d0)',
    vr: "LT",
    name: "PatientBillingType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS ISI",d2)': {
    tag: '(0011,"SIEMENS ISI",d2)',
    vr: "LT",
    name: "PatientBillingAddress",
    vm: "1",
    version: "PrivateTag"
  },
  '(0031,"SIEMENS ISI",12)': {
    tag: '(0031,"SIEMENS ISI",12)',
    vr: "LT",
    name: "ExaminationReason",
    vm: "1",
    version: "PrivateTag"
  },
  '(0031,"SIEMENS ISI",30)': {
    tag: '(0031,"SIEMENS ISI",30)',
    vr: "DA",
    name: "RequestedDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0031,"SIEMENS ISI",32)': {
    tag: '(0031,"SIEMENS ISI",32)',
    vr: "TM",
    name: "WorklistRequestStartTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0031,"SIEMENS ISI",33)': {
    tag: '(0031,"SIEMENS ISI",33)',
    vr: "TM",
    name: "WorklistRequestEndTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0031,"SIEMENS ISI",4a)': {
    tag: '(0031,"SIEMENS ISI",4a)',
    vr: "TM",
    name: "RequestedTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0031,"SIEMENS ISI",80)': {
    tag: '(0031,"SIEMENS ISI",80)',
    vr: "LT",
    name: "RequestedLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0055,"SIEMENS ISI",46)': {
    tag: '(0055,"SIEMENS ISI",46)',
    vr: "LT",
    name: "CurrentWard",
    vm: "1",
    version: "PrivateTag"
  },
  '(0193,"SIEMENS ISI",02)': {
    tag: '(0193,"SIEMENS ISI",02)',
    vr: "DS",
    name: "RISKey",
    vm: "1",
    version: "PrivateTag"
  },
  '(0307,"SIEMENS ISI",01)': {
    tag: '(0307,"SIEMENS ISI",01)',
    vr: "UN",
    name: "RISWorklistIMGEF",
    vm: "1",
    version: "PrivateTag"
  },
  '(0309,"SIEMENS ISI",01)': {
    tag: '(0309,"SIEMENS ISI",01)',
    vr: "UN",
    name: "RISReportIMGEF",
    vm: "1",
    version: "PrivateTag"
  },
  '(4009,"SIEMENS ISI",01)': {
    tag: '(4009,"SIEMENS ISI",01)',
    vr: "LT",
    name: "ReportID",
    vm: "1",
    version: "PrivateTag"
  },
  '(4009,"SIEMENS ISI",20)': {
    tag: '(4009,"SIEMENS ISI",20)',
    vr: "LT",
    name: "ReportStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(4009,"SIEMENS ISI",30)': {
    tag: '(4009,"SIEMENS ISI",30)',
    vr: "DA",
    name: "ReportCreationDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(4009,"SIEMENS ISI",70)': {
    tag: '(4009,"SIEMENS ISI",70)',
    vr: "LT",
    name: "ReportApprovingPhysician",
    vm: "1",
    version: "PrivateTag"
  },
  '(4009,"SIEMENS ISI",e0)': {
    tag: '(4009,"SIEMENS ISI",e0)',
    vr: "LT",
    name: "ReportText",
    vm: "1",
    version: "PrivateTag"
  },
  '(4009,"SIEMENS ISI",e1)': {
    tag: '(4009,"SIEMENS ISI",e1)',
    vr: "LT",
    name: "ReportAuthor",
    vm: "1",
    version: "PrivateTag"
  },
  '(4009,"SIEMENS ISI",e3)': {
    tag: '(4009,"SIEMENS ISI",e3)',
    vr: "LT",
    name: "ReportingRadiologist",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",04)': {
    tag: '(0029,"SIEMENS MED DISPLAY",04)',
    vr: "LT",
    name: "PhotometricInterpretation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",10)': {
    tag: '(0029,"SIEMENS MED DISPLAY",10)',
    vr: "US",
    name: "RowsOfSubmatrix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",11)': {
    tag: '(0029,"SIEMENS MED DISPLAY",11)',
    vr: "US",
    name: "ColumnsOfSubmatrix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",20)': {
    tag: '(0029,"SIEMENS MED DISPLAY",20)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",21)': {
    tag: '(0029,"SIEMENS MED DISPLAY",21)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",50)': {
    tag: '(0029,"SIEMENS MED DISPLAY",50)',
    vr: "US",
    name: "OriginOfSubmatrix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",99)': {
    tag: '(0029,"SIEMENS MED DISPLAY",99)',
    vr: "LT",
    name: "ShutterType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",a0)': {
    tag: '(0029,"SIEMENS MED DISPLAY",a0)',
    vr: "US",
    name: "RowsOfRectangularShutter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",a1)': {
    tag: '(0029,"SIEMENS MED DISPLAY",a1)',
    vr: "US",
    name: "ColumnsOfRectangularShutter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",a2)': {
    tag: '(0029,"SIEMENS MED DISPLAY",a2)',
    vr: "US",
    name: "OriginOfRectangularShutter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",b0)': {
    tag: '(0029,"SIEMENS MED DISPLAY",b0)',
    vr: "US",
    name: "RadiusOfCircularShutter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",b2)': {
    tag: '(0029,"SIEMENS MED DISPLAY",b2)',
    vr: "US",
    name: "OriginOfCircularShutter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED DISPLAY",c1)': {
    tag: '(0029,"SIEMENS MED DISPLAY",c1)',
    vr: "US",
    name: "ContourOfIrregularShutter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED HG",10)': {
    tag: '(0029,"SIEMENS MED HG",10)',
    vr: "US",
    name: "ListOfGroupNumbers",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED HG",15)': {
    tag: '(0029,"SIEMENS MED HG",15)',
    vr: "LT",
    name: "ListOfShadowOwnerCodes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED HG",20)': {
    tag: '(0029,"SIEMENS MED HG",20)',
    vr: "US",
    name: "ListOfElementNumbers",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED HG",30)': {
    tag: '(0029,"SIEMENS MED HG",30)',
    vr: "US",
    name: "ListOfTotalDisplayLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED HG",40)': {
    tag: '(0029,"SIEMENS MED HG",40)',
    vr: "LT",
    name: "ListOfDisplayPrefix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED HG",50)': {
    tag: '(0029,"SIEMENS MED HG",50)',
    vr: "LT",
    name: "ListOfDisplayPostfix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED HG",60)': {
    tag: '(0029,"SIEMENS MED HG",60)',
    vr: "US",
    name: "ListOfTextPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED HG",70)': {
    tag: '(0029,"SIEMENS MED HG",70)',
    vr: "LT",
    name: "ListOfTextConcatenation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED MG",10)': {
    tag: '(0029,"SIEMENS MED MG",10)',
    vr: "US",
    name: "ListOfGroupNumbers",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED MG",15)': {
    tag: '(0029,"SIEMENS MED MG",15)',
    vr: "LT",
    name: "ListOfShadowOwnerCodes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED MG",20)': {
    tag: '(0029,"SIEMENS MED MG",20)',
    vr: "US",
    name: "ListOfElementNumbers",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED MG",30)': {
    tag: '(0029,"SIEMENS MED MG",30)',
    vr: "US",
    name: "ListOfTotalDisplayLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED MG",40)': {
    tag: '(0029,"SIEMENS MED MG",40)',
    vr: "LT",
    name: "ListOfDisplayPrefix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED MG",50)': {
    tag: '(0029,"SIEMENS MED MG",50)',
    vr: "LT",
    name: "ListOfDisplayPostfix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED MG",60)': {
    tag: '(0029,"SIEMENS MED MG",60)',
    vr: "US",
    name: "ListOfTextPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MED MG",70)': {
    tag: '(0029,"SIEMENS MED MG",70)',
    vr: "LT",
    name: "ListOfTextConcatenation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS MED",10)': {
    tag: '(0009,"SIEMENS MED",10)',
    vr: "LO",
    name: "RecognitionCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS MED",30)': {
    tag: '(0009,"SIEMENS MED",30)',
    vr: "UL",
    name: "ByteOffsetOfOriginalHeader",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS MED",31)': {
    tag: '(0009,"SIEMENS MED",31)',
    vr: "UL",
    name: "LengthOfOriginalHeader",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS MED",40)': {
    tag: '(0009,"SIEMENS MED",40)',
    vr: "UL",
    name: "ByteOffsetOfPixelmatrix",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS MED",41)': {
    tag: '(0009,"SIEMENS MED",41)',
    vr: "UL",
    name: "LengthOfPixelmatrixInBytes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS MED",50)': {
    tag: '(0009,"SIEMENS MED",50)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS MED",51)': {
    tag: '(0009,"SIEMENS MED",51)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS MED",f5)': {
    tag: '(0009,"SIEMENS MED",f5)',
    vr: "LT",
    name: "PDMEFIDPlaceholder",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIEMENS MED",f6)': {
    tag: '(0009,"SIEMENS MED",f6)',
    vr: "LT",
    name: "PDMDataObjectTypeExtension",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MED",10)': {
    tag: '(0021,"SIEMENS MED",10)',
    vr: "DS",
    name: "Zoom",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MED",11)': {
    tag: '(0021,"SIEMENS MED",11)',
    vr: "DS",
    name: "Target",
    vm: "2",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MED",12)': {
    tag: '(0021,"SIEMENS MED",12)',
    vr: "IS",
    name: "TubeAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MED",20)': {
    tag: '(0021,"SIEMENS MED",20)',
    vr: "US",
    name: "ROIMask",
    vm: "1",
    version: "PrivateTag"
  },
  '(7001,"SIEMENS MED",10)': {
    tag: '(7001,"SIEMENS MED",10)',
    vr: "LT",
    name: "Dummy",
    vm: "1",
    version: "PrivateTag"
  },
  '(7003,"SIEMENS MED",10)': {
    tag: '(7003,"SIEMENS MED",10)',
    vr: "LT",
    name: "Header",
    vm: "1",
    version: "PrivateTag"
  },
  '(7005,"SIEMENS MED",10)': {
    tag: '(7005,"SIEMENS MED",10)',
    vr: "LT",
    name: "Dummy",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",08)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",08)',
    vr: "CS",
    name: "MedComHeaderType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",09)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",09)',
    vr: "LO",
    name: "MedComHeaderVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",10)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",10)',
    vr: "OB",
    name: "MedComHeaderInfo",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",20)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",20)',
    vr: "OB",
    name: "MedComHistoryInformation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",31)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",31)',
    vr: "LO",
    name: "PMTFInformation1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",32)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",32)',
    vr: "UL",
    name: "PMTFInformation2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",33)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",33)',
    vr: "UL",
    name: "PMTFInformation3",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",34)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",34)',
    vr: "CS",
    name: "PMTFInformation4",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",35)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",35)',
    vr: "UL",
    name: "PMTFInformation5",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",40)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",40)',
    vr: "SQ",
    name: "ApplicationHeaderSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",41)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",41)',
    vr: "CS",
    name: "ApplicationHeaderType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",42)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",42)',
    vr: "LO",
    name: "ApplicationHeaderID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",43)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",43)',
    vr: "LO",
    name: "ApplicationHeaderVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",44)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",44)',
    vr: "OB",
    name: "ApplicationHeaderInfo",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",50)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",50)',
    vr: "LO",
    name: "WorkflowControlFlags",
    vm: "8",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",51)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",51)',
    vr: "CS",
    name: "ArchiveManagementFlagKeepOnline",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",52)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",52)',
    vr: "CS",
    name: "ArchiveManagementFlagDoNotArchive",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",53)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",53)',
    vr: "CS",
    name: "ImageLocationStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",54)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",54)',
    vr: "DS",
    name: "EstimatedRetrieveTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",55)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",55)',
    vr: "DS",
    name: "DataSizeOfRetrievedImages",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",70)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",70)',
    vr: "SQ",
    name: "SiemensLinkSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",71)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",71)',
    vr: "AT",
    name: "ReferencedTag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",72)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",72)',
    vr: "CS",
    name: "ReferencedTagType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",73)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",73)',
    vr: "UL",
    name: "ReferencedValueLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",74)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",74)',
    vr: "CS",
    name: "ReferencedObjectDeviceType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",75)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",75)',
    vr: "OB",
    name: "ReferencedObjectDeviceLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER",76)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER",76)',
    vr: "OB",
    name: "ReferencedObjectDeviceID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM HEADER2",60)': {
    tag: '(0029,"SIEMENS MEDCOM HEADER2",60)',
    vr: "LO",
    name: "SeriesWorkflowStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM OOG",08)': {
    tag: '(0029,"SIEMENS MEDCOM OOG",08)',
    vr: "CS",
    name: "MEDCOMOOGType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM OOG",09)': {
    tag: '(0029,"SIEMENS MEDCOM OOG",09)',
    vr: "LO",
    name: "MEDCOMOOGVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SIEMENS MEDCOM OOG",10)': {
    tag: '(0029,"SIEMENS MEDCOM OOG",10)',
    vr: "OB",
    name: "MEDCOMOOGInfo",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",12)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",12)',
    vr: "DS",
    name: "MagneticFieldStrength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",14)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",14)',
    vr: "DS",
    name: "ADCVoltage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",16)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",16)',
    vr: "DS",
    name: "ADCOffset",
    vm: "2",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",20)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",20)',
    vr: "DS",
    name: "TransmitterAmplitude",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",21)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",21)',
    vr: "IS",
    name: "NumberOfTransmitterAmplitudes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",22)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",22)',
    vr: "DS",
    name: "TransmitterAttenuator",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",24)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",24)',
    vr: "DS",
    name: "TransmitterCalibration",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",26)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",26)',
    vr: "DS",
    name: "TransmitterReference",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",50)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",50)',
    vr: "DS",
    name: "ReceiverTotalGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",51)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",51)',
    vr: "DS",
    name: "ReceiverAmplifierGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",52)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",52)',
    vr: "DS",
    name: "ReceiverPreamplifierGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",54)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",54)',
    vr: "DS",
    name: "ReceiverCableAttenuation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",55)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",55)',
    vr: "DS",
    name: "ReceiverReferenceGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",56)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",56)',
    vr: "DS",
    name: "ReceiverFilterFrequency",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",60)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",60)',
    vr: "DS",
    name: "ReconstructionScaleFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",62)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",62)',
    vr: "DS",
    name: "ReferenceScaleFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",70)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",70)',
    vr: "DS",
    name: "PhaseGradientAmplitude",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",71)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",71)',
    vr: "DS",
    name: "ReadoutGradientAmplitude",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",72)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",72)',
    vr: "DS",
    name: "SelectionGradientAmplitude",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",80)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",80)',
    vr: "DS",
    name: "GradientDelayTime",
    vm: "3",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",82)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",82)',
    vr: "DS",
    name: "TotalGradientDelayTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",90)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",90)',
    vr: "LT",
    name: "SensitivityCorrectionLabel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",91)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",91)',
    vr: "DS",
    name: "SaturationPhaseEncodingVectorCoronalComponent",
    vm: "6",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",92)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",92)',
    vr: "DS",
    name: "SaturationReadoutVectorCoronalComponent",
    vm: "6",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",a0)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",a0)',
    vr: "US",
    name: "RFWatchdogMask",
    vm: "3",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",a1)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",a1)',
    vr: "DS",
    name: "EPIReconstructionSlope",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",a2)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",a2)',
    vr: "DS",
    name: "RFPowerErrorIndicator",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",a5)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",a5)',
    vr: "DS",
    name: "SpecificAbsorptionRateWholeBody",
    vm: "3",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",a6)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",a6)',
    vr: "DS",
    name: "SpecificEnergyDose",
    vm: "3",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",b0)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",b0)',
    vr: "UL",
    name: "AdjustmentStatusMask",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",c1)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",c1)',
    vr: "DS",
    name: "EPICapacity",
    vm: "6",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",c2)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",c2)',
    vr: "DS",
    name: "EPIInductance",
    vm: "3",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",c3)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",c3)',
    vr: "IS",
    name: "EPISwitchConfigurationCode",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",c4)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",c4)',
    vr: "IS",
    name: "EPISwitchHardwareCode",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",c5)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",c5)',
    vr: "DS",
    name: "EPISwitchDelayTime",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",d1)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",d1)',
    vr: "DS",
    name: "FlowSensitivity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",d2)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",d2)',
    vr: "LT",
    name: "CalculationSubmode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",d3)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",d3)',
    vr: "DS",
    name: "FieldOfViewRatio",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",d4)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",d4)',
    vr: "IS",
    name: "BaseRawMatrixSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",d5)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",d5)',
    vr: "IS",
    name: "2DOversamplingLines",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",d6)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",d6)',
    vr: "IS",
    name: "3DPhaseOversamplingPartitions",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",d7)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",d7)',
    vr: "IS",
    name: "EchoLinePosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",d8)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",d8)',
    vr: "IS",
    name: "EchoColumnPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",d9)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",d9)',
    vr: "IS",
    name: "LinesPerSegment",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  COAD",da)': {
    tag: '(0019,"SIEMENS MR VA0  COAD",da)',
    vr: "LT",
    name: "PhaseCodingDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",10)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",10)',
    vr: "DS",
    name: "TotalMeasurementTimeNominal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",11)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",11)',
    vr: "DS",
    name: "TotalMeasurementTimeCurrent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",12)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",12)',
    vr: "DS",
    name: "StartDelayTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",13)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",13)',
    vr: "DS",
    name: "DwellTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",14)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",14)',
    vr: "IS",
    name: "NumberOfPhases",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",16)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",16)',
    vr: "UL",
    name: "SequenceControlMask",
    vm: "2",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",18)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",18)',
    vr: "UL",
    name: "MeasurementStatusMask",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",20)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",20)',
    vr: "IS",
    name: "NumberOfFourierLinesNominal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",21)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",21)',
    vr: "IS",
    name: "NumberOfFourierLinesCurrent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",26)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",26)',
    vr: "IS",
    name: "NumberOfFourierLinesAfterZero",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",28)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",28)',
    vr: "IS",
    name: "FirstMeasuredFourierLine",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",30)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",30)',
    vr: "IS",
    name: "AcquisitionColumns",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",31)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",31)',
    vr: "IS",
    name: "ReconstructionColumns",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",40)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",40)',
    vr: "IS",
    name: "ArrayCoilElementNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",41)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",41)',
    vr: "UL",
    name: "ArrayCoilElementSelectMask",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",42)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",42)',
    vr: "UL",
    name: "ArrayCoilElementDataMask",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",43)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",43)',
    vr: "IS",
    name: "ArrayCoilElementToADCConnect",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",44)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",44)',
    vr: "DS",
    name: "ArrayCoilElementNoiseLevel",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",45)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",45)',
    vr: "IS",
    name: "ArrayCoilADCPairNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",46)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",46)',
    vr: "UL",
    name: "ArrayCoilCombinationMask",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",50)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",50)',
    vr: "IS",
    name: "NumberOfAverages",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",60)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",60)',
    vr: "DS",
    name: "FlipAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",70)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",70)',
    vr: "IS",
    name: "NumberOfPrescans",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",81)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",81)',
    vr: "LT",
    name: "FilterTypeForRawData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",82)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",82)',
    vr: "DS",
    name: "FilterParameterForRawData",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",83)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",83)',
    vr: "LT",
    name: "FilterTypeForImageData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",84)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",84)',
    vr: "DS",
    name: "FilterParameterForImageData",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",85)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",85)',
    vr: "LT",
    name: "FilterTypeForPhaseCorrection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",86)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",86)',
    vr: "DS",
    name: "FilterParameterForPhaseCorrection",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",87)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",87)',
    vr: "LT",
    name: "NormalizationFilterTypeForImageData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",88)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",88)',
    vr: "DS",
    name: "NormalizationFilterParameterForImageData",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",90)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",90)',
    vr: "IS",
    name: "NumberOfSaturationRegions",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",91)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",91)',
    vr: "DS",
    name: "SaturationPhaseEncodingVectorSagittalComponent",
    vm: "6",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",92)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",92)',
    vr: "DS",
    name: "SaturationReadoutVectorSagittalComponent",
    vm: "6",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",93)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",93)',
    vr: "DS",
    name: "EPIStimulationMonitorMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",94)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",94)',
    vr: "DS",
    name: "ImageRotationAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",96)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",96)',
    vr: "UL",
    name: "CoilIDMask",
    vm: "3",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",97)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",97)',
    vr: "UL",
    name: "CoilClassMask",
    vm: "2",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",98)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",98)',
    vr: "DS",
    name: "CoilPosition",
    vm: "3",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",a0)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",a0)',
    vr: "DS",
    name: "EPIReconstructionPhase",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS MR VA0  GEN",a1)': {
    tag: '(0019,"SIEMENS MR VA0  GEN",a1)',
    vr: "DS",
    name: "EPIReconstructionSlope",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",20)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",20)',
    vr: "IS",
    name: "PhaseCorrectionRowsSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",21)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",21)',
    vr: "IS",
    name: "PhaseCorrectionColumnsSequence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",22)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",22)',
    vr: "IS",
    name: "PhaseCorrectionRowsReconstruction",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",24)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",24)',
    vr: "IS",
    name: "PhaseCorrectionColumnsReconstruction",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",30)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",30)',
    vr: "IS",
    name: "NumberOf3DRawPartitionsNominal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",31)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",31)',
    vr: "IS",
    name: "NumberOf3DRawPartitionsCurrent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",34)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",34)',
    vr: "IS",
    name: "NumberOf3DImagePartitions",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",36)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",36)',
    vr: "IS",
    name: "Actual3DImagePartitionNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",39)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",39)',
    vr: "DS",
    name: "SlabThickness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",40)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",40)',
    vr: "IS",
    name: "NumberOfSlicesNominal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",41)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",41)',
    vr: "IS",
    name: "NumberOfSlicesCurrent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",42)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",42)',
    vr: "IS",
    name: "CurrentSliceNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",43)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",43)',
    vr: "IS",
    name: "CurrentGroupNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",44)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",44)',
    vr: "DS",
    name: "CurrentSliceDistanceFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",45)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",45)',
    vr: "IS",
    name: "MIPStartRow",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",46)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",46)',
    vr: "IS",
    name: "MIPStopRow",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",47)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",47)',
    vr: "IS",
    name: "MIPStartColumn",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",48)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",48)',
    vr: "IS",
    name: "MIPStartColumn",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",49)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",49)',
    vr: "IS",
    name: "MIPStartSlice Name=",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",4a)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",4a)',
    vr: "IS",
    name: "MIPStartSlice",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",4f)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",4f)',
    vr: "LT",
    name: "OrderofSlices",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",50)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",50)',
    vr: "US",
    name: "SignalMask",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",52)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",52)',
    vr: "DS",
    name: "DelayAfterTrigger",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",53)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",53)',
    vr: "IS",
    name: "RRInterval",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",54)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",54)',
    vr: "DS",
    name: "NumberOfTriggerPulses",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",56)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",56)',
    vr: "DS",
    name: "RepetitionTimeEffective",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",57)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",57)',
    vr: "LT",
    name: "GatePhase",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",58)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",58)',
    vr: "DS",
    name: "GateThreshold",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",59)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",59)',
    vr: "DS",
    name: "GatedRatio",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",60)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",60)',
    vr: "IS",
    name: "NumberOfInterpolatedImages",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",70)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",70)',
    vr: "IS",
    name: "NumberOfEchoes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",72)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",72)',
    vr: "DS",
    name: "SecondEchoTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",73)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",73)',
    vr: "DS",
    name: "SecondRepetitionTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",80)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",80)',
    vr: "IS",
    name: "CardiacCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",91)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",91)',
    vr: "DS",
    name: "SaturationPhaseEncodingVectorTransverseComponent",
    vm: "6",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",92)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",92)',
    vr: "DS",
    name: "SaturationReadoutVectorTransverseComponent",
    vm: "6",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",93)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",93)',
    vr: "DS",
    name: "EPIChangeValueOfMagnitude",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",94)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",94)',
    vr: "DS",
    name: "EPIChangeValueOfXComponent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",95)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",95)',
    vr: "DS",
    name: "EPIChangeValueOfYComponent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  GEN",96)': {
    tag: '(0021,"SIEMENS MR VA0  GEN",96)',
    vr: "DS",
    name: "EPIChangeValueOfZComponent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",00)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",00)',
    vr: "LT",
    name: "SequenceType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",01)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",01)',
    vr: "IS",
    name: "VectorSizeOriginal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",02)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",02)',
    vr: "IS",
    name: "VectorSizeExtended",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",03)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",03)',
    vr: "DS",
    name: "AcquiredSpectralRange",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",04)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",04)',
    vr: "DS",
    name: "VOIPosition",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",05)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",05)',
    vr: "DS",
    name: "VOISize",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",06)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",06)',
    vr: "IS",
    name: "CSIMatrixSizeOriginal",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",07)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",07)',
    vr: "IS",
    name: "CSIMatrixSizeExtended",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",08)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",08)',
    vr: "DS",
    name: "SpatialGridShift",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",09)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",09)',
    vr: "DS",
    name: "SignalLimitsMinimum",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",10)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",10)',
    vr: "DS",
    name: "SignalLimitsMaximum",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",11)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",11)',
    vr: "DS",
    name: "SpecInfoMask",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",12)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",12)',
    vr: "DS",
    name: "EPITimeRateOfChangeOfMagnitude",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",13)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",13)',
    vr: "DS",
    name: "EPITimeRateOfChangeOfXComponent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",14)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",14)',
    vr: "DS",
    name: "EPITimeRateOfChangeOfYComponent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",15)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",15)',
    vr: "DS",
    name: "EPITimeRateOfChangeOfZComponent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",16)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",16)',
    vr: "DS",
    name: "EPITimeRateOfChangeLegalLimit1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",17)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",17)',
    vr: "DS",
    name: "EPIOperationModeFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",18)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",18)',
    vr: "DS",
    name: "EPIFieldCalculationSafetyFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",19)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",19)',
    vr: "DS",
    name: "EPILegalLimit1OfChangeValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",20)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",20)',
    vr: "DS",
    name: "EPILegalLimit2OfChangeValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",21)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",21)',
    vr: "DS",
    name: "EPIRiseTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",30)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",30)',
    vr: "DS",
    name: "ArrayCoilADCOffset",
    vm: "16",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",31)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",31)',
    vr: "DS",
    name: "ArrayCoilPreamplifierGain",
    vm: "16",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",50)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",50)',
    vr: "LT",
    name: "SaturationType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",51)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",51)',
    vr: "DS",
    name: "SaturationNormalVector",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",52)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",52)',
    vr: "DS",
    name: "SaturationPositionVector",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",53)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",53)',
    vr: "DS",
    name: "SaturationThickness",
    vm: "6",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",54)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",54)',
    vr: "DS",
    name: "SaturationWidth",
    vm: "6",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS MR VA0  RAW",55)': {
    tag: '(0021,"SIEMENS MR VA0  RAW",55)',
    vr: "DS",
    name: "SaturationDistance",
    vm: "6",
    version: "PrivateTag"
  },
  '(7fe3,"SIEMENS NUMARIS II",00)': {
    tag: '(7fe3,"SIEMENS NUMARIS II",00)',
    vr: "LT",
    name: "ImageGraphicsFormatCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(7fe3,"SIEMENS NUMARIS II",10)': {
    tag: '(7fe3,"SIEMENS NUMARIS II",10)',
    vr: "OB",
    name: "ImageGraphics",
    vm: "1",
    version: "PrivateTag"
  },
  '(7fe3,"SIEMENS NUMARIS II",20)': {
    tag: '(7fe3,"SIEMENS NUMARIS II",20)',
    vr: "OB",
    name: "ImageGraphicsDummy",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA GEN",20)': {
    tag: '(0011,"SIEMENS RA GEN",20)',
    vr: "SL",
    name: "FluoroTimer",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA GEN",25)': {
    tag: '(0011,"SIEMENS RA GEN",25)',
    vr: "SL",
    name: "PtopDoseAreaProduct",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA GEN",26)': {
    tag: '(0011,"SIEMENS RA GEN",26)',
    vr: "SL",
    name: "PtopTotalSkinDose",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA GEN",30)': {
    tag: '(0011,"SIEMENS RA GEN",30)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA GEN",35)': {
    tag: '(0011,"SIEMENS RA GEN",35)',
    vr: "LO",
    name: "PatientInitialPuckCounter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA GEN",40)': {
    tag: '(0011,"SIEMENS RA GEN",40)',
    vr: "SS",
    name: "SPIDataObjectType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",15)': {
    tag: '(0019,"SIEMENS RA GEN",15)',
    vr: "LO",
    name: "AcquiredPlane",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",1f)': {
    tag: '(0019,"SIEMENS RA GEN",1f)',
    vr: "SS",
    name: "DefaultTableIsoCenterHeight",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",20)': {
    tag: '(0019,"SIEMENS RA GEN",20)',
    vr: "SL",
    name: "SceneFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",22)': {
    tag: '(0019,"SIEMENS RA GEN",22)',
    vr: "SL",
    name: "RefPhotofileFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",24)': {
    tag: '(0019,"SIEMENS RA GEN",24)',
    vr: "LO",
    name: "SceneName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",26)': {
    tag: '(0019,"SIEMENS RA GEN",26)',
    vr: "SS",
    name: "AcquisitionIndex",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",28)': {
    tag: '(0019,"SIEMENS RA GEN",28)',
    vr: "SS",
    name: "MixedPulseMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",2a)': {
    tag: '(0019,"SIEMENS RA GEN",2a)',
    vr: "SS",
    name: "NoOfPositions",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",2c)': {
    tag: '(0019,"SIEMENS RA GEN",2c)',
    vr: "SS",
    name: "NoOfPhases",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",2e)': {
    tag: '(0019,"SIEMENS RA GEN",2e)',
    vr: "SS",
    name: "FrameRateForPositions",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",30)': {
    tag: '(0019,"SIEMENS RA GEN",30)',
    vr: "SS",
    name: "NoOfFramesForPositions",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",32)': {
    tag: '(0019,"SIEMENS RA GEN",32)',
    vr: "SS",
    name: "SteppingDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",34)': {
    tag: '(0019,"SIEMENS RA GEN",34)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",36)': {
    tag: '(0019,"SIEMENS RA GEN",36)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",38)': {
    tag: '(0019,"SIEMENS RA GEN",38)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",3a)': {
    tag: '(0019,"SIEMENS RA GEN",3a)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",3c)': {
    tag: '(0019,"SIEMENS RA GEN",3c)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",3e)': {
    tag: '(0019,"SIEMENS RA GEN",3e)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",40)': {
    tag: '(0019,"SIEMENS RA GEN",40)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",42)': {
    tag: '(0019,"SIEMENS RA GEN",42)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",44)': {
    tag: '(0019,"SIEMENS RA GEN",44)',
    vr: "SS",
    name: "ImageTransferDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",46)': {
    tag: '(0019,"SIEMENS RA GEN",46)',
    vr: "SL",
    name: "InversFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",48)': {
    tag: '(0019,"SIEMENS RA GEN",48)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",4a)': {
    tag: '(0019,"SIEMENS RA GEN",4a)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",4c)': {
    tag: '(0019,"SIEMENS RA GEN",4c)',
    vr: "SS",
    name: "BlankingCircleDiameter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",50)': {
    tag: '(0019,"SIEMENS RA GEN",50)',
    vr: "SL",
    name: "StandDataValid",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",52)': {
    tag: '(0019,"SIEMENS RA GEN",52)',
    vr: "SS",
    name: "TableTilt",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",54)': {
    tag: '(0019,"SIEMENS RA GEN",54)',
    vr: "SS",
    name: "TableAxisRotation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",56)': {
    tag: '(0019,"SIEMENS RA GEN",56)',
    vr: "SS",
    name: "TableLongitudalPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",58)': {
    tag: '(0019,"SIEMENS RA GEN",58)',
    vr: "SS",
    name: "TableSideOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",5a)': {
    tag: '(0019,"SIEMENS RA GEN",5a)',
    vr: "SS",
    name: "TableIsoCenterHeight",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",5c)': {
    tag: '(0019,"SIEMENS RA GEN",5c)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",5e)': {
    tag: '(0019,"SIEMENS RA GEN",5e)',
    vr: "SL",
    name: "CollimationDataValid",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",60)': {
    tag: '(0019,"SIEMENS RA GEN",60)',
    vr: "SL",
    name: "PeriSequenceNo",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",62)': {
    tag: '(0019,"SIEMENS RA GEN",62)',
    vr: "SL",
    name: "PeriTotalScenes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",64)': {
    tag: '(0019,"SIEMENS RA GEN",64)',
    vr: "SL",
    name: "PeriOverlapTop",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",66)': {
    tag: '(0019,"SIEMENS RA GEN",66)',
    vr: "SL",
    name: "PeriOverlapBottom",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",68)': {
    tag: '(0019,"SIEMENS RA GEN",68)',
    vr: "SL",
    name: "RawImageNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",6a)': {
    tag: '(0019,"SIEMENS RA GEN",6a)',
    vr: "SL",
    name: "XRayDataValid",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",70)': {
    tag: '(0019,"SIEMENS RA GEN",70)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",72)': {
    tag: '(0019,"SIEMENS RA GEN",72)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",74)': {
    tag: '(0019,"SIEMENS RA GEN",74)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",76)': {
    tag: '(0019,"SIEMENS RA GEN",76)',
    vr: "SL",
    name: "FillingAverageFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",78)': {
    tag: '(0019,"SIEMENS RA GEN",78)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",7a)': {
    tag: '(0019,"SIEMENS RA GEN",7a)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",7c)': {
    tag: '(0019,"SIEMENS RA GEN",7c)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",7e)': {
    tag: '(0019,"SIEMENS RA GEN",7e)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",80)': {
    tag: '(0019,"SIEMENS RA GEN",80)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",82)': {
    tag: '(0019,"SIEMENS RA GEN",82)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",84)': {
    tag: '(0019,"SIEMENS RA GEN",84)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",86)': {
    tag: '(0019,"SIEMENS RA GEN",86)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",88)': {
    tag: '(0019,"SIEMENS RA GEN",88)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",8a)': {
    tag: '(0019,"SIEMENS RA GEN",8a)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",8c)': {
    tag: '(0019,"SIEMENS RA GEN",8c)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",8e)': {
    tag: '(0019,"SIEMENS RA GEN",8e)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",92)': {
    tag: '(0019,"SIEMENS RA GEN",92)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",94)': {
    tag: '(0019,"SIEMENS RA GEN",94)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",96)': {
    tag: '(0019,"SIEMENS RA GEN",96)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",98)': {
    tag: '(0019,"SIEMENS RA GEN",98)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",9a)': {
    tag: '(0019,"SIEMENS RA GEN",9a)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",9c)': {
    tag: '(0019,"SIEMENS RA GEN",9c)',
    vr: "SL",
    name: "IntensifierLevelCalibrationFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",9e)': {
    tag: '(0019,"SIEMENS RA GEN",9e)',
    vr: "SL",
    name: "NativeReviewFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",a2)': {
    tag: '(0019,"SIEMENS RA GEN",a2)',
    vr: "SL",
    name: "SceneNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",a4)': {
    tag: '(0019,"SIEMENS RA GEN",a4)',
    vr: "SS",
    name: "AcquisitionMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",a5)': {
    tag: '(0019,"SIEMENS RA GEN",a5)',
    vr: "SS",
    name: "AcquisitonFrameRate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",a6)': {
    tag: '(0019,"SIEMENS RA GEN",a6)',
    vr: "SL",
    name: "ECGFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",a7)': {
    tag: '(0019,"SIEMENS RA GEN",a7)',
    vr: "SL",
    name: "AdditionalSceneData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",a8)': {
    tag: '(0019,"SIEMENS RA GEN",a8)',
    vr: "SL",
    name: "FileCopyFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",a9)': {
    tag: '(0019,"SIEMENS RA GEN",a9)',
    vr: "SL",
    name: "PhlebovisionFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",aa)': {
    tag: '(0019,"SIEMENS RA GEN",aa)',
    vr: "SL",
    name: "Co2Flag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",ab)': {
    tag: '(0019,"SIEMENS RA GEN",ab)',
    vr: "SS",
    name: "MaxSpeed",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",ac)': {
    tag: '(0019,"SIEMENS RA GEN",ac)',
    vr: "SS",
    name: "StepWidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",ad)': {
    tag: '(0019,"SIEMENS RA GEN",ad)',
    vr: "SL",
    name: "DigitalAcquisitionZoom",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA GEN",ff)': {
    tag: '(0019,"SIEMENS RA GEN",ff)',
    vr: "SS",
    name: "Internal",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS RA GEN",15)': {
    tag: '(0021,"SIEMENS RA GEN",15)',
    vr: "SS",
    name: "ImagesInStudy",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS RA GEN",20)': {
    tag: '(0021,"SIEMENS RA GEN",20)',
    vr: "SS",
    name: "ScenesInStudy",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS RA GEN",25)': {
    tag: '(0021,"SIEMENS RA GEN",25)',
    vr: "SS",
    name: "ImagesInPhotofile",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS RA GEN",27)': {
    tag: '(0021,"SIEMENS RA GEN",27)',
    vr: "SS",
    name: "PlaneBImagesExist",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS RA GEN",28)': {
    tag: '(0021,"SIEMENS RA GEN",28)',
    vr: "SS",
    name: "NoOf2MBChunks",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS RA GEN",30)': {
    tag: '(0021,"SIEMENS RA GEN",30)',
    vr: "SS",
    name: "ImagesInAllScenes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS RA GEN",40)': {
    tag: '(0021,"SIEMENS RA GEN",40)',
    vr: "SS",
    name: "ArchiveSWInternalVersion",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA PLANE A",28)': {
    tag: '(0011,"SIEMENS RA PLANE A",28)',
    vr: "SL",
    name: "FluoroTimerA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA PLANE A",29)': {
    tag: '(0011,"SIEMENS RA PLANE A",29)',
    vr: "SL",
    name: "FluoroSkinDoseA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA PLANE A",2a)': {
    tag: '(0011,"SIEMENS RA PLANE A",2a)',
    vr: "SL",
    name: "TotalSkinDoseA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA PLANE A",2b)': {
    tag: '(0011,"SIEMENS RA PLANE A",2b)',
    vr: "SL",
    name: "FluoroDoseAreaProductA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA PLANE A",2c)': {
    tag: '(0011,"SIEMENS RA PLANE A",2c)',
    vr: "SL",
    name: "TotalDoseAreaProductA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",15)': {
    tag: '(0019,"SIEMENS RA PLANE A",15)',
    vr: "LT",
    name: "OfflineUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",18)': {
    tag: '(0019,"SIEMENS RA PLANE A",18)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",19)': {
    tag: '(0019,"SIEMENS RA PLANE A",19)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",1a)': {
    tag: '(0019,"SIEMENS RA PLANE A",1a)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",1b)': {
    tag: '(0019,"SIEMENS RA PLANE A",1b)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",1c)': {
    tag: '(0019,"SIEMENS RA PLANE A",1c)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",1d)': {
    tag: '(0019,"SIEMENS RA PLANE A",1d)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",1e)': {
    tag: '(0019,"SIEMENS RA PLANE A",1e)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",1f)': {
    tag: '(0019,"SIEMENS RA PLANE A",1f)',
    vr: "SS",
    name: "Internal",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",20)': {
    tag: '(0019,"SIEMENS RA PLANE A",20)',
    vr: "SS",
    name: "SystemCalibFactorPlaneA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",22)': {
    tag: '(0019,"SIEMENS RA PLANE A",22)',
    vr: "SS",
    name: "XRayParameterSetNo",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",24)': {
    tag: '(0019,"SIEMENS RA PLANE A",24)',
    vr: "SS",
    name: "XRaySystem",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",26)': {
    tag: '(0019,"SIEMENS RA PLANE A",26)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",28)': {
    tag: '(0019,"SIEMENS RA PLANE A",28)',
    vr: "SS",
    name: "AcquiredDisplayMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",2a)': {
    tag: '(0019,"SIEMENS RA PLANE A",2a)',
    vr: "SS",
    name: "AcquisitionDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",2c)': {
    tag: '(0019,"SIEMENS RA PLANE A",2c)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",2e)': {
    tag: '(0019,"SIEMENS RA PLANE A",2e)',
    vr: "SS",
    name: "MaxFramesLimit",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",30)': {
    tag: '(0019,"SIEMENS RA PLANE A",30)',
    vr: "US",
    name: "MaximumFrameSizeNIU",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",32)': {
    tag: '(0019,"SIEMENS RA PLANE A",32)',
    vr: "SS",
    name: "SubtractedFilterType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",34)': {
    tag: '(0019,"SIEMENS RA PLANE A",34)',
    vr: "SS",
    name: "FilterFactorNative",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",36)': {
    tag: '(0019,"SIEMENS RA PLANE A",36)',
    vr: "SS",
    name: "AnatomicBackgroundFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",38)': {
    tag: '(0019,"SIEMENS RA PLANE A",38)',
    vr: "SS",
    name: "WindowUpperLimitNative",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",3a)': {
    tag: '(0019,"SIEMENS RA PLANE A",3a)',
    vr: "SS",
    name: "WindowLowerLimitNative",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",3c)': {
    tag: '(0019,"SIEMENS RA PLANE A",3c)',
    vr: "SS",
    name: "WindowBrightnessPhase1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",3e)': {
    tag: '(0019,"SIEMENS RA PLANE A",3e)',
    vr: "SS",
    name: "WindowBrightnessPhase2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",40)': {
    tag: '(0019,"SIEMENS RA PLANE A",40)',
    vr: "SS",
    name: "WindowContrastPhase1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",42)': {
    tag: '(0019,"SIEMENS RA PLANE A",42)',
    vr: "SS",
    name: "WindowContrastPhase2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",44)': {
    tag: '(0019,"SIEMENS RA PLANE A",44)',
    vr: "SS",
    name: "FilterFactorSub",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",46)': {
    tag: '(0019,"SIEMENS RA PLANE A",46)',
    vr: "SS",
    name: "PeakOpacified",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",48)': {
    tag: '(0019,"SIEMENS RA PLANE A",48)',
    vr: "SL",
    name: "MaskFrame",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",4a)': {
    tag: '(0019,"SIEMENS RA PLANE A",4a)',
    vr: "SL",
    name: "BIHFrame",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",4c)': {
    tag: '(0019,"SIEMENS RA PLANE A",4c)',
    vr: "SS",
    name: "CentBeamAngulationCaudCran",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",4e)': {
    tag: '(0019,"SIEMENS RA PLANE A",4e)',
    vr: "SS",
    name: "CentBeamAngulationLRAnterior",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",50)': {
    tag: '(0019,"SIEMENS RA PLANE A",50)',
    vr: "SS",
    name: "LongitudinalPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",52)': {
    tag: '(0019,"SIEMENS RA PLANE A",52)',
    vr: "SS",
    name: "SideOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",54)': {
    tag: '(0019,"SIEMENS RA PLANE A",54)',
    vr: "SS",
    name: "IsoCenterHeight",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",56)': {
    tag: '(0019,"SIEMENS RA PLANE A",56)',
    vr: "SS",
    name: "ImageTwist",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",58)': {
    tag: '(0019,"SIEMENS RA PLANE A",58)',
    vr: "SS",
    name: "SourceImageDistance",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",5a)': {
    tag: '(0019,"SIEMENS RA PLANE A",5a)',
    vr: "SS",
    name: "MechanicalMagnificationFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",5c)': {
    tag: '(0019,"SIEMENS RA PLANE A",5c)',
    vr: "SL",
    name: "CalibrationFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",5e)': {
    tag: '(0019,"SIEMENS RA PLANE A",5e)',
    vr: "SL",
    name: "CalibrationAngleCranCaud",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",60)': {
    tag: '(0019,"SIEMENS RA PLANE A",60)',
    vr: "SL",
    name: "CalibrationAngleRAOLAO",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",62)': {
    tag: '(0019,"SIEMENS RA PLANE A",62)',
    vr: "SL",
    name: "CalibrationTableToFloorDist",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",64)': {
    tag: '(0019,"SIEMENS RA PLANE A",64)',
    vr: "SL",
    name: "CalibrationIsocenterToFloorDist",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",66)': {
    tag: '(0019,"SIEMENS RA PLANE A",66)',
    vr: "SL",
    name: "CalibrationIsocenterToSourceDist",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",68)': {
    tag: '(0019,"SIEMENS RA PLANE A",68)',
    vr: "SL",
    name: "CalibrationSourceToII",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",6a)': {
    tag: '(0019,"SIEMENS RA PLANE A",6a)',
    vr: "SL",
    name: "CalibrationIIZoom",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",6c)': {
    tag: '(0019,"SIEMENS RA PLANE A",6c)',
    vr: "SL",
    name: "CalibrationIIField",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",6e)': {
    tag: '(0019,"SIEMENS RA PLANE A",6e)',
    vr: "SL",
    name: "CalibrationFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",70)': {
    tag: '(0019,"SIEMENS RA PLANE A",70)',
    vr: "SL",
    name: "CalibrationObjectToImageDistance",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",72)': {
    tag: '(0019,"SIEMENS RA PLANE A",72)',
    vr: "SL",
    name: "CalibrationSystemFactor",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",74)': {
    tag: '(0019,"SIEMENS RA PLANE A",74)',
    vr: "SL",
    name: "CalibrationSystemCorrection",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",76)': {
    tag: '(0019,"SIEMENS RA PLANE A",76)',
    vr: "SL",
    name: "CalibrationSystemIIFormats",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",78)': {
    tag: '(0019,"SIEMENS RA PLANE A",78)',
    vr: "SL",
    name: "CalibrationGantryDataValid",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",7a)': {
    tag: '(0019,"SIEMENS RA PLANE A",7a)',
    vr: "SS",
    name: "CollimatorSquareBreadth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",7c)': {
    tag: '(0019,"SIEMENS RA PLANE A",7c)',
    vr: "SS",
    name: "CollimatorSquareHeight",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",7e)': {
    tag: '(0019,"SIEMENS RA PLANE A",7e)',
    vr: "SS",
    name: "CollimatorSquareDiameter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",80)': {
    tag: '(0019,"SIEMENS RA PLANE A",80)',
    vr: "SS",
    name: "CollimaterFingerTurnAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",82)': {
    tag: '(0019,"SIEMENS RA PLANE A",82)',
    vr: "SS",
    name: "CollimaterFingerPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",84)': {
    tag: '(0019,"SIEMENS RA PLANE A",84)',
    vr: "SS",
    name: "CollimaterDiaphragmTurnAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",86)': {
    tag: '(0019,"SIEMENS RA PLANE A",86)',
    vr: "SS",
    name: "CollimaterDiaphragmPosition1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",88)': {
    tag: '(0019,"SIEMENS RA PLANE A",88)',
    vr: "SS",
    name: "CollimaterDiaphragmPosition2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",8a)': {
    tag: '(0019,"SIEMENS RA PLANE A",8a)',
    vr: "SS",
    name: "CollimaterDiaphragmMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",8c)': {
    tag: '(0019,"SIEMENS RA PLANE A",8c)',
    vr: "SS",
    name: "CollimaterBeamLimitBreadth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",8e)': {
    tag: '(0019,"SIEMENS RA PLANE A",8e)',
    vr: "SS",
    name: "CollimaterBeamLimitHeight",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",90)': {
    tag: '(0019,"SIEMENS RA PLANE A",90)',
    vr: "SS",
    name: "CollimaterBeamLimitDiameter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",92)': {
    tag: '(0019,"SIEMENS RA PLANE A",92)',
    vr: "SS",
    name: "X-RayControlMOde",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",94)': {
    tag: '(0019,"SIEMENS RA PLANE A",94)',
    vr: "SS",
    name: "X-RaySystem",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",96)': {
    tag: '(0019,"SIEMENS RA PLANE A",96)',
    vr: "SS",
    name: "FocalSpot",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",98)': {
    tag: '(0019,"SIEMENS RA PLANE A",98)',
    vr: "SS",
    name: "ExposureControl",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",9a)': {
    tag: '(0019,"SIEMENS RA PLANE A",9a)',
    vr: "SL",
    name: "XRayVoltage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",9c)': {
    tag: '(0019,"SIEMENS RA PLANE A",9c)',
    vr: "SL",
    name: "XRayCurrent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",9e)': {
    tag: '(0019,"SIEMENS RA PLANE A",9e)',
    vr: "SL",
    name: "XRayCurrentTimeProduct",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",a0)': {
    tag: '(0019,"SIEMENS RA PLANE A",a0)',
    vr: "SL",
    name: "XRayPulseTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",a2)': {
    tag: '(0019,"SIEMENS RA PLANE A",a2)',
    vr: "SL",
    name: "XRaySceneTimeFluoroClock",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",a4)': {
    tag: '(0019,"SIEMENS RA PLANE A",a4)',
    vr: "SS",
    name: "MaximumPulseRate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",a6)': {
    tag: '(0019,"SIEMENS RA PLANE A",a6)',
    vr: "SS",
    name: "PulsesPerScene",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",a8)': {
    tag: '(0019,"SIEMENS RA PLANE A",a8)',
    vr: "SL",
    name: "DoseAreaProductOfScene",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",aa)': {
    tag: '(0019,"SIEMENS RA PLANE A",aa)',
    vr: "SS",
    name: "Dose",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",ac)': {
    tag: '(0019,"SIEMENS RA PLANE A",ac)',
    vr: "SS",
    name: "DoseRate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",ae)': {
    tag: '(0019,"SIEMENS RA PLANE A",ae)',
    vr: "SL",
    name: "IIToCoverDistance",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",b0)': {
    tag: '(0019,"SIEMENS RA PLANE A",b0)',
    vr: "SS",
    name: "LastFramePhase1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",b1)': {
    tag: '(0019,"SIEMENS RA PLANE A",b1)',
    vr: "SS",
    name: "FrameRatePhase1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",b2)': {
    tag: '(0019,"SIEMENS RA PLANE A",b2)',
    vr: "SS",
    name: "LastFramePhase2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",b3)': {
    tag: '(0019,"SIEMENS RA PLANE A",b3)',
    vr: "SS",
    name: "FrameRatePhase2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",b4)': {
    tag: '(0019,"SIEMENS RA PLANE A",b4)',
    vr: "SS",
    name: "LastFramePhase3",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",b5)': {
    tag: '(0019,"SIEMENS RA PLANE A",b5)',
    vr: "SS",
    name: "FrameRatePhase3",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",b6)': {
    tag: '(0019,"SIEMENS RA PLANE A",b6)',
    vr: "SS",
    name: "LastFramePhase4",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",b7)': {
    tag: '(0019,"SIEMENS RA PLANE A",b7)',
    vr: "SS",
    name: "FrameRatePhase4",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",b8)': {
    tag: '(0019,"SIEMENS RA PLANE A",b8)',
    vr: "SS",
    name: "GammaOfNativeImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",b9)': {
    tag: '(0019,"SIEMENS RA PLANE A",b9)',
    vr: "SS",
    name: "GammaOfTVSystem",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",bb)': {
    tag: '(0019,"SIEMENS RA PLANE A",bb)',
    vr: "SL",
    name: "PixelshiftX",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",bc)': {
    tag: '(0019,"SIEMENS RA PLANE A",bc)',
    vr: "SL",
    name: "PixelshiftY",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",bd)': {
    tag: '(0019,"SIEMENS RA PLANE A",bd)',
    vr: "SL",
    name: "MaskAverageFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",be)': {
    tag: '(0019,"SIEMENS RA PLANE A",be)',
    vr: "SL",
    name: "BlankingCircleFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",bf)': {
    tag: '(0019,"SIEMENS RA PLANE A",bf)',
    vr: "SL",
    name: "CircleRowStart",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",c0)': {
    tag: '(0019,"SIEMENS RA PLANE A",c0)',
    vr: "SL",
    name: "CircleRowEnd",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",c1)': {
    tag: '(0019,"SIEMENS RA PLANE A",c1)',
    vr: "SL",
    name: "CircleColumnStart",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",c2)': {
    tag: '(0019,"SIEMENS RA PLANE A",c2)',
    vr: "SL",
    name: "CircleColumnEnd",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",c3)': {
    tag: '(0019,"SIEMENS RA PLANE A",c3)',
    vr: "SL",
    name: "CircleDiameter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",c4)': {
    tag: '(0019,"SIEMENS RA PLANE A",c4)',
    vr: "SL",
    name: "RectangularCollimaterFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",c5)': {
    tag: '(0019,"SIEMENS RA PLANE A",c5)',
    vr: "SL",
    name: "RectangleRowStart",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",c6)': {
    tag: '(0019,"SIEMENS RA PLANE A",c6)',
    vr: "SL",
    name: "RectangleRowEnd",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",c7)': {
    tag: '(0019,"SIEMENS RA PLANE A",c7)',
    vr: "SL",
    name: "RectangleColumnStart",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",c8)': {
    tag: '(0019,"SIEMENS RA PLANE A",c8)',
    vr: "SL",
    name: "RectangleColumnEnd",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",c9)': {
    tag: '(0019,"SIEMENS RA PLANE A",c9)',
    vr: "SL",
    name: "RectangleAngulation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",ca)': {
    tag: '(0019,"SIEMENS RA PLANE A",ca)',
    vr: "SL",
    name: "IrisCollimatorFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",cb)': {
    tag: '(0019,"SIEMENS RA PLANE A",cb)',
    vr: "SL",
    name: "IrisRowStart",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",cc)': {
    tag: '(0019,"SIEMENS RA PLANE A",cc)',
    vr: "SL",
    name: "IrisRowEnd",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",cd)': {
    tag: '(0019,"SIEMENS RA PLANE A",cd)',
    vr: "SL",
    name: "IrisColumnStart",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",ce)': {
    tag: '(0019,"SIEMENS RA PLANE A",ce)',
    vr: "SL",
    name: "IrisColumnEnd",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",cf)': {
    tag: '(0019,"SIEMENS RA PLANE A",cf)',
    vr: "SL",
    name: "IrisAngulation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",d1)': {
    tag: '(0019,"SIEMENS RA PLANE A",d1)',
    vr: "SS",
    name: "NumberOfFramesPlane",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",d2)': {
    tag: '(0019,"SIEMENS RA PLANE A",d2)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",d3)': {
    tag: '(0019,"SIEMENS RA PLANE A",d3)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",d4)': {
    tag: '(0019,"SIEMENS RA PLANE A",d4)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",d5)': {
    tag: '(0019,"SIEMENS RA PLANE A",d5)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",d6)': {
    tag: '(0019,"SIEMENS RA PLANE A",d6)',
    vr: "SS",
    name: "Internal",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",d7)': {
    tag: '(0019,"SIEMENS RA PLANE A",d7)',
    vr: "SS",
    name: "Internal",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",d8)': {
    tag: '(0019,"SIEMENS RA PLANE A",d8)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",d9)': {
    tag: '(0019,"SIEMENS RA PLANE A",d9)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",da)': {
    tag: '(0019,"SIEMENS RA PLANE A",da)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",db)': {
    tag: '(0019,"SIEMENS RA PLANE A",db)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",dc)': {
    tag: '(0019,"SIEMENS RA PLANE A",dc)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",dd)': {
    tag: '(0019,"SIEMENS RA PLANE A",dd)',
    vr: "SL",
    name: "AnatomicBackground",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",de)': {
    tag: '(0019,"SIEMENS RA PLANE A",de)',
    vr: "SL",
    name: "AutoWindowBase",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",df)': {
    tag: '(0019,"SIEMENS RA PLANE A",df)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE A",e0)': {
    tag: '(0019,"SIEMENS RA PLANE A",e0)',
    vr: "SL",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA PLANE B",28)': {
    tag: '(0011,"SIEMENS RA PLANE B",28)',
    vr: "SL",
    name: "FluoroTimerB",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA PLANE B",29)': {
    tag: '(0011,"SIEMENS RA PLANE B",29)',
    vr: "SL",
    name: "FluoroSkinDoseB",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA PLANE B",2a)': {
    tag: '(0011,"SIEMENS RA PLANE B",2a)',
    vr: "SL",
    name: "TotalSkinDoseB",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA PLANE B",2b)': {
    tag: '(0011,"SIEMENS RA PLANE B",2b)',
    vr: "SL",
    name: "FluoroDoseAreaProductB",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RA PLANE B",2c)': {
    tag: '(0011,"SIEMENS RA PLANE B",2c)',
    vr: "SL",
    name: "TotalDoseAreaProductB",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",18)': {
    tag: '(0019,"SIEMENS RA PLANE B",18)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",19)': {
    tag: '(0019,"SIEMENS RA PLANE B",19)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",1a)': {
    tag: '(0019,"SIEMENS RA PLANE B",1a)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",1b)': {
    tag: '(0019,"SIEMENS RA PLANE B",1b)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",1c)': {
    tag: '(0019,"SIEMENS RA PLANE B",1c)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",1d)': {
    tag: '(0019,"SIEMENS RA PLANE B",1d)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",1e)': {
    tag: '(0019,"SIEMENS RA PLANE B",1e)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",1f)': {
    tag: '(0019,"SIEMENS RA PLANE B",1f)',
    vr: "SS",
    name: "Internal",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",20)': {
    tag: '(0019,"SIEMENS RA PLANE B",20)',
    vr: "SL",
    name: "SystemCalibFactorPlaneB",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",22)': {
    tag: '(0019,"SIEMENS RA PLANE B",22)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",24)': {
    tag: '(0019,"SIEMENS RA PLANE B",24)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",26)': {
    tag: '(0019,"SIEMENS RA PLANE B",26)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",28)': {
    tag: '(0019,"SIEMENS RA PLANE B",28)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",2a)': {
    tag: '(0019,"SIEMENS RA PLANE B",2a)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",2c)': {
    tag: '(0019,"SIEMENS RA PLANE B",2c)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",2e)': {
    tag: '(0019,"SIEMENS RA PLANE B",2e)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",30)': {
    tag: '(0019,"SIEMENS RA PLANE B",30)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",32)': {
    tag: '(0019,"SIEMENS RA PLANE B",32)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",34)': {
    tag: '(0019,"SIEMENS RA PLANE B",34)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",36)': {
    tag: '(0019,"SIEMENS RA PLANE B",36)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",38)': {
    tag: '(0019,"SIEMENS RA PLANE B",38)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",3a)': {
    tag: '(0019,"SIEMENS RA PLANE B",3a)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",3c)': {
    tag: '(0019,"SIEMENS RA PLANE B",3c)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",3e)': {
    tag: '(0019,"SIEMENS RA PLANE B",3e)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",40)': {
    tag: '(0019,"SIEMENS RA PLANE B",40)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",42)': {
    tag: '(0019,"SIEMENS RA PLANE B",42)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",44)': {
    tag: '(0019,"SIEMENS RA PLANE B",44)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",46)': {
    tag: '(0019,"SIEMENS RA PLANE B",46)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",48)': {
    tag: '(0019,"SIEMENS RA PLANE B",48)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",4a)': {
    tag: '(0019,"SIEMENS RA PLANE B",4a)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",4c)': {
    tag: '(0019,"SIEMENS RA PLANE B",4c)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",4e)': {
    tag: '(0019,"SIEMENS RA PLANE B",4e)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",50)': {
    tag: '(0019,"SIEMENS RA PLANE B",50)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",52)': {
    tag: '(0019,"SIEMENS RA PLANE B",52)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",54)': {
    tag: '(0019,"SIEMENS RA PLANE B",54)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",56)': {
    tag: '(0019,"SIEMENS RA PLANE B",56)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",58)': {
    tag: '(0019,"SIEMENS RA PLANE B",58)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",5a)': {
    tag: '(0019,"SIEMENS RA PLANE B",5a)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",5c)': {
    tag: '(0019,"SIEMENS RA PLANE B",5c)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",5e)': {
    tag: '(0019,"SIEMENS RA PLANE B",5e)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",60)': {
    tag: '(0019,"SIEMENS RA PLANE B",60)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",62)': {
    tag: '(0019,"SIEMENS RA PLANE B",62)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",64)': {
    tag: '(0019,"SIEMENS RA PLANE B",64)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",66)': {
    tag: '(0019,"SIEMENS RA PLANE B",66)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",68)': {
    tag: '(0019,"SIEMENS RA PLANE B",68)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",6a)': {
    tag: '(0019,"SIEMENS RA PLANE B",6a)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",6c)': {
    tag: '(0019,"SIEMENS RA PLANE B",6c)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",6e)': {
    tag: '(0019,"SIEMENS RA PLANE B",6e)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",70)': {
    tag: '(0019,"SIEMENS RA PLANE B",70)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",72)': {
    tag: '(0019,"SIEMENS RA PLANE B",72)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",74)': {
    tag: '(0019,"SIEMENS RA PLANE B",74)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",76)': {
    tag: '(0019,"SIEMENS RA PLANE B",76)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",78)': {
    tag: '(0019,"SIEMENS RA PLANE B",78)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",7a)': {
    tag: '(0019,"SIEMENS RA PLANE B",7a)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",7c)': {
    tag: '(0019,"SIEMENS RA PLANE B",7c)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",7e)': {
    tag: '(0019,"SIEMENS RA PLANE B",7e)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",80)': {
    tag: '(0019,"SIEMENS RA PLANE B",80)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",82)': {
    tag: '(0019,"SIEMENS RA PLANE B",82)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",84)': {
    tag: '(0019,"SIEMENS RA PLANE B",84)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",86)': {
    tag: '(0019,"SIEMENS RA PLANE B",86)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",88)': {
    tag: '(0019,"SIEMENS RA PLANE B",88)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",8a)': {
    tag: '(0019,"SIEMENS RA PLANE B",8a)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",8c)': {
    tag: '(0019,"SIEMENS RA PLANE B",8c)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",8e)': {
    tag: '(0019,"SIEMENS RA PLANE B",8e)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",90)': {
    tag: '(0019,"SIEMENS RA PLANE B",90)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",92)': {
    tag: '(0019,"SIEMENS RA PLANE B",92)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",94)': {
    tag: '(0019,"SIEMENS RA PLANE B",94)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",96)': {
    tag: '(0019,"SIEMENS RA PLANE B",96)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",98)': {
    tag: '(0019,"SIEMENS RA PLANE B",98)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",9a)': {
    tag: '(0019,"SIEMENS RA PLANE B",9a)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",9c)': {
    tag: '(0019,"SIEMENS RA PLANE B",9c)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",9e)': {
    tag: '(0019,"SIEMENS RA PLANE B",9e)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",a0)': {
    tag: '(0019,"SIEMENS RA PLANE B",a0)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",a2)': {
    tag: '(0019,"SIEMENS RA PLANE B",a2)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",a4)': {
    tag: '(0019,"SIEMENS RA PLANE B",a4)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",a6)': {
    tag: '(0019,"SIEMENS RA PLANE B",a6)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",a8)': {
    tag: '(0019,"SIEMENS RA PLANE B",a8)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",aa)': {
    tag: '(0019,"SIEMENS RA PLANE B",aa)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS RA PLANE B",ac)': {
    tag: '(0019,"SIEMENS RA PLANE B",ac)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RIS",10)': {
    tag: '(0011,"SIEMENS RIS",10)',
    vr: "LT",
    name: "PatientUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RIS",11)': {
    tag: '(0011,"SIEMENS RIS",11)',
    vr: "LT",
    name: "PatientID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RIS",20)': {
    tag: '(0011,"SIEMENS RIS",20)',
    vr: "DA",
    name: "PatientRegistrationDate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RIS",21)': {
    tag: '(0011,"SIEMENS RIS",21)',
    vr: "TM",
    name: "PatientRegistrationTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RIS",30)': {
    tag: '(0011,"SIEMENS RIS",30)',
    vr: "LT",
    name: "PatientnameRIS",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RIS",31)': {
    tag: '(0011,"SIEMENS RIS",31)',
    vr: "LT",
    name: "PatientprenameRIS",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RIS",40)': {
    tag: '(0011,"SIEMENS RIS",40)',
    vr: "LT",
    name: "PatientHospitalStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RIS",41)': {
    tag: '(0011,"SIEMENS RIS",41)',
    vr: "LT",
    name: "MedicalAlerts",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SIEMENS RIS",42)': {
    tag: '(0011,"SIEMENS RIS",42)',
    vr: "LT",
    name: "ContrastAllergies",
    vm: "1",
    version: "PrivateTag"
  },
  '(0031,"SIEMENS RIS",10)': {
    tag: '(0031,"SIEMENS RIS",10)',
    vr: "LT",
    name: "RequestUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0031,"SIEMENS RIS",45)': {
    tag: '(0031,"SIEMENS RIS",45)',
    vr: "LT",
    name: "RequestingPhysician",
    vm: "1",
    version: "PrivateTag"
  },
  '(0031,"SIEMENS RIS",50)': {
    tag: '(0031,"SIEMENS RIS",50)',
    vr: "LT",
    name: "RequestedPhysician",
    vm: "1",
    version: "PrivateTag"
  },
  '(0033,"SIEMENS RIS",10)': {
    tag: '(0033,"SIEMENS RIS",10)',
    vr: "LT",
    name: "PatientStudyUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",00)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",00)',
    vr: "US",
    name: "AcquisitionType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",01)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",01)',
    vr: "US",
    name: "AcquisitionMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",02)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",02)',
    vr: "US",
    name: "FootswitchIndex",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",03)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",03)',
    vr: "US",
    name: "AcquisitionRoom",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",04)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",04)',
    vr: "SL",
    name: "CurrentTimeProduct",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",05)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",05)',
    vr: "SL",
    name: "Dose",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",06)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",06)',
    vr: "SL",
    name: "SkinDosePercent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",07)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",07)',
    vr: "SL",
    name: "SkinDoseAccumulation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",08)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",08)',
    vr: "SL",
    name: "SkinDoseRate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",0A)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",0A)',
    vr: "UL",
    name: "CopperFilter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",0B)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",0B)',
    vr: "US",
    name: "MeasuringField",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",0C)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",0C)',
    vr: "SS",
    name: "PostBlankingCircle",
    vm: "3",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",0D)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",0D)',
    vr: "SS",
    name: "DynaAngles",
    vm: "2-2n",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",0E)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",0E)',
    vr: "SS",
    name: "TotalSteps",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",0F)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",0F)',
    vr: "SL",
    name: "DynaXRayInfo",
    vm: "3-3n",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",10)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",10)',
    vr: "US",
    name: "ModalityLUTInputGamma",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",11)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",11)',
    vr: "US",
    name: "ModalityLUTOutputGamma",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",12)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",12)',
    vr: "OB",
    name: "SH_STPAR",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",13)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",13)',
    vr: "US",
    name: "AcquisitionZoom",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",14)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",14)',
    vr: "SS",
    name: "DynaAngulationStepWidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",15)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",15)',
    vr: "US",
    name: "Harmonization",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",16)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",16)',
    vr: "US",
    name: "DRSingleFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",17)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",17)',
    vr: "SL",
    name: "SourceToIsocenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",18)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",18)',
    vr: "US",
    name: "PressureData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",19)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",19)',
    vr: "SL",
    name: "ECGIndexArray",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",1A)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",1A)',
    vr: "US",
    name: "FDFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",1B)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",1B)',
    vr: "OB",
    name: "SH_ZOOM",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",1C)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",1C)',
    vr: "OB",
    name: "SH_COLPAR",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",1D)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",1D)',
    vr: "US",
    name: "K_Factor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",1E)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",1E)',
    vr: "US",
    name: "EVE",
    vm: "8",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",1F)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",1F)',
    vr: "SL",
    name: "TotalSceneTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",20)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",20)',
    vr: "US",
    name: "RestoreFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",21)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",21)',
    vr: "US",
    name: "StandMovementFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",22)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",22)',
    vr: "US",
    name: "FDRows",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",23)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",23)',
    vr: "US",
    name: "FDColumns",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",24)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",24)',
    vr: "US",
    name: "TableMovementFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",25)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",25)',
    vr: "LO",
    name: "OriginalOrganProgramName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SIEMENS SMS-AX  ACQ 1.0",26)': {
    tag: '(0021,"SIEMENS SMS-AX  ACQ 1.0",26)',
    vr: "DS",
    name: "CrispyXPIFilter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",00)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",00)',
    vr: "US",
    name: "ViewNative",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",01)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",01)',
    vr: "US",
    name: "OriginalSeriesNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",02)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",02)',
    vr: "US",
    name: "OriginalImageNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",03)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",03)',
    vr: "US",
    name: "WinCenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",04)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",04)',
    vr: "US",
    name: "WinWidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",05)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",05)',
    vr: "US",
    name: "WinBrightness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",06)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",06)',
    vr: "US",
    name: "WinContrast",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",07)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",07)',
    vr: "US",
    name: "OriginalFrameNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",08)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",08)',
    vr: "US",
    name: "OriginalMaskFrameNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",09)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",09)',
    vr: "US",
    name: "Opac",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0A)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0A)',
    vr: "US",
    name: "OriginalNumberOfFrames",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0B)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0B)',
    vr: "DS",
    name: "OriginalSceneDuration",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0C)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0C)',
    vr: "LO",
    name: "IdentifierLOID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0D)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0D)',
    vr: "SS",
    name: "OriginalSceneVFRInfo",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0E)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0E)',
    vr: "SS",
    name: "OriginalFrameECGPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0F)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",0F)',
    vr: "SS",
    name: "OriginalECG1stFrameOffset_retired",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",10)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",10)',
    vr: "SS",
    name: "ZoomFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",11)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",11)',
    vr: "US",
    name: "Flex",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",12)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",12)',
    vr: "US",
    name: "NumberOfMaskFrames",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",13)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",13)',
    vr: "US",
    name: "NumberOfFillFrames",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",14)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",14)',
    vr: "US",
    name: "SeriesNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",15)': {
    tag: '(0025,"SIEMENS SMS-AX  ORIGINAL IMAGE INFO 1.0",15)',
    vr: "IS",
    name: "ImageNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SIEMENS SMS-AX  QUANT 1.0",00)': {
    tag: '(0023,"SIEMENS SMS-AX  QUANT 1.0",00)',
    vr: "DS",
    name: "HorizontalCalibrationPixelSize",
    vm: "2",
    version: "PrivateTag"
  },
  '(0023,"SIEMENS SMS-AX  QUANT 1.0",01)': {
    tag: '(0023,"SIEMENS SMS-AX  QUANT 1.0",01)',
    vr: "DS",
    name: "VerticalCalibrationPixelSize",
    vm: "2",
    version: "PrivateTag"
  },
  '(0023,"SIEMENS SMS-AX  QUANT 1.0",02)': {
    tag: '(0023,"SIEMENS SMS-AX  QUANT 1.0",02)',
    vr: "LO",
    name: "CalibrationObject",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SIEMENS SMS-AX  QUANT 1.0",03)': {
    tag: '(0023,"SIEMENS SMS-AX  QUANT 1.0",03)',
    vr: "DS",
    name: "CalibrationObjectSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SIEMENS SMS-AX  QUANT 1.0",04)': {
    tag: '(0023,"SIEMENS SMS-AX  QUANT 1.0",04)',
    vr: "LO",
    name: "CalibrationMethod",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SIEMENS SMS-AX  QUANT 1.0",05)': {
    tag: '(0023,"SIEMENS SMS-AX  QUANT 1.0",05)',
    vr: "ST",
    name: "Filename",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SIEMENS SMS-AX  QUANT 1.0",06)': {
    tag: '(0023,"SIEMENS SMS-AX  QUANT 1.0",06)',
    vr: "IS",
    name: "FrameNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SIEMENS SMS-AX  QUANT 1.0",07)': {
    tag: '(0023,"SIEMENS SMS-AX  QUANT 1.0",07)',
    vr: "IS",
    name: "CalibrationFactorMultiplicity",
    vm: "2",
    version: "PrivateTag"
  },
  '(0023,"SIEMENS SMS-AX  QUANT 1.0",08)': {
    tag: '(0023,"SIEMENS SMS-AX  QUANT 1.0",08)',
    vr: "IS",
    name: "CalibrationTODValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",00)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",00)',
    vr: "US",
    name: "ReviewMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",01)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",01)',
    vr: "US",
    name: "AnatomicalBackgroundPercent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",02)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",02)',
    vr: "US",
    name: "NumberOfPhases",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",03)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",03)',
    vr: "US",
    name: "ApplyAnatomicalBackground",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",04)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",04)',
    vr: "SS",
    name: "PixelShiftArray",
    vm: "4-4n",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",05)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",05)',
    vr: "US",
    name: "Brightness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",06)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",06)',
    vr: "US",
    name: "Contrast",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",07)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",07)',
    vr: "US",
    name: "Enabled",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",08)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",08)',
    vr: "US",
    name: "NativeEdgeEnhancementPercentGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",09)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",09)',
    vr: "SS",
    name: "NativeEdgeEnhancementLUTIndex",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",0A)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",0A)',
    vr: "SS",
    name: "NativeEdgeEnhancementKernelSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",0B)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",0B)',
    vr: "US",
    name: "SubtrEdgeEnhancementPercentGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",0C)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",0C)',
    vr: "SS",
    name: "SubtrEdgeEnhancementLUTIndex",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",0D)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",0D)',
    vr: "SS",
    name: "SubtrEdgeEnhancementKernelSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",0E)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",0E)',
    vr: "US",
    name: "FadePercent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",0F)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",0F)',
    vr: "US",
    name: "FlippedBeforeLateralityApplied",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",10)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",10)',
    vr: "US",
    name: "ApplyFade",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",12)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",12)',
    vr: "US",
    name: "Zoom",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",13)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",13)',
    vr: "SS",
    name: "PanX",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",14)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",14)',
    vr: "SS",
    name: "PanY",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",15)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",15)',
    vr: "SS",
    name: "NativeEdgeEnhancementAdvPercGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",16)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",16)',
    vr: "SS",
    name: "SubtrEdgeEnhancementAdvPercGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",17)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",17)',
    vr: "US",
    name: "InvertFlag",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",1A)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",1A)',
    vr: "OB",
    name: "Quant1KOverlay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",1B)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",1B)',
    vr: "US",
    name: "OriginalResolution",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",1C)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",1C)',
    vr: "DS",
    name: "AutoWindowCenter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SIEMENS SMS-AX  VIEW 1.0",1D)': {
    tag: '(0019,"SIEMENS SMS-AX  VIEW 1.0",1D)',
    vr: "DS",
    name: "AutoWindowWidth",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIENET",01)': {
    tag: '(0009,"SIENET",01)',
    vr: "US",
    name: "SIENETCommandField",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIENET",14)': {
    tag: '(0009,"SIENET",14)',
    vr: "LT",
    name: "ReceiverPLA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIENET",16)': {
    tag: '(0009,"SIENET",16)',
    vr: "US",
    name: "TransferPriority",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SIENET",29)': {
    tag: '(0009,"SIENET",29)',
    vr: "LT",
    name: "ActualUser",
    vm: "1",
    version: "PrivateTag"
  },
  '(0095,"SIENET",01)': {
    tag: '(0095,"SIENET",01)',
    vr: "LT",
    name: "ExaminationFolderID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0095,"SIENET",04)': {
    tag: '(0095,"SIENET",04)',
    vr: "UL",
    name: "FolderReportedStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0095,"SIENET",05)': {
    tag: '(0095,"SIENET",05)',
    vr: "LT",
    name: "FolderReportingRadiologist",
    vm: "1",
    version: "PrivateTag"
  },
  '(0095,"SIENET",07)': {
    tag: '(0095,"SIENET",07)',
    vr: "LT",
    name: "SIENETISAPLA",
    vm: "1",
    version: "PrivateTag"
  },
  '(0099,"SIENET",02)': {
    tag: '(0099,"SIENET",02)',
    vr: "UL",
    name: "DataObjectAttributes",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI RELEASE 1",10)': {
    tag: '(0009,"SPI RELEASE 1",10)',
    vr: "LT",
    name: "Comments",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI RELEASE 1",15)': {
    tag: '(0009,"SPI RELEASE 1",15)',
    vr: "LO",
    name: "SPIImageUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI RELEASE 1",40)': {
    tag: '(0009,"SPI RELEASE 1",40)',
    vr: "US",
    name: "DataObjectType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI RELEASE 1",41)': {
    tag: '(0009,"SPI RELEASE 1",41)',
    vr: "LO",
    name: "DataObjectSubtype",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI RELEASE 1",10)': {
    tag: '(0011,"SPI RELEASE 1",10)',
    vr: "LO",
    name: "Organ",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI RELEASE 1",15)': {
    tag: '(0011,"SPI RELEASE 1",15)',
    vr: "LO",
    name: "AllergyIndication",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI RELEASE 1",20)': {
    tag: '(0011,"SPI RELEASE 1",20)',
    vr: "LO",
    name: "Pregnancy",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI RELEASE 1",60)': {
    tag: '(0029,"SPI RELEASE 1",60)',
    vr: "LT",
    name: "CompressionAlgorithm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI Release 1",10)': {
    tag: '(0009,"SPI Release 1",10)',
    vr: "LT",
    name: "Comments",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI Release 1",15)': {
    tag: '(0009,"SPI Release 1",15)',
    vr: "LO",
    name: "SPIImageUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI Release 1",40)': {
    tag: '(0009,"SPI Release 1",40)',
    vr: "US",
    name: "DataObjectType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI Release 1",41)': {
    tag: '(0009,"SPI Release 1",41)',
    vr: "LO",
    name: "DataObjectSubtype",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI Release 1",10)': {
    tag: '(0011,"SPI Release 1",10)',
    vr: "LO",
    name: "Organ",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI Release 1",15)': {
    tag: '(0011,"SPI Release 1",15)',
    vr: "LO",
    name: "AllergyIndication",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI Release 1",20)': {
    tag: '(0011,"SPI Release 1",20)',
    vr: "LO",
    name: "Pregnancy",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI Release 1",60)': {
    tag: '(0029,"SPI Release 1",60)',
    vr: "LT",
    name: "CompressionAlgorithm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI",10)': {
    tag: '(0009,"SPI",10)',
    vr: "LO",
    name: "Comments",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI",15)': {
    tag: '(0009,"SPI",15)',
    vr: "LO",
    name: "SPIImageUID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI",40)': {
    tag: '(0009,"SPI",40)',
    vr: "US",
    name: "DataObjectType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI",41)': {
    tag: '(0009,"SPI",41)',
    vr: "LT",
    name: "DataObjectSubtype",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI",10)': {
    tag: '(0011,"SPI",10)',
    vr: "LT",
    name: "Organ",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI",15)': {
    tag: '(0011,"SPI",15)',
    vr: "LT",
    name: "AllergyIndication",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI",20)': {
    tag: '(0011,"SPI",20)',
    vr: "LT",
    name: "Pregnancy",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI",60)': {
    tag: '(0029,"SPI",60)',
    vr: "LT",
    name: "CompressionAlgorithm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",00)': {
    tag: '(0009,"SPI-P Release 1",00)',
    vr: "LT",
    name: "DataObjectRecognitionCode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",04)': {
    tag: '(0009,"SPI-P Release 1",04)',
    vr: "LO",
    name: "ImageDataConsistence",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",08)': {
    tag: '(0009,"SPI-P Release 1",08)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",12)': {
    tag: '(0009,"SPI-P Release 1",12)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",15)': {
    tag: '(0009,"SPI-P Release 1",15)',
    vr: "LO",
    name: "UniqueIdentifier",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",16)': {
    tag: '(0009,"SPI-P Release 1",16)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",18)': {
    tag: '(0009,"SPI-P Release 1",18)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",21)': {
    tag: '(0009,"SPI-P Release 1",21)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",31)': {
    tag: '(0009,"SPI-P Release 1",31)',
    vr: "LT",
    name: "PACSUniqueIdentifier",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",34)': {
    tag: '(0009,"SPI-P Release 1",34)',
    vr: "LT",
    name: "ClusterUniqueIdentifier",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",38)': {
    tag: '(0009,"SPI-P Release 1",38)',
    vr: "LT",
    name: "SystemUniqueIdentifier",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",39)': {
    tag: '(0009,"SPI-P Release 1",39)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",51)': {
    tag: '(0009,"SPI-P Release 1",51)',
    vr: "LT",
    name: "StudyUniqueIdentifier",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",61)': {
    tag: '(0009,"SPI-P Release 1",61)',
    vr: "LT",
    name: "SeriesUniqueIdentifier",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",91)': {
    tag: '(0009,"SPI-P Release 1",91)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",f2)': {
    tag: '(0009,"SPI-P Release 1",f2)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",f3)': {
    tag: '(0009,"SPI-P Release 1",f3)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",f4)': {
    tag: '(0009,"SPI-P Release 1",f4)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",f5)': {
    tag: '(0009,"SPI-P Release 1",f5)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1",f7)': {
    tag: '(0009,"SPI-P Release 1",f7)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI-P Release 1",10)': {
    tag: '(0011,"SPI-P Release 1",10)',
    vr: "LT",
    name: "PatientEntryID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI-P Release 1",21)': {
    tag: '(0011,"SPI-P Release 1",21)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI-P Release 1",22)': {
    tag: '(0011,"SPI-P Release 1",22)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI-P Release 1",31)': {
    tag: '(0011,"SPI-P Release 1",31)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI-P Release 1",32)': {
    tag: '(0011,"SPI-P Release 1",32)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",00)': {
    tag: '(0019,"SPI-P Release 1",00)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",01)': {
    tag: '(0019,"SPI-P Release 1",01)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",02)': {
    tag: '(0019,"SPI-P Release 1",02)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",10)': {
    tag: '(0019,"SPI-P Release 1",10)',
    vr: "US",
    name: "MainsFrequency",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",25)': {
    tag: '(0019,"SPI-P Release 1",25)',
    vr: "LT",
    name: "OriginalPixelDataQuality",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",30)': {
    tag: '(0019,"SPI-P Release 1",30)',
    vr: "US",
    name: "ECGTriggering",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",31)': {
    tag: '(0019,"SPI-P Release 1",31)',
    vr: "UN",
    name: "ECG1Offset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",32)': {
    tag: '(0019,"SPI-P Release 1",32)',
    vr: "UN",
    name: "ECG2Offset1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",33)': {
    tag: '(0019,"SPI-P Release 1",33)',
    vr: "UN",
    name: "ECG2Offset2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",50)': {
    tag: '(0019,"SPI-P Release 1",50)',
    vr: "US",
    name: "VideoScanMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",51)': {
    tag: '(0019,"SPI-P Release 1",51)',
    vr: "US",
    name: "VideoLineRate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",60)': {
    tag: '(0019,"SPI-P Release 1",60)',
    vr: "US",
    name: "XrayTechnique",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",61)': {
    tag: '(0019,"SPI-P Release 1",61)',
    vr: "DS",
    name: "ImageIdentifierFromat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",62)': {
    tag: '(0019,"SPI-P Release 1",62)',
    vr: "US",
    name: "IrisDiaphragm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",63)': {
    tag: '(0019,"SPI-P Release 1",63)',
    vr: "CS",
    name: "Filter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",64)': {
    tag: '(0019,"SPI-P Release 1",64)',
    vr: "CS",
    name: "CineParallel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",65)': {
    tag: '(0019,"SPI-P Release 1",65)',
    vr: "CS",
    name: "CineMaster",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",70)': {
    tag: '(0019,"SPI-P Release 1",70)',
    vr: "US",
    name: "ExposureChannel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",71)': {
    tag: '(0019,"SPI-P Release 1",71)',
    vr: "UN",
    name: "ExposureChannelFirstImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",72)': {
    tag: '(0019,"SPI-P Release 1",72)',
    vr: "US",
    name: "ProcessingChannel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",80)': {
    tag: '(0019,"SPI-P Release 1",80)',
    vr: "DS",
    name: "AcquisitionDelay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",81)': {
    tag: '(0019,"SPI-P Release 1",81)',
    vr: "UN",
    name: "RelativeImageTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",90)': {
    tag: '(0019,"SPI-P Release 1",90)',
    vr: "CS",
    name: "VideoWhiteCompression",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",a0)': {
    tag: '(0019,"SPI-P Release 1",a0)',
    vr: "US",
    name: "Angulation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1",a1)': {
    tag: '(0019,"SPI-P Release 1",a1)',
    vr: "US",
    name: "Rotation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P Release 1",12)': {
    tag: '(0021,"SPI-P Release 1",12)',
    vr: "LT",
    name: "SeriesUniqueIdentifier",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P Release 1",14)': {
    tag: '(0021,"SPI-P Release 1",14)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",00)': {
    tag: '(0029,"SPI-P Release 1",00)',
    vr: "DS",
    name: "Unknown",
    vm: "4",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",20)': {
    tag: '(0029,"SPI-P Release 1",20)',
    vr: "DS",
    name: "PixelAspectRatio",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",25)': {
    tag: '(0029,"SPI-P Release 1",25)',
    vr: "LO",
    name: "ProcessedPixelDataQuality",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",30)': {
    tag: '(0029,"SPI-P Release 1",30)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",38)': {
    tag: '(0029,"SPI-P Release 1",38)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",60)': {
    tag: '(0029,"SPI-P Release 1",60)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",61)': {
    tag: '(0029,"SPI-P Release 1",61)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",67)': {
    tag: '(0029,"SPI-P Release 1",67)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",70)': {
    tag: '(0029,"SPI-P Release 1",70)',
    vr: "LT",
    name: "WindowID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",71)': {
    tag: '(0029,"SPI-P Release 1",71)',
    vr: "CS",
    name: "VideoInvertSubtracted",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",72)': {
    tag: '(0029,"SPI-P Release 1",72)',
    vr: "CS",
    name: "VideoInvertNonsubtracted",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",77)': {
    tag: '(0029,"SPI-P Release 1",77)',
    vr: "CS",
    name: "WindowSelectStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",78)': {
    tag: '(0029,"SPI-P Release 1",78)',
    vr: "LT",
    name: "ECGDisplayPrintingID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",79)': {
    tag: '(0029,"SPI-P Release 1",79)',
    vr: "CS",
    name: "ECGDisplayPrinting",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",7e)': {
    tag: '(0029,"SPI-P Release 1",7e)',
    vr: "CS",
    name: "ECGDisplayPrintingEnableStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",7f)': {
    tag: '(0029,"SPI-P Release 1",7f)',
    vr: "CS",
    name: "ECGDisplayPrintingSelectStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",80)': {
    tag: '(0029,"SPI-P Release 1",80)',
    vr: "LT",
    name: "PhysiologicalDisplayID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",81)': {
    tag: '(0029,"SPI-P Release 1",81)',
    vr: "US",
    name: "PreferredPhysiologicalChannelDisplay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",8e)': {
    tag: '(0029,"SPI-P Release 1",8e)',
    vr: "CS",
    name: "PhysiologicalDisplayEnableStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",8f)': {
    tag: '(0029,"SPI-P Release 1",8f)',
    vr: "CS",
    name: "PhysiologicalDisplaySelectStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",c0)': {
    tag: '(0029,"SPI-P Release 1",c0)',
    vr: "LT",
    name: "FunctionalShutterID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",c1)': {
    tag: '(0029,"SPI-P Release 1",c1)',
    vr: "US",
    name: "FieldOfShutter",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",c5)': {
    tag: '(0029,"SPI-P Release 1",c5)',
    vr: "LT",
    name: "FieldOfShutterRectangle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",ce)': {
    tag: '(0029,"SPI-P Release 1",ce)',
    vr: "CS",
    name: "ShutterEnableStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1",cf)': {
    tag: '(0029,"SPI-P Release 1",cf)',
    vr: "CS",
    name: "ShutterSelectStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(7FE1,"SPI-P Release 1",10)': {
    tag: '(7FE1,"SPI-P Release 1",10)',
    vr: "ox",
    name: "PixelData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1;1",c0)': {
    tag: '(0009,"SPI-P Release 1;1",c0)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P Release 1;1",c1)': {
    tag: '(0009,"SPI-P Release 1;1",c1)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",00)': {
    tag: '(0019,"SPI-P Release 1;1",00)',
    vr: "UN",
    name: "PhysiologicalDataType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",01)': {
    tag: '(0019,"SPI-P Release 1;1",01)',
    vr: "UN",
    name: "PhysiologicalDataChannelAndKind",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",02)': {
    tag: '(0019,"SPI-P Release 1;1",02)',
    vr: "US",
    name: "SampleBitsAllocated",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",03)': {
    tag: '(0019,"SPI-P Release 1;1",03)',
    vr: "US",
    name: "SampleBitsStored",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",04)': {
    tag: '(0019,"SPI-P Release 1;1",04)',
    vr: "US",
    name: "SampleHighBit",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",05)': {
    tag: '(0019,"SPI-P Release 1;1",05)',
    vr: "US",
    name: "SampleRepresentation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",06)': {
    tag: '(0019,"SPI-P Release 1;1",06)',
    vr: "UN",
    name: "SmallestSampleValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",07)': {
    tag: '(0019,"SPI-P Release 1;1",07)',
    vr: "UN",
    name: "LargestSampleValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",08)': {
    tag: '(0019,"SPI-P Release 1;1",08)',
    vr: "UN",
    name: "NumberOfSamples",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",09)': {
    tag: '(0019,"SPI-P Release 1;1",09)',
    vr: "UN",
    name: "SampleData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",0a)': {
    tag: '(0019,"SPI-P Release 1;1",0a)',
    vr: "UN",
    name: "SampleRate",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",10)': {
    tag: '(0019,"SPI-P Release 1;1",10)',
    vr: "UN",
    name: "PhysiologicalDataType2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",11)': {
    tag: '(0019,"SPI-P Release 1;1",11)',
    vr: "UN",
    name: "PhysiologicalDataChannelAndKind2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",12)': {
    tag: '(0019,"SPI-P Release 1;1",12)',
    vr: "US",
    name: "SampleBitsAllocated2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",13)': {
    tag: '(0019,"SPI-P Release 1;1",13)',
    vr: "US",
    name: "SampleBitsStored2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",14)': {
    tag: '(0019,"SPI-P Release 1;1",14)',
    vr: "US",
    name: "SampleHighBit2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",15)': {
    tag: '(0019,"SPI-P Release 1;1",15)',
    vr: "US",
    name: "SampleRepresentation2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",16)': {
    tag: '(0019,"SPI-P Release 1;1",16)',
    vr: "UN",
    name: "SmallestSampleValue2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",17)': {
    tag: '(0019,"SPI-P Release 1;1",17)',
    vr: "UN",
    name: "LargestSampleValue2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",18)': {
    tag: '(0019,"SPI-P Release 1;1",18)',
    vr: "UN",
    name: "NumberOfSamples2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",19)': {
    tag: '(0019,"SPI-P Release 1;1",19)',
    vr: "UN",
    name: "SampleData2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P Release 1;1",1a)': {
    tag: '(0019,"SPI-P Release 1;1",1a)',
    vr: "UN",
    name: "SampleRate2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",00)': {
    tag: '(0029,"SPI-P Release 1;1",00)',
    vr: "LT",
    name: "ZoomID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",01)': {
    tag: '(0029,"SPI-P Release 1;1",01)',
    vr: "DS",
    name: "ZoomRectangle",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",03)': {
    tag: '(0029,"SPI-P Release 1;1",03)',
    vr: "DS",
    name: "ZoomFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",04)': {
    tag: '(0029,"SPI-P Release 1;1",04)',
    vr: "US",
    name: "ZoomFunction",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",0e)': {
    tag: '(0029,"SPI-P Release 1;1",0e)',
    vr: "CS",
    name: "ZoomEnableStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",0f)': {
    tag: '(0029,"SPI-P Release 1;1",0f)',
    vr: "CS",
    name: "ZoomSelectStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",40)': {
    tag: '(0029,"SPI-P Release 1;1",40)',
    vr: "LT",
    name: "MagnifyingGlassID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",41)': {
    tag: '(0029,"SPI-P Release 1;1",41)',
    vr: "DS",
    name: "MagnifyingGlassRectangle",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",43)': {
    tag: '(0029,"SPI-P Release 1;1",43)',
    vr: "DS",
    name: "MagnifyingGlassFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",44)': {
    tag: '(0029,"SPI-P Release 1;1",44)',
    vr: "US",
    name: "MagnifyingGlassFunction",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",4e)': {
    tag: '(0029,"SPI-P Release 1;1",4e)',
    vr: "CS",
    name: "MagnifyingGlassEnableStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;1",4f)': {
    tag: '(0029,"SPI-P Release 1;1",4f)',
    vr: "CS",
    name: "MagnifyingGlassSelectStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;2",00)': {
    tag: '(0029,"SPI-P Release 1;2",00)',
    vr: "LT",
    name: "SubtractionMaskID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;2",04)': {
    tag: '(0029,"SPI-P Release 1;2",04)',
    vr: "UN",
    name: "MaskingFunction",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;2",0c)': {
    tag: '(0029,"SPI-P Release 1;2",0c)',
    vr: "UN",
    name: "ProprietaryMaskingParameters",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;2",1e)': {
    tag: '(0029,"SPI-P Release 1;2",1e)',
    vr: "CS",
    name: "SubtractionMaskEnableStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;2",1f)': {
    tag: '(0029,"SPI-P Release 1;2",1f)',
    vr: "CS",
    name: "SubtractionMaskSelectStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;3",00)': {
    tag: '(0029,"SPI-P Release 1;3",00)',
    vr: "LT",
    name: "ImageEnhancementID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;3",01)': {
    tag: '(0029,"SPI-P Release 1;3",01)',
    vr: "LT",
    name: "ImageEnhancement",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;3",02)': {
    tag: '(0029,"SPI-P Release 1;3",02)',
    vr: "LT",
    name: "ConvolutionID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;3",03)': {
    tag: '(0029,"SPI-P Release 1;3",03)',
    vr: "LT",
    name: "ConvolutionType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;3",04)': {
    tag: '(0029,"SPI-P Release 1;3",04)',
    vr: "LT",
    name: "ConvolutionKernelSizeID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;3",05)': {
    tag: '(0029,"SPI-P Release 1;3",05)',
    vr: "US",
    name: "ConvolutionKernelSize",
    vm: "2",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;3",06)': {
    tag: '(0029,"SPI-P Release 1;3",06)',
    vr: "US",
    name: "ConvolutionKernel",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;3",0c)': {
    tag: '(0029,"SPI-P Release 1;3",0c)',
    vr: "DS",
    name: "EnhancementGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;3",1e)': {
    tag: '(0029,"SPI-P Release 1;3",1e)',
    vr: "CS",
    name: "ImageEnhancementEnableStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P Release 1;3",1f)': {
    tag: '(0029,"SPI-P Release 1;3",1f)',
    vr: "CS",
    name: "ImageEnhancementSelectStatus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"SPI-P Release 2;1",18)': {
    tag: '(0011,"SPI-P Release 2;1",18)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SPI-P Release 2;1",0d)': {
    tag: '(0023,"SPI-P Release 2;1",0d)',
    vr: "UI",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SPI-P Release 2;1",0e)': {
    tag: '(0023,"SPI-P Release 2;1",0e)',
    vr: "UI",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P-GV-CT Release 1",00)': {
    tag: '(0009,"SPI-P-GV-CT Release 1",00)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P-GV-CT Release 1",10)': {
    tag: '(0009,"SPI-P-GV-CT Release 1",10)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P-GV-CT Release 1",20)': {
    tag: '(0009,"SPI-P-GV-CT Release 1",20)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P-GV-CT Release 1",30)': {
    tag: '(0009,"SPI-P-GV-CT Release 1",30)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P-GV-CT Release 1",40)': {
    tag: '(0009,"SPI-P-GV-CT Release 1",40)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P-GV-CT Release 1",50)': {
    tag: '(0009,"SPI-P-GV-CT Release 1",50)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P-GV-CT Release 1",60)': {
    tag: '(0009,"SPI-P-GV-CT Release 1",60)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P-GV-CT Release 1",70)': {
    tag: '(0009,"SPI-P-GV-CT Release 1",70)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P-GV-CT Release 1",75)': {
    tag: '(0009,"SPI-P-GV-CT Release 1",75)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P-GV-CT Release 1",80)': {
    tag: '(0009,"SPI-P-GV-CT Release 1",80)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"SPI-P-GV-CT Release 1",90)': {
    tag: '(0009,"SPI-P-GV-CT Release 1",90)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",08)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",08)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",09)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",09)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",0a)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",0a)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",10)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",10)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",20)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",20)',
    vr: "TM",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",50)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",50)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",60)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",60)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",61)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",61)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",63)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",63)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",64)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",64)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",65)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",65)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",70)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",70)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",80)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",80)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",81)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",81)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",90)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",90)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",a0)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",a0)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",a1)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",a1)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",a2)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",a2)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",a3)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",a3)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",b0)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",b0)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-GV-CT Release 1",b1)': {
    tag: '(0019,"SPI-P-GV-CT Release 1",b1)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",20)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",20)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",30)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",30)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",40)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",40)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",50)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",50)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",60)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",60)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",70)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",70)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",80)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",80)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",90)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",90)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",a0)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",a0)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",a1)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",a1)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",a2)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",a2)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",a3)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",a3)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",a4)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",a4)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",b0)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",b0)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-GV-CT Release 1",c0)': {
    tag: '(0021,"SPI-P-GV-CT Release 1",c0)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-GV-CT Release 1",10)': {
    tag: '(0029,"SPI-P-GV-CT Release 1",10)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-GV-CT Release 1",30)': {
    tag: '(0029,"SPI-P-GV-CT Release 1",30)',
    vr: "UL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-GV-CT Release 1",31)': {
    tag: '(0029,"SPI-P-GV-CT Release 1",31)',
    vr: "UL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-GV-CT Release 1",32)': {
    tag: '(0029,"SPI-P-GV-CT Release 1",32)',
    vr: "UL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-GV-CT Release 1",33)': {
    tag: '(0029,"SPI-P-GV-CT Release 1",33)',
    vr: "UL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-GV-CT Release 1",80)': {
    tag: '(0029,"SPI-P-GV-CT Release 1",80)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-GV-CT Release 1",90)': {
    tag: '(0029,"SPI-P-GV-CT Release 1",90)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-GV-CT Release 1",d0)': {
    tag: '(0029,"SPI-P-GV-CT Release 1",d0)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-GV-CT Release 1",d1)': {
    tag: '(0029,"SPI-P-GV-CT Release 1",d1)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-PCR Release 2",30)': {
    tag: '(0019,"SPI-P-PCR Release 2",30)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-Private-CWS Release 1",00)': {
    tag: '(0021,"SPI-P-Private-CWS Release 1",00)',
    vr: "LT",
    name: "WindowOfImagesID",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-Private-CWS Release 1",01)': {
    tag: '(0021,"SPI-P-Private-CWS Release 1",01)',
    vr: "CS",
    name: "WindowOfImagesType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-Private-CWS Release 1",02)': {
    tag: '(0021,"SPI-P-Private-CWS Release 1",02)',
    vr: "IS",
    name: "WindowOfImagesScope",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-Private-DCI Release 1",10)': {
    tag: '(0019,"SPI-P-Private-DCI Release 1",10)',
    vr: "UN",
    name: "ECGTimeMapDataBitsAllocated",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-Private-DCI Release 1",11)': {
    tag: '(0019,"SPI-P-Private-DCI Release 1",11)',
    vr: "UN",
    name: "ECGTimeMapDataBitsStored",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-Private-DCI Release 1",12)': {
    tag: '(0019,"SPI-P-Private-DCI Release 1",12)',
    vr: "UN",
    name: "ECGTimeMapDataHighBit",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-Private-DCI Release 1",13)': {
    tag: '(0019,"SPI-P-Private-DCI Release 1",13)',
    vr: "UN",
    name: "ECGTimeMapDataRepresentation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-Private-DCI Release 1",14)': {
    tag: '(0019,"SPI-P-Private-DCI Release 1",14)',
    vr: "UN",
    name: "ECGTimeMapDataSmallestDataValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-Private-DCI Release 1",15)': {
    tag: '(0019,"SPI-P-Private-DCI Release 1",15)',
    vr: "UN",
    name: "ECGTimeMapDataLargestDataValue",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-Private-DCI Release 1",16)': {
    tag: '(0019,"SPI-P-Private-DCI Release 1",16)',
    vr: "UN",
    name: "ECGTimeMapDataNumberOfDataValues",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-Private-DCI Release 1",17)': {
    tag: '(0019,"SPI-P-Private-DCI Release 1",17)',
    vr: "UN",
    name: "ECGTimeMapData",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SPI-P-Private_CDS Release 1",40)': {
    tag: '(0021,"SPI-P-Private_CDS Release 1",40)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_CDS Release 1",00)': {
    tag: '(0029,"SPI-P-Private_CDS Release 1",00)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-Private_ICS Release 1",30)': {
    tag: '(0019,"SPI-P-Private_ICS Release 1",30)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-Private_ICS Release 1",31)': {
    tag: '(0019,"SPI-P-Private_ICS Release 1",31)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",08)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",08)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",0f)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",0f)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",10)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",10)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",1b)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",1b)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",1c)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",1c)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",21)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",21)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",43)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",43)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",44)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",44)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",4C)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",4C)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",67)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",67)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",68)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",68)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",6A)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",6A)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1",6B)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1",6B)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;1",00)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;1",00)',
    vr: "SL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;1",05)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;1",05)',
    vr: "FL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;1",06)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;1",06)',
    vr: "FL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;1",20)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;1",20)',
    vr: "FL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;1",21)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;1",21)',
    vr: "FL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;1",CD)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;1",CD)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;2",00)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;2",00)',
    vr: "FD",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;2",01)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;2",01)',
    vr: "FD",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;2",02)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;2",02)',
    vr: "FD",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;2",03)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;2",03)',
    vr: "SL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;2",04)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;2",04)',
    vr: "SL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;2",05)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;2",05)',
    vr: "SL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;3",C0)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;3",C0)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;3",C1)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;3",C1)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;3",C2)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;3",C2)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;3",C3)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;3",C3)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;3",C4)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;3",C4)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;3",C5)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;3",C5)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;4",02)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;4",02)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;4",9A)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;4",9A)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;4",E0)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;4",E0)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;5",50)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;5",50)',
    vr: "CS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"SPI-P-Private_ICS Release 1;5",55)': {
    tag: '(0029,"SPI-P-Private_ICS Release 1;5",55)',
    vr: "CS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-XSB-DCI Release 1",10)': {
    tag: '(0019,"SPI-P-XSB-DCI Release 1",10)',
    vr: "LT",
    name: "VideoBeamBoost",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-XSB-DCI Release 1",11)': {
    tag: '(0019,"SPI-P-XSB-DCI Release 1",11)',
    vr: "US",
    name: "ChannelGeneratingVideoSync",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-XSB-DCI Release 1",12)': {
    tag: '(0019,"SPI-P-XSB-DCI Release 1",12)',
    vr: "US",
    name: "VideoGain",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-XSB-DCI Release 1",13)': {
    tag: '(0019,"SPI-P-XSB-DCI Release 1",13)',
    vr: "US",
    name: "VideoOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SPI-P-XSB-DCI Release 1",20)': {
    tag: '(0019,"SPI-P-XSB-DCI Release 1",20)',
    vr: "DS",
    name: "RTDDataCompressionFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",11)': {
    tag: '(0029,"Silhouette Annot V1.0",11)',
    vr: "IS",
    name: "AnnotationName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",12)': {
    tag: '(0029,"Silhouette Annot V1.0",12)',
    vr: "LT",
    name: "AnnotationFont",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",13)': {
    tag: '(0029,"Silhouette Annot V1.0",13)',
    vr: "LT",
    name: "AnnotationTextForegroundColor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",14)': {
    tag: '(0029,"Silhouette Annot V1.0",14)',
    vr: "LT",
    name: "AnnotationTextBackgroundColor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",15)': {
    tag: '(0029,"Silhouette Annot V1.0",15)',
    vr: "UL",
    name: "AnnotationTextBackingMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",16)': {
    tag: '(0029,"Silhouette Annot V1.0",16)',
    vr: "UL",
    name: "AnnotationTextJustification",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",17)': {
    tag: '(0029,"Silhouette Annot V1.0",17)',
    vr: "UL",
    name: "AnnotationTextLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",18)': {
    tag: '(0029,"Silhouette Annot V1.0",18)',
    vr: "LT",
    name: "AnnotationTextString",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",19)': {
    tag: '(0029,"Silhouette Annot V1.0",19)',
    vr: "UL",
    name: "AnnotationTextAttachMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",20)': {
    tag: '(0029,"Silhouette Annot V1.0",20)',
    vr: "UL",
    name: "AnnotationTextCursorMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",21)': {
    tag: '(0029,"Silhouette Annot V1.0",21)',
    vr: "UL",
    name: "AnnotationTextShadowOffsetX",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",22)': {
    tag: '(0029,"Silhouette Annot V1.0",22)',
    vr: "UL",
    name: "AnnotationTextShadowOffsetY",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",23)': {
    tag: '(0029,"Silhouette Annot V1.0",23)',
    vr: "LT",
    name: "AnnotationLineColor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",24)': {
    tag: '(0029,"Silhouette Annot V1.0",24)',
    vr: "UL",
    name: "AnnotationLineThickness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",25)': {
    tag: '(0029,"Silhouette Annot V1.0",25)',
    vr: "UL",
    name: "AnnotationLineType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",26)': {
    tag: '(0029,"Silhouette Annot V1.0",26)',
    vr: "UL",
    name: "AnnotationLineStyle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",27)': {
    tag: '(0029,"Silhouette Annot V1.0",27)',
    vr: "UL",
    name: "AnnotationLineDashLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",28)': {
    tag: '(0029,"Silhouette Annot V1.0",28)',
    vr: "UL",
    name: "AnnotationLineAttachMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",29)': {
    tag: '(0029,"Silhouette Annot V1.0",29)',
    vr: "UL",
    name: "AnnotationLinePointCount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",30)': {
    tag: '(0029,"Silhouette Annot V1.0",30)',
    vr: "FD",
    name: "AnnotationLinePoints",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",31)': {
    tag: '(0029,"Silhouette Annot V1.0",31)',
    vr: "UL",
    name: "AnnotationLineControlSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",32)': {
    tag: '(0029,"Silhouette Annot V1.0",32)',
    vr: "LT",
    name: "AnnotationMarkerColor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",33)': {
    tag: '(0029,"Silhouette Annot V1.0",33)',
    vr: "UL",
    name: "AnnotationMarkerType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",34)': {
    tag: '(0029,"Silhouette Annot V1.0",34)',
    vr: "UL",
    name: "AnnotationMarkerSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",35)': {
    tag: '(0029,"Silhouette Annot V1.0",35)',
    vr: "FD",
    name: "AnnotationMarkerLocation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",36)': {
    tag: '(0029,"Silhouette Annot V1.0",36)',
    vr: "UL",
    name: "AnnotationMarkerAttachMode",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",37)': {
    tag: '(0029,"Silhouette Annot V1.0",37)',
    vr: "LT",
    name: "AnnotationGeomColor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",38)': {
    tag: '(0029,"Silhouette Annot V1.0",38)',
    vr: "UL",
    name: "AnnotationGeomThickness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",39)': {
    tag: '(0029,"Silhouette Annot V1.0",39)',
    vr: "UL",
    name: "AnnotationGeomLineStyle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",40)': {
    tag: '(0029,"Silhouette Annot V1.0",40)',
    vr: "UL",
    name: "AnnotationGeomDashLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",41)': {
    tag: '(0029,"Silhouette Annot V1.0",41)',
    vr: "UL",
    name: "AnnotationGeomFillPattern",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",42)': {
    tag: '(0029,"Silhouette Annot V1.0",42)',
    vr: "UL",
    name: "AnnotationInteractivity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",43)': {
    tag: '(0029,"Silhouette Annot V1.0",43)',
    vr: "FD",
    name: "AnnotationArrowLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",44)': {
    tag: '(0029,"Silhouette Annot V1.0",44)',
    vr: "FD",
    name: "AnnotationArrowAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Annot V1.0",45)': {
    tag: '(0029,"Silhouette Annot V1.0",45)',
    vr: "UL",
    name: "AnnotationDontSave",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Graphics Export V1.0",00)': {
    tag: '(0029,"Silhouette Graphics Export V1.0",00)',
    vr: "UI",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",11)': {
    tag: '(0029,"Silhouette Line V1.0",11)',
    vr: "IS",
    name: "LineName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",12)': {
    tag: '(0029,"Silhouette Line V1.0",12)',
    vr: "LT",
    name: "LineNameFont",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",13)': {
    tag: '(0029,"Silhouette Line V1.0",13)',
    vr: "UL",
    name: "LineNameDisplay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",14)': {
    tag: '(0029,"Silhouette Line V1.0",14)',
    vr: "LT",
    name: "LineNormalColor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",15)': {
    tag: '(0029,"Silhouette Line V1.0",15)',
    vr: "UL",
    name: "LineType",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",16)': {
    tag: '(0029,"Silhouette Line V1.0",16)',
    vr: "UL",
    name: "LineThickness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",17)': {
    tag: '(0029,"Silhouette Line V1.0",17)',
    vr: "UL",
    name: "LineStyle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",18)': {
    tag: '(0029,"Silhouette Line V1.0",18)',
    vr: "UL",
    name: "LineDashLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",19)': {
    tag: '(0029,"Silhouette Line V1.0",19)',
    vr: "UL",
    name: "LineInteractivity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",20)': {
    tag: '(0029,"Silhouette Line V1.0",20)',
    vr: "LT",
    name: "LineMeasurementColor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",21)': {
    tag: '(0029,"Silhouette Line V1.0",21)',
    vr: "LT",
    name: "LineMeasurementFont",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",22)': {
    tag: '(0029,"Silhouette Line V1.0",22)',
    vr: "UL",
    name: "LineMeasurementDashLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",23)': {
    tag: '(0029,"Silhouette Line V1.0",23)',
    vr: "UL",
    name: "LinePointSpace",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",24)': {
    tag: '(0029,"Silhouette Line V1.0",24)',
    vr: "FD",
    name: "LinePoints",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",25)': {
    tag: '(0029,"Silhouette Line V1.0",25)',
    vr: "UL",
    name: "LineControlPointSize",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",26)': {
    tag: '(0029,"Silhouette Line V1.0",26)',
    vr: "UL",
    name: "LineControlPointSpace",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",27)': {
    tag: '(0029,"Silhouette Line V1.0",27)',
    vr: "FD",
    name: "LineControlPoints",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",28)': {
    tag: '(0029,"Silhouette Line V1.0",28)',
    vr: "LT",
    name: "LineLabel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Line V1.0",29)': {
    tag: '(0029,"Silhouette Line V1.0",29)',
    vr: "UL",
    name: "LineDontSave",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",11)': {
    tag: '(0029,"Silhouette ROI V1.0",11)',
    vr: "IS",
    name: "ROIName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",12)': {
    tag: '(0029,"Silhouette ROI V1.0",12)',
    vr: "LT",
    name: "ROINameFont",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",13)': {
    tag: '(0029,"Silhouette ROI V1.0",13)',
    vr: "LT",
    name: "ROINormalColor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",14)': {
    tag: '(0029,"Silhouette ROI V1.0",14)',
    vr: "UL",
    name: "ROIFillPattern",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",15)': {
    tag: '(0029,"Silhouette ROI V1.0",15)',
    vr: "UL",
    name: "ROIBpSeg",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",16)': {
    tag: '(0029,"Silhouette ROI V1.0",16)',
    vr: "UN",
    name: "ROIBpSegPairs",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",17)': {
    tag: '(0029,"Silhouette ROI V1.0",17)',
    vr: "UL",
    name: "ROISeedSpace",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",18)': {
    tag: '(0029,"Silhouette ROI V1.0",18)',
    vr: "UN",
    name: "ROISeeds",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",19)': {
    tag: '(0029,"Silhouette ROI V1.0",19)',
    vr: "UL",
    name: "ROILineThickness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",20)': {
    tag: '(0029,"Silhouette ROI V1.0",20)',
    vr: "UL",
    name: "ROILineStyle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",21)': {
    tag: '(0029,"Silhouette ROI V1.0",21)',
    vr: "UL",
    name: "ROILineDashLength",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",22)': {
    tag: '(0029,"Silhouette ROI V1.0",22)',
    vr: "UL",
    name: "ROIInteractivity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",23)': {
    tag: '(0029,"Silhouette ROI V1.0",23)',
    vr: "UL",
    name: "ROINamePosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",24)': {
    tag: '(0029,"Silhouette ROI V1.0",24)',
    vr: "UL",
    name: "ROINameDisplay",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",25)': {
    tag: '(0029,"Silhouette ROI V1.0",25)',
    vr: "LT",
    name: "ROILabel",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",26)': {
    tag: '(0029,"Silhouette ROI V1.0",26)',
    vr: "UL",
    name: "ROIShape",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",27)': {
    tag: '(0029,"Silhouette ROI V1.0",27)',
    vr: "FD",
    name: "ROIShapeTilt",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",28)': {
    tag: '(0029,"Silhouette ROI V1.0",28)',
    vr: "UL",
    name: "ROIShapePointsCount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",29)': {
    tag: '(0029,"Silhouette ROI V1.0",29)',
    vr: "UL",
    name: "ROIShapePointsSpace",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",30)': {
    tag: '(0029,"Silhouette ROI V1.0",30)',
    vr: "FD",
    name: "ROIShapePoints",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",31)': {
    tag: '(0029,"Silhouette ROI V1.0",31)',
    vr: "UL",
    name: "ROIShapeControlPointsCount",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",32)': {
    tag: '(0029,"Silhouette ROI V1.0",32)',
    vr: "UL",
    name: "ROIShapeControlPointsSpace",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",33)': {
    tag: '(0029,"Silhouette ROI V1.0",33)',
    vr: "FD",
    name: "ROIShapeControlPoints",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette ROI V1.0",34)': {
    tag: '(0029,"Silhouette ROI V1.0",34)',
    vr: "UL",
    name: "ROIDontSave",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Sequence Ids V1.0",41)': {
    tag: '(0029,"Silhouette Sequence Ids V1.0",41)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Sequence Ids V1.0",42)': {
    tag: '(0029,"Silhouette Sequence Ids V1.0",42)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette Sequence Ids V1.0",43)': {
    tag: '(0029,"Silhouette Sequence Ids V1.0",43)',
    vr: "SQ",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",13)': {
    tag: '(0029,"Silhouette V1.0",13)',
    vr: "UL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",14)': {
    tag: '(0029,"Silhouette V1.0",14)',
    vr: "UL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",17)': {
    tag: '(0029,"Silhouette V1.0",17)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",18)': {
    tag: '(0029,"Silhouette V1.0",18)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",19)': {
    tag: '(0029,"Silhouette V1.0",19)',
    vr: "UL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",1a)': {
    tag: '(0029,"Silhouette V1.0",1a)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",1b)': {
    tag: '(0029,"Silhouette V1.0",1b)',
    vr: "UL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",1c)': {
    tag: '(0029,"Silhouette V1.0",1c)',
    vr: "UL",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",1d)': {
    tag: '(0029,"Silhouette V1.0",1d)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",1e)': {
    tag: '(0029,"Silhouette V1.0",1e)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",21)': {
    tag: '(0029,"Silhouette V1.0",21)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",22)': {
    tag: '(0029,"Silhouette V1.0",22)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",23)': {
    tag: '(0029,"Silhouette V1.0",23)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",24)': {
    tag: '(0029,"Silhouette V1.0",24)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",25)': {
    tag: '(0029,"Silhouette V1.0",25)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",27)': {
    tag: '(0029,"Silhouette V1.0",27)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",28)': {
    tag: '(0029,"Silhouette V1.0",28)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",29)': {
    tag: '(0029,"Silhouette V1.0",29)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",30)': {
    tag: '(0029,"Silhouette V1.0",30)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",52)': {
    tag: '(0029,"Silhouette V1.0",52)',
    vr: "US",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",53)': {
    tag: '(0029,"Silhouette V1.0",53)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",54)': {
    tag: '(0029,"Silhouette V1.0",54)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",55)': {
    tag: '(0029,"Silhouette V1.0",55)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",56)': {
    tag: '(0029,"Silhouette V1.0",56)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0029,"Silhouette V1.0",57)': {
    tag: '(0029,"Silhouette V1.0",57)',
    vr: "UN",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0135,"SONOWAND AS",10)': {
    tag: '(0135,"SONOWAND AS",10)',
    vr: "LO",
    name: "UltrasoundScannerName",
    vm: "1",
    version: "PrivateTag"
  },
  '(0135,"SONOWAND AS",11)': {
    tag: '(0135,"SONOWAND AS",11)',
    vr: "LO",
    name: "TransducerSerial",
    vm: "1",
    version: "PrivateTag"
  },
  '(0135,"SONOWAND AS",12)': {
    tag: '(0135,"SONOWAND AS",12)',
    vr: "LO",
    name: "ProbeApplication",
    vm: "1",
    version: "PrivateTag"
  },
  '(0017,"SVISION",00)': {
    tag: '(0017,"SVISION",00)',
    vr: "LO",
    name: "ExtendedBodyPart",
    vm: "1",
    version: "PrivateTag"
  },
  '(0017,"SVISION",10)': {
    tag: '(0017,"SVISION",10)',
    vr: "LO",
    name: "ExtendedViewPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0017,"SVISION",F0)': {
    tag: '(0017,"SVISION",F0)',
    vr: "IS",
    name: "ImagesSOPClass",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",00)': {
    tag: '(0019,"SVISION",00)',
    vr: "IS",
    name: "AECField",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",01)': {
    tag: '(0019,"SVISION",01)',
    vr: "IS",
    name: "AECFilmScreen",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",02)': {
    tag: '(0019,"SVISION",02)',
    vr: "IS",
    name: "AECDensity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",10)': {
    tag: '(0019,"SVISION",10)',
    vr: "IS",
    name: "PatientThickness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",18)': {
    tag: '(0019,"SVISION",18)',
    vr: "IS",
    name: "BeamDistance",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",20)': {
    tag: '(0019,"SVISION",20)',
    vr: "IS",
    name: "WorkstationNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",28)': {
    tag: '(0019,"SVISION",28)',
    vr: "IS",
    name: "TubeNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",30)': {
    tag: '(0019,"SVISION",30)',
    vr: "IS",
    name: "BuckyGrid",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",34)': {
    tag: '(0019,"SVISION",34)',
    vr: "IS",
    name: "Focus",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",38)': {
    tag: '(0019,"SVISION",38)',
    vr: "IS",
    name: "Child",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",40)': {
    tag: '(0019,"SVISION",40)',
    vr: "IS",
    name: "CollimatorDistanceX",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",41)': {
    tag: '(0019,"SVISION",41)',
    vr: "IS",
    name: "CollimatorDistanceY",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",50)': {
    tag: '(0019,"SVISION",50)',
    vr: "IS",
    name: "CentralBeamHeight",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",60)': {
    tag: '(0019,"SVISION",60)',
    vr: "IS",
    name: "BuckyAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",68)': {
    tag: '(0019,"SVISION",68)',
    vr: "IS",
    name: "CArmAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",69)': {
    tag: '(0019,"SVISION",69)',
    vr: "IS",
    name: "CollimatorAngle",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",70)': {
    tag: '(0019,"SVISION",70)',
    vr: "IS",
    name: "FilterNumber",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",74)': {
    tag: '(0019,"SVISION",74)',
    vr: "LO",
    name: "FilterMaterial1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",75)': {
    tag: '(0019,"SVISION",75)',
    vr: "LO",
    name: "FilterMaterial2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",78)': {
    tag: '(0019,"SVISION",78)',
    vr: "DS",
    name: "FilterThickness1",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",79)': {
    tag: '(0019,"SVISION",79)',
    vr: "DS",
    name: "FilterThickness2",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",80)': {
    tag: '(0019,"SVISION",80)',
    vr: "IS",
    name: "BuckyFormat",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",81)': {
    tag: '(0019,"SVISION",81)',
    vr: "IS",
    name: "ObjectPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",90)': {
    tag: '(0019,"SVISION",90)',
    vr: "LO",
    name: "DeskCommand",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",A0)': {
    tag: '(0019,"SVISION",A0)',
    vr: "DS",
    name: "ExtendedExposureTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",A1)': {
    tag: '(0019,"SVISION",A1)',
    vr: "DS",
    name: "ActualExposureTime",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"SVISION",A8)': {
    tag: '(0019,"SVISION",A8)',
    vr: "DS",
    name: "ExtendedXRayTubeCurrent",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",00)': {
    tag: '(0021,"SVISION",00)',
    vr: "DS",
    name: "NoiseReduction",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",01)': {
    tag: '(0021,"SVISION",01)',
    vr: "DS",
    name: "ContrastAmplification",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",02)': {
    tag: '(0021,"SVISION",02)',
    vr: "DS",
    name: "EdgeContrastBoosting",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",03)': {
    tag: '(0021,"SVISION",03)',
    vr: "DS",
    name: "LatitudeReduction",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",10)': {
    tag: '(0021,"SVISION",10)',
    vr: "LO",
    name: "FindRangeAlgorithm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",11)': {
    tag: '(0021,"SVISION",11)',
    vr: "DS",
    name: "ThresholdCAlgorithm",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",20)': {
    tag: '(0021,"SVISION",20)',
    vr: "LO",
    name: "SensometricCurve",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",30)': {
    tag: '(0021,"SVISION",30)',
    vr: "DS",
    name: "LowerWindowOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",31)': {
    tag: '(0021,"SVISION",31)',
    vr: "DS",
    name: "UpperWindowOffset",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",40)': {
    tag: '(0021,"SVISION",40)',
    vr: "DS",
    name: "MinPrintableDensity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",41)': {
    tag: '(0021,"SVISION",41)',
    vr: "DS",
    name: "MaxPrintableDensity",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",90)': {
    tag: '(0021,"SVISION",90)',
    vr: "DS",
    name: "Brightness",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",91)': {
    tag: '(0021,"SVISION",91)',
    vr: "DS",
    name: "Contrast",
    vm: "1",
    version: "PrivateTag"
  },
  '(0021,"SVISION",92)': {
    tag: '(0021,"SVISION",92)',
    vr: "DS",
    name: "ShapeFactor",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SVISION",00)': {
    tag: '(0023,"SVISION",00)',
    vr: "LO",
    name: "ImageLaterality",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SVISION",01)': {
    tag: '(0023,"SVISION",01)',
    vr: "IS",
    name: "LetterPosition",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SVISION",02)': {
    tag: '(0023,"SVISION",02)',
    vr: "IS",
    name: "BurnedInAnnotation",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SVISION",03)': {
    tag: '(0023,"SVISION",03)',
    vr: "LO",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0023,"SVISION",F0)': {
    tag: '(0023,"SVISION",F0)',
    vr: "IS",
    name: "ImageSOPClass",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SVISION",00)': {
    tag: '(0025,"SVISION",00)',
    vr: "IS",
    name: "OriginalImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SVISION",01)': {
    tag: '(0025,"SVISION",01)',
    vr: "IS",
    name: "NotProcessedImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SVISION",02)': {
    tag: '(0025,"SVISION",02)',
    vr: "IS",
    name: "CutOutImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SVISION",03)': {
    tag: '(0025,"SVISION",03)',
    vr: "IS",
    name: "DuplicatedImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SVISION",04)': {
    tag: '(0025,"SVISION",04)',
    vr: "IS",
    name: "StoredImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SVISION",05)': {
    tag: '(0025,"SVISION",05)',
    vr: "IS",
    name: "RetrievedImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SVISION",06)': {
    tag: '(0025,"SVISION",06)',
    vr: "IS",
    name: "RemoteImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SVISION",07)': {
    tag: '(0025,"SVISION",07)',
    vr: "IS",
    name: "MediaStoredImage",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SVISION",08)': {
    tag: '(0025,"SVISION",08)',
    vr: "IS",
    name: "ImageState",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SVISION",20)': {
    tag: '(0025,"SVISION",20)',
    vr: "LO",
    name: "SourceImageFile",
    vm: "1",
    version: "PrivateTag"
  },
  '(0025,"SVISION",21)': {
    tag: '(0025,"SVISION",21)',
    vr: "UI",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"SVISION",00)': {
    tag: '(0027,"SVISION",00)',
    vr: "IS",
    name: "NumberOfSeries",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"SVISION",01)': {
    tag: '(0027,"SVISION",01)',
    vr: "IS",
    name: "NumberOfStudies",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"SVISION",10)': {
    tag: '(0027,"SVISION",10)',
    vr: "DT",
    name: "OldestSeries",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"SVISION",11)': {
    tag: '(0027,"SVISION",11)',
    vr: "DT",
    name: "NewestSeries",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"SVISION",12)': {
    tag: '(0027,"SVISION",12)',
    vr: "DT",
    name: "OldestStudy",
    vm: "1",
    version: "PrivateTag"
  },
  '(0027,"SVISION",13)': {
    tag: '(0027,"SVISION",13)',
    vr: "DT",
    name: "NewestStudy",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"TOSHIBA_MEC_1.0",01)': {
    tag: '(0009,"TOSHIBA_MEC_1.0",01)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0009,"TOSHIBA_MEC_1.0",02)': {
    tag: '(0009,"TOSHIBA_MEC_1.0",02)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0009,"TOSHIBA_MEC_1.0",03)': {
    tag: '(0009,"TOSHIBA_MEC_1.0",03)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0009,"TOSHIBA_MEC_1.0",04)': {
    tag: '(0009,"TOSHIBA_MEC_1.0",04)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0011,"TOSHIBA_MEC_1.0",01)': {
    tag: '(0011,"TOSHIBA_MEC_1.0",01)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0011,"TOSHIBA_MEC_1.0",02)': {
    tag: '(0011,"TOSHIBA_MEC_1.0",02)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_1.0",01)': {
    tag: '(0019,"TOSHIBA_MEC_1.0",01)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_1.0",02)': {
    tag: '(0019,"TOSHIBA_MEC_1.0",02)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"TOSHIBA_MEC_1.0",01)': {
    tag: '(0021,"TOSHIBA_MEC_1.0",01)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"TOSHIBA_MEC_1.0",02)': {
    tag: '(0021,"TOSHIBA_MEC_1.0",02)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0021,"TOSHIBA_MEC_1.0",03)': {
    tag: '(0021,"TOSHIBA_MEC_1.0",03)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_1.0",01)': {
    tag: '(7ff1,"TOSHIBA_MEC_1.0",01)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_1.0",02)': {
    tag: '(7ff1,"TOSHIBA_MEC_1.0",02)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_1.0",03)': {
    tag: '(7ff1,"TOSHIBA_MEC_1.0",03)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_1.0",10)': {
    tag: '(7ff1,"TOSHIBA_MEC_1.0",10)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",01)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",01)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",02)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",02)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",03)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",03)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",04)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",04)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",05)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",05)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",06)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",06)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",07)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",07)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",08)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",08)',
    vr: "LT",
    name: "OrientationHeadFeet",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",09)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",09)',
    vr: "LT",
    name: "ViewDirection",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",0a)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",0a)',
    vr: "LT",
    name: "OrientationSupineProne",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",0b)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",0b)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",0c)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",0c)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",0d)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",0d)',
    vr: "TM",
    name: "Time",
    vm: "1",
    version: "PrivateTag"
  },
  '(0019,"TOSHIBA_MEC_CT_1.0",0e)': {
    tag: '(0019,"TOSHIBA_MEC_CT_1.0",0e)',
    vr: "DS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",01)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",01)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",02)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",02)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",03)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",03)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",04)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",04)',
    vr: "IS",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",05)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",05)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",07)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",07)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",08)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",08)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",09)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",09)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",0a)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",0a)',
    vr: "LT",
    name: "Unknown",
    vm: "1",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",0b)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",0b)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",0c)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",0c)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  },
  '(7ff1,"TOSHIBA_MEC_CT_1.0",0d)': {
    tag: '(7ff1,"TOSHIBA_MEC_CT_1.0",0d)',
    vr: "US",
    name: "Unknown",
    vm: "1-n",
    version: "PrivateTag"
  }
};
var dictionary_default = dictionary;

// src/utilities/addAccessors.js
var handler = {
  get: (target, prop) => {
    if (prop == "__isProxy")
      return true;
    if (prop in target)
      return target[prop];
    return target[0][prop];
  },
  set: (obj, prop, value) => {
    if (typeof prop === "number") {
      obj[prop] = value;
    } else if (prop in obj) {
      obj[prop] = value;
    } else {
      obj[0][prop] = value;
    }
    return true;
  }
};
var addAccessors = (dest, sqZero) => {
  if (dest.__isProxy)
    return dest;
  let itemZero = sqZero;
  if (itemZero === void 0) {
    if (typeof dest !== "object")
      return dest;
    if (Array.isArray(dest) && dest.length !== 1)
      return dest;
    itemZero = Array.isArray(dest) ? dest[0] : dest;
  }
  if (Array.isArray(dest)) {
    dest.length = 0;
    dest.push(itemZero);
    return new Proxy(dest, handler);
  } else {
    return new Proxy([itemZero], handler);
  }
};
var addAccessors_default = addAccessors;

// src/DicomMetaDictionary.js
var DicomMetaDictionary = class {
  constructor(customDictionary) {
    this.customDictionary = customDictionary;
    this.customNameMap = DicomMetaDictionary._generateCustomNameMap(customDictionary);
  }
  static punctuateTag(rawTag) {
    if (rawTag.indexOf(",") !== -1) {
      return rawTag;
    }
    if (rawTag.length === 8 && rawTag === rawTag.match(/[0-9a-fA-F]*/)[0]) {
      var tag = rawTag.toUpperCase();
      return "(" + tag.substring(0, 4) + "," + tag.substring(4, 8) + ")";
    }
  }
  static unpunctuateTag(tag) {
    if (tag.indexOf(",") === -1) {
      return tag;
    }
    return tag.substring(1, 10).replace(",", "");
  }
  static parseIntFromTag(tag) {
    const integerValue = parseInt("0x" + DicomMetaDictionary.unpunctuateTag(tag));
    return integerValue;
  }
  static tagAsIntegerFromName(name) {
    const item = DicomMetaDictionary.nameMap[name];
    if (item != void 0) {
      return this.parseIntFromTag(item.tag);
    } else {
      return void 0;
    }
  }
  static cleanDataset(dataset) {
    const cleanedDataset = {};
    Object.keys(dataset).forEach((tag) => {
      const data2 = Object.assign({}, dataset[tag]);
      if (data2.vr == "SQ") {
        const cleanedValues = [];
        Object.keys(data2.Value).forEach((index) => {
          cleanedValues.push(DicomMetaDictionary.cleanDataset(data2.Value[index]));
        });
        data2.Value = cleanedValues;
      } else {
        data2.Value = Object.keys(data2.Value).map((index) => {
          const item = data2.Value[index];
          if (item.constructor.name == "String") {
            return item.replace(/\0/, "");
          }
          return item;
        });
      }
      cleanedDataset[tag] = data2;
    });
    return cleanedDataset;
  }
  static namifyDataset(dataset) {
    var namedDataset = {};
    Object.keys(dataset).forEach((tag) => {
      const data2 = Object.assign({}, dataset[tag]);
      if (data2.vr == "SQ") {
        var namedValues = [];
        Object.keys(data2.Value).forEach((index) => {
          namedValues.push(DicomMetaDictionary.namifyDataset(data2.Value[index]));
        });
        data2.Value = namedValues;
      }
      var punctuatedTag = DicomMetaDictionary.punctuateTag(tag);
      var entry = DicomMetaDictionary.dictionary[punctuatedTag];
      var name = tag;
      if (entry) {
        name = entry.name;
      }
      namedDataset[name] = data2;
    });
    return namedDataset;
  }
  static naturalizeDataset(dataset) {
    const naturalDataset = ValueRepresentation.addTagAccessors({
      _vrMap: {}
    });
    Object.keys(dataset).forEach((tag) => {
      const data2 = dataset[tag];
      const punctuatedTag = DicomMetaDictionary.punctuateTag(tag);
      const entry = DicomMetaDictionary.dictionary[punctuatedTag];
      let naturalName = tag;
      if (entry) {
        naturalName = entry.name;
        if (entry.vr == "ox") {
          naturalDataset._vrMap[naturalName] = data2.vr;
        }
      }
      if (data2.Value === void 0) {
        naturalDataset[naturalName] = null;
        if (data2.InlineBinary) {
          naturalDataset[naturalName] = {
            InlineBinary: data2.InlineBinary
          };
        } else if (data2.BulkDataURI) {
          naturalDataset[naturalName] = {
            BulkDataURI: data2.BulkDataURI
          };
        }
      } else {
        if (data2.vr === "SQ") {
          const naturalValues = [];
          Object.keys(data2.Value).forEach((index) => {
            naturalValues.push(DicomMetaDictionary.naturalizeDataset(data2.Value[index]));
          });
          naturalDataset[naturalName] = naturalValues;
        } else {
          naturalDataset[naturalName] = data2.Value;
        }
        if (naturalDataset[naturalName] && naturalDataset[naturalName].length === 1) {
          const sqZero = naturalDataset[naturalName][0];
          if (sqZero && typeof sqZero === "object" && !sqZero.length) {
            naturalDataset[naturalName] = addAccessors_default(naturalDataset[naturalName], sqZero);
          } else {
            naturalDataset[naturalName] = sqZero;
          }
        }
      }
    });
    return naturalDataset;
  }
  static denaturalizeValue(naturalValue) {
    let value = naturalValue;
    if (!Array.isArray(value)) {
      value = [value];
    } else {
      const thereIsUndefinedValues = naturalValue.some((item) => item === void 0);
      if (thereIsUndefinedValues) {
        throw new Error("There are undefined values at the array naturalValue in DicomMetaDictionary.denaturalizeValue");
      }
    }
    value = value.map((entry) => entry.constructor.name == "Number" ? String(entry) : entry);
    return value;
  }
  static denaturalizeDataset(dataset, nameMap = DicomMetaDictionary.nameMap) {
    var unnaturalDataset = {};
    Object.keys(dataset).forEach((naturalName) => {
      var name = naturalName;
      var entry = nameMap[name];
      if (entry) {
        let dataValue = dataset[naturalName];
        if (dataValue === void 0) {
          return;
        }
        var dataItem = ValueRepresentation.addTagAccessors({
          vr: entry.vr
        });
        dataItem.Value = dataset[naturalName];
        if (dataValue !== null) {
          if (entry.vr == "ox") {
            if (dataset._vrMap && dataset._vrMap[naturalName]) {
              dataItem.vr = dataset._vrMap[naturalName];
            } else {
              log_default.error("No value representation given for", naturalName);
            }
          }
          let vr = ValueRepresentation.createByTypeString(dataItem.vr);
          if (name == "ReferencedPerformedProcedureStepSequence") {
            if (dataValue !== void 0 && Array.isArray(dataValue) && dataValue.length > 0) {
              const sp0 = dataValue[0];
              dataItem.Value = DicomMetaDictionary.denaturalizeValue(sp0);
            } else {
              dataItem.Value = [];
            }
          } else {
            dataItem.Value = DicomMetaDictionary.denaturalizeValue(dataItem.Value);
          }
          if (entry.vr == "SQ") {
            var unnaturalValues = [];
            for (let datasetIndex = 0; datasetIndex < dataItem.Value.length; datasetIndex++) {
              const nestedDataset = dataItem.Value[datasetIndex];
              if (nestedDataset != null) {
                unnaturalValues.push(DicomMetaDictionary.denaturalizeDataset(nestedDataset, nameMap));
              } else {
                console.warn("Skip empty data at index", datasetIndex);
              }
            }
            dataItem.Value = unnaturalValues;
          }
          if (!vr.isBinary() && vr.maxLength) {
            dataItem.Value = dataItem.Value.map((value) => {
              if (value.length > vr.maxLength) {
                log_default.warn(`Truncating value ${value} of ${naturalName} because it is longer than ${vr.maxLength}`);
                return value.slice(0, vr.maxLength);
              } else {
                return value;
              }
            });
          }
        }
        var tag = DicomMetaDictionary.unpunctuateTag(entry.tag);
        unnaturalDataset[tag] = dataItem;
      } else {
        const validMetaNames = ["_vrMap", "_meta"];
        if (validMetaNames.indexOf(name) == -1) {
          if (name !== "imageId") {
            log_default.warn("Unknown name in dataset", name, ":", dataset[name]);
          }
        }
      }
    });
    return unnaturalDataset;
  }
  static uid() {
    let uid = "2.25." + Math.floor(1 + Math.random() * 9);
    for (let index = 0; index < 38; index++) {
      uid = uid + Math.floor(Math.random() * 10);
    }
    return uid;
  }
  static date() {
    let now = new Date();
    return now.toISOString().replace(/-/g, "").slice(0, 8);
  }
  static time() {
    let now = new Date();
    return now.toISOString().replace(/:/g, "").slice(11, 17);
  }
  static dateTime() {
    let now = new Date();
    return now.toISOString().replace(/[:\-TZ]/g, "");
  }
  static _generateNameMap() {
    DicomMetaDictionary.nameMap = {};
    Object.keys(DicomMetaDictionary.dictionary).forEach((tag) => {
      var dict = DicomMetaDictionary.dictionary[tag];
      if (dict.version != "PrivateTag") {
        DicomMetaDictionary.nameMap[dict.name] = dict;
      }
    });
  }
  static _generateCustomNameMap(dictionary2) {
    const nameMap = {};
    Object.keys(dictionary2).forEach((tag) => {
      var dict = dictionary2[tag];
      if (dict.version != "PrivateTag") {
        nameMap[dict.name] = dict;
      }
    });
    return nameMap;
  }
  static _generateUIDMap() {
    DicomMetaDictionary.sopClassUIDsByName = {};
    Object.keys(DicomMetaDictionary.sopClassNamesByUID).forEach((uid) => {
      var name = DicomMetaDictionary.sopClassNamesByUID[uid];
      DicomMetaDictionary.sopClassUIDsByName[name] = uid;
    });
  }
  denaturalizeDataset(dataset) {
    return DicomMetaDictionary.denaturalizeDataset(dataset, this.customNameMap);
  }
};
DicomMetaDictionary.sopClassNamesByUID = {
  "1.2.840.10008.5.1.4.1.1.20": "NMImage",
  "1.2.840.10008.5.1.4.1.1.2": "CTImage",
  "1.2.840.10008.5.1.4.1.1.2.1": "EnhancedCTImage",
  "1.2.840.10008.5.1.4.1.1.2.2": "LegacyConvertedEnhancedCTImage",
  "1.2.840.10008.5.1.4.1.1.3.1": "USMultiframeImage",
  "1.2.840.10008.5.1.4.1.1.4": "MRImage",
  "1.2.840.10008.5.1.4.1.1.4.1": "EnhancedMRImage",
  "1.2.840.10008.5.1.4.1.1.4.2": "MRSpectroscopy",
  "1.2.840.10008.5.1.4.1.1.4.3": "EnhancedMRColorImage",
  "1.2.840.10008.5.1.4.1.1.4.4": "LegacyConvertedEnhancedMRImage",
  "1.2.840.10008.5.1.4.1.1.6.1": "USImage",
  "1.2.840.10008.5.1.4.1.1.6.2": "EnhancedUSVolume",
  "1.2.840.10008.5.1.4.1.1.7": "SecondaryCaptureImage",
  "1.2.840.10008.5.1.4.1.1.30": "ParametricMapStorage",
  "1.2.840.10008.5.1.4.1.1.66": "RawData",
  "1.2.840.10008.5.1.4.1.1.66.1": "SpatialRegistration",
  "1.2.840.10008.5.1.4.1.1.66.2": "SpatialFiducials",
  "1.2.840.10008.5.1.4.1.1.66.3": "DeformableSpatialRegistration",
  "1.2.840.10008.5.1.4.1.1.66.4": "Segmentation",
  "1.2.840.10008.5.1.4.1.1.67": "RealWorldValueMapping",
  "1.2.840.10008.5.1.4.1.1.88.11": "BasicTextSR",
  "1.2.840.10008.5.1.4.1.1.88.22": "EnhancedSR",
  "1.2.840.10008.5.1.4.1.1.88.33": "ComprehensiveSR",
  "1.2.840.10008.5.1.4.1.1.128": "PETImage",
  "1.2.840.10008.5.1.4.1.1.130": "EnhancedPETImage",
  "1.2.840.10008.5.1.4.1.1.128.1": "LegacyConvertedEnhancedPETImage"
};
DicomMetaDictionary.dictionary = dictionary_default;
DicomMetaDictionary._generateNameMap();
DicomMetaDictionary._generateUIDMap();

// src/ValueRepresentation.js
var tagProxyHandler = {
  set(target, prop, value) {
    var vrType;
    if (["values", "Value"].includes(prop) && target.vr && ValueRepresentation.hasValueAccessors(target.vr)) {
      vrType = ValueRepresentation.createByTypeString(target.vr);
    } else if (prop in DicomMetaDictionary.nameMap && ValueRepresentation.hasValueAccessors(DicomMetaDictionary.nameMap[prop].vr)) {
      vrType = ValueRepresentation.createByTypeString(DicomMetaDictionary.nameMap[prop].vr);
    } else {
      target[prop] = value;
      return true;
    }
    target[prop] = vrType.addValueAccessors(value);
    return true;
  }
};
function rtrim(str) {
  return str.replace(/\s*$/g, "");
}
function toWindows(inputArray, size) {
  return Array.from({length: inputArray.length - (size - 1)}, (_, index) => inputArray.slice(index, index + size));
}
var DicomMessage;
var Tag;
var binaryVRs = ["FL", "FD", "SL", "SS", "UL", "US", "AT"];
var explicitVRs = ["OB", "OW", "OF", "SQ", "UC", "UR", "UT", "UN"];
var singleVRs = ["SQ", "OF", "OW", "OB", "UN"];
var ValueRepresentation = class {
  constructor(type) {
    this.type = type;
    this.multi = false;
    this._isBinary = binaryVRs.indexOf(this.type) != -1;
    this._allowMultiple = !this._isBinary && singleVRs.indexOf(this.type) == -1;
    this._isExplicit = explicitVRs.indexOf(this.type) != -1;
  }
  static setDicomMessageClass(dicomMessageClass) {
    DicomMessage = dicomMessageClass;
  }
  static setTagClass(tagClass) {
    Tag = tagClass;
  }
  isBinary() {
    return this._isBinary;
  }
  allowMultiple() {
    return this._allowMultiple;
  }
  isExplicit() {
    return this._isExplicit;
  }
  addValueAccessors(value) {
    return value;
  }
  static addTagAccessors(tag) {
    var _a;
    if (!tag.__hasTagAccessors && ValueRepresentation.hasValueAccessors(((_a = tag.vr) == null ? void 0 : _a.type) || tag.vr)) {
      Object.defineProperty(tag, "__hasTagAccessors", {value: true});
      return new Proxy(tag, tagProxyHandler);
    }
    return tag;
  }
  read(stream, length, syntax) {
    if (this.fixed && this.maxLength) {
      if (!length)
        return this.defaultValue;
      if (this.maxLength != length)
        log.error("Invalid length for fixed length tag, vr " + this.type + ", length " + this.maxLength + " != " + length);
    }
    return this.readBytes(stream, length, syntax);
  }
  readBytes(stream, length) {
    return stream.readAsciiString(length);
  }
  readPaddedAsciiString(stream, length) {
    if (!length)
      return "";
    if (stream.peekUint8(length - 1) !== this.padByte) {
      return stream.readAsciiString(length);
    } else {
      var val = stream.readAsciiString(length - 1);
      stream.increment(1);
      return val;
    }
  }
  readPaddedEncodedString(stream, length) {
    if (!length)
      return "";
    const val = stream.readEncodedString(length);
    if (val.length && val[val.length - 1] !== String.fromCharCode(this.padByte)) {
      return val;
    } else {
      return val.slice(0, -1);
    }
  }
  write(stream, type) {
    var args = Array.from(arguments);
    if (args[2] === null || args[2] === "" || args[2] === void 0) {
      return [stream.writeAsciiString("")];
    } else {
      var written = [], valueArgs = args.slice(2), func = stream["write" + type];
      if (Array.isArray(valueArgs[0])) {
        if (valueArgs[0].length < 1) {
          written.push(0);
        } else {
          var self2 = this;
          valueArgs[0].forEach(function(v2, k) {
            if (self2.allowMultiple() && k > 0) {
              stream.writeUint8(VM_DELIMITER);
            }
            var singularArgs = [v2].concat(valueArgs.slice(1));
            var byteCount = func.apply(stream, singularArgs);
            written.push(byteCount);
          });
        }
      } else {
        written.push(func.apply(stream, valueArgs));
      }
      return written;
    }
  }
  writeBytes(stream, value, lengths, writeOptions = {allowInvalidVRLength: false}) {
    const {allowInvalidVRLength} = writeOptions;
    var valid = true, valarr = Array.isArray(value) ? value : [value], total = 0;
    for (var i = 0; i < valarr.length; i++) {
      var checkValue = valarr[i], checklen = lengths[i], isString = false, displaylen = checklen;
      if (checkValue === null || allowInvalidVRLength) {
        valid = true;
      } else if (this.checkLength) {
        valid = this.checkLength(checkValue);
      } else if (this.maxCharLength) {
        var check = this.maxCharLength;
        valid = checkValue.length <= check;
        displaylen = checkValue.length;
        isString = true;
      } else if (this.maxLength) {
        valid = checklen <= this.maxLength;
      }
      if (!valid) {
        var errmsg = "Value exceeds max length, vr: " + this.type + ", value: " + checkValue + ", length: " + displaylen;
        if (isString)
          log.log(errmsg);
        else
          throw new Error(errmsg);
      }
      total += checklen;
    }
    if (this.allowMultiple()) {
      total += valarr.length ? valarr.length - 1 : 0;
    }
    var written = total;
    if (total & 1) {
      stream.writeUint8(this.padByte);
      written++;
    }
    return written;
  }
  static hasValueAccessors(type) {
    if (type in VRinstances) {
      return VRinstances[type].addValueAccessors !== ValueRepresentation.prototype.addValueAccessors;
    }
    return type === void 0;
  }
  static createByTypeString(type) {
    var vr = VRinstances[type];
    if (vr === void 0) {
      if (type == "ox") {
        validationLog.error("Invalid vr type", type, "- using OW");
        vr = VRinstances["OW"];
      } else if (type == "xs") {
        validationLog.error("Invalid vr type", type, "- using US");
        vr = VRinstances["US"];
      } else {
        validationLog.error("Invalid vr type", type, "- using UN");
        vr = VRinstances["UN"];
      }
    }
    return vr;
  }
  static parseUnknownVr(type) {
    return new ParsedUnknownValue(type);
  }
};
var AsciiStringRepresentation = class extends ValueRepresentation {
  constructor(type) {
    super(type);
  }
  readBytes(stream, length) {
    return stream.readAsciiString(length);
  }
  writeBytes(stream, value, writeOptions) {
    const written = super.write(stream, "AsciiString", value);
    return super.writeBytes(stream, value, written, writeOptions);
  }
};
var EncodedStringRepresentation = class extends ValueRepresentation {
  constructor(type) {
    super(type);
  }
  readBytes(stream, length) {
    return stream.readEncodedString(length);
  }
  writeBytes(stream, value, writeOptions) {
    const written = super.write(stream, "UTF8String", value);
    return super.writeBytes(stream, value, written, writeOptions);
  }
};
var BinaryRepresentation = class extends ValueRepresentation {
  constructor(type) {
    super(type);
  }
  writeBytes(stream, value, syntax, isEncapsulated, writeOptions = {}) {
    var i;
    var binaryStream;
    var {fragmentMultiframe = true} = writeOptions;
    value = value === null || value === void 0 ? [] : value;
    if (isEncapsulated) {
      var fragmentSize = 1024 * 20, frames = value.length, startOffset = [];
      var bufferLength = 0;
      for (i = 0; i < frames; i++) {
        const needsPadding = Boolean(value[i].byteLength & 1);
        bufferLength += value[i].byteLength + (needsPadding ? 1 : 0);
        let fragmentsLength2 = 1;
        if (fragmentMultiframe) {
          fragmentsLength2 = Math.ceil(value[i].byteLength / fragmentSize);
        }
        bufferLength += fragmentsLength2 * 8;
      }
      binaryStream = new WriteBufferStream(bufferLength, stream.isLittleEndian);
      for (i = 0; i < frames; i++) {
        const needsPadding = Boolean(value[i].byteLength & 1);
        startOffset.push(binaryStream.size);
        var frameBuffer = value[i], frameStream = new ReadBufferStream(frameBuffer);
        var fragmentsLength = 1;
        if (fragmentMultiframe) {
          fragmentsLength = Math.ceil(frameStream.size / fragmentSize);
        }
        for (var j = 0, fragmentStart = 0; j < fragmentsLength; j++) {
          const isFinalFragment = j === fragmentsLength - 1;
          var fragmentEnd = fragmentStart + frameStream.size;
          if (fragmentMultiframe) {
            fragmentEnd = fragmentStart + fragmentSize;
          }
          if (isFinalFragment) {
            fragmentEnd = frameStream.size;
          }
          var fragStream = new ReadBufferStream(frameStream.getBuffer(fragmentStart, fragmentEnd));
          fragmentStart = fragmentEnd;
          binaryStream.writeUint16(65534);
          binaryStream.writeUint16(57344);
          const addPaddingByte = isFinalFragment && needsPadding;
          binaryStream.writeUint32(fragStream.size + (addPaddingByte ? 1 : 0));
          binaryStream.concat(fragStream);
          if (addPaddingByte) {
            binaryStream.writeInt8(this.padByte);
          }
        }
      }
      stream.writeUint16(65534);
      stream.writeUint16(57344);
      stream.writeUint32(startOffset.length * 4);
      for (i = 0; i < startOffset.length; i++) {
        stream.writeUint32(startOffset[i]);
      }
      stream.concat(binaryStream);
      stream.writeUint16(65534);
      stream.writeUint16(57565);
      stream.writeUint32(0);
      return 4294967295;
    } else {
      var binaryData = value[0];
      binaryStream = new ReadBufferStream(binaryData);
      stream.concat(binaryStream);
      return super.writeBytes(stream, binaryData, [binaryStream.size], writeOptions);
    }
  }
  readBytes(stream, length) {
    if (length == 4294967295) {
      var itemTagValue = Tag.readTag(stream), frames = [];
      if (itemTagValue.is(4294893568)) {
        var itemLength = stream.readUint32(), numOfFrames = 1, offsets = [];
        if (itemLength > 0) {
          numOfFrames = itemLength / 4;
          var i = 0;
          while (i++ < numOfFrames) {
            offsets.push(stream.readUint32());
          }
        } else {
          offsets = [];
        }
        const SequenceItemTag = 4294893568;
        const SequenceDelimiterTag = 4294893789;
        const getNextSequenceItemData = (stream2) => {
          const nextTag = Tag.readTag(stream2);
          if (nextTag.is(SequenceItemTag)) {
            const itemLength2 = stream2.readUint32();
            const buffer = stream2.getBuffer(stream2.offset, stream2.offset + itemLength2);
            stream2.increment(itemLength2);
            return buffer;
          } else if (nextTag.is(SequenceDelimiterTag)) {
            if (stream2.readUint32() !== 0) {
              throw Error("SequenceDelimiterItem tag value was not zero");
            }
            return null;
          }
          throw Error("Invalid tag in sequence");
        };
        if (offsets.length > 0) {
          offsets = offsets.map((e) => e + stream.offset);
          offsets.push(stream.size);
          frames = toWindows(offsets, 2).map((range) => {
            const fragments = [];
            const [start, stop] = range;
            const rangeStream = new ReadBufferStream(stream.buffer, stream.isLittleEndian, {
              start,
              stop,
              noCopy: stream.noCopy
            });
            let frameSize = 0;
            while (!rangeStream.end()) {
              const buf = getNextSequenceItemData(rangeStream);
              if (buf === null) {
                break;
              }
              fragments.push(buf);
              frameSize += buf.byteLength;
            }
            stream.offset = rangeStream.offset;
            if (fragments.length === 1) {
              return fragments[0];
            }
            if (rangeStream.noCopy) {
              return fragments;
            } else {
              const mergedFrame = new ArrayBuffer(frameSize);
              const u8Data = new Uint8Array(mergedFrame);
              fragments.reduce((offset, buffer) => {
                u8Data.set(new Uint8Array(buffer), offset);
                return offset + buffer.byteLength;
              }, 0);
              return mergedFrame;
            }
          });
        } else {
          while (!stream.end()) {
            const buffer = getNextSequenceItemData(stream);
            if (buffer === null) {
              break;
            }
            frames.push(buffer);
          }
        }
      } else {
        throw new Error("Item tag not found after undefined binary length");
      }
      return frames;
    } else {
      var bytes;
      bytes = stream.getBuffer(stream.offset, stream.offset + length);
      stream.increment(length);
      return [bytes];
    }
  }
};
var ApplicationEntity = class extends AsciiStringRepresentation {
  constructor() {
    super("AE");
    this.maxLength = 16;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    return stream.readAsciiString(length).trim();
  }
};
var CodeString = class extends AsciiStringRepresentation {
  constructor() {
    super("CS");
    this.maxLength = 16;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    return stream.readAsciiString(length).trim();
  }
};
var AgeString = class extends AsciiStringRepresentation {
  constructor() {
    super("AS");
    this.maxLength = 4;
    this.padByte = PADDING_SPACE;
    this.fixed = true;
    this.defaultValue = "";
  }
};
var AttributeTag = class extends ValueRepresentation {
  constructor() {
    super("AT");
    this.maxLength = 4;
    this.valueLength = 4;
    this.padByte = PADDING_NULL;
    this.fixed = true;
  }
  readBytes(stream) {
    return Tag.readTag(stream).value;
  }
  writeBytes(stream, value, writeOptions) {
    return super.writeBytes(stream, value, super.write(stream, "TwoUint16s", value), writeOptions);
  }
};
var DateValue = class extends AsciiStringRepresentation {
  constructor(value) {
    super("DA", value);
    this.maxLength = 18;
    this.padByte = PADDING_SPACE;
    this.defaultValue = "";
  }
};
var DecimalString = class extends AsciiStringRepresentation {
  constructor() {
    super("DS");
    this.maxLength = 16;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    const BACKSLASH = String.fromCharCode(VM_DELIMITER);
    let ds = stream.readAsciiString(length);
    ds = ds.replace(/[^0-9.\\\-+e]/gi, "");
    if (ds.indexOf(BACKSLASH) !== -1) {
      const dsArray = ds.split(BACKSLASH);
      ds = dsArray.map((ds2) => ds2 === "" ? null : Number(ds2));
    } else {
      ds = [ds === "" ? null : Number(ds)];
    }
    return ds;
  }
  formatValue(value) {
    if (value === null)
      return "";
    let str = String(value);
    if (str.length > this.maxLength) {
      const sign_chars = value < 0 ? 1 : 0;
      const logval = Math.log10(Math.abs(value));
      const use_scientific = logval < -4 || logval >= 14 - sign_chars;
      if (use_scientific) {
        const trunc_str = value.toExponential(16 - sign_chars);
        if (trunc_str.length <= 16)
          return trunc_str;
        return value.toExponential(16 - (trunc_str.length - 16) - sign_chars);
      } else {
        const trunc_str = value.toFixed(16 - sign_chars);
        if (trunc_str.length <= 16)
          return trunc_str;
        return value.toFixed(16 - sign_chars - (trunc_str.length - 16));
      }
    }
    return str;
  }
  writeBytes(stream, value, writeOptions) {
    const val = Array.isArray(value) ? value.map((ds) => this.formatValue(ds)) : [this.formatValue(value)];
    return super.writeBytes(stream, val, writeOptions);
  }
};
var DateTime = class extends AsciiStringRepresentation {
  constructor() {
    super("DT");
    this.maxLength = 26;
    this.padByte = PADDING_SPACE;
  }
};
var FloatingPointSingle = class extends ValueRepresentation {
  constructor() {
    super("FL");
    this.maxLength = 4;
    this.padByte = PADDING_NULL;
    this.fixed = true;
    this.defaultValue = 0;
  }
  readBytes(stream) {
    return Number(stream.readFloat());
  }
  writeBytes(stream, value, writeOptions) {
    return super.writeBytes(stream, value, super.write(stream, "Float", value), writeOptions);
  }
};
var FloatingPointDouble = class extends ValueRepresentation {
  constructor() {
    super("FD");
    this.maxLength = 8;
    this.padByte = PADDING_NULL;
    this.fixed = true;
    this.defaultValue = 0;
  }
  readBytes(stream) {
    return Number(stream.readDouble());
  }
  writeBytes(stream, value, writeOptions) {
    return super.writeBytes(stream, value, super.write(stream, "Double", value), writeOptions);
  }
};
var IntegerString = class extends AsciiStringRepresentation {
  constructor() {
    super("IS");
    this.maxLength = 12;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    const BACKSLASH = String.fromCharCode(VM_DELIMITER);
    let is = stream.readAsciiString(length).trim();
    is = is.replace(/[^0-9.\\\-+e]/gi, "");
    if (is.indexOf(BACKSLASH) !== -1) {
      const integerStringArray = is.split(BACKSLASH);
      is = integerStringArray.map((is2) => is2 === "" ? null : Number(is2));
    } else {
      is = [is === "" ? null : Number(is)];
    }
    return is;
  }
  formatValue(value) {
    return value === null ? "" : String(value);
  }
  writeBytes(stream, value, writeOptions) {
    const val = Array.isArray(value) ? value.map((is) => this.formatValue(is)) : [this.formatValue(value)];
    return super.writeBytes(stream, val, writeOptions);
  }
};
var LongString = class extends EncodedStringRepresentation {
  constructor() {
    super("LO");
    this.maxCharLength = 64;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    return stream.readEncodedString(length).trim();
  }
};
var LongText = class extends EncodedStringRepresentation {
  constructor() {
    super("LT");
    this.maxCharLength = 10240;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    return rtrim(stream.readEncodedString(length));
  }
};
var PersonName = class extends EncodedStringRepresentation {
  constructor() {
    super("PN");
    this.maxLength = null;
    this.padByte = PADDING_SPACE;
  }
  static checkComponentLengths(components) {
    for (var i in components) {
      var cmp = components[i];
      if (cmp.length > 64)
        return false;
    }
    return true;
  }
  addValueAccessors(value) {
    if (typeof value === "string") {
      value = new String(value);
    }
    if (value != void 0) {
      if (typeof value === "object") {
        return dicomJson_default.pnAddValueAccessors(value);
      } else {
        throw new Error("Cannot add accessors to non-string primitives");
      }
    }
    return value;
  }
  checkLength(value) {
    if (Array.isArray(value)) {
      for (const pnValue of value) {
        const components = Object.keys(pnValue).forEach((key) => value[key]);
        if (!PersonName.checkComponentLengths(components))
          return false;
      }
    } else if (typeof value === "string" || value instanceof String) {
      const values = value.split(String.fromCharCode(VM_DELIMITER));
      for (var pnString of values) {
        const components = pnString.split(String.fromCharCode(PN_COMPONENT_DELIMITER));
        if (!PersonName.checkComponentLengths(components))
          return false;
      }
    }
    return true;
  }
  readBytes(stream, length) {
    const result = this.readPaddedEncodedString(stream, length);
    return dicomJson_default.pnConvertToJsonObject(result);
  }
  writeBytes(stream, value, writeOptions) {
    return super.writeBytes(stream, dicomJson_default.pnObjectToString(value), writeOptions);
  }
};
var ShortString = class extends EncodedStringRepresentation {
  constructor() {
    super("SH");
    this.maxCharLength = 16;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    return stream.readEncodedString(length).trim();
  }
};
var SignedLong = class extends ValueRepresentation {
  constructor() {
    super("SL");
    this.maxLength = 4;
    this.padByte = PADDING_NULL;
    this.fixed = true;
    this.defaultValue = 0;
  }
  readBytes(stream) {
    return stream.readInt32();
  }
  writeBytes(stream, value, writeOptions) {
    return super.writeBytes(stream, value, super.write(stream, "Int32", value), writeOptions);
  }
};
var SequenceOfItems = class extends ValueRepresentation {
  constructor() {
    super("SQ");
    this.maxLength = null;
    this.padByte = PADDING_NULL;
    this.noMultiple = true;
  }
  readBytes(stream, sqlength, syntax) {
    if (sqlength == 0) {
      return [];
    } else {
      var undefLength = sqlength == 4294967295, elements = [], read = 0;
      while (true) {
        var tag = Tag.readTag(stream), length = null;
        read += 4;
        if (tag.is(4294893789)) {
          stream.readUint32();
          break;
        } else if (!undefLength && read == sqlength) {
          break;
        } else if (tag.is(4294893568)) {
          length = stream.readUint32();
          read += 4;
          var itemStream = null, toRead = 0, undef = length == 4294967295;
          if (undef) {
            var stack = 0;
            while (1) {
              var g = stream.readUint16();
              if (g == 65534) {
                var ge = stream.readUint16();
                let itemLength = stream.readUint32();
                stream.increment(-4);
                if (ge == 57357) {
                  if (itemLength === 0) {
                    stack--;
                    if (stack < 0) {
                      stream.increment(4);
                      read += 8;
                      break;
                    } else {
                      toRead += 4;
                    }
                  } else {
                    toRead += 2;
                  }
                } else if (ge == 57344) {
                  toRead += 4;
                  if (itemLength == 4294967295) {
                    stack++;
                  }
                } else {
                  toRead += 2;
                  stream.increment(-2);
                }
              } else {
                toRead += 2;
              }
            }
          } else {
            toRead = length;
          }
          if (toRead) {
            stream.increment(undef ? -toRead - 8 : 0);
            itemStream = stream.more(toRead);
            read += toRead;
            if (undef)
              stream.increment(8);
            var items = DicomMessage._read(itemStream, syntax);
            elements.push(items);
          }
          if (!undefLength && read == sqlength) {
            break;
          }
        }
      }
      return elements;
    }
  }
  writeBytes(stream, value, syntax, writeOptions) {
    let written = 0;
    if (value) {
      for (var i = 0; i < value.length; i++) {
        var item = value[i];
        super.write(stream, "Uint16", 65534);
        super.write(stream, "Uint16", 57344);
        super.write(stream, "Uint32", 4294967295);
        written += DicomMessage.write(item, stream, syntax, writeOptions);
        super.write(stream, "Uint16", 65534);
        super.write(stream, "Uint16", 57357);
        super.write(stream, "Uint32", 0);
        written += 16;
      }
    }
    super.write(stream, "Uint16", 65534);
    super.write(stream, "Uint16", 57565);
    super.write(stream, "Uint32", 0);
    written += 8;
    return super.writeBytes(stream, value, [written], writeOptions);
  }
};
var SignedShort = class extends ValueRepresentation {
  constructor() {
    super("SS");
    this.maxLength = 2;
    this.valueLength = 2;
    this.padByte = PADDING_NULL;
    this.fixed = true;
    this.defaultValue = 0;
  }
  readBytes(stream) {
    return stream.readInt16();
  }
  writeBytes(stream, value, writeOptions) {
    return super.writeBytes(stream, value, super.write(stream, "Int16", value), writeOptions);
  }
};
var ShortText = class extends EncodedStringRepresentation {
  constructor() {
    super("ST");
    this.maxCharLength = 1024;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    return rtrim(stream.readEncodedString(length));
  }
};
var TimeValue = class extends AsciiStringRepresentation {
  constructor() {
    super("TM");
    this.maxLength = 14;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    return rtrim(stream.readAsciiString(length));
  }
};
var UnlimitedCharacters = class extends EncodedStringRepresentation {
  constructor() {
    super("UC");
    this.maxLength = null;
    this.multi = true;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    return rtrim(stream.readEncodedString(length));
  }
};
var UnlimitedText = class extends EncodedStringRepresentation {
  constructor() {
    super("UT");
    this.maxLength = null;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    return rtrim(stream.readEncodedString(length));
  }
};
var UnsignedShort = class extends ValueRepresentation {
  constructor() {
    super("US");
    this.maxLength = 2;
    this.padByte = PADDING_NULL;
    this.fixed = true;
    this.defaultValue = 0;
  }
  readBytes(stream) {
    return stream.readUint16();
  }
  writeBytes(stream, value, writeOptions) {
    return super.writeBytes(stream, value, super.write(stream, "Uint16", value), writeOptions);
  }
};
var UnsignedLong = class extends ValueRepresentation {
  constructor() {
    super("UL");
    this.maxLength = 4;
    this.padByte = PADDING_NULL;
    this.fixed = true;
    this.defaultValue = 0;
  }
  readBytes(stream) {
    return stream.readUint32();
  }
  writeBytes(stream, value, writeOptions) {
    return super.writeBytes(stream, value, super.write(stream, "Uint32", value), writeOptions);
  }
};
var UniqueIdentifier = class extends AsciiStringRepresentation {
  constructor() {
    super("UI");
    this.maxLength = 64;
    this.padByte = PADDING_NULL;
  }
  readBytes(stream, length) {
    const result = this.readPaddedAsciiString(stream, length);
    const BACKSLASH = String.fromCharCode(VM_DELIMITER);
    const uidRegExp = /[^0-9.]/g;
    if (result.indexOf(BACKSLASH) === -1) {
      return result.replace(uidRegExp, "");
    } else {
      return result.split(BACKSLASH).map((uid) => uid.replace(uidRegExp, ""));
    }
  }
};
var UniversalResource = class extends AsciiStringRepresentation {
  constructor() {
    super("UR");
    this.maxLength = null;
    this.padByte = PADDING_SPACE;
  }
  readBytes(stream, length) {
    return stream.readAsciiString(length);
  }
};
var UnknownValue = class extends BinaryRepresentation {
  constructor() {
    super("UN");
    this.maxLength = null;
    this.padByte = PADDING_NULL;
    this.noMultiple = true;
  }
};
var ParsedUnknownValue = class extends BinaryRepresentation {
  constructor(vr) {
    super(vr);
    this.maxLength = null;
    this.padByte = 0;
    this.noMultiple = true;
    this._isBinary = true;
    this._allowMultiple = false;
    this._isExplicit = true;
  }
  read(stream, length, syntax) {
    const arrayBuffer = this.readBytes(stream, length, syntax)[0];
    const streamFromBuffer = new ReadBufferStream(arrayBuffer, true);
    const vr = ValueRepresentation.createByTypeString(this.type);
    var values = [];
    if (vr.isBinary() && length > vr.maxLength && !vr.noMultiple) {
      var times = length / vr.maxLength, i = 0;
      while (i++ < times) {
        values.push(vr.read(streamFromBuffer, vr.maxLength, syntax));
      }
    } else {
      var val = vr.read(streamFromBuffer, length, syntax);
      if (!vr.isBinary() && singleVRs.indexOf(vr.type) == -1) {
        values = val;
        if (typeof val === "string") {
          values = val.split(String.fromCharCode(VM_DELIMITER));
        }
      } else if (vr.type == "SQ") {
        values = val;
      } else if (vr.type == "OW" || vr.type == "OB") {
        values = val;
      } else {
        Array.isArray(val) ? values = val : values.push(val);
      }
    }
    return values;
  }
};
var OtherWordString = class extends BinaryRepresentation {
  constructor() {
    super("OW");
    this.maxLength = null;
    this.padByte = PADDING_NULL;
    this.noMultiple = true;
  }
};
var OtherByteString = class extends BinaryRepresentation {
  constructor() {
    super("OB");
    this.maxLength = null;
    this.padByte = PADDING_NULL;
    this.noMultiple = true;
  }
};
var OtherDoubleString = class extends BinaryRepresentation {
  constructor() {
    super("OD");
    this.maxLength = null;
    this.padByte = PADDING_NULL;
    this.noMultiple = true;
  }
};
var OtherFloatString = class extends BinaryRepresentation {
  constructor() {
    super("OF");
    this.maxLength = null;
    this.padByte = PADDING_NULL;
    this.noMultiple = true;
  }
};
var VRinstances = {
  AE: new ApplicationEntity(),
  AS: new AgeString(),
  AT: new AttributeTag(),
  CS: new CodeString(),
  DA: new DateValue(),
  DS: new DecimalString(),
  DT: new DateTime(),
  FL: new FloatingPointSingle(),
  FD: new FloatingPointDouble(),
  IS: new IntegerString(),
  LO: new LongString(),
  LT: new LongText(),
  OB: new OtherByteString(),
  OD: new OtherDoubleString(),
  OF: new OtherFloatString(),
  OW: new OtherWordString(),
  PN: new PersonName(),
  SH: new ShortString(),
  SL: new SignedLong(),
  SQ: new SequenceOfItems(),
  SS: new SignedShort(),
  ST: new ShortText(),
  TM: new TimeValue(),
  UC: new UnlimitedCharacters(),
  UI: new UniqueIdentifier(),
  UL: new UnsignedLong(),
  UN: new UnknownValue(),
  UR: new UniversalResource(),
  US: new UnsignedShort(),
  UT: new UnlimitedText()
};

// src/DicomDict.js
var EXPLICIT_LITTLE_ENDIAN2 = "1.2.840.10008.1.2.1";
var DicomMessage2;
var DicomDict = class {
  constructor(meta) {
    this.meta = meta;
    this.dict = {};
  }
  upsertTag(tag, vr, values) {
    if (this.dict[tag]) {
      this.dict[tag].Value = values;
    } else {
      this.dict[tag] = ValueRepresentation.addTagAccessors({vr});
      this.dict[tag].Value = values;
    }
  }
  write(writeOptions = {allowInvalidVRLength: true}) {
    var metaSyntax = EXPLICIT_LITTLE_ENDIAN2;
    var fileStream = new WriteBufferStream(4096, true);
    fileStream.writeUint8Repeat(0, 128);
    fileStream.writeAsciiString("DICM");
    var metaStream = new WriteBufferStream(1024);
    if (!this.meta["00020010"]) {
      this.meta["00020010"] = {
        vr: "UI",
        Value: [EXPLICIT_LITTLE_ENDIAN2]
      };
    }
    DicomMessage2.write(this.meta, metaStream, metaSyntax, writeOptions);
    DicomMessage2.writeTagObject(fileStream, "00020000", "UL", metaStream.size, metaSyntax, writeOptions);
    fileStream.concat(metaStream);
    var useSyntax = this.meta["00020010"].Value[0];
    DicomMessage2.write(this.dict, fileStream, useSyntax, writeOptions);
    return fileStream.getBuffer();
  }
  static setDicomMessageClass(dicomMessageClass) {
    DicomMessage2 = dicomMessageClass;
  }
};

// src/Tag.js
function paddingLeft(paddingValue, string) {
  return String(paddingValue + string).slice(-paddingValue.length);
}
var DicomMessage3;
var Tag2 = class {
  constructor(value) {
    this.value = value;
  }
  static setDicomMessageClass(dicomMessageClass) {
    DicomMessage3 = dicomMessageClass;
  }
  toString() {
    return "(" + paddingLeft("0000", this.group().toString(16).toUpperCase()) + "," + paddingLeft("0000", this.element().toString(16).toUpperCase()) + ")";
  }
  toCleanString() {
    return paddingLeft("0000", this.group().toString(16).toUpperCase()) + paddingLeft("0000", this.element().toString(16).toUpperCase());
  }
  is(t) {
    return this.value == t;
  }
  group() {
    return this.value >>> 16;
  }
  element() {
    return this.value & 65535;
  }
  isPixelDataTag() {
    return this.is(2145386512);
  }
  isPrivateCreator() {
    const group = this.group();
    const element = this.element();
    return group % 2 === 1 && element < 256 && element > 0;
  }
  static fromString(str) {
    var group = parseInt(str.substring(0, 4), 16), element = parseInt(str.substring(4), 16);
    return Tag2.fromNumbers(group, element);
  }
  static fromPString(str) {
    var group = parseInt(str.substring(1, 5), 16), element = parseInt(str.substring(6, 10), 16);
    return Tag2.fromNumbers(group, element);
  }
  static fromNumbers(group, element) {
    return new Tag2((group << 16 | element) >>> 0);
  }
  static readTag(stream) {
    var group = stream.readUint16(), element = stream.readUint16();
    return Tag2.fromNumbers(group, element);
  }
  write(stream, vrType, values, syntax, writeOptions) {
    var vr = ValueRepresentation.createByTypeString(vrType), useSyntax = DicomMessage3._normalizeSyntax(syntax);
    var implicit = useSyntax == IMPLICIT_LITTLE_ENDIAN ? true : false, isLittleEndian = useSyntax == IMPLICIT_LITTLE_ENDIAN || useSyntax == EXPLICIT_LITTLE_ENDIAN ? true : false, isEncapsulated = this.isPixelDataTag() && DicomMessage3.isEncapsulated(syntax);
    var oldEndian = stream.isLittleEndian;
    stream.setEndian(isLittleEndian);
    stream.writeUint16(this.group());
    stream.writeUint16(this.element());
    var tagStream = new WriteBufferStream(256), valueLength;
    tagStream.setEndian(isLittleEndian);
    if (vrType == "OW" || vrType == "OB" || vrType == "UN") {
      valueLength = vr.writeBytes(tagStream, values, useSyntax, isEncapsulated, writeOptions);
    } else if (vrType == "SQ") {
      valueLength = vr.writeBytes(tagStream, values, useSyntax, writeOptions);
    } else {
      valueLength = vr.writeBytes(tagStream, values, writeOptions);
    }
    if (vrType == "SQ") {
      valueLength = 4294967295;
    }
    var written = tagStream.size + 4;
    if (implicit) {
      stream.writeUint32(valueLength);
      written += 4;
    } else {
      if (vr.isExplicit()) {
        stream.writeAsciiString(vr.type);
        stream.writeUint16(0);
        stream.writeUint32(valueLength);
        written += 8;
      } else {
        stream.writeAsciiString(vr.type);
        stream.writeUint16(valueLength);
        written += 4;
      }
    }
    stream.concat(tagStream);
    stream.setEndian(oldEndian);
    return written;
  }
};

// src/DicomMessage.js
var singleVRs2 = ["SQ", "OF", "OW", "OB", "UN", "LT"];
var encodingMapping = {
  "": "iso-8859-1",
  "iso-ir-6": "iso-8859-1",
  "iso-ir-13": "shift-jis",
  "iso-ir-100": "latin1",
  "iso-ir-101": "iso-8859-2",
  "iso-ir-109": "iso-8859-3",
  "iso-ir-110": "iso-8859-4",
  "iso-ir-126": "iso-ir-126",
  "iso-ir-127": "iso-ir-127",
  "iso-ir-138": "iso-ir-138",
  "iso-ir-144": "iso-ir-144",
  "iso-ir-148": "iso-ir-148",
  "iso-ir-166": "tis-620",
  "iso-2022-ir-6": "iso-8859-1",
  "iso-2022-ir-13": "shift-jis",
  "iso-2022-ir-87": "iso-2022-jp",
  "iso-2022-ir-100": "latin1",
  "iso-2022-ir-101": "iso-8859-2",
  "iso-2022-ir-109": "iso-8859-3",
  "iso-2022-ir-110": "iso-8859-4",
  "iso-2022-ir-126": "iso-ir-126",
  "iso-2022-ir-127": "iso-ir-127",
  "iso-2022-ir-138": "iso-ir-138",
  "iso-2022-ir-144": "iso-ir-144",
  "iso-2022-ir-148": "iso-ir-148",
  "iso-2022-ir-149": "euc-kr",
  "iso-2022-ir-159": "iso-2022-jp",
  "iso-2022-ir-166": "tis-620",
  "iso-2022-ir-58": "iso-ir-58",
  "iso-ir-192": "utf-8",
  gb18030: "gb18030",
  "iso-2022-gbk": "gbk",
  "iso-2022-58": "gb2312",
  gbk: "gbk"
};
var encapsulatedSyntaxes = [
  "1.2.840.10008.1.2.4.50",
  "1.2.840.10008.1.2.4.51",
  "1.2.840.10008.1.2.4.57",
  "1.2.840.10008.1.2.4.70",
  "1.2.840.10008.1.2.4.80",
  "1.2.840.10008.1.2.4.81",
  "1.2.840.10008.1.2.4.90",
  "1.2.840.10008.1.2.4.91",
  "1.2.840.10008.1.2.4.92",
  "1.2.840.10008.1.2.4.93",
  "1.2.840.10008.1.2.4.94",
  "1.2.840.10008.1.2.4.95",
  "1.2.840.10008.1.2.5",
  "1.2.840.10008.1.2.6.1",
  "1.2.840.10008.1.2.4.100",
  "1.2.840.10008.1.2.4.102",
  "1.2.840.10008.1.2.4.103",
  "1.2.840.10008.1.2.4.201",
  "1.2.840.10008.1.2.4.202",
  "1.2.840.10008.1.2.4.203"
];
var DicomMessage4 = class {
  static read(bufferStream, syntax, ignoreErrors, untilTag = null, includeUntilTagValue = false) {
    log.warn("DicomMessage.read to be deprecated after dcmjs 0.24.x");
    return this._read(bufferStream, syntax, {
      ignoreErrors,
      untilTag,
      includeUntilTagValue
    });
  }
  static readTag(bufferStream, syntax, untilTag = null, includeUntilTagValue = false) {
    log.warn("DicomMessage.readTag to be deprecated after dcmjs 0.24.x");
    return this._readTag(bufferStream, syntax, {
      untilTag,
      includeUntilTagValue
    });
  }
  static _read(bufferStream, syntax, options = {
    ignoreErrors: false,
    untilTag: null,
    includeUntilTagValue: false
  }) {
    const {ignoreErrors, untilTag} = options;
    var dict = {};
    try {
      while (!bufferStream.end()) {
        const readInfo = DicomMessage4._readTag(bufferStream, syntax, options);
        const cleanTagString = readInfo.tag.toCleanString();
        if (cleanTagString === "00080005") {
          if (readInfo.values.length > 0) {
            console.log("SpecificCharacterSet", readInfo.values);
            let vals = readInfo.values;
            for (let i = vals.length - 1; i >= 0; i--) {
              if (vals[i] === "") {
                vals.splice(i, 1);
              }
            }
            readInfo.values = vals;
            console.log("SpecificCharacterSet cleanup", readInfo.values);
            let coding = readInfo.values[0];
            coding = coding.replace(/[_ ]/g, "-").toLowerCase();
            if (coding in encodingMapping) {
              coding = encodingMapping[coding];
              bufferStream.setDecoder(new TextDecoder(coding));
            } else if (ignoreErrors) {
              log.warn(`Unsupported character set: ${coding}, using default character set`);
            } else {
              throw Error(`Unsupported character set: ${coding}`);
            }
          }
          if (readInfo.values.length > 1) {
            if (ignoreErrors) {
              log.warn("Using multiple character sets is not supported, proceeding with just the first character set", readInfo.values);
            } else {
              throw Error(`Using multiple character sets is not supported: ${readInfo.values}`);
            }
          }
          readInfo.values = ["ISO_IR 192"];
        }
        dict[cleanTagString] = ValueRepresentation.addTagAccessors({
          vr: readInfo.vr.type
        });
        dict[cleanTagString].Value = readInfo.values;
        if (untilTag && untilTag === cleanTagString) {
          break;
        }
      }
      return dict;
    } catch (err2) {
      if (ignoreErrors) {
        log.warn("WARN:", err2);
        return dict;
      }
      throw err2;
    }
  }
  static _normalizeSyntax(syntax) {
    if (syntax == IMPLICIT_LITTLE_ENDIAN || syntax == EXPLICIT_LITTLE_ENDIAN || syntax == EXPLICIT_BIG_ENDIAN) {
      return syntax;
    } else {
      return EXPLICIT_LITTLE_ENDIAN;
    }
  }
  static isEncapsulated(syntax) {
    return encapsulatedSyntaxes.indexOf(syntax) != -1;
  }
  static readFile(buffer, options = {
    ignoreErrors: false,
    untilTag: null,
    includeUntilTagValue: false,
    noCopy: false
  }) {
    var stream = new ReadBufferStream(buffer, null, {
      noCopy: options.noCopy
    }), useSyntax = EXPLICIT_LITTLE_ENDIAN;
    stream.reset();
    stream.increment(128);
    if (stream.readAsciiString(4) !== "DICM") {
      throw new Error("Invalid DICOM file, expected header is missing");
    }
    var el = DicomMessage4._readTag(stream, useSyntax);
    if (el.tag.toCleanString() !== "00020000") {
      throw new Error("Invalid DICOM file, meta length tag is malformed or not present.");
    }
    var metaLength = el.values[0];
    var metaStream = stream.more(metaLength);
    var metaHeader = DicomMessage4._read(metaStream, useSyntax, options);
    var mainSyntax = metaHeader["00020010"].Value[0];
    if (mainSyntax === DEFLATED_EXPLICIT_LITTLE_ENDIAN) {
      stream = new DeflatedReadBufferStream(stream, {
        noCopy: options.noCopy
      });
    }
    mainSyntax = DicomMessage4._normalizeSyntax(mainSyntax);
    var objects = DicomMessage4._read(stream, mainSyntax, options);
    var dicomDict = new DicomDict(metaHeader);
    dicomDict.dict = objects;
    return dicomDict;
  }
  static writeTagObject(stream, tagString, vr, values, syntax, writeOptions) {
    var tag = Tag2.fromString(tagString);
    tag.write(stream, vr, values, syntax, writeOptions);
  }
  static write(jsonObjects, useStream, syntax, writeOptions) {
    var written = 0;
    var sortedTags = Object.keys(jsonObjects).sort();
    sortedTags.forEach(function(tagString) {
      var tag = Tag2.fromString(tagString), tagObject = jsonObjects[tagString], vrType = tagObject.vr, values = tagObject.Value;
      written += tag.write(useStream, vrType, values, syntax, writeOptions);
    });
    return written;
  }
  static _readTag(stream, syntax, options = {
    untilTag: null,
    includeUntilTagValue: false
  }) {
    const {untilTag, includeUntilTagValue} = options;
    var implicit = syntax == IMPLICIT_LITTLE_ENDIAN ? true : false, isLittleEndian = syntax == IMPLICIT_LITTLE_ENDIAN || syntax == EXPLICIT_LITTLE_ENDIAN ? true : false;
    var oldEndian = stream.isLittleEndian;
    stream.setEndian(isLittleEndian);
    var tag = Tag2.readTag(stream);
    if (untilTag === tag.toCleanString() && untilTag !== null) {
      if (!includeUntilTagValue) {
        return {tag, vr: 0, values: 0};
      }
    }
    var length = null, vr = null, vrType;
    if (implicit) {
      length = stream.readUint32();
      var elementData = DicomMessage4.lookupTag(tag);
      if (elementData) {
        vrType = elementData.vr;
      } else {
        if (length == 4294967295) {
          vrType = "SQ";
        } else if (tag.isPixelDataTag()) {
          vrType = "OW";
        } else if (vrType == "xs") {
          vrType = "US";
        } else if (tag.isPrivateCreator()) {
          vrType = "LO";
        } else {
          vrType = "UN";
        }
      }
      vr = ValueRepresentation.createByTypeString(vrType);
    } else {
      vrType = stream.readVR();
      if (vrType === "UN" && DicomMessage4.lookupTag(tag) && DicomMessage4.lookupTag(tag).vr) {
        vrType = DicomMessage4.lookupTag(tag).vr;
        vr = ValueRepresentation.parseUnknownVr(vrType);
      } else {
        vr = ValueRepresentation.createByTypeString(vrType);
      }
      if (vr.isExplicit()) {
        stream.increment(2);
        length = stream.readUint32();
      } else {
        length = stream.readUint16();
      }
    }
    var values = [];
    if (vr.isBinary() && length > vr.maxLength && !vr.noMultiple) {
      var times = length / vr.maxLength, i = 0;
      while (i++ < times) {
        values.push(vr.read(stream, vr.maxLength, syntax));
      }
    } else {
      var val = vr.read(stream, length, syntax);
      if (!vr.isBinary() && singleVRs2.indexOf(vr.type) == -1) {
        values = val;
        if (typeof val === "string") {
          values = val.split(String.fromCharCode(VM_DELIMITER));
        }
      } else if (vr.type == "SQ") {
        values = val;
      } else if (vr.type == "OW" || vr.type == "OB") {
        values = val;
      } else {
        Array.isArray(val) ? values = val : values.push(val);
      }
    }
    stream.setEndian(oldEndian);
    const retObj = ValueRepresentation.addTagAccessors({
      tag,
      vr
    });
    retObj.values = values;
    return retObj;
  }
  static lookupTag(tag) {
    return DicomMetaDictionary.dictionary[tag.toString()];
  }
};

// src/dicomweb.js
var DICOMWEB = class {
  constructor(options = {}) {
    this.rootURL = options.rootURL;
    this.progressCallback = options.progressCallback;
  }
  static responseType(endpoint) {
    const types = {
      wado: "arraybuffer"
    };
    return types[endpoint] ? types[endpoint] : "json";
  }
  static endpointService(endpoint) {
    const services = {
      wado: ""
    };
    return Object.keys(services).indexOf(endpoint) != -1 ? services[endpoint] : "rs/";
  }
  static randomEntry(array) {
    return array[Math.floor(Math.random() * array.length)];
  }
  request(endpoint, parameters = {}, payload) {
    let responseType = DICOMWEB.responseType(endpoint);
    let service = DICOMWEB.endpointService(endpoint);
    let url = this.rootURL + "/" + service + endpoint;
    let firstParameter = true;
    Object.keys(parameters).forEach((parameter) => {
      if (firstParameter) {
        url += "?";
        firstParameter = false;
      } else {
        url += "&";
      }
      url += parameter + "=" + encodeURIComponent(parameters[parameter]);
    });
    function promiseHandler(resolve, reject) {
      let request = new XMLHttpRequest();
      request.open("GET", url);
      request.responseType = responseType;
      request.onload = () => {
        resolve(request.response);
      };
      request.onprogress = this.progressCallback;
      request.onerror = (error) => {
        log_default.error(request.response);
        reject(error);
      };
      request.send(payload);
    }
    let promise = new Promise(promiseHandler.bind(this));
    return promise;
  }
  patients() {
    return this.request("patients");
  }
  studies(patientID) {
    return this.request("studies", {PatientID: patientID});
  }
  series(studyInstanceUID) {
    return this.request("series", {StudyInstanceUID: studyInstanceUID});
  }
  instances(studyInstanceUID, seriesInstanceUID) {
    return this.request("instances", {
      StudyInstanceUID: studyInstanceUID,
      SeriesInstanceUID: seriesInstanceUID
    });
  }
  instance(studyInstanceUID, seriesInstanceUID, sopInstanceUID) {
    return this.request("wado", {
      requestType: "WADO",
      studyUID: studyInstanceUID,
      seriesUID: seriesInstanceUID,
      objectUID: sopInstanceUID,
      contentType: "application/dicom"
    });
  }
  tests() {
    let testingServerURL = "http://quantome.org:4242/dcm4chee-arc/aets/DCM4CHEE";
    let testOptions = {rootURL: testingServerURL};
    new DICOMWEB(testOptions).patients().then((responses) => {
      responses.forEach((patient) => {
        log_default.log(patient);
      });
    });
  }
};

// src/colors.js
var Colors = class {
  static d65WhitePointXYZ() {
    return [0.950456, 1, 1.088754];
  }
  static dicomlab2RGB(dicomlab) {
    return Colors.lab2RGB(Colors.dicomlab2LAB(dicomlab));
  }
  static rgb2DICOMLAB(rgb) {
    return Colors.lab2DICOMLAB(Colors.rgb2LAB(rgb));
  }
  static dicomlab2LAB(dicomlab) {
    return [
      dicomlab[0] * 100 / 65535,
      dicomlab[1] * 255 / 65535 - 128,
      dicomlab[2] * 255 / 65535 - 128
    ];
  }
  static lab2DICOMLAB(lab) {
    return [
      lab[0] * 65535 / 100,
      (lab[1] + 128) * 65535 / 255,
      (lab[2] + 128) * 65535 / 255
    ];
  }
  static rgb2LAB(rgb) {
    return Colors.xyz2LAB(Colors.rgb2XYZ(rgb));
  }
  static gammaCorrection(n) {
    if (n <= 0.0031306684425005883) {
      return 12.92 * n;
    } else {
      return 1.055 * Math.pow(n, 0.4166666666666667) - 0.055;
    }
  }
  static invGammaCorrection(n) {
    if (n <= 0.0404482362771076) {
      return n / 12.92;
    } else {
      return Math.pow((n + 0.055) / 1.055, 2.4);
    }
  }
  static rgb2XYZ(rgb) {
    let R = Colors.invGammaCorrection(rgb[0]);
    let G = Colors.invGammaCorrection(rgb[1]);
    let B = Colors.invGammaCorrection(rgb[2]);
    return [
      0.41239558896741424 * R + 0.3575834307637148 * G + 0.18049264738170157 * B,
      0.21258623078559555 * R + 0.7151703037034108 * G + 0.07220049864333623 * B,
      0.019297215491746945 * R + 0.11918386458084854 * G + 0.9504971251315798 * B
    ];
  }
  static xyz2LAB(xyz) {
    let whitePoint = Colors.d65WhitePointXYZ();
    let X = xyz[0] / whitePoint[0];
    let Y = xyz[1] / whitePoint[1];
    let Z = xyz[2] / whitePoint[2];
    X = Colors.labf(X);
    Y = Colors.labf(Y);
    Z = Colors.labf(Z);
    return [116 * Y - 16, 500 * (X - Y), 200 * (Y - Z)];
  }
  static lab2RGB(lab) {
    return Colors.xyz2RGB(Colors.lab2XYZ(lab));
  }
  static lab2XYZ(lab) {
    let L = (lab[0] + 16) / 116;
    let a = L + lab[1] / 500;
    let b = L - lab[2] / 200;
    let whitePoint = Colors.d65WhitePointXYZ();
    return [
      whitePoint[0] * Colors.labfInv(a),
      whitePoint[1] * Colors.labfInv(L),
      whitePoint[2] * Colors.labfInv(b)
    ];
  }
  static xyz2RGB(xyz) {
    let R1 = 3.2406 * xyz[0] - 1.5372 * xyz[1] - 0.4986 * xyz[2];
    let G1 = -0.9689 * xyz[0] + 1.8758 * xyz[1] + 0.0415 * xyz[2];
    let B1 = 0.0557 * xyz[0] - 0.204 * xyz[1] + 1.057 * xyz[2];
    let minimumComponent = Math.min(R1, G1);
    minimumComponent = Math.min(minimumComponent, B1);
    if (minimumComponent < 0) {
      R1 -= minimumComponent;
      G1 -= minimumComponent;
      B1 -= minimumComponent;
    }
    return [
      Colors.gammaCorrection(R1),
      Colors.gammaCorrection(G1),
      Colors.gammaCorrection(B1)
    ];
  }
  static labf(n) {
    if (n >= 0.008856451679035631) {
      return Math.pow(n, 0.333333333333333);
    } else {
      return 841 / 108 * n + 4 / 29;
    }
  }
  static labfInv(n) {
    if (n >= 0.20689655172413793) {
      return n * n * n;
    } else {
      return 108 / 841 * (n - 4 / 29);
    }
  }
};
var colors_default = Colors;

// src/datasetToBlob.js
function datasetToDict(dataset) {
  const fileMetaInformationVersionArray = new Uint8Array(2);
  fileMetaInformationVersionArray[1] = 1;
  const TransferSyntaxUID = dataset._meta.TransferSyntaxUID && dataset._meta.TransferSyntaxUID.Value && dataset._meta.TransferSyntaxUID.Value[0] ? dataset._meta.TransferSyntaxUID.Value[0] : "1.2.840.10008.1.2.1";
  dataset._meta = {
    MediaStorageSOPClassUID: dataset.SOPClassUID,
    MediaStorageSOPInstanceUID: dataset.SOPInstanceUID,
    ImplementationVersionName: "dcmjs-0.0",
    TransferSyntaxUID,
    ImplementationClassUID: "2.25.80302813137786398554742050926734630921603366648225212145404",
    FileMetaInformationVersion: fileMetaInformationVersionArray.buffer
  };
  const denaturalized = DicomMetaDictionary.denaturalizeDataset(dataset._meta);
  const dicomDict = new DicomDict(denaturalized);
  dicomDict.dict = DicomMetaDictionary.denaturalizeDataset(dataset);
  return dicomDict;
}
function datasetToBuffer(dataset) {
  var dsDict = datasetToDict(dataset);
  for (let key in dsDict) {
    if (dsDict[key] && dsDict[key].Value && dsDict[key].Value instanceof ArrayBuffer) {
      console.warn(`Removing property ${key} as it is an ArrayBuffer`);
      delete dsDict[key];
    }
  }
  let buffer;
  try {
    buffer = Buffer.from(dsDict.write());
  } catch (e) {
    console.error("BAD BUFFER", e);
    buffer = null;
  }
  return buffer;
}
function datasetToBlob(dataset) {
  const buffer = datasetToBuffer(dataset);
  return new Blob([buffer], {type: "application/dicom"});
}

// src/derivations/DerivedDataset.js
var DerivedDataset = class {
  constructor(datasets, options = {}) {
    this.options = JSON.parse(JSON.stringify(options));
    let o = this.options;
    o.Manufacturer = options.Manufacturer || "Unspecified";
    o.ManufacturerModelName = options.ManufacturerModelName || "Unspecified";
    o.SeriesDescription = options.SeriesDescription || "Research Derived series";
    o.SeriesNumber = options.SeriesNumber || "99";
    o.SoftwareVersions = options.SoftwareVersions || "0";
    o.DeviceSerialNumber = options.DeviceSerialNumber || "1";
    let date = DicomMetaDictionary.date();
    let time = DicomMetaDictionary.time();
    o.SeriesDate = options.SeriesDate || date;
    o.SeriesTime = options.SeriesTime || time;
    o.ContentDate = options.ContentDate || date;
    o.ContentTime = options.ContentTime || time;
    o.SOPInstanceUID = options.SOPInstanceUID || DicomMetaDictionary.uid();
    o.SeriesInstanceUID = options.SeriesInstanceUID || DicomMetaDictionary.uid();
    o.ClinicalTrialTimePointID = options.ClinicalTrialTimePointID || "";
    o.ClinicalTrialCoordinatingCenterName = options.ClinicalTrialCoordinatingCenterName || "";
    o.ClinicalTrialSeriesID = options.ClinicalTrialSeriesID || "";
    o.ImageComments = options.ImageComments || "NOT FOR CLINICAL USE";
    o.ContentQualification = "RESEARCH";
    this.referencedDatasets = datasets;
    this.referencedDataset = this.referencedDatasets[0];
    this.dataset = {
      _vrMap: this.referencedDataset._vrMap,
      _meta: this.referencedDataset._meta
    };
    this.derive();
  }
  assignToDataset(data2) {
    Object.keys(data2).forEach((key) => this.dataset[key] = data2[key]);
  }
  assignFromReference(tags) {
    tags.forEach((tag) => this.dataset[tag] = this.referencedDataset[tag] || "");
  }
  assignFromOptions(tags) {
    tags.forEach((tag) => this.dataset[tag] = this.options[tag] || "");
  }
  derive() {
    this.assignFromReference([
      "AccessionNumber",
      "ReferringPhysicianName",
      "StudyDate",
      "StudyID",
      "StudyTime",
      "PatientName",
      "PatientID",
      "PatientBirthDate",
      "PatientSex",
      "PatientAge",
      "StudyInstanceUID",
      "StudyID"
    ]);
    this.assignFromOptions([
      "Manufacturer",
      "SoftwareVersions",
      "DeviceSerialNumber",
      "ManufacturerModelName",
      "SeriesDescription",
      "SeriesNumber",
      "ImageComments",
      "SeriesDate",
      "SeriesTime",
      "ContentDate",
      "ContentTime",
      "ContentQualification",
      "SOPInstanceUID",
      "SeriesInstanceUID"
    ]);
  }
  static copyDataset(dataset) {
    return JSON.parse(JSON.stringify(dataset));
  }
};
var DerivedDataset_default = DerivedDataset;

// src/derivations/DerivedPixels.js
var DerivedPixels = class extends DerivedDataset_default {
  constructor(datasets, options = {}) {
    super(datasets, options);
    let o = this.options;
    o.ContentLabel = options.ContentLabel || "";
    o.ContentDescription = options.ContentDescription || "";
    o.ContentCreatorName = options.ContentCreatorName || "";
  }
  derive() {
    super.derive();
    this.assignToDataset({
      ImageType: ["DERIVED", "PRIMARY"],
      LossyImageCompression: "00",
      InstanceNumber: "1"
    });
    this.assignFromReference([
      "SOPClassUID",
      "Modality",
      "FrameOfReferenceUID",
      "PositionReferenceIndicator",
      "NumberOfFrames",
      "Rows",
      "Columns",
      "SamplesPerPixel",
      "PhotometricInterpretation",
      "BitsStored",
      "HighBit"
    ]);
    this.assignFromOptions([
      "ContentLabel",
      "ContentDescription",
      "ContentCreatorName"
    ]);
    if (this.referencedDataset.SharedFunctionalGroupsSequence) {
      this.dataset.SharedFunctionalGroupsSequence = DerivedDataset_default.copyDataset(this.referencedDataset.SharedFunctionalGroupsSequence);
    }
    if (this.referencedDataset.PerFrameFunctionalGroupsSequence) {
      this.dataset.PerFrameFunctionalGroupsSequence = DerivedDataset_default.copyDataset(this.referencedDataset.PerFrameFunctionalGroupsSequence);
    }
    this.dataset.PixelData = new ArrayBuffer(this.referencedDataset.PixelData.byteLength);
  }
};
var DerivedPixels_default = DerivedPixels;

// src/derivations/DerivedImage.js
var DerivedImage = class extends DerivedPixels_default {
  constructor(datasets, options = {}) {
    super(datasets, options);
  }
  derive() {
    super.derive();
    this.assignFromReference([
      "WindowCenter",
      "WindowWidth",
      "BitsAllocated",
      "PixelRepresentation",
      "BodyPartExamined",
      "Laterality",
      "PatientPosition",
      "RescaleSlope",
      "RescaleIntercept",
      "PixelPresentation",
      "VolumetricProperties",
      "VolumeBasedCalculationTechnique",
      "PresentationLUTShape"
    ]);
  }
};
var DerivedImage_default = DerivedImage;

// src/normalizers.js
var Normalizer = class {
  constructor(datasets) {
    this.datasets = datasets;
    this.dataset = void 0;
  }
  static consistentSOPClassUIDs(datasets) {
    let sopClassUID;
    datasets.forEach(function(dataset) {
      if (!dataset.SOPClassUID) {
        return void 0;
      }
      if (!sopClassUID) {
        sopClassUID = dataset.SOPClassUID;
      }
      if (dataset.SOPClassUID !== sopClassUID) {
        log_default.error("inconsistent sopClassUIDs: ", dataset.SOPClassUID, sopClassUID);
        return void 0;
      }
    });
    return sopClassUID;
  }
  static normalizerForSOPClassUID(sopClassUID) {
    sopClassUID = sopClassUID.replace(/[^0-9.]/g, "");
    let toUID = DicomMetaDictionary.sopClassUIDsByName;
    let sopClassUIDMap = {};
    sopClassUIDMap[toUID.NMImage] = NMImageNormalizer;
    sopClassUIDMap[toUID.CTImage] = CTImageNormalizer;
    sopClassUIDMap[toUID.ParametricMapStorage] = PMImageNormalizer;
    sopClassUIDMap[toUID.MRImage] = MRImageNormalizer;
    sopClassUIDMap[toUID.EnhancedCTImage] = EnhancedCTImageNormalizer;
    sopClassUIDMap[toUID.LegacyConvertedEnhancedCTImage] = EnhancedCTImageNormalizer;
    sopClassUIDMap[toUID.EnhancedMRImage] = EnhancedMRImageNormalizer;
    sopClassUIDMap[toUID.LegacyConvertedEnhancedMRImage] = EnhancedMRImageNormalizer;
    sopClassUIDMap[toUID.EnhancedUSVolume] = EnhancedUSVolumeNormalizer;
    sopClassUIDMap[toUID.PETImage] = PETImageNormalizer;
    sopClassUIDMap[toUID.EnhancedPETImage] = PETImageNormalizer;
    sopClassUIDMap[toUID.LegacyConvertedEnhancedPETImage] = PETImageNormalizer;
    sopClassUIDMap[toUID.Segmentation] = SEGImageNormalizer;
    sopClassUIDMap[toUID.DeformableSpatialRegistration] = DSRNormalizer;
    return sopClassUIDMap[sopClassUID];
  }
  static isMultiframeSOPClassUID(sopClassUID) {
    const toUID = DicomMetaDictionary.sopClassUIDsByName;
    const multiframeSOPClasses = [
      toUID.NMImage,
      toUID.EnhancedMRImage,
      toUID.LegacyConvertedEnhancedMRImage,
      toUID.EnhancedCTImage,
      toUID.LegacyConvertedEnhancedCTImage,
      toUID.EnhancedUSVolume,
      toUID.EnhancedPETImage,
      toUID.LegacyConvertedEnhancedPETImage,
      toUID.Segmentation,
      toUID.ParametricMapStorage
    ];
    return multiframeSOPClasses.indexOf(sopClassUID) !== -1;
  }
  static isMultiframeDataset(ds = this.dataset) {
    const sopClassUID = ds.SOPClassUID.replace(/[^0-9.]/g, "");
    return Normalizer.isMultiframeSOPClassUID(sopClassUID);
  }
  normalize() {
    return "No normalization defined";
  }
  static normalizeToDataset(datasets) {
    let sopClassUID = Normalizer.consistentSOPClassUIDs(datasets);
    let normalizerClass = Normalizer.normalizerForSOPClassUID(sopClassUID);
    if (!normalizerClass) {
      log_default.error("no normalizerClass for ", sopClassUID);
      return void 0;
    }
    let normalizer = new normalizerClass(datasets);
    normalizer.normalize();
    return normalizer.dataset;
  }
};
var ImageNormalizer = class extends Normalizer {
  normalize() {
    this.convertToMultiframe();
    this.normalizeMultiframe();
  }
  static vec3CrossProduct(a, b) {
    let ax = a[0], ay = a[1], az = a[2], bx = b[0], by = b[1], bz = b[2];
    let out = [];
    out[0] = ay * bz - az * by;
    out[1] = az * bx - ax * bz;
    out[2] = ax * by - ay * bx;
    return out;
  }
  static vec3Subtract(a, b) {
    let out = [];
    out[0] = a[0] - b[0];
    out[1] = a[1] - b[1];
    out[2] = a[2] - b[2];
    return out;
  }
  static vec3Dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  }
  convertToMultiframe() {
    if (this.datasets.length === 1 && Normalizer.isMultiframeDataset(this.datasets[0])) {
      this.dataset = this.datasets[0];
      return;
    }
    this.derivation = new DerivedImage_default(this.datasets);
    this.dataset = this.derivation.dataset;
    let ds = this.dataset;
    let referenceDataset = this.datasets[0];
    ds.NumberOfFrames = this.datasets.length;
    ds.SOPClassUID = referenceDataset.SOPClassUID;
    ds.Rows = referenceDataset.Rows;
    ds.Columns = referenceDataset.Columns;
    ds.BitsAllocated = referenceDataset.BitsAllocated;
    ds.PixelRepresentation = referenceDataset.PixelRepresentation;
    ds.RescaleSlope = referenceDataset.RescaleSlope || "1";
    ds.RescaleIntercept = referenceDataset.RescaleIntercept || "0";
    let referencePosition = referenceDataset.ImagePositionPatient;
    let rowVector = referenceDataset.ImageOrientationPatient.slice(0, 3);
    let columnVector = referenceDataset.ImageOrientationPatient.slice(3, 6);
    let scanAxis = ImageNormalizer.vec3CrossProduct(rowVector, columnVector);
    let distanceDatasetPairs = [];
    this.datasets.forEach(function(dataset) {
      let position = dataset.ImagePositionPatient.slice();
      let positionVector = ImageNormalizer.vec3Subtract(position, referencePosition);
      let distance = ImageNormalizer.vec3Dot(positionVector, scanAxis);
      distanceDatasetPairs.push([distance, dataset]);
    });
    distanceDatasetPairs.sort(function(a, b) {
      return b[0] - a[0];
    });
    if (ds.BitsAllocated !== 16) {
      log_default.error("Only works with 16 bit data, not " + String(this.dataset.BitsAllocated));
    }
    if (referenceDataset._vrMap && !referenceDataset._vrMap.PixelData) {
      log_default.warn("No vr map given for pixel data, using OW");
      ds._vrMap = {PixelData: "OW"};
    } else {
      ds._vrMap = {PixelData: referenceDataset._vrMap.PixelData};
    }
    let frameSize = referenceDataset.PixelData.byteLength;
    ds.PixelData = new ArrayBuffer(ds.NumberOfFrames * frameSize);
    let frame = 0;
    distanceDatasetPairs.forEach(function(pair) {
      let dataset = pair[1];
      let pixels = new Uint16Array(dataset.PixelData);
      let frameView = new Uint16Array(ds.PixelData, frame * frameSize, frameSize / 2);
      try {
        frameView.set(pixels);
      } catch (e) {
        if (e instanceof RangeError) {
          const message2 = `Error inserting pixels in PixelData
frameSize ${frameSize}
NumberOfFrames ${ds.NumberOfFrames}
pair ${pair}
dataset PixelData size ${dataset.PixelData.length}`;
          log_default.error(message2);
        }
      }
      frame++;
    });
    if (ds.NumberOfFrames < 2) {
      log_default.error("Cannot populate shared groups uniquely without multiple frames");
    }
    let [distance0, dataset0] = distanceDatasetPairs[0];
    let distance1 = distanceDatasetPairs[1][0];
    const SpacingBetweenSlices = Math.abs(distance1 - distance0);
    ds.SharedFunctionalGroupsSequence = {
      PlaneOrientationSequence: {
        ImageOrientationPatient: dataset0.ImageOrientationPatient
      },
      PixelMeasuresSequence: {
        PixelSpacing: dataset0.PixelSpacing,
        SpacingBetweenSlices,
        SliceThickness: SpacingBetweenSlices
      }
    };
    ds.ReferencedSeriesSequence = {
      SeriesInstanceUID: dataset0.SeriesInstanceUID,
      ReferencedInstanceSequence: []
    };
    ds.PerFrameFunctionalGroupsSequence = [];
    distanceDatasetPairs.forEach(function(pair) {
      const dataset = pair[1];
      ds.PerFrameFunctionalGroupsSequence.push({
        PlanePositionSequence: {
          ImagePositionPatient: dataset.ImagePositionPatient
        },
        FrameVOILUTSequence: {
          WindowCenter: dataset.WindowCenter,
          WindowWidth: dataset.WindowWidth
        }
      });
      ds.ReferencedSeriesSequence.ReferencedInstanceSequence.push({
        ReferencedSOPClassUID: dataset.SOPClassUID,
        ReferencedSOPInstanceUID: dataset.SOPInstanceUID
      });
    });
    let dimensionUID = DicomMetaDictionary.uid();
    this.dataset.DimensionOrganizationSequence = {
      DimensionOrganizationUID: dimensionUID
    };
    this.dataset.DimensionIndexSequence = [
      {
        DimensionOrganizationUID: dimensionUID,
        DimensionIndexPointer: 2097202,
        FunctionalGroupPointer: 2134291,
        DimensionDescriptionLabel: "ImagePositionPatient"
      }
    ];
  }
  normalizeMultiframe() {
    let ds = this.dataset;
    if (!ds.NumberOfFrames) {
      log_default.error("Missing number or frames not supported");
      return;
    }
    if (!ds.PixelRepresentation) {
      ds.PixelRepresentation = 1;
    }
    if (!ds.StudyID || ds.StudyID === "") {
      ds.StudyID = "No Study ID";
    }
    let validLateralities = ["R", "L"];
    if (validLateralities.indexOf(ds.Laterality) === -1) {
      delete ds.Laterality;
    }
    if (!ds.PresentationLUTShape) {
      ds.PresentationLUTShape = "IDENTITY";
    }
    if (!ds.SharedFunctionalGroupsSequence) {
      log_default.error("Can only process multiframe data with SharedFunctionalGroupsSequence");
    }
    if (ds.BodyPartExamined === "PROSTATE") {
      ds.SharedFunctionalGroupsSequence.FrameAnatomySequence = {
        AnatomicRegionSequence: {
          CodeValue: "T-9200B",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Prostate"
        },
        FrameLaterality: "U"
      };
    }
    let rescaleIntercept = ds.RescaleIntercept || 0;
    let rescaleSlope = ds.RescaleSlope || 1;
    ds.SharedFunctionalGroupsSequence.PixelValueTransformationSequence = {
      RescaleIntercept: rescaleIntercept,
      RescaleSlope: rescaleSlope,
      RescaleType: "US"
    };
    let frameNumber = 1;
    this.datasets.forEach((dataset) => {
      if (ds.NumberOfFrames === 1)
        ds.PerFrameFunctionalGroupsSequence = [
          ds.PerFrameFunctionalGroupsSequence
        ];
      ds.PerFrameFunctionalGroupsSequence[frameNumber - 1].FrameContentSequence = {
        FrameAcquisitionDuration: 0,
        StackID: 1,
        InStackPositionNumber: frameNumber,
        DimensionIndexValues: frameNumber
      };
      let frameTime = dataset.AcquisitionDate + dataset.AcquisitionTime;
      if (!isNaN(frameTime)) {
        let frameContentSequence = ds.PerFrameFunctionalGroupsSequence[frameNumber - 1].FrameContentSequence;
        frameContentSequence.FrameAcquisitionDateTime = frameTime;
        frameContentSequence.FrameReferenceDateTime = frameTime;
      }
      frameNumber++;
    });
    if (ds.WindowCenter && ds.WindowWidth) {
      if (!Array.isArray(ds.WindowCenter)) {
        ds.WindowCenter = [ds.WindowCenter];
      }
      if (!Array.isArray(ds.WindowWidth)) {
        ds.WindowWidth = [ds.WindowWidth];
      }
    }
    if (!ds.WindowCenter || !ds.WindowWidth) {
      ds.WindowCenter = [];
      ds.WindowWidth = [];
      if (ds.PerFrameFunctionalGroupsSequence) {
        let wcww = {center: 0, width: 0, count: 0};
        ds.PerFrameFunctionalGroupsSequence.forEach(function(functionalGroup) {
          if (functionalGroup.FrameVOILUT) {
            let wc = functionalGroup.FrameVOILUTSequence.WindowCenter;
            let ww = functionalGroup.FrameVOILUTSequence.WindowWidth;
            if (functionalGroup.FrameVOILUTSequence && wc && ww) {
              if (Array.isArray(wc)) {
                wc = wc[0];
              }
              if (Array.isArray(ww)) {
                ww = ww[0];
              }
              wcww.center += Number(wc);
              wcww.width += Number(ww);
              wcww.count++;
            }
          }
        });
        if (wcww.count > 0) {
          ds.WindowCenter.push(String(wcww.center / wcww.count));
          ds.WindowWidth.push(String(wcww.width / wcww.count));
        }
      }
    }
    if (ds.WindowCenter.length === 0) {
      ds.WindowCenter = [300];
    }
    if (ds.WindowWidth.length === 0) {
      ds.WindowWidth = [500];
    }
  }
};
var MRImageNormalizer = class extends ImageNormalizer {
  normalize() {
    super.normalize();
    this.dataset.SOPClassUID = "LegacyConvertedEnhancedMRImage";
  }
  normalizeMultiframe() {
    super.normalizeMultiframe();
    let ds = this.dataset;
    if (!ds.ImageType || !ds.ImageType.constructor || ds.ImageType.constructor.name != "Array" || ds.ImageType.length != 4) {
      ds.ImageType = ["ORIGINAL", "PRIMARY", "OTHER", "NONE"];
    }
    ds.SharedFunctionalGroupsSequence.MRImageFrameTypeSequence = {
      FrameType: ds.ImageType,
      PixelPresentation: "MONOCHROME",
      VolumetricProperties: "VOLUME",
      VolumeBasedCalculationTechnique: "NONE",
      ComplexImageComponent: "MAGNITUDE",
      AcquisitionContrast: "UNKNOWN"
    };
  }
};
var EnhancedCTImageNormalizer = class extends ImageNormalizer {
  normalize() {
    super.normalize();
  }
};
var EnhancedMRImageNormalizer = class extends ImageNormalizer {
  normalize() {
    super.normalize();
  }
};
var EnhancedUSVolumeNormalizer = class extends ImageNormalizer {
  normalize() {
    super.normalize();
  }
};
var NMImageNormalizer = class extends ImageNormalizer {
  normalize() {
    super.normalize();
    let toUID = DicomMetaDictionary.sopClassUIDsByName;
    this.dataset.SOPClassUID = toUID.NMImage;
  }
};
var CTImageNormalizer = class extends ImageNormalizer {
  normalize() {
    super.normalize();
    let toUID = DicomMetaDictionary.sopClassUIDsByName;
    this.dataset.SOPClassUID = toUID.EnhancedCTImage;
  }
};
var PETImageNormalizer = class extends ImageNormalizer {
  normalize() {
    super.normalize();
    let toUID = DicomMetaDictionary.sopClassUIDsByName;
    this.dataset.SOPClassUID = toUID.EnhancedPETImage;
  }
};
var SEGImageNormalizer = class extends ImageNormalizer {
  normalize() {
    super.normalize();
  }
};
var PMImageNormalizer = class extends ImageNormalizer {
  normalize() {
    super.normalize();
    let ds = this.datasets[0];
    if (ds.BitsAllocated !== 32) {
      log_default.error("Only works with 32 bit data, not " + String(ds.BitsAllocated));
    }
  }
};
var DSRNormalizer = class extends Normalizer {
  normalize() {
    this.dataset = this.datasets[0];
  }
};

// src/derivations/Segmentation.js
var Segmentation = class extends DerivedPixels_default {
  constructor(datasets, options = {includeSliceSpacing: true}) {
    super(datasets, options);
  }
  derive() {
    super.derive();
    this.assignToDataset({
      SOPClassUID: DicomMetaDictionary.sopClassUIDsByName.Segmentation,
      Modality: "SEG",
      SamplesPerPixel: "1",
      PhotometricInterpretation: "MONOCHROME2",
      BitsAllocated: "1",
      BitsStored: "1",
      HighBit: "0",
      PixelRepresentation: "0",
      LossyImageCompression: "00",
      SegmentationType: "BINARY",
      ContentLabel: "SEGMENTATION"
    });
    let dimensionUID = DicomMetaDictionary.uid();
    this.dataset.DimensionOrganizationSequence = {
      DimensionOrganizationUID: dimensionUID
    };
    this.dataset.DimensionIndexSequence = [
      {
        DimensionOrganizationUID: dimensionUID,
        DimensionIndexPointer: 6422539,
        FunctionalGroupPointer: 6422538,
        DimensionDescriptionLabel: "ReferencedSegmentNumber"
      },
      {
        DimensionOrganizationUID: dimensionUID,
        DimensionIndexPointer: 2097202,
        FunctionalGroupPointer: 2134291,
        DimensionDescriptionLabel: "ImagePositionPatient"
      }
    ];
    this.dataset.SegmentSequence = [];
    if (this.referencedDataset.ReferencedSeriesSequence) {
      this.dataset.ReferencedSeriesSequence = DerivedDataset_default.copyDataset(this.referencedDataset.ReferencedSeriesSequence);
    } else {
      const ReferencedInstanceSequence = [];
      for (let i = 0; i < this.referencedDatasets.length; i++) {
        ReferencedInstanceSequence.push({
          ReferencedSOPClassUID: this.referencedDatasets[i].SOPClassUID,
          ReferencedSOPInstanceUID: this.referencedDatasets[i].SOPInstanceUID
        });
      }
      this.dataset.ReferencedSeriesSequence = {
        SeriesInstanceUID: this.referencedDataset.SeriesInstanceUID,
        StudyInstanceUID: this.referencedDataset.StudyInstanceUID,
        ReferencedInstanceSequence
      };
    }
    if (!this.options.includeSliceSpacing) {
      delete this.dataset.SharedFunctionalGroupsSequence.PixelMeasuresSequence.SpacingBetweenSlices;
    }
    if (this.dataset.SharedFunctionalGroupsSequence.PixelValueTransformationSequence) {
      delete this.dataset.SharedFunctionalGroupsSequence.PixelValueTransformationSequence;
    }
    this.dataset.PixelData = void 0;
    this.dataset.NumberOfFrames = 0;
    this.dataset.PerFrameFunctionalGroupsSequence = [];
  }
  setNumberOfFrames(NumberOfFrames) {
    const dataset = this.dataset;
    dataset.NumberOfFrames = NumberOfFrames;
    dataset.PixelData = new ArrayBuffer(dataset.Rows * dataset.Columns * NumberOfFrames);
  }
  bitPackPixelData() {
    if (this.isBitpacked) {
      console.warn(`This.bitPackPixelData has already been called, it should only be called once, when all frames have been added. Exiting.`);
    }
    const dataset = this.dataset;
    const unpackedPixelData = dataset.PixelData;
    const uInt8ViewUnpackedPixelData = new Uint8Array(unpackedPixelData);
    const bitPackedPixelData = BitArray.pack(uInt8ViewUnpackedPixelData);
    dataset.PixelData = bitPackedPixelData.buffer;
    this.isBitpacked = true;
  }
  addSegmentFromLabelmap(Segment, labelmaps, segmentIndexInLabelmap, referencedFrameNumbers) {
    if (this.dataset.NumberOfFrames === 0) {
      throw new Error("Must set the total number of frames via setNumberOfFrames() before adding segments to the segmentation.");
    }
    this._addSegmentPixelDataFromLabelmaps(labelmaps, segmentIndexInLabelmap);
    const ReferencedSegmentNumber = this._addSegmentMetadata(Segment);
    this._addPerFrameFunctionalGroups(ReferencedSegmentNumber, referencedFrameNumbers);
  }
  _addSegmentPixelDataFromLabelmaps(labelmaps, segmentIndex) {
    const dataset = this.dataset;
    const existingFrames = dataset.PerFrameFunctionalGroupsSequence.length;
    const sliceLength = dataset.Rows * dataset.Columns;
    const byteOffset = existingFrames * sliceLength;
    const pixelDataUInt8View = new Uint8Array(dataset.PixelData, byteOffset, labelmaps.length * sliceLength);
    const occupiedValue = this._getOccupiedValue();
    for (let l = 0; l < labelmaps.length; l++) {
      const labelmap = labelmaps[l];
      for (let i = 0; i < labelmap.length; i++) {
        if (labelmap[i] === segmentIndex) {
          pixelDataUInt8View[l * sliceLength + i] = occupiedValue;
        }
      }
    }
  }
  _getOccupiedValue() {
    if (this.dataset.SegmentationType === "FRACTIONAL") {
      return 255;
    }
    return 1;
  }
  addSegment(Segment, pixelData, referencedFrameNumbers) {
    if (this.dataset.NumberOfFrames === 0) {
      throw new Error("Must set the total number of frames via setNumberOfFrames() before adding segments to the segmentation.");
    }
    this._addSegmentPixelData(pixelData);
    const ReferencedSegmentNumber = this._addSegmentMetadata(Segment);
    this._addPerFrameFunctionalGroups(ReferencedSegmentNumber, referencedFrameNumbers);
  }
  _addSegmentPixelData(pixelData) {
    const dataset = this.dataset;
    const existingFrames = dataset.PerFrameFunctionalGroupsSequence.length;
    const sliceLength = dataset.Rows * dataset.Columns;
    const byteOffset = existingFrames * sliceLength;
    const pixelDataUInt8View = new Uint8Array(dataset.PixelData, byteOffset, pixelData.length);
    for (let i = 0; i < pixelData.length; i++) {
      pixelDataUInt8View[i] = pixelData[i];
    }
  }
  _addPerFrameFunctionalGroups(ReferencedSegmentNumber, referencedFrameNumbers) {
    const PerFrameFunctionalGroupsSequence = this.dataset.PerFrameFunctionalGroupsSequence;
    const ReferencedSeriesSequence = this.referencedDataset.ReferencedSeriesSequence;
    for (let i = 0; i < referencedFrameNumbers.length; i++) {
      const frameNumber = referencedFrameNumbers[i];
      const perFrameFunctionalGroups = {};
      perFrameFunctionalGroups.PlanePositionSequence = DerivedDataset_default.copyDataset(this.referencedDataset.PerFrameFunctionalGroupsSequence[frameNumber - 1].PlanePositionSequence);
      if (!this.dataset.SharedFunctionalGroupsSequence.PlaneOrientationSequence) {
        perFrameFunctionalGroups.PlaneOrientationSequence = DerivedDataset_default.copyDataset(this.referencedDataset.PerFrameFunctionalGroupsSequence[frameNumber - 1].PlaneOrientationSequence);
      }
      perFrameFunctionalGroups.FrameContentSequence = {
        DimensionIndexValues: [ReferencedSegmentNumber, frameNumber]
      };
      perFrameFunctionalGroups.SegmentIdentificationSequence = {
        ReferencedSegmentNumber
      };
      let ReferencedSOPClassUID;
      let ReferencedSOPInstanceUID;
      let ReferencedFrameNumber;
      if (ReferencedSeriesSequence) {
        const referencedInstanceSequenceI = ReferencedSeriesSequence.ReferencedInstanceSequence[frameNumber - 1];
        ReferencedSOPClassUID = referencedInstanceSequenceI.ReferencedSOPClassUID;
        ReferencedSOPInstanceUID = referencedInstanceSequenceI.ReferencedSOPInstanceUID;
        if (Normalizer.isMultiframeSOPClassUID(ReferencedSOPClassUID)) {
          ReferencedFrameNumber = frameNumber;
        }
      } else {
        ReferencedSOPClassUID = this.referencedDataset.SOPClassUID;
        ReferencedSOPInstanceUID = this.referencedDataset.SOPInstanceUID;
        ReferencedFrameNumber = frameNumber;
      }
      if (ReferencedFrameNumber) {
        perFrameFunctionalGroups.DerivationImageSequence = {
          SourceImageSequence: {
            ReferencedSOPClassUID,
            ReferencedSOPInstanceUID,
            ReferencedFrameNumber,
            PurposeOfReferenceCodeSequence: {
              CodeValue: "121322",
              CodingSchemeDesignator: "DCM",
              CodeMeaning: "Source image for image processing operation"
            }
          },
          DerivationCodeSequence: {
            CodeValue: "113076",
            CodingSchemeDesignator: "DCM",
            CodeMeaning: "Segmentation"
          }
        };
      } else {
        perFrameFunctionalGroups.DerivationImageSequence = {
          SourceImageSequence: {
            ReferencedSOPClassUID,
            ReferencedSOPInstanceUID,
            PurposeOfReferenceCodeSequence: {
              CodeValue: "121322",
              CodingSchemeDesignator: "DCM",
              CodeMeaning: "Source image for image processing operation"
            }
          },
          DerivationCodeSequence: {
            CodeValue: "113076",
            CodingSchemeDesignator: "DCM",
            CodeMeaning: "Segmentation"
          }
        };
      }
      PerFrameFunctionalGroupsSequence.push(perFrameFunctionalGroups);
    }
  }
  _addSegmentMetadata(Segment) {
    if (!Segment.SegmentLabel || !Segment.SegmentedPropertyCategoryCodeSequence || !Segment.SegmentedPropertyTypeCodeSequence || !Segment.SegmentAlgorithmType) {
      throw new Error(`Segment does not contain all the required fields.`);
    }
    Segment.SegmentAlgorithmType = Segment.SegmentAlgorithmType.toUpperCase();
    switch (Segment.SegmentAlgorithmType) {
      case "AUTOMATIC":
      case "SEMIAUTOMATIC":
        if (!Segment.SegmentAlgorithmName) {
          throw new Error(`If the SegmentAlgorithmType is SEMIAUTOMATIC or AUTOMATIC,
          SegmentAlgorithmName must be provided`);
        }
        break;
      case "MANUAL":
        break;
      default:
        throw new Error(`SegmentAlgorithmType ${Segment.SegmentAlgorithmType} invalid.`);
    }
    const SegmentSequence = this.dataset.SegmentSequence;
    const SegmentAlgorithmType = Segment.SegmentAlgorithmType;
    const reNumberedSegmentCopy = {
      SegmentedPropertyCategoryCodeSequence: Segment.SegmentedPropertyCategoryCodeSequence,
      SegmentNumber: (SegmentSequence.length + 1).toString(),
      SegmentLabel: Segment.SegmentLabel,
      SegmentAlgorithmType,
      RecommendedDisplayCIELabValue: Segment.RecommendedDisplayCIELabValue,
      SegmentedPropertyTypeCodeSequence: Segment.SegmentedPropertyTypeCodeSequence
    };
    if (SegmentAlgorithmType === "AUTOMATIC" || SegmentAlgorithmType === "SEMIAUTOMATIC") {
      reNumberedSegmentCopy.SegmentAlgorithmName = Segment.SegmentAlgorithmName;
    }
    SegmentSequence.push(reNumberedSegmentCopy);
    return reNumberedSegmentCopy.SegmentNumber;
  }
};
var Segmentation_default = Segmentation;

// src/derivations/ParametricMap.js
var ParametricMap = class extends DerivedDataset_default {
  constructor(datasets, options = {}) {
    super(datasets, options);
  }
  derive() {
    super.derive();
    this.assignToDataset({});
    this.assignFromReference([]);
  }
};
var ParametricMap_default = ParametricMap;

// src/derivations/StructuredReport.js
var StructuredReport = class extends DerivedDataset_default {
  constructor(datasets, options = {}) {
    super(datasets, options);
  }
  derive() {
    super.derive();
    this.assignToDataset({
      SOPClassUID: DicomMetaDictionary.sopClassUIDsByName.EnhancedSR,
      Modality: "SR",
      ValueType: "CONTAINER"
    });
    this.assignFromReference([]);
  }
};
var StructuredReport_default = StructuredReport;

// src/utilities/TID1500/TID1500MeasurementReport.js
var TID1500MeasurementReport = class {
  constructor(TIDIncludeGroups) {
    this.TIDIncludeGroups = TIDIncludeGroups;
    const ImageLibraryContentSequence = [];
    const CurrentRequestedProcedureEvidenceSequence = [];
    this.ImageLibraryContentSequence = ImageLibraryContentSequence;
    this.CurrentRequestedProcedureEvidenceSequence = CurrentRequestedProcedureEvidenceSequence;
    this.PersonObserverName = {
      RelationshipType: "HAS OBS CONTEXT",
      ValueType: "PNAME",
      ConceptNameCodeSequence: {
        CodeValue: "121008",
        CodingSchemeDesignator: "DCM",
        CodeMeaning: "Person Observer Name"
      },
      PersonName: "unknown^unknown"
    };
    this.tid1500 = {
      ConceptNameCodeSequence: {
        CodeValue: "126000",
        CodingSchemeDesignator: "DCM",
        CodeMeaning: "Imaging Measurement Report"
      },
      ContinuityOfContent: "SEPARATE",
      PerformedProcedureCodeSequence: [],
      CompletionFlag: "COMPLETE",
      VerificationFlag: "UNVERIFIED",
      ReferencedPerformedProcedureStepSequence: [],
      InstanceNumber: 1,
      CurrentRequestedProcedureEvidenceSequence,
      CodingSchemeIdentificationSequence: {
        CodingSchemeDesignator: "99dcmjs",
        CodingSchemeName: "Codes used for dcmjs",
        CodingSchemeVersion: "0",
        CodingSchemeResponsibleOrganization: "https://github.com/dcmjs-org/dcmjs"
      },
      ContentTemplateSequence: {
        MappingResource: "DCMR",
        TemplateIdentifier: "1500"
      },
      ContentSequence: [
        {
          RelationshipType: "HAS CONCEPT MOD",
          ValueType: "CODE",
          ConceptNameCodeSequence: addAccessors_default({
            CodeValue: "121049",
            CodingSchemeDesignator: "DCM",
            CodeMeaning: "Language of Content Item and Descendants"
          }),
          ConceptCodeSequence: addAccessors_default({
            CodeValue: "eng",
            CodingSchemeDesignator: "RFC5646",
            CodeMeaning: "English"
          }),
          ContentSequence: addAccessors_default({
            RelationshipType: "HAS CONCEPT MOD",
            ValueType: "CODE",
            ConceptNameCodeSequence: addAccessors_default({
              CodeValue: "121046",
              CodingSchemeDesignator: "DCM",
              CodeMeaning: "Country of Language"
            }),
            ConceptCodeSequence: addAccessors_default({
              CodeValue: "US",
              CodingSchemeDesignator: "ISO3166_1",
              CodeMeaning: "United States"
            })
          })
        },
        this.PersonObserverName,
        {
          RelationshipType: "HAS CONCEPT MOD",
          ValueType: "CODE",
          ConceptNameCodeSequence: addAccessors_default({
            CodeValue: "121058",
            CodingSchemeDesignator: "DCM",
            CodeMeaning: "Procedure reported"
          }),
          ConceptCodeSequence: addAccessors_default({
            CodeValue: "1",
            CodingSchemeDesignator: "99dcmjs",
            CodeMeaning: "Unknown procedure"
          })
        },
        {
          RelationshipType: "CONTAINS",
          ValueType: "CONTAINER",
          ConceptNameCodeSequence: {
            CodeValue: "111028",
            CodingSchemeDesignator: "DCM",
            CodeMeaning: "Image Library"
          },
          ContinuityOfContent: "SEPARATE",
          ContentSequence: {
            RelationshipType: "CONTAINS",
            ValueType: "CONTAINER",
            ConceptNameCodeSequence: {
              CodeValue: "126200",
              CodingSchemeDesignator: "DCM",
              CodeMeaning: "Image Library Group"
            },
            ContinuityOfContent: "SEPARATE",
            ContentSequence: ImageLibraryContentSequence
          }
        }
      ]
    };
  }
  validate() {
  }
  contentItem(derivationSourceDatasetOrDatasets, options = {}) {
    if (options.PersonName) {
      this.PersonObserverName.PersonName = options.PersonName;
    }
    const derivationSourceDatasets = Array.isArray(derivationSourceDatasetOrDatasets) ? derivationSourceDatasetOrDatasets : [derivationSourceDatasetOrDatasets];
    this.addTID1501MeasurementGroups(derivationSourceDatasets, options);
    return this.tid1500;
  }
  addTID1501MeasurementGroups(derivationSourceDatasets, options = {}) {
    const {
      CurrentRequestedProcedureEvidenceSequence,
      ImageLibraryContentSequence
    } = this;
    const {sopInstanceUIDsToSeriesInstanceUIDMap} = options;
    if (derivationSourceDatasets.length > 1 && sopInstanceUIDsToSeriesInstanceUIDMap === void 0) {
      throw new Error(`addTID1501MeasurementGroups provided with ${derivationSourceDatasets.length} derivationSourceDatasets, with no sopInstanceUIDsToSeriesInstanceUIDMap in options.`);
    }
    const {TID1501MeasurementGroups} = this.TIDIncludeGroups;
    if (!TID1501MeasurementGroups) {
      return;
    }
    let ContentSequence3 = [];
    TID1501MeasurementGroups.forEach((child) => {
      ContentSequence3 = ContentSequence3.concat(child.contentItem());
    });
    const parsedSOPInstances = [];
    TID1501MeasurementGroups.forEach((measurementGroup) => {
      measurementGroup.TID300Measurements.forEach((measurement) => {
        const {ReferencedSOPInstanceUID} = measurement.ReferencedSOPSequence;
        if (!parsedSOPInstances.includes(ReferencedSOPInstanceUID)) {
          ImageLibraryContentSequence.push({
            RelationshipType: "CONTAINS",
            ValueType: "IMAGE",
            ReferencedSOPSequence: measurement.ReferencedSOPSequence
          });
          let derivationSourceDataset;
          if (derivationSourceDatasets.length === 1) {
            derivationSourceDataset = derivationSourceDatasets[0];
          } else {
            const SeriesInstanceUID = sopInstanceUIDsToSeriesInstanceUIDMap[ReferencedSOPInstanceUID];
            derivationSourceDataset = derivationSourceDatasets.find((dsd) => dsd.SeriesInstanceUID === SeriesInstanceUID);
          }
          CurrentRequestedProcedureEvidenceSequence.push({
            StudyInstanceUID: derivationSourceDataset.StudyInstanceUID,
            ReferencedSeriesSequence: {
              SeriesInstanceUID: derivationSourceDataset.SeriesInstanceUID,
              ReferencedSOPSequence: measurement.ReferencedSOPSequence
            }
          });
          parsedSOPInstances.push(ReferencedSOPInstanceUID);
        }
      });
    });
    const ImagingMeasurments = {
      RelationshipType: "CONTAINS",
      ValueType: "CONTAINER",
      ConceptNameCodeSequence: {
        CodeValue: "126010",
        CodingSchemeDesignator: "DCM",
        CodeMeaning: "Imaging Measurements"
      },
      ContinuityOfContent: "SEPARATE",
      ContentSequence: ContentSequence3
    };
    this.tid1500.ContentSequence.push(ImagingMeasurments);
  }
};
var TID1500MeasurementReport_default = TID1500MeasurementReport;

// src/utilities/TID1500/TID1501MeasurementGroup.js
var TID1501MeasurementGroup = class {
  constructor(TID300Measurements) {
    this.TID300Measurements = TID300Measurements;
  }
  contentItem() {
    const {TID300Measurements} = this;
    let measurementGroups = [];
    TID300Measurements.forEach((TID300Measurement2) => {
      measurementGroups.push(this.getMeasurementGroup(TID300Measurement2.contentItem()));
    });
    return measurementGroups;
  }
  getMeasurementGroup(contentSequenceEntries) {
    return {
      RelationshipType: "CONTAINS",
      ValueType: "CONTAINER",
      ConceptNameCodeSequence: {
        CodeValue: "125007",
        CodingSchemeDesignator: "DCM",
        CodeMeaning: "Measurement Group"
      },
      ContinuityOfContent: "SEPARATE",
      ContentSequence: [...contentSequenceEntries]
    };
  }
};
var TID1501MeasurementGroup_default = TID1501MeasurementGroup;

// src/adapters/helpers.js
var toArray = function(x) {
  return Array.isArray(x) ? x : [x];
};
var codeMeaningEquals = (codeMeaningName) => {
  return (contentItem) => {
    return contentItem.ConceptNameCodeSequence.CodeMeaning === codeMeaningName;
  };
};
var graphicTypeEquals = (graphicType) => {
  return (contentItem) => {
    return contentItem && contentItem.GraphicType === graphicType;
  };
};

// src/adapters/Cornerstone/MeasurementReport.js
var FINDING = {CodingSchemeDesignator: "DCM", CodeValue: "121071"};
var FINDING_SITE = {CodingSchemeDesignator: "SCT", CodeValue: "363698007"};
var FINDING_SITE_OLD = {CodingSchemeDesignator: "SRT", CodeValue: "G-C0E3"};
var codeValueMatch = (group, code, oldCode) => {
  const {ConceptNameCodeSequence} = group;
  if (!ConceptNameCodeSequence)
    return;
  const {CodingSchemeDesignator: CodingSchemeDesignator3, CodeValue} = ConceptNameCodeSequence;
  return CodingSchemeDesignator3 == code.CodingSchemeDesignator && CodeValue == code.CodeValue || oldCode && CodingSchemeDesignator3 == oldCode.CodingSchemeDesignator && CodeValue == oldCode.CodeValue;
};
function getTID300ContentItem(tool, toolType, ReferencedSOPSequence, toolClass) {
  const args = toolClass.getTID300RepresentationArguments(tool);
  args.ReferencedSOPSequence = ReferencedSOPSequence;
  const TID300Measurement2 = new toolClass.TID300Representation(args);
  return TID300Measurement2;
}
function getMeasurementGroup(toolType, toolData, ReferencedSOPSequence) {
  const toolTypeData = toolData[toolType];
  const toolClass = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolType];
  if (!toolTypeData || !toolTypeData.data || !toolTypeData.data.length || !toolClass) {
    return;
  }
  const Measurements = toolTypeData.data.map((tool) => {
    return getTID300ContentItem(tool, toolType, ReferencedSOPSequence, toolClass);
  });
  return new TID1501MeasurementGroup_default(Measurements);
}
var MeasurementReport = class {
  constructor() {
  }
  static getSetupMeasurementData(MeasurementGroup) {
    const {ContentSequence: ContentSequence3} = MeasurementGroup;
    const contentSequenceArr = toArray(ContentSequence3);
    const findingGroup = contentSequenceArr.find((group) => codeValueMatch(group, FINDING));
    const findingSiteGroups = contentSequenceArr.filter((group) => codeValueMatch(group, FINDING_SITE, FINDING_SITE_OLD)) || [];
    const NUMGroup = contentSequenceArr.find((group) => group.ValueType === "NUM");
    const SCOORDGroup = toArray(NUMGroup.ContentSequence).find((group) => group.ValueType === "SCOORD");
    const {ReferencedSOPSequence} = SCOORDGroup.ContentSequence;
    const {ReferencedSOPInstanceUID, ReferencedFrameNumber} = ReferencedSOPSequence;
    const defaultState = {
      sopInstanceUid: ReferencedSOPInstanceUID,
      frameIndex: ReferencedFrameNumber || 1,
      complete: true,
      finding: findingGroup ? addAccessors_default(findingGroup.ConceptCodeSequence) : void 0,
      findingSites: findingSiteGroups.map((fsg) => {
        return addAccessors_default(fsg.ConceptCodeSequence);
      })
    };
    if (defaultState.finding) {
      defaultState.description = defaultState.finding.CodeMeaning;
    }
    const findingSite = defaultState.findingSites && defaultState.findingSites[0];
    if (findingSite) {
      defaultState.location = findingSite[0] && findingSite[0].CodeMeaning || findingSite.CodeMeaning;
    }
    return {
      defaultState,
      findingGroup,
      findingSiteGroups,
      NUMGroup,
      SCOORDGroup,
      ReferencedSOPSequence,
      ReferencedSOPInstanceUID,
      ReferencedFrameNumber
    };
  }
  static generateReport(toolState, metadataProvider, options) {
    let allMeasurementGroups = [];
    const firstImageId = Object.keys(toolState)[0];
    if (!firstImageId) {
      throw new Error("No measurements provided.");
    }
    const generalSeriesModule = metadataProvider.get("generalSeriesModule", firstImageId);
    const {studyInstanceUID, seriesInstanceUID} = generalSeriesModule;
    Object.keys(toolState).forEach((imageId) => {
      const sopCommonModule = metadataProvider.get("sopCommonModule", imageId);
      const frameNumber = metadataProvider.get("frameNumber", imageId);
      const toolData = toolState[imageId];
      const toolTypes = Object.keys(toolData);
      const ReferencedSOPSequence = {
        ReferencedSOPClassUID: sopCommonModule.sopClassUID,
        ReferencedSOPInstanceUID: sopCommonModule.sopInstanceUID
      };
      if (Normalizer.isMultiframeSOPClassUID(sopCommonModule.sopClassUID)) {
        ReferencedSOPSequence.ReferencedFrameNumber = frameNumber;
      }
      const measurementGroups = [];
      toolTypes.forEach((toolType) => {
        const group = getMeasurementGroup(toolType, toolData, ReferencedSOPSequence);
        if (group) {
          measurementGroups.push(group);
        }
      });
      allMeasurementGroups = allMeasurementGroups.concat(measurementGroups);
    });
    const MeasurementReport5 = new TID1500MeasurementReport_default({TID1501MeasurementGroups: allMeasurementGroups}, options);
    const fileMetaInformationVersionArray = new Uint8Array(2);
    fileMetaInformationVersionArray[1] = 1;
    const derivationSourceDataset = {
      StudyInstanceUID: studyInstanceUID,
      SeriesInstanceUID: seriesInstanceUID
    };
    const _meta = {
      FileMetaInformationVersion: {
        Value: [fileMetaInformationVersionArray.buffer],
        vr: "OB"
      },
      TransferSyntaxUID: {
        Value: ["1.2.840.10008.1.2.1"],
        vr: "UI"
      },
      ImplementationClassUID: {
        Value: [DicomMetaDictionary.uid()],
        vr: "UI"
      },
      ImplementationVersionName: {
        Value: ["dcmjs"],
        vr: "SH"
      }
    };
    const _vrMap = {
      PixelData: "OW"
    };
    derivationSourceDataset._meta = _meta;
    derivationSourceDataset._vrMap = _vrMap;
    const report = new StructuredReport_default([derivationSourceDataset]);
    const contentItem = MeasurementReport5.contentItem(derivationSourceDataset);
    report.dataset = Object.assign(report.dataset, contentItem);
    report.dataset._meta = _meta;
    return report;
  }
  static generateToolState(dataset, hooks = {}) {
    if (dataset.ContentTemplateSequence.TemplateIdentifier !== "1500") {
      throw new Error("This package can currently only interpret DICOM SR TID 1500");
    }
    const REPORT = "Imaging Measurements";
    const GROUP = "Measurement Group";
    const TRACKING_IDENTIFIER = "Tracking Identifier";
    const imagingMeasurementContent = toArray(dataset.ContentSequence).find(codeMeaningEquals(REPORT));
    const measurementGroups = toArray(imagingMeasurementContent.ContentSequence).filter(codeMeaningEquals(GROUP));
    const measurementData = {};
    const cornerstoneToolClasses = MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;
    const registeredToolClasses = [];
    Object.keys(cornerstoneToolClasses).forEach((key) => {
      registeredToolClasses.push(cornerstoneToolClasses[key]);
      measurementData[key] = [];
    });
    measurementGroups.forEach((measurementGroup) => {
      const measurementGroupContentSequence = toArray(measurementGroup.ContentSequence);
      const TrackingIdentifierGroup = measurementGroupContentSequence.find((contentItem) => contentItem.ConceptNameCodeSequence.CodeMeaning === TRACKING_IDENTIFIER);
      const TrackingIdentifierValue = TrackingIdentifierGroup.TextValue;
      const toolClass = hooks.getToolClass ? hooks.getToolClass(measurementGroup, dataset, registeredToolClasses) : registeredToolClasses.find((tc) => tc.isValidCornerstoneTrackingIdentifier(TrackingIdentifierValue));
      if (toolClass) {
        const measurement = toolClass.getMeasurementData(measurementGroup);
        console.log(`=== ${toolClass.toolType} ===`);
        console.log(measurement);
        measurementData[toolClass.toolType].push(measurement);
      }
    });
    return measurementData;
  }
  static registerTool(toolClass) {
    MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE[toolClass.utilityToolType] = toolClass;
    MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolClass.toolType] = toolClass;
    MeasurementReport.MEASUREMENT_BY_TOOLTYPE[toolClass.toolType] = toolClass.utilityToolType;
  }
};
var MeasurementReport_default = MeasurementReport;
MeasurementReport.MEASUREMENT_BY_TOOLTYPE = {};
MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE = {};
MeasurementReport.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE = {};

// src/utilities/TID300/TID300Measurement.js
var TID300Measurement = class {
  constructor(props) {
    this.ReferencedSOPSequence = props.ReferencedSOPSequence;
    this.props = props;
  }
  getMeasurement(contentSequenceEntries) {
    return [
      ...this.getTrackingGroups(),
      ...this.getFindingGroup(),
      ...this.getFindingSiteGroups(),
      ...contentSequenceEntries
    ];
  }
  getTrackingGroups() {
    let {trackingIdentifierTextValue: trackingIdentifierTextValue7} = this.props;
    return [
      {
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "TEXT",
        ConceptNameCodeSequence: {
          CodeValue: "112039",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Identifier"
        },
        TextValue: trackingIdentifierTextValue7 || "web annotation"
      },
      {
        RelationshipType: "HAS OBS CONTEXT",
        ValueType: "UIDREF",
        ConceptNameCodeSequence: {
          CodeValue: "112040",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Tracking Unique Identifier"
        },
        UID: DicomMetaDictionary.uid()
      }
    ];
  }
  getFindingGroup() {
    let finding = this.props.finding;
    if (!finding) {
      return [];
    }
    const {CodeValue, CodingSchemeDesignator: CodingSchemeDesignator3, CodeMeaning} = finding;
    return [
      {
        RelationshipType: "CONTAINS",
        ValueType: "CODE",
        ConceptNameCodeSequence: addAccessors_default({
          CodeValue: "121071",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Finding"
        }),
        ConceptCodeSequence: addAccessors_default({
          CodeValue,
          CodingSchemeDesignator: CodingSchemeDesignator3,
          CodeMeaning
        })
      }
    ];
  }
  getFindingSiteGroups() {
    let findingSites = this.props.findingSites || [];
    return findingSites.map((findingSite) => {
      const {CodeValue, CodingSchemeDesignator: CodingSchemeDesignator3, CodeMeaning} = findingSite;
      return {
        RelationshipType: "CONTAINS",
        ValueType: "CODE",
        ConceptNameCodeSequence: addAccessors_default({
          CodeValue: "363698007",
          CodingSchemeDesignator: "SCT",
          CodeMeaning: "Finding Site"
        }),
        ConceptCodeSequence: addAccessors_default({
          CodeValue,
          CodingSchemeDesignator: CodingSchemeDesignator3,
          CodeMeaning
        })
      };
    });
  }
};
var TID300Measurement_default = TID300Measurement;

// src/utilities/TID300/unit2CodingValue.js
var MM_UNIT = {
  CodeValue: "mm",
  CodingSchemeDesignator: "UCUM",
  CodingSchemeVersion: "1.4",
  CodeMeaning: "millimeter"
};
var MM2_UNIT = {
  CodeValue: "mm2",
  CodingSchemeDesignator: "UCUM",
  CodingSchemeVersion: "1.4",
  CodeMeaning: "SquareMilliMeter"
};
var NO_UNIT = {
  CodeValue: "1",
  CodingSchemeDesignator: "UCUM",
  CodingSchemeVersion: "1.4",
  CodeMeaning: "px"
};
var NO2_UNIT = NO_UNIT;
var measurementMap = {
  px: NO_UNIT,
  mm: MM_UNIT,
  mm2: MM2_UNIT,
  "mm\xB2": MM2_UNIT,
  "px\xB2": NO2_UNIT
};
var unit2CodingValue = (units) => {
  if (!units)
    return NO_UNIT;
  const space = units.indexOf(" ");
  const baseUnit = space === -1 ? units : units.substring(0, space);
  const codingUnit = measurementMap[units] || measurementMap[baseUnit];
  if (!codingUnit) {
    log_default.error("Unspecified units", units);
    return MM_UNIT;
  }
  return codingUnit;
};
unit2CodingValue.measurementMap = measurementMap;
var unit2CodingValue_default = unit2CodingValue;

// src/utilities/TID300/Length.js
var Length = class extends TID300Measurement_default {
  contentItem() {
    const {
      point1,
      point2,
      unit = "mm",
      distance,
      ReferencedSOPSequence
    } = this.props;
    return this.getMeasurement([
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-D7FE",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Length"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: unit2CodingValue_default(unit),
          NumericValue: distance
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData: [point1.x, point1.y, point2.x, point2.y],
          ContentSequence: {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      }
    ]);
  }
};
var Length_default = Length;

// src/adapters/Cornerstone/cornerstone4Tag.js
var cornerstone4Tag_default = "cornerstoneTools@^4.0.0";

// src/adapters/Cornerstone/Length.js
var LENGTH2 = "Length";
var Length2 = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup) {
    const {defaultState, NUMGroup, SCOORDGroup} = MeasurementReport_default.getSetupMeasurementData(MeasurementGroup);
    const state = {
      ...defaultState,
      length: NUMGroup.MeasuredValueSequence.NumericValue,
      toolType: Length2.toolType,
      handles: {
        start: {},
        end: {},
        textBox: {
          hasMoved: false,
          movesIndependently: false,
          drawnIndependently: true,
          allowedOutsideImage: true,
          hasBoundingBox: true
        }
      }
    };
    [
      state.handles.start.x,
      state.handles.start.y,
      state.handles.end.x,
      state.handles.end.y
    ] = SCOORDGroup.GraphicData;
    return state;
  }
  static getTID300RepresentationArguments(tool) {
    const {handles, finding, findingSites} = tool;
    const point1 = handles.start;
    const point2 = handles.end;
    const distance = tool.length;
    const trackingIdentifierTextValue7 = "cornerstoneTools@^4.0.0:Length";
    return {
      point1,
      point2,
      distance,
      trackingIdentifierTextValue: trackingIdentifierTextValue7,
      finding,
      findingSites: findingSites || []
    };
  }
};
Length2.toolType = LENGTH2;
Length2.utilityToolType = LENGTH2;
Length2.TID300Representation = Length_default;
Length2.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone4Tag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone4Tag !== cornerstone4Tag_default) {
    return false;
  }
  return toolType === LENGTH2;
};
MeasurementReport_default.registerTool(Length2);
var Length_default2 = Length2;

// src/utilities/TID300/Polyline.js
function expandPoints(points) {
  const allPoints = [];
  points.forEach((point) => {
    allPoints.push(point[0] || point.x);
    allPoints.push(point[1] || point.y);
    if (point[2] !== void 0 || point.z !== void 0) {
      allPoints.push(point[2] || point.z);
    }
  });
  return allPoints;
}
var Polyline = class extends TID300Measurement_default {
  contentItem() {
    const {
      points,
      area,
      areaUnit = "mm2",
      ReferencedSOPSequence,
      use3DSpatialCoordinates = false,
      perimeter,
      unit = "mm"
    } = this.props;
    const GraphicData = expandPoints(points);
    return this.getMeasurement([
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "131191004",
          CodingSchemeDesignator: "SCT",
          CodeMeaning: "Perimeter"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: unit2CodingValue_default(unit),
          NumericValue: perimeter
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData,
          ContentSequence: use3DSpatialCoordinates ? void 0 : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      },
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A166",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Area"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: unit2CodingValue_default(areaUnit),
          NumericValue: area
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData,
          ContentSequence: use3DSpatialCoordinates ? void 0 : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      }
    ]);
  }
};
var Polyline_default = Polyline;

// src/adapters/Cornerstone/FreehandRoi.js
var FreehandRoi = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup) {
    const {defaultState, SCOORDGroup, NUMGroup} = MeasurementReport_default.getSetupMeasurementData(MeasurementGroup);
    const state = {
      ...defaultState,
      toolType: FreehandRoi.toolType,
      handles: {
        points: [],
        textBox: {
          active: false,
          hasMoved: false,
          movesIndependently: false,
          drawnIndependently: true,
          allowedOutsideImage: true,
          hasBoundingBox: true
        }
      },
      cachedStats: {
        area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0
      },
      color: void 0,
      invalidated: true
    };
    const {GraphicData} = SCOORDGroup;
    for (let i = 0; i < GraphicData.length; i += 2) {
      state.handles.points.push({
        x: GraphicData[i],
        y: GraphicData[i + 1]
      });
    }
    return state;
  }
  static getTID300RepresentationArguments(tool) {
    const {handles, finding, findingSites, cachedStats = {}} = tool;
    const {points} = handles;
    const {area = 0, perimeter = 0} = cachedStats;
    const trackingIdentifierTextValue7 = "cornerstoneTools@^4.0.0:FreehandRoi";
    return {
      points,
      area,
      perimeter,
      trackingIdentifierTextValue: trackingIdentifierTextValue7,
      finding,
      findingSites: findingSites || []
    };
  }
};
FreehandRoi.toolType = "FreehandRoi";
FreehandRoi.utilityToolType = "FreehandRoi";
FreehandRoi.TID300Representation = Polyline_default;
FreehandRoi.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone4Tag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone4Tag !== cornerstone4Tag_default) {
    return false;
  }
  return toolType === FreehandRoi.toolType;
};
MeasurementReport_default.registerTool(FreehandRoi);
var FreehandRoi_default = FreehandRoi;

// src/utilities/TID300/Bidirectional.js
var Bidirectional = class extends TID300Measurement_default {
  contentItem() {
    const {
      longAxis,
      shortAxis,
      longAxisLength,
      shortAxisLength,
      unit,
      ReferencedSOPSequence
    } = this.props;
    return this.getMeasurement([
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A185",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Long Axis"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: unit2CodingValue_default(unit),
          NumericValue: longAxisLength
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData: [
            longAxis.point1.x,
            longAxis.point1.y,
            longAxis.point2.x,
            longAxis.point2.y
          ],
          ContentSequence: {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      },
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A186",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Short Axis"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: unit2CodingValue_default(unit),
          NumericValue: shortAxisLength
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData: [
            shortAxis.point1.x,
            shortAxis.point1.y,
            shortAxis.point2.x,
            shortAxis.point2.y
          ],
          ContentSequence: {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      }
    ]);
  }
};
var Bidirectional_default = Bidirectional;

// src/adapters/Cornerstone/Bidirectional.js
var BIDIRECTIONAL = "Bidirectional";
var LONG_AXIS = "Long Axis";
var SHORT_AXIS = "Short Axis";
var FINDING2 = "121071";
var FINDING_SITE2 = "G-C0E3";
var Bidirectional2 = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup) {
    const {ContentSequence: ContentSequence3} = MeasurementGroup;
    const findingGroup = toArray(ContentSequence3).find((group) => group.ConceptNameCodeSequence.CodeValue === FINDING2);
    const findingSiteGroups = toArray(ContentSequence3).filter((group) => group.ConceptNameCodeSequence.CodeValue === FINDING_SITE2);
    const longAxisNUMGroup = toArray(ContentSequence3).find((group) => group.ConceptNameCodeSequence.CodeMeaning === LONG_AXIS);
    const longAxisSCOORDGroup = toArray(longAxisNUMGroup.ContentSequence).find((group) => group.ValueType === "SCOORD");
    const shortAxisNUMGroup = toArray(ContentSequence3).find((group) => group.ConceptNameCodeSequence.CodeMeaning === SHORT_AXIS);
    const shortAxisSCOORDGroup = toArray(shortAxisNUMGroup.ContentSequence).find((group) => group.ValueType === "SCOORD");
    const {ReferencedSOPSequence} = longAxisSCOORDGroup.ContentSequence;
    const {ReferencedSOPInstanceUID, ReferencedFrameNumber} = ReferencedSOPSequence;
    const longestDiameter = String(longAxisNUMGroup.MeasuredValueSequence.NumericValue);
    const shortestDiameter = String(shortAxisNUMGroup.MeasuredValueSequence.NumericValue);
    const bottomRight = {
      x: Math.max(longAxisSCOORDGroup.GraphicData[0], longAxisSCOORDGroup.GraphicData[2], shortAxisSCOORDGroup.GraphicData[0], shortAxisSCOORDGroup.GraphicData[2]),
      y: Math.max(longAxisSCOORDGroup.GraphicData[1], longAxisSCOORDGroup.GraphicData[3], shortAxisSCOORDGroup.GraphicData[1], shortAxisSCOORDGroup.GraphicData[3])
    };
    const state = {
      sopInstanceUid: ReferencedSOPInstanceUID,
      frameIndex: ReferencedFrameNumber || 1,
      toolType: Bidirectional2.toolType,
      active: false,
      handles: {
        start: {
          x: longAxisSCOORDGroup.GraphicData[0],
          y: longAxisSCOORDGroup.GraphicData[1],
          drawnIndependently: false,
          allowedOutsideImage: false,
          active: false,
          highlight: false,
          index: 0
        },
        end: {
          x: longAxisSCOORDGroup.GraphicData[2],
          y: longAxisSCOORDGroup.GraphicData[3],
          drawnIndependently: false,
          allowedOutsideImage: false,
          active: false,
          highlight: false,
          index: 1
        },
        perpendicularStart: {
          x: shortAxisSCOORDGroup.GraphicData[0],
          y: shortAxisSCOORDGroup.GraphicData[1],
          drawnIndependently: false,
          allowedOutsideImage: false,
          active: false,
          highlight: false,
          index: 2
        },
        perpendicularEnd: {
          x: shortAxisSCOORDGroup.GraphicData[2],
          y: shortAxisSCOORDGroup.GraphicData[3],
          drawnIndependently: false,
          allowedOutsideImage: false,
          active: false,
          highlight: false,
          index: 3
        },
        textBox: {
          highlight: false,
          hasMoved: true,
          active: false,
          movesIndependently: false,
          drawnIndependently: true,
          allowedOutsideImage: true,
          hasBoundingBox: true,
          x: bottomRight.x + 10,
          y: bottomRight.y + 10
        }
      },
      invalidated: false,
      isCreating: false,
      longestDiameter,
      shortestDiameter,
      toolType: "Bidirectional",
      toolName: "Bidirectional",
      visible: true,
      finding: findingGroup ? findingGroup.ConceptCodeSequence : void 0,
      findingSites: findingSiteGroups.map((fsg) => fsg.ConceptCodeSequence)
    };
    return state;
  }
  static getTID300RepresentationArguments(tool) {
    const {start, end, perpendicularStart, perpendicularEnd} = tool.handles;
    const {shortestDiameter, longestDiameter, finding, findingSites} = tool;
    const trackingIdentifierTextValue7 = "cornerstoneTools@^4.0.0:Bidirectional";
    return {
      longAxis: {
        point1: start,
        point2: end
      },
      shortAxis: {
        point1: perpendicularStart,
        point2: perpendicularEnd
      },
      longAxisLength: longestDiameter,
      shortAxisLength: shortestDiameter,
      trackingIdentifierTextValue: trackingIdentifierTextValue7,
      finding,
      findingSites: findingSites || []
    };
  }
};
Bidirectional2.toolType = BIDIRECTIONAL;
Bidirectional2.utilityToolType = BIDIRECTIONAL;
Bidirectional2.TID300Representation = Bidirectional_default;
Bidirectional2.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone4Tag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone4Tag !== cornerstone4Tag_default) {
    return false;
  }
  return toolType === BIDIRECTIONAL;
};
MeasurementReport_default.registerTool(Bidirectional2);
var Bidirectional_default2 = Bidirectional2;

// src/utilities/TID300/Ellipse.js
function expandPoints2(points) {
  const allPoints = [];
  points.forEach((point) => {
    allPoints.push(point.x);
    allPoints.push(point.y);
  });
  return allPoints;
}
var Ellipse = class extends TID300Measurement_default {
  contentItem() {
    const {points, ReferencedSOPSequence, area, areaUnit} = this.props;
    const GraphicData = expandPoints2(points);
    return this.getMeasurement([
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-D7FE",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "AREA"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: unit2CodingValue_default(areaUnit),
          NumericValue: area
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: "SCOORD",
          GraphicType: "ELLIPSE",
          GraphicData,
          ContentSequence: {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      }
    ]);
  }
};
var Ellipse_default = Ellipse;

// src/adapters/Cornerstone/EllipticalRoi.js
var ELLIPTICALROI = "EllipticalRoi";
var EllipticalRoi = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup) {
    const {defaultState, NUMGroup, SCOORDGroup} = MeasurementReport_default.getSetupMeasurementData(MeasurementGroup);
    const {GraphicData} = SCOORDGroup;
    const majorAxis = [
      {x: GraphicData[0], y: GraphicData[1]},
      {x: GraphicData[2], y: GraphicData[3]}
    ];
    const minorAxis = [
      {x: GraphicData[4], y: GraphicData[5]},
      {x: GraphicData[6], y: GraphicData[7]}
    ];
    const minorAxisLength = Math.sqrt(Math.pow(minorAxis[0].x - minorAxis[1].x, 2) + Math.pow(minorAxis[0].y - minorAxis[1].y, 2));
    const minorAxisDirection = {
      x: (minorAxis[1].x - minorAxis[0].x) / minorAxisLength,
      y: (minorAxis[1].y - minorAxis[0].y) / minorAxisLength
    };
    const halfMinorAxisLength = minorAxisLength / 2;
    const corner1 = {
      x: majorAxis[0].x + minorAxisDirection.x * halfMinorAxisLength,
      y: majorAxis[0].y + minorAxisDirection.y * halfMinorAxisLength
    };
    const corner2 = {
      x: majorAxis[1].x - minorAxisDirection.x * halfMinorAxisLength,
      y: majorAxis[1].y - minorAxisDirection.y * halfMinorAxisLength
    };
    const state = {
      ...defaultState,
      toolType: EllipticalRoi.toolType,
      active: false,
      cachedStats: {
        area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0
      },
      handles: {
        end: {
          x: corner1.x,
          y: corner1.y,
          highlight: false,
          active: false
        },
        initialRotation: 0,
        start: {
          x: corner2.x,
          y: corner2.y,
          highlight: false,
          active: false
        },
        textBox: {
          hasMoved: false,
          movesIndependently: false,
          drawnIndependently: true,
          allowedOutsideImage: true,
          hasBoundingBox: true
        }
      },
      invalidated: true,
      visible: true
    };
    return state;
  }
  static getTID300RepresentationArguments(tool) {
    const {cachedStats = {}, handles, finding, findingSites} = tool;
    const {start, end} = handles;
    const {area} = cachedStats;
    const halfXLength = Math.abs(start.x - end.x) / 2;
    const halfYLength = Math.abs(start.y - end.y) / 2;
    const points = [];
    const center = {x: (start.x + end.x) / 2, y: (start.y + end.y) / 2};
    if (halfXLength > halfYLength) {
      points.push({x: center.x - halfXLength, y: center.y});
      points.push({x: center.x + halfXLength, y: center.y});
      points.push({x: center.x, y: center.y - halfYLength});
      points.push({x: center.x, y: center.y + halfYLength});
    } else {
      points.push({x: center.x, y: center.y - halfYLength});
      points.push({x: center.x, y: center.y + halfYLength});
      points.push({x: center.x - halfXLength, y: center.y});
      points.push({x: center.x + halfXLength, y: center.y});
    }
    const trackingIdentifierTextValue7 = "cornerstoneTools@^4.0.0:EllipticalRoi";
    return {
      area,
      points,
      trackingIdentifierTextValue: trackingIdentifierTextValue7,
      finding,
      findingSites: findingSites || []
    };
  }
};
EllipticalRoi.toolType = ELLIPTICALROI;
EllipticalRoi.utilityToolType = ELLIPTICALROI;
EllipticalRoi.TID300Representation = Ellipse_default;
EllipticalRoi.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone4Tag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone4Tag !== cornerstone4Tag_default) {
    return false;
  }
  return toolType === ELLIPTICALROI;
};
MeasurementReport_default.registerTool(EllipticalRoi);
var EllipticalRoi_default = EllipticalRoi;

// src/utilities/TID300/Circle.js
function expandPoints3(points) {
  const allPoints = [];
  points.forEach((point) => {
    allPoints.push(point.x);
    allPoints.push(point.y);
  });
  return allPoints;
}
var Circle = class extends TID300Measurement_default {
  contentItem() {
    const {
      points,
      ReferencedSOPSequence,
      use3DSpatialCoordinates = false,
      perimeter,
      area,
      areaUnit = "mm2",
      unit = "mm"
    } = this.props;
    const GraphicData = expandPoints3(points);
    return this.getMeasurement([
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A197",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Perimeter"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: unit2CodingValue_default(unit),
          NumericValue: perimeter
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "CIRCLE",
          GraphicData,
          ContentSequence: use3DSpatialCoordinates ? void 0 : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      },
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A166",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Area"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: unit2CodingValue_default(areaUnit),
          NumericValue: area
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "CIRCLE",
          GraphicData,
          ContentSequence: use3DSpatialCoordinates ? void 0 : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      }
    ]);
  }
};
var Circle_default = Circle;

// src/adapters/Cornerstone/CircleRoi.js
var CIRCLEROI = "CircleRoi";
var CircleRoi = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup) {
    const {defaultState, NUMGroup, SCOORDGroup} = MeasurementReport_default.getSetupMeasurementData(MeasurementGroup);
    const {GraphicData} = SCOORDGroup;
    const center = {x: GraphicData[0], y: GraphicData[1]};
    const end = {x: GraphicData[2], y: GraphicData[3]};
    const state = {
      ...defaultState,
      toolType: CircleRoi.toolType,
      active: false,
      cachedStats: {
        area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0,
        radius: 0,
        perimeter: 0
      },
      handles: {
        end: {
          ...end,
          highlight: false,
          active: false
        },
        initialRotation: 0,
        start: {
          ...center,
          highlight: false,
          active: false
        },
        textBox: {
          hasMoved: false,
          movesIndependently: false,
          drawnIndependently: true,
          allowedOutsideImage: true,
          hasBoundingBox: true
        }
      },
      invalidated: true,
      visible: true
    };
    return state;
  }
  static getTID300RepresentationArguments(tool) {
    const {cachedStats = {}, handles, finding, findingSites} = tool;
    const {start: center, end} = handles;
    const {area, areaUnit = "mm2", unit = "mm", radius} = cachedStats;
    const perimeter = 2 * Math.PI * radius;
    const points = [];
    points.push(center);
    points.push(end);
    const trackingIdentifierTextValue7 = "cornerstoneTools@^4.0.0:CircleRoi";
    return {
      area,
      areaUnit,
      perimeter,
      unit,
      radius,
      points,
      trackingIdentifierTextValue: trackingIdentifierTextValue7,
      finding,
      findingSites: findingSites || []
    };
  }
};
CircleRoi.toolType = CIRCLEROI;
CircleRoi.utilityToolType = CIRCLEROI;
CircleRoi.TID300Representation = Circle_default;
CircleRoi.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone4Tag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone4Tag !== cornerstone4Tag_default) {
    return false;
  }
  return toolType === CIRCLEROI;
};
MeasurementReport_default.registerTool(CircleRoi);
var CircleRoi_default = CircleRoi;

// src/utilities/TID300/Point.js
var Point = class extends TID300Measurement_default {
  contentItem() {
    const {
      points,
      ReferencedSOPSequence,
      use3DSpatialCoordinates = false
    } = this.props;
    const GraphicData = use3DSpatialCoordinates ? [points[0].x, points[0].y, points[0].z] : [points[0].x, points[0].y];
    if (points.length == 2) {
      GraphicData.push(points[1].x);
      GraphicData.push(points[1].y);
      if (use3DSpatialCoordinates)
        GraphicData.push(points[1].z);
    }
    return this.getMeasurement([
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "111010",
          CodingSchemeDesignator: "DCM",
          CodeMeaning: "Center"
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "POINT",
          GraphicData,
          ContentSequence: use3DSpatialCoordinates ? void 0 : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      }
    ]);
  }
};
var Point_default = Point;

// src/adapters/Cornerstone/ArrowAnnotate.js
var ARROW_ANNOTATE = "ArrowAnnotate";
var CORNERSTONEFREETEXT = "CORNERSTONEFREETEXT";
var ArrowAnnotate = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup) {
    const {defaultState, SCOORDGroup, findingGroup} = MeasurementReport_default.getSetupMeasurementData(MeasurementGroup);
    const text = findingGroup.ConceptCodeSequence.CodeMeaning;
    const {GraphicData} = SCOORDGroup;
    const state = {
      ...defaultState,
      toolType: ArrowAnnotate.toolType,
      active: false,
      handles: {
        start: {
          x: GraphicData[0],
          y: GraphicData[1],
          highlight: true,
          active: false
        },
        end: {
          x: GraphicData.length == 4 ? GraphicData[2] : GraphicData[0] + 20,
          y: GraphicData.length == 4 ? GraphicData[3] : GraphicData[1] + 20,
          highlight: true,
          active: false
        },
        textBox: {
          hasMoved: false,
          movesIndependently: false,
          drawnIndependently: true,
          allowedOutsideImage: true,
          hasBoundingBox: true
        }
      },
      invalidated: true,
      text,
      visible: true
    };
    return state;
  }
  static getTID300RepresentationArguments(tool) {
    const points = [tool.handles.start, tool.handles.end];
    let {finding, findingSites} = tool;
    const TID300RepresentationArguments = {
      points,
      trackingIdentifierTextValue: `cornerstoneTools@^4.0.0:ArrowAnnotate`,
      findingSites: findingSites || []
    };
    if (!finding || finding.CodeValue !== CORNERSTONEFREETEXT) {
      finding = {
        CodeValue: CORNERSTONEFREETEXT,
        CodingSchemeDesignator: "CST4",
        CodeMeaning: tool.text
      };
    }
    TID300RepresentationArguments.finding = finding;
    return TID300RepresentationArguments;
  }
};
ArrowAnnotate.toolType = ARROW_ANNOTATE;
ArrowAnnotate.utilityToolType = ARROW_ANNOTATE;
ArrowAnnotate.TID300Representation = Point_default;
ArrowAnnotate.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone4Tag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone4Tag !== cornerstone4Tag_default) {
    return false;
  }
  return toolType === ARROW_ANNOTATE;
};
MeasurementReport_default.registerTool(ArrowAnnotate);
var ArrowAnnotate_default = ArrowAnnotate;

// src/adapters/Cornerstone/Segmentation_3X.js
var import_ndarray3 = __toModule(require_ndarray());

// src/utilities/orientation/index.js
var orientation_exports = {};
__export(orientation_exports, {
  crossProduct3D: () => crossProduct3D_default,
  flipImageOrientationPatient: () => flipImageOrientationPatient,
  flipMatrix2D: () => flipMatrix2D,
  nearlyEqual: () => nearlyEqual,
  rotateDirectionCosinesInPlane: () => rotateDirectionCosinesInPlane_default,
  rotateMatrix902D: () => rotateMatrix902D_default,
  rotateVectorAroundUnitVector: () => rotateVectorAroundUnitVector_default
});

// src/utilities/orientation/crossProduct3D.js
function crossProduct3D_default(a, b) {
  return [
    a[1] * b[2] - a[2] * b[1],
    a[2] * b[0] - a[0] * b[2],
    a[0] * b[1] - a[1] * b[0]
  ];
}

// src/utilities/orientation/flipImageOrientationPatient.js
var flipImageOrientationPatient = {
  h: (iop) => {
    return [iop[0], iop[1], iop[2], -iop[3], -iop[4], -iop[5]];
  },
  v: (iop) => {
    return [-iop[0], -iop[1], -iop[2], iop[3], iop[4], iop[5]];
  },
  hv: (iop) => {
    return [-iop[0], -iop[1], -iop[2], -iop[3], -iop[4], -iop[5]];
  }
};

// src/utilities/orientation/rotateVectorAroundUnitVector.js
function rotateVectorAroundUnitVector_default(v2, k, theta) {
  const cosTheta = Math.cos(theta);
  const sinTheta = Math.sin(theta);
  const oneMinusCosTheta = 1 - cosTheta;
  const kdotv = k[0] * v2[0] + k[1] * v2[1] + k[2] * v2[2];
  const vRot = [];
  const kxv = crossProduct3D_default(k, v2);
  for (let i = 0; i <= 2; i++) {
    vRot[i] = v2[i] * cosTheta + kxv[i] * sinTheta + k[i] * kdotv * oneMinusCosTheta;
    vRot[i] *= -1;
  }
  return vRot;
}

// src/utilities/orientation/rotateDirectionCosinesInPlane.js
function rotateDirectionCosinesInPlane_default(iop, theta) {
  const r = [iop[0], iop[1], iop[2]];
  const c = [iop[3], iop[4], iop[5]];
  const rxc = crossProduct3D_default(r, c);
  const rRot = rotateVectorAroundUnitVector_default(r, rxc, theta);
  const cRot = rotateVectorAroundUnitVector_default(c, rxc, theta);
  return [...rRot, ...cRot];
}

// src/utilities/orientation/flipMatrix2D.js
var import_ndarray = __toModule(require_ndarray());
var flipMatrix2D = {
  h,
  v
};
function h(matrix) {
  const [rows, cols] = matrix.shape;
  const result = (0, import_ndarray.default)(new Uint8Array(rows * cols), [rows, cols]);
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      result.set(i, j, matrix.get(i, cols - 1 - j));
    }
  }
  return result;
}
function v(matrix) {
  const [rows, cols] = matrix.shape;
  const result = (0, import_ndarray.default)(new Uint8Array(rows * cols), [rows, cols]);
  for (let j = 0; j < cols; j++) {
    for (let i = 0; i < rows; i++) {
      result.set(i, j, matrix.get(rows - 1 - i, j));
    }
  }
  return result;
}

// src/utilities/orientation/rotateMatrix902D.js
var import_ndarray2 = __toModule(require_ndarray());
function rotateMatrix902D_default(matrix) {
  const [rows, cols] = matrix.shape;
  let result = (0, import_ndarray2.default)(new Uint8Array(rows * cols), [cols, rows]);
  let resultColsMinus1 = result.shape[1] - 1;
  for (let i = 0; i < rows; i++) {
    for (let j = 0; j < cols; j++) {
      result.set(j, resultColsMinus1 - i, matrix.get(i, j));
    }
  }
  return result;
}

// src/utilities/orientation/nearlyEqual.js
function nearlyEqual(a, b, epsilon) {
  const absA = Math.abs(a);
  const absB = Math.abs(b);
  const diff = Math.abs(a - b);
  if (a === b) {
    return true;
  } else if (a === 0 || b === 0 || absA + absB < epsilon * epsilon) {
    return diff < epsilon;
  } else {
    return diff / Math.min(absA + absB, Number.MAX_VALUE) < epsilon;
  }
}

// src/adapters/Cornerstone/Segmentation_3X.js
var Segmentation2 = {
  generateSegmentation,
  generateToolState
};
var Segmentation_3X_default = Segmentation2;
function generateSegmentation(images, brushData, options = {includeSliceSpacing: true}) {
  const {toolState, segments: segments2} = brushData;
  const image0 = images[0];
  const dims = {
    x: image0.columns,
    y: image0.rows,
    z: images.length
  };
  dims.xy = dims.x * dims.y;
  const numSegments = _getSegCount(seg, segments2);
  if (!numSegments) {
    throw new Error("No segments to export!");
  }
  const isMultiframe = image0.imageId.includes("?frame");
  const seg = _createSegFromImages(images, isMultiframe, options);
  const {referencedFramesPerSegment, segmentIndicies} = _getNumberOfFramesPerSegment(toolState, images, segments2);
  let NumberOfFrames = 0;
  for (let i = 0; i < referencedFramesPerSegment.length; i++) {
    NumberOfFrames += referencedFramesPerSegment[i].length;
  }
  seg.setNumberOfFrames(NumberOfFrames);
  for (let i = 0; i < segmentIndicies.length; i++) {
    const segmentIndex = segmentIndicies[i];
    const referencedFrameIndicies = referencedFramesPerSegment[i];
    const referencedFrameNumbers = referencedFrameIndicies.map((element) => {
      return element + 1;
    });
    const segment = segments2[segmentIndex];
    seg.addSegment(segment, _extractCornerstoneToolsPixelData(segmentIndex, referencedFrameIndicies, toolState, images, dims), referencedFrameNumbers);
  }
  seg.bitPackPixelData();
  const segBlob = datasetToBlob(seg.dataset);
  return segBlob;
}
function _extractCornerstoneToolsPixelData(segmentIndex, referencedFrames, toolState, images, dims) {
  const pixelData = new Uint8Array(dims.xy * referencedFrames.length);
  let pixelDataIndex = 0;
  for (let i = 0; i < referencedFrames.length; i++) {
    const frame = referencedFrames[i];
    const imageId = images[frame].imageId;
    const imageIdSpecificToolState = toolState[imageId];
    const brushPixelData = imageIdSpecificToolState.brush.data[segmentIndex].pixelData;
    for (let p = 0; p < brushPixelData.length; p++) {
      pixelData[pixelDataIndex] = brushPixelData[p];
      pixelDataIndex++;
    }
  }
  return pixelData;
}
function _getNumberOfFramesPerSegment(toolState, images, segments2) {
  const segmentIndicies = [];
  const referencedFramesPerSegment = [];
  for (let i = 0; i < segments2.length; i++) {
    if (segments2[i]) {
      segmentIndicies.push(i);
      referencedFramesPerSegment.push([]);
    }
  }
  for (let z = 0; z < images.length; z++) {
    const imageId = images[z].imageId;
    const imageIdSpecificToolState = toolState[imageId];
    for (let i = 0; i < segmentIndicies.length; i++) {
      const segIdx = segmentIndicies[i];
      if (imageIdSpecificToolState && imageIdSpecificToolState.brush && imageIdSpecificToolState.brush.data && imageIdSpecificToolState.brush.data[segIdx] && imageIdSpecificToolState.brush.data[segIdx].pixelData) {
        referencedFramesPerSegment[i].push(z);
      }
    }
  }
  return {
    referencedFramesPerSegment,
    segmentIndicies
  };
}
function _getSegCount(seg, segments2) {
  let numSegments = 0;
  for (let i = 0; i < segments2.length; i++) {
    if (segments2[i]) {
      numSegments++;
    }
  }
  return numSegments;
}
function _createSegFromImages(images, isMultiframe, options) {
  const datasets = [];
  if (isMultiframe) {
    const image = images[0];
    const arrayBuffer = image.data.byteArray.buffer;
    const dicomData = DicomMessage4.readFile(arrayBuffer);
    const dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);
    dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);
    datasets.push(dataset);
  } else {
    for (let i = 0; i < images.length; i++) {
      const image = images[i];
      const arrayBuffer = image.data.byteArray.buffer;
      const dicomData = DicomMessage4.readFile(arrayBuffer);
      const dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);
      dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);
      datasets.push(dataset);
    }
  }
  const multiframe = Normalizer.normalizeToDataset(datasets);
  return new Segmentation_default([multiframe], options);
}
function generateToolState(imageIds, arrayBuffer, metadataProvider) {
  const dicomData = DicomMessage4.readFile(arrayBuffer);
  const dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);
  dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);
  const multiframe = Normalizer.normalizeToDataset([dataset]);
  const imagePlaneModule = metadataProvider.get("imagePlaneModule", imageIds[0]);
  if (!imagePlaneModule) {
    console.warn("Insufficient metadata, imagePlaneModule missing.");
  }
  const ImageOrientationPatient = Array.isArray(imagePlaneModule.rowCosines) ? [...imagePlaneModule.rowCosines, ...imagePlaneModule.columnCosines] : [
    imagePlaneModule.rowCosines.x,
    imagePlaneModule.rowCosines.y,
    imagePlaneModule.rowCosines.z,
    imagePlaneModule.columnCosines.x,
    imagePlaneModule.columnCosines.y,
    imagePlaneModule.columnCosines.z
  ];
  const validOrientations = getValidOrientations(ImageOrientationPatient);
  const SharedFunctionalGroupsSequence = multiframe.SharedFunctionalGroupsSequence;
  const sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : void 0;
  const sliceLength = multiframe.Columns * multiframe.Rows;
  const segMetadata = getSegmentMetadata(multiframe);
  const pixelData = unpackPixelData(multiframe);
  const PerFrameFunctionalGroupsSequence = multiframe.PerFrameFunctionalGroupsSequence;
  const toolState = {};
  let inPlane = true;
  for (let i = 0; i < PerFrameFunctionalGroupsSequence.length; i++) {
    const PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[i];
    const ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;
    const pixelDataI2D = (0, import_ndarray3.default)(new Uint8Array(pixelData.buffer, i * sliceLength, sliceLength), [multiframe.Rows, multiframe.Columns]);
    const alignedPixelDataI = alignPixelDataWithSourceData(pixelDataI2D, ImageOrientationPatientI, validOrientations);
    if (!alignedPixelDataI) {
      console.warn("This segmentation object is not in-plane with the source data. Bailing out of IO. It'd be better to render this with vtkjs. ");
      inPlane = false;
      break;
    }
    const segmentIndex = PerFrameFunctionalGroups.SegmentIdentificationSequence.ReferencedSegmentNumber - 1;
    let SourceImageSequence;
    if (SharedFunctionalGroupsSequence.DerivationImageSequence && SharedFunctionalGroupsSequence.DerivationImageSequence.SourceImageSequence) {
      SourceImageSequence = SharedFunctionalGroupsSequence.DerivationImageSequence.SourceImageSequence[i];
    } else {
      SourceImageSequence = PerFrameFunctionalGroups.DerivationImageSequence.SourceImageSequence;
    }
    const imageId = getImageIdOfSourceImage(SourceImageSequence, imageIds, metadataProvider);
    addImageIdSpecificBrushToolState(toolState, imageId, segmentIndex, alignedPixelDataI);
  }
  if (!inPlane) {
    return;
  }
  return {toolState, segMetadata};
}
function unpackPixelData(multiframe) {
  const segType = multiframe.SegmentationType;
  if (segType === "BINARY") {
    return BitArray.unpack(multiframe.PixelData);
  }
  const pixelData = new Uint8Array(multiframe.PixelData);
  const max = multiframe.MaximumFractionalValue;
  const onlyMaxAndZero = pixelData.find((element) => element !== 0 && element !== max) === void 0;
  if (!onlyMaxAndZero) {
    log_default.warn("This is a fractional segmentation, which is not currently supported.");
    return;
  }
  log_default.warn("This segmentation object is actually binary... processing as such.");
  return pixelData;
}
function addImageIdSpecificBrushToolState(toolState, imageId, segmentIndex, pixelData2D) {
  if (!toolState[imageId]) {
    toolState[imageId] = {};
    toolState[imageId].brush = {};
    toolState[imageId].brush.data = [];
  } else if (!toolState[imageId].brush) {
    toolState[imageId].brush = {};
    toolState[imageId].brush.data = [];
  } else if (!toolState[imageId].brush.data) {
    toolState[imageId].brush.data = [];
  }
  toolState[imageId].brush.data[segmentIndex] = {};
  const brushDataI = toolState[imageId].brush.data[segmentIndex];
  brushDataI.pixelData = new Uint8Array(pixelData2D.data.length);
  const cToolsPixelData = brushDataI.pixelData;
  const [rows, cols] = pixelData2D.shape;
  for (let p = 0; p < cToolsPixelData.length; p++) {
    if (pixelData2D.data[p]) {
      cToolsPixelData[p] = 1;
    } else {
      cToolsPixelData[p] = 0;
    }
  }
}
function getImageIdOfSourceImage(SourceImageSequence, imageIds, metadataProvider) {
  const {ReferencedSOPInstanceUID, ReferencedFrameNumber} = SourceImageSequence;
  return ReferencedFrameNumber ? getImageIdOfReferencedFrame(ReferencedSOPInstanceUID, ReferencedFrameNumber, imageIds, metadataProvider) : getImageIdOfReferencedSingleFramedSOPInstance(ReferencedSOPInstanceUID, imageIds, metadataProvider);
}
function getImageIdOfReferencedSingleFramedSOPInstance(sopInstanceUid, imageIds, metadataProvider) {
  return imageIds.find((imageId) => {
    const sopCommonModule = metadataProvider.get("sopCommonModule", imageId);
    if (!sopCommonModule) {
      return;
    }
    return sopCommonModule.sopInstanceUID === sopInstanceUid;
  });
}
function getImageIdOfReferencedFrame(sopInstanceUid, frameNumber, imageIds, metadataProvider) {
  const imageId = imageIds.find((imageId2) => {
    const sopCommonModule = metadataProvider.get("sopCommonModule", imageId2);
    if (!sopCommonModule) {
      return;
    }
    const imageIdFrameNumber = Number(imageId2.split("frame=")[1]);
    return sopCommonModule.sopInstanceUID === sopInstanceUid && imageIdFrameNumber === frameNumber - 1;
  });
  return imageId;
}
function getValidOrientations(iop) {
  const orientations = [];
  orientations[0] = iop;
  orientations[1] = flipImageOrientationPatient.h(iop);
  orientations[2] = flipImageOrientationPatient.v(iop);
  const iop90 = rotateDirectionCosinesInPlane_default(iop, Math.PI / 2);
  orientations[3] = iop90;
  orientations[4] = flipImageOrientationPatient.h(iop90);
  orientations[5] = flipImageOrientationPatient.v(iop90);
  orientations[6] = rotateDirectionCosinesInPlane_default(iop, Math.PI);
  orientations[7] = rotateDirectionCosinesInPlane_default(iop, 1.5 * Math.PI);
  return orientations;
}
function alignPixelDataWithSourceData(pixelData2D, iop, orientations) {
  if (compareIOP(iop, orientations[0])) {
    return pixelData2D;
  } else if (compareIOP(iop, orientations[1])) {
    return flipMatrix2D.v(pixelData2D);
  } else if (compareIOP(iop, orientations[2])) {
    return flipMatrix2D.h(pixelData2D);
  } else if (compareIOP(iop, orientations[3])) {
    return rotateMatrix902D_default(pixelData2D);
  } else if (compareIOP(iop, orientations[4])) {
    return flipMatrix2D.h(rotateMatrix902D_default(pixelData2D));
  } else if (compareIOP(iop, orientations[5])) {
    return flipMatrix2D.v(rotateMatrix902D_default(pixelData2D));
  } else if (compareIOP(iop, orientations[6])) {
    return rotateMatrix902D_default(rotateMatrix902D_default(pixelData2D));
  } else if (compareIOP(iop, orientations[7])) {
    return rotateMatrix902D_default(rotateMatrix902D_default(rotateMatrix902D_default(pixelData2D)));
  }
}
var dx = 1e-5;
function compareIOP(iop1, iop2) {
  return Math.abs(iop1[0] - iop2[0]) < dx && Math.abs(iop1[1] - iop2[1]) < dx && Math.abs(iop1[2] - iop2[2]) < dx && Math.abs(iop1[3] - iop2[3]) < dx && Math.abs(iop1[4] - iop2[4]) < dx && Math.abs(iop1[5] - iop2[5]) < dx;
}
function getSegmentMetadata(multiframe) {
  const data2 = [];
  const segmentSequence = multiframe.SegmentSequence;
  if (Array.isArray(segmentSequence)) {
    for (let segIdx = 0; segIdx < segmentSequence.length; segIdx++) {
      data2.push(segmentSequence[segIdx]);
    }
  } else {
    data2.push(segmentSequence);
  }
  return {
    seriesInstanceUid: multiframe.ReferencedSeriesSequence.SeriesInstanceUID,
    data: data2
  };
}

// src/adapters/Cornerstone/Segmentation_4X.js
var import_ndarray4 = __toModule(require_ndarray());

// src/utilities/compression/rleSingleSamplePerPixel.js
var rleSingleSamplePerPixel_exports = {};
__export(rleSingleSamplePerPixel_exports, {
  decode: () => decode,
  encode: () => encode
});
function encode(buffer, numberOfFrames, rows, cols) {
  const frameLength = rows * cols;
  const header = createHeader();
  let encodedFrames = [];
  for (let frame = 0; frame < numberOfFrames; frame++) {
    const frameOffset = frameLength * frame;
    encodedFrames.push(encodeFrame(buffer, frameOffset, rows, cols, header));
  }
  return encodedFrames;
}
function encodeFrame(buffer, frameOffset, rows, cols, header) {
  let rleArray = [];
  for (let r = 0; r < rows; r++) {
    const rowOffset = r * cols;
    const uint8Row = new Uint8Array(buffer, frameOffset + rowOffset, cols);
    let i = 0;
    while (i < uint8Row.length) {
      const literalRunLength = getLiteralRunLength(uint8Row, i);
      if (literalRunLength) {
        rleArray.push(literalRunLength - 1);
        const literalRun = uint8Row.slice(i, i + literalRunLength);
        rleArray = [...rleArray, ...literalRun];
        i += literalRunLength;
      }
      if (i >= uint8Row.length) {
        break;
      }
      const replicateRunLength = getReplicateRunLength(uint8Row, i);
      if (replicateRunLength) {
        rleArray.push(257 - replicateRunLength);
        rleArray.push(uint8Row[i]);
        i += replicateRunLength;
      }
    }
  }
  const headerLength = 64;
  const bodyLength = rleArray.length % 2 === 0 ? rleArray.length : rleArray.length + 1;
  const encodedFrameBuffer = new ArrayBuffer(headerLength + bodyLength);
  const headerView = new Uint32Array(encodedFrameBuffer, 0, 16);
  for (let i = 0; i < headerView.length; i++) {
    headerView[i] = header[i];
  }
  for (let i = 0; i < headerView.length; i++) {
    rleArray.push(headerView[i]);
  }
  const bodyView = new Uint8Array(encodedFrameBuffer, 64);
  for (let i = 0; i < rleArray.length; i++) {
    bodyView[i] = rleArray[i];
  }
  return encodedFrameBuffer;
}
function createHeader() {
  const headerUint32 = new Uint32Array(16);
  headerUint32[0] = 1;
  headerUint32[1] = 64;
  return headerUint32;
}
function getLiteralRunLength(uint8Row, i) {
  for (var l = 0; l < uint8Row.length - i; l++) {
    if (uint8Row[i + l] === uint8Row[i + l + 1] && uint8Row[i + l + 1] === uint8Row[i + l + 2]) {
      return l;
    }
    if (l === 128) {
      return l;
    }
  }
  return uint8Row.length - i;
}
function getReplicateRunLength(uint8Row, i) {
  const first = uint8Row[i];
  for (let l = 1; l < uint8Row.length - i; l++) {
    if (uint8Row[i + l] !== first) {
      return l;
    }
    if (l === 128) {
      return l;
    }
  }
  return uint8Row.length - i;
}
function decode(rleEncodedFrames, rows, cols) {
  const pixelData = new Uint8Array(rows * cols * rleEncodedFrames.length);
  const buffer = pixelData.buffer;
  const frameLength = rows * cols;
  for (let i = 0; i < rleEncodedFrames.length; i++) {
    const rleEncodedFrame = rleEncodedFrames[i];
    const uint8FrameView = new Uint8Array(buffer, i * frameLength, frameLength);
    decodeFrame(rleEncodedFrame, uint8FrameView);
  }
  return pixelData;
}
function decodeFrame(rleEncodedFrame, pixelData) {
  const header = new Uint32Array(rleEncodedFrame, 0, 16);
  if (header[0] !== 1) {
    log_default.error(`rleSingleSamplePerPixel only supports fragments with single Byte Segments (for rle encoded segmentation data) at the current time. This rleEncodedFrame has ${header[0]} Byte Segments.`);
    return;
  }
  if (header[1] !== 64) {
    log_default.error("Data offset of Byte Segment 1 should be 64 bytes, this rle fragment is encoded incorrectly.");
    return;
  }
  const uInt8Frame = new Uint8Array(rleEncodedFrame, 64);
  let pixelDataIndex = 0;
  let i = 0;
  while (pixelDataIndex < pixelData.length) {
    const byteValue = uInt8Frame[i];
    if (byteValue === void 0) {
      break;
    }
    if (byteValue <= 127) {
      const N = byteValue + 1;
      const next = i + 1;
      for (let p = next; p < next + N; p++) {
        pixelData[pixelDataIndex] = uInt8Frame[p];
        pixelDataIndex++;
      }
      i += N + 1;
    }
    if (byteValue >= 129) {
      const N = 257 - byteValue;
      const next = i + 1;
      for (let p = 0; p < N; p++) {
        pixelData[pixelDataIndex] = uInt8Frame[next];
        pixelDataIndex++;
      }
      i += 2;
    }
    if (i === uInt8Frame.length) {
      break;
    }
  }
}

// src/adapters/Cornerstone/Segmentation_4X.js
var import_lodash = __toModule(require_lodash());
var Segmentation3 = {
  generateSegmentation: generateSegmentation2,
  generateToolState: generateToolState2,
  fillSegmentation
};
var Segmentation_4X_default = Segmentation3;
var generateSegmentationDefaultOptions = {
  includeSliceSpacing: true,
  rleEncode: true
};
function generateSegmentation2(images, inputLabelmaps3D, userOptions = {}) {
  const isMultiframe = images[0].imageId.includes("?frame");
  const segmentation = _createSegFromImages2(images, isMultiframe, userOptions);
  return fillSegmentation(segmentation, inputLabelmaps3D, userOptions);
}
function fillSegmentation(segmentation, inputLabelmaps3D, userOptions = {}) {
  const options = Object.assign({}, generateSegmentationDefaultOptions, userOptions);
  const labelmaps3D = Array.isArray(inputLabelmaps3D) ? inputLabelmaps3D : [inputLabelmaps3D];
  let numberOfFrames = 0;
  const referencedFramesPerLabelmap = [];
  for (let labelmapIndex = 0; labelmapIndex < labelmaps3D.length; labelmapIndex++) {
    const labelmap3D = labelmaps3D[labelmapIndex];
    const {labelmaps2D, metadata} = labelmap3D;
    const referencedFramesPerSegment = [];
    for (let i = 1; i < metadata.length; i++) {
      if (metadata[i]) {
        referencedFramesPerSegment[i] = [];
      }
    }
    for (let i = 0; i < labelmaps2D.length; i++) {
      const labelmap2D = labelmaps2D[i];
      if (labelmaps2D[i]) {
        const {segmentsOnLabelmap} = labelmap2D;
        segmentsOnLabelmap.forEach((segmentIndex) => {
          if (segmentIndex !== 0) {
            referencedFramesPerSegment[segmentIndex].push(i);
            numberOfFrames++;
          }
        });
      }
    }
    referencedFramesPerLabelmap[labelmapIndex] = referencedFramesPerSegment;
  }
  segmentation.setNumberOfFrames(numberOfFrames);
  for (let labelmapIndex = 0; labelmapIndex < labelmaps3D.length; labelmapIndex++) {
    const referencedFramesPerSegment = referencedFramesPerLabelmap[labelmapIndex];
    const labelmap3D = labelmaps3D[labelmapIndex];
    const {metadata} = labelmap3D;
    for (let segmentIndex = 1; segmentIndex < referencedFramesPerSegment.length; segmentIndex++) {
      const referencedFrameIndicies = referencedFramesPerSegment[segmentIndex];
      if (referencedFrameIndicies) {
        const referencedFrameNumbers = referencedFrameIndicies.map((element) => {
          return element + 1;
        });
        const segmentMetadata = metadata[segmentIndex];
        const labelmaps = _getLabelmapsFromRefernecedFrameIndicies(labelmap3D, referencedFrameIndicies);
        segmentation.addSegmentFromLabelmap(segmentMetadata, labelmaps, segmentIndex, referencedFrameNumbers);
      }
    }
  }
  if (options.rleEncode) {
    const rleEncodedFrames = encode(segmentation.dataset.PixelData, numberOfFrames, segmentation.dataset.Rows, segmentation.dataset.Columns);
    segmentation.assignToDataset({
      BitsAllocated: "8",
      BitsStored: "8",
      HighBit: "7",
      SegmentationType: "FRACTIONAL",
      SegmentationFractionalType: "PROBABILITY",
      MaximumFractionalValue: "255"
    });
    segmentation.dataset._meta.TransferSyntaxUID = {
      Value: ["1.2.840.10008.1.2.5"],
      vr: "UI"
    };
    segmentation.dataset._vrMap.PixelData = "OB";
    segmentation.dataset.PixelData = rleEncodedFrames;
  } else {
    segmentation.bitPackPixelData();
  }
  const segBlob = datasetToBlob(segmentation.dataset);
  return segBlob;
}
function _getLabelmapsFromRefernecedFrameIndicies(labelmap3D, referencedFrameIndicies) {
  const {labelmaps2D} = labelmap3D;
  const labelmaps = [];
  for (let i = 0; i < referencedFrameIndicies.length; i++) {
    const frame = referencedFrameIndicies[i];
    labelmaps.push(labelmaps2D[frame].pixelData);
  }
  return labelmaps;
}
function _createSegFromImages2(images, isMultiframe, options) {
  const datasets = [];
  if (isMultiframe) {
    const image = images[0];
    const arrayBuffer = image.data.byteArray.buffer;
    const dicomData = DicomMessage4.readFile(arrayBuffer);
    const dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);
    dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);
    datasets.push(dataset);
  } else {
    for (let i = 0; i < images.length; i++) {
      const image = images[i];
      const arrayBuffer = image.data.byteArray.buffer;
      const dicomData = DicomMessage4.readFile(arrayBuffer);
      const dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);
      dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);
      datasets.push(dataset);
    }
  }
  const multiframe = Normalizer.normalizeToDataset(datasets);
  return new Segmentation_default([multiframe], options);
}
function generateToolState2(imageIds, arrayBuffer, metadataProvider, skipOverlapping = false, tolerance = 1e-3) {
  const dicomData = DicomMessage4.readFile(arrayBuffer);
  const dataset = DicomMetaDictionary.naturalizeDataset(dicomData.dict);
  dataset._meta = DicomMetaDictionary.namifyDataset(dicomData.meta);
  const multiframe = Normalizer.normalizeToDataset([dataset]);
  const imagePlaneModule = metadataProvider.get("imagePlaneModule", imageIds[0]);
  const generalSeriesModule = metadataProvider.get("generalSeriesModule", imageIds[0]);
  const SeriesInstanceUID = generalSeriesModule.seriesInstanceUID;
  let ImageOrientationPatient;
  let validOrientations;
  const hasCoordinateSystem = "FrameOfReferenceUID" in multiframe;
  if (hasCoordinateSystem) {
    if (!imagePlaneModule) {
      console.warn("Insufficient metadata, imagePlaneModule missing.");
    }
    ImageOrientationPatient = Array.isArray(imagePlaneModule.rowCosines) ? [
      ...imagePlaneModule.rowCosines,
      ...imagePlaneModule.columnCosines
    ] : [
      imagePlaneModule.rowCosines.x,
      imagePlaneModule.rowCosines.y,
      imagePlaneModule.rowCosines.z,
      imagePlaneModule.columnCosines.x,
      imagePlaneModule.columnCosines.y,
      imagePlaneModule.columnCosines.z
    ];
    validOrientations = getValidOrientations2(ImageOrientationPatient);
  }
  const sliceLength = multiframe.Columns * multiframe.Rows;
  const segMetadata = getSegmentMetadata2(multiframe, SeriesInstanceUID);
  const TransferSyntaxUID = multiframe._meta.TransferSyntaxUID.Value[0];
  let pixelData;
  if (TransferSyntaxUID === "1.2.840.10008.1.2.5") {
    const rleEncodedFrames = Array.isArray(multiframe.PixelData) ? multiframe.PixelData : [multiframe.PixelData];
    pixelData = decode(rleEncodedFrames, multiframe.Rows, multiframe.Columns);
    if (multiframe.BitsStored === 1) {
      console.warn("No implementation for rle + bitbacking.");
      return;
    }
  } else {
    pixelData = unpackPixelData2(multiframe);
    if (!pixelData) {
      throw new Error("Fractional segmentations are not yet supported");
    }
  }
  let orientation;
  if (hasCoordinateSystem) {
    orientation = checkOrientation(multiframe, validOrientations, [imagePlaneModule.rows, imagePlaneModule.columns, imageIds.length], tolerance);
  } else {
    orientation = "Planar";
  }
  let overlapping = false;
  if (!skipOverlapping) {
    overlapping = checkSEGsOverlapping(pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance);
  }
  let insertFunction;
  switch (orientation) {
    case "Planar":
      if (overlapping) {
        insertFunction = insertOverlappingPixelDataPlanar;
      } else {
        insertFunction = insertPixelDataPlanar;
      }
      break;
    case "Perpendicular":
      throw new Error("Segmentations orthogonal to the acquisition plane of the source data are not yet supported.");
    case "Oblique":
      throw new Error("Segmentations oblique to the acquisition plane of the source data are not yet supported.");
  }
  const segmentsOnFrameArray = [];
  segmentsOnFrameArray[0] = [];
  const segmentsOnFrame = [];
  const arrayBufferLength = sliceLength * imageIds.length * 2;
  const labelmapBufferArray = [];
  labelmapBufferArray[0] = new ArrayBuffer(arrayBufferLength);
  insertFunction(segmentsOnFrame, segmentsOnFrameArray, labelmapBufferArray, pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance);
  return {
    labelmapBufferArray,
    segMetadata,
    segmentsOnFrame,
    segmentsOnFrameArray
  };
}
function findReferenceSourceImageId(multiframe, frameSegment, imageIds, metadataProvider, tolerance) {
  let imageId = void 0;
  if (!multiframe) {
    return imageId;
  }
  const {
    FrameOfReferenceUID,
    PerFrameFunctionalGroupsSequence,
    SourceImageSequence,
    ReferencedSeriesSequence
  } = multiframe;
  if (!PerFrameFunctionalGroupsSequence || PerFrameFunctionalGroupsSequence.length === 0) {
    return imageId;
  }
  const PerFrameFunctionalGroup = PerFrameFunctionalGroupsSequence[frameSegment];
  if (!PerFrameFunctionalGroup) {
    return imageId;
  }
  let frameSourceImageSequence = void 0;
  if (PerFrameFunctionalGroup.DerivationImageSequence) {
    let DerivationImageSequence = PerFrameFunctionalGroup.DerivationImageSequence;
    if (Array.isArray(DerivationImageSequence)) {
      if (DerivationImageSequence.length !== 0) {
        DerivationImageSequence = DerivationImageSequence[0];
      } else {
        DerivationImageSequence = void 0;
      }
    }
    if (DerivationImageSequence) {
      frameSourceImageSequence = DerivationImageSequence.SourceImageSequence;
      if (Array.isArray(frameSourceImageSequence)) {
        if (frameSourceImageSequence.length !== 0) {
          frameSourceImageSequence = frameSourceImageSequence[0];
        } else {
          frameSourceImageSequence = void 0;
        }
      }
    }
  } else if (SourceImageSequence && SourceImageSequence.length !== 0) {
    frameSourceImageSequence = SourceImageSequence[frameSegment];
  }
  if (frameSourceImageSequence) {
    imageId = getImageIdOfSourceImagebySourceImageSequence(frameSourceImageSequence, imageIds, metadataProvider);
  }
  if (imageId === void 0 && ReferencedSeriesSequence) {
    const referencedSeriesSequence = Array.isArray(ReferencedSeriesSequence) ? ReferencedSeriesSequence[0] : ReferencedSeriesSequence;
    const ReferencedSeriesInstanceUID = referencedSeriesSequence.SeriesInstanceUID;
    imageId = getImageIdOfSourceImagebyGeometry(ReferencedSeriesInstanceUID, FrameOfReferenceUID, PerFrameFunctionalGroup, imageIds, metadataProvider, tolerance);
  }
  return imageId;
}
function checkSEGsOverlapping(pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance) {
  const {
    SharedFunctionalGroupsSequence,
    PerFrameFunctionalGroupsSequence,
    SegmentSequence,
    Rows,
    Columns
  } = multiframe;
  let numberOfSegs = SegmentSequence.length;
  if (numberOfSegs < 2) {
    return false;
  }
  const sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : void 0;
  const sliceLength = Columns * Rows;
  const groupsLen = PerFrameFunctionalGroupsSequence.length;
  let frameSegmentsMapping = new Map();
  for (let frameSegment = 0; frameSegment < groupsLen; ++frameSegment) {
    const segmentIndex = getSegmentIndex(multiframe, frameSegment);
    if (segmentIndex === void 0) {
      console.warn("Could not retrieve the segment index for frame segment " + frameSegment + ", skipping this frame.");
      continue;
    }
    const imageId = findReferenceSourceImageId(multiframe, frameSegment, imageIds, metadataProvider, tolerance);
    if (!imageId) {
      console.warn("Image not present in stack, can't import frame : " + frameSegment + ".");
      continue;
    }
    const imageIdIndex = imageIds.findIndex((element) => element === imageId);
    if (frameSegmentsMapping.has(imageIdIndex)) {
      let segmentArray = frameSegmentsMapping.get(imageIdIndex);
      if (!segmentArray.includes(frameSegment)) {
        segmentArray.push(frameSegment);
        frameSegmentsMapping.set(imageIdIndex, segmentArray);
      }
    } else {
      frameSegmentsMapping.set(imageIdIndex, [frameSegment]);
    }
  }
  for (let [user, role] of frameSegmentsMapping.entries()) {
    let temp2DArray = new Uint16Array(sliceLength).fill(0);
    for (let i = 0; i < role.length; ++i) {
      const frameSegment = role[i];
      const PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[frameSegment];
      const pixelDataI2D = (0, import_ndarray4.default)(new Uint8Array(pixelData.buffer, frameSegment * sliceLength, sliceLength), [Rows, Columns]);
      let alignedPixelDataI;
      const hasCoordinateSystem = "FrameOfReferenceUID" in multiframe;
      if (hasCoordinateSystem) {
        const ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;
        alignedPixelDataI = alignPixelDataWithSourceData2(pixelDataI2D, ImageOrientationPatientI, validOrientations, tolerance);
      } else {
        alignedPixelDataI = pixelDataI2D;
      }
      if (!alignedPixelDataI) {
        console.warn("Individual SEG frames are out of plane with respect to the first SEG frame, this is not yet supported, skipping this frame.");
        continue;
      }
      const data2 = alignedPixelDataI.data;
      for (let j = 0, len = data2.length; j < len; ++j) {
        if (data2[j] !== 0) {
          temp2DArray[j]++;
          if (temp2DArray[j] > 1) {
            return true;
          }
        }
      }
    }
  }
  return false;
}
function insertOverlappingPixelDataPlanar(segmentsOnFrame, segmentsOnFrameArray, labelmapBufferArray, pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance) {
  const {
    SharedFunctionalGroupsSequence,
    PerFrameFunctionalGroupsSequence,
    Rows,
    Columns
  } = multiframe;
  const sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : void 0;
  const sliceLength = Columns * Rows;
  const arrayBufferLength = sliceLength * imageIds.length * 2;
  let M = 1;
  let m = 0;
  let tempBuffer = labelmapBufferArray[m].slice(0);
  let tempSegmentsOnFrame = (0, import_lodash.default)(segmentsOnFrameArray[m]);
  let numberOfSegs = multiframe.SegmentSequence.length;
  for (let segmentIndexToProcess = 1; segmentIndexToProcess <= numberOfSegs; ++segmentIndexToProcess) {
    for (let i = 0, groupsLen = PerFrameFunctionalGroupsSequence.length; i < groupsLen; ++i) {
      const PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[i];
      const segmentIndex = getSegmentIndex(multiframe, i);
      if (segmentIndex === void 0) {
        throw new Error("Could not retrieve the segment index. Aborting segmentation loading.");
      }
      if (segmentIndex !== segmentIndexToProcess) {
        continue;
      }
      const pixelDataI2D = (0, import_ndarray4.default)(new Uint8Array(pixelData.buffer, i * sliceLength, sliceLength), [Rows, Columns]);
      let alignedPixelDataI;
      const hasCoordinateSystem = "FrameOfReferenceUID" in multiframe;
      if (hasCoordinateSystem) {
        const ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;
        alignedPixelDataI = alignPixelDataWithSourceData2(pixelDataI2D, ImageOrientationPatientI, validOrientations, tolerance);
      } else {
        alignedPixelDataI = pixelDataI2D;
      }
      if (!alignedPixelDataI) {
        throw new Error("Individual SEG frames are out of plane with respect to the first SEG frame. This is not yet supported. Aborting segmentation loading.");
      }
      const imageId = findReferenceSourceImageId(multiframe, i, imageIds, metadataProvider, tolerance);
      if (!imageId) {
        console.warn("Image not present in stack, can't import frame : " + i + ".");
        continue;
      }
      const sourceImageMetadata = metadataProvider.get("imagePixelModule", imageId);
      if (Rows !== sourceImageMetadata.rows || Columns !== sourceImageMetadata.columns) {
        throw new Error("Individual SEG frames have different geometry dimensions (Rows and Columns) respect to the source image reference frame. This is not yet supported. Aborting segmentation loading. ");
      }
      const imageIdIndex = imageIds.findIndex((element) => element === imageId);
      const byteOffset = sliceLength * 2 * imageIdIndex;
      const labelmap2DView = new Uint16Array(tempBuffer, byteOffset, sliceLength);
      const data2 = alignedPixelDataI.data;
      let segmentOnFrame = false;
      for (let j = 0, len = alignedPixelDataI.data.length; j < len; ++j) {
        if (data2[j]) {
          if (labelmap2DView[j] !== 0) {
            m++;
            if (m >= M) {
              labelmapBufferArray[m] = new ArrayBuffer(arrayBufferLength);
              segmentsOnFrameArray[m] = [];
              M++;
            }
            tempBuffer = labelmapBufferArray[m].slice(0);
            tempSegmentsOnFrame = (0, import_lodash.default)(segmentsOnFrameArray[m]);
            i = 0;
            break;
          } else {
            labelmap2DView[j] = segmentIndex;
            segmentOnFrame = true;
          }
        }
      }
      if (segmentOnFrame) {
        if (!tempSegmentsOnFrame[imageIdIndex]) {
          tempSegmentsOnFrame[imageIdIndex] = [];
        }
        tempSegmentsOnFrame[imageIdIndex].push(segmentIndex);
        if (!segmentsOnFrame[imageIdIndex]) {
          segmentsOnFrame[imageIdIndex] = [];
        }
        segmentsOnFrame[imageIdIndex].push(segmentIndex);
      }
    }
    labelmapBufferArray[m] = tempBuffer.slice(0);
    segmentsOnFrameArray[m] = (0, import_lodash.default)(tempSegmentsOnFrame);
    m = 0;
    tempBuffer = labelmapBufferArray[m].slice(0);
    tempSegmentsOnFrame = (0, import_lodash.default)(segmentsOnFrameArray[m]);
  }
}
var getSegmentIndex = (multiframe, frame) => {
  const {PerFrameFunctionalGroupsSequence, SharedFunctionalGroupsSequence} = multiframe;
  const PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[frame];
  return PerFrameFunctionalGroups && PerFrameFunctionalGroups.SegmentIdentificationSequence ? PerFrameFunctionalGroups.SegmentIdentificationSequence.ReferencedSegmentNumber : SharedFunctionalGroupsSequence.SegmentIdentificationSequence ? SharedFunctionalGroupsSequence.SegmentIdentificationSequence.ReferencedSegmentNumber : void 0;
};
function insertPixelDataPlanar(segmentsOnFrame, segmentsOnFrameArray, labelmapBufferArray, pixelData, multiframe, imageIds, validOrientations, metadataProvider, tolerance) {
  const {
    SharedFunctionalGroupsSequence,
    PerFrameFunctionalGroupsSequence,
    Rows,
    Columns
  } = multiframe;
  const sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : void 0;
  const sliceLength = Columns * Rows;
  for (let i = 0, groupsLen = PerFrameFunctionalGroupsSequence.length; i < groupsLen; ++i) {
    const PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[i];
    const pixelDataI2D = (0, import_ndarray4.default)(new Uint8Array(pixelData.buffer, i * sliceLength, sliceLength), [Rows, Columns]);
    let alignedPixelDataI;
    const hasCoordinateSystem = "FrameOfReferenceUID" in multiframe;
    if (hasCoordinateSystem) {
      const ImageOrientationPatientI = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;
      alignedPixelDataI = alignPixelDataWithSourceData2(pixelDataI2D, ImageOrientationPatientI, validOrientations, tolerance);
    } else {
      alignedPixelDataI = pixelDataI2D;
    }
    if (!alignedPixelDataI) {
      throw new Error("Individual SEG frames are out of plane with respect to the first SEG frame. This is not yet supported. Aborting segmentation loading.");
    }
    const segmentIndex = getSegmentIndex(multiframe, i);
    if (segmentIndex === void 0) {
      throw new Error("Could not retrieve the segment index. Aborting segmentation loading.");
    }
    const imageId = findReferenceSourceImageId(multiframe, i, imageIds, metadataProvider, tolerance);
    if (!imageId) {
      console.warn("Image not present in stack, can't import frame : " + i + ".");
      continue;
    }
    const sourceImageMetadata = metadataProvider.get("imagePixelModule", imageId);
    if (Rows !== sourceImageMetadata.rows || Columns !== sourceImageMetadata.columns) {
      throw new Error("Individual SEG frames have different geometry dimensions (Rows and Columns) respect to the source image reference frame. This is not yet supported. Aborting segmentation loading. ");
    }
    const imageIdIndex = imageIds.findIndex((element) => element === imageId);
    const byteOffset = sliceLength * 2 * imageIdIndex;
    const labelmap2DView = new Uint16Array(labelmapBufferArray[0], byteOffset, sliceLength);
    const data2 = alignedPixelDataI.data;
    for (let j = 0, len = alignedPixelDataI.data.length; j < len; ++j) {
      if (data2[j]) {
        for (let x = j; x < len; ++x) {
          if (data2[x]) {
            labelmap2DView[x] = segmentIndex;
          }
        }
        if (!segmentsOnFrame[imageIdIndex]) {
          segmentsOnFrame[imageIdIndex] = [];
        }
        segmentsOnFrame[imageIdIndex].push(segmentIndex);
        break;
      }
    }
  }
}
function checkOrientation(multiframe, validOrientations, sourceDataDimensions, tolerance) {
  const {SharedFunctionalGroupsSequence, PerFrameFunctionalGroupsSequence} = multiframe;
  const sharedImageOrientationPatient = SharedFunctionalGroupsSequence.PlaneOrientationSequence ? SharedFunctionalGroupsSequence.PlaneOrientationSequence.ImageOrientationPatient : void 0;
  const PerFrameFunctionalGroups = PerFrameFunctionalGroupsSequence[0];
  const iop = sharedImageOrientationPatient || PerFrameFunctionalGroups.PlaneOrientationSequence.ImageOrientationPatient;
  const inPlane = validOrientations.some((operation) => compareArrays(iop, operation, tolerance));
  if (inPlane) {
    return "Planar";
  }
  if (checkIfPerpendicular(iop, validOrientations[0], tolerance) && sourceDataDimensions.includes(multiframe.Rows) && sourceDataDimensions.includes(multiframe.Columns)) {
    return "Perpendicular";
  }
  return "Oblique";
}
function checkIfPerpendicular(iop1, iop2, tolerance) {
  const absDotColumnCosines = Math.abs(iop1[0] * iop2[0] + iop1[1] * iop2[1] + iop1[2] * iop2[2]);
  const absDotRowCosines = Math.abs(iop1[3] * iop2[3] + iop1[4] * iop2[4] + iop1[5] * iop2[5]);
  return (absDotColumnCosines < tolerance || Math.abs(absDotColumnCosines - 1) < tolerance) && (absDotRowCosines < tolerance || Math.abs(absDotRowCosines - 1) < tolerance);
}
function unpackPixelData2(multiframe) {
  const segType = multiframe.SegmentationType;
  let data2;
  if (Array.isArray(multiframe.PixelData)) {
    data2 = multiframe.PixelData[0];
  } else {
    data2 = multiframe.PixelData;
  }
  if (data2 === void 0) {
    log_default.error("This segmentation pixeldata is undefined.");
  }
  if (segType === "BINARY") {
    return BitArray.unpack(data2);
  }
  const pixelData = new Uint8Array(data2);
  const max = multiframe.MaximumFractionalValue;
  const onlyMaxAndZero = pixelData.find((element) => element !== 0 && element !== max) === void 0;
  if (!onlyMaxAndZero) {
    return;
  }
  log_default.warn("This segmentation object is actually binary... processing as such.");
  return pixelData;
}
function getImageIdOfSourceImagebySourceImageSequence(SourceImageSequence, imageIds, metadataProvider) {
  const {ReferencedSOPInstanceUID, ReferencedFrameNumber} = SourceImageSequence;
  return ReferencedFrameNumber ? getImageIdOfReferencedFrame2(ReferencedSOPInstanceUID, ReferencedFrameNumber, imageIds, metadataProvider) : getImageIdOfReferencedSingleFramedSOPInstance2(ReferencedSOPInstanceUID, imageIds, metadataProvider);
}
function getImageIdOfSourceImagebyGeometry(ReferencedSeriesInstanceUID, FrameOfReferenceUID, PerFrameFunctionalGroup, imageIds, metadataProvider, tolerance) {
  if (ReferencedSeriesInstanceUID === void 0 || PerFrameFunctionalGroup.PlanePositionSequence === void 0 || PerFrameFunctionalGroup.PlanePositionSequence[0] === void 0 || PerFrameFunctionalGroup.PlanePositionSequence[0].ImagePositionPatient === void 0) {
    return void 0;
  }
  for (let imageIdsIndexc = 0; imageIdsIndexc < imageIds.length; ++imageIdsIndexc) {
    const sourceImageMetadata = metadataProvider.get("instance", imageIds[imageIdsIndexc]);
    if (sourceImageMetadata === void 0 || sourceImageMetadata.ImagePositionPatient === void 0 || sourceImageMetadata.FrameOfReferenceUID !== FrameOfReferenceUID || sourceImageMetadata.SeriesInstanceUID !== ReferencedSeriesInstanceUID) {
      continue;
    }
    if (compareArrays(PerFrameFunctionalGroup.PlanePositionSequence[0].ImagePositionPatient, sourceImageMetadata.ImagePositionPatient, tolerance)) {
      return imageIds[imageIdsIndexc];
    }
  }
}
function getImageIdOfReferencedSingleFramedSOPInstance2(sopInstanceUid, imageIds, metadataProvider) {
  return imageIds.find((imageId) => {
    const sopCommonModule = metadataProvider.get("sopCommonModule", imageId);
    if (!sopCommonModule) {
      return;
    }
    return sopCommonModule.sopInstanceUID === sopInstanceUid;
  });
}
function getImageIdOfReferencedFrame2(sopInstanceUid, frameNumber, imageIds, metadataProvider) {
  const imageId = imageIds.find((imageId2) => {
    const sopCommonModule = metadataProvider.get("sopCommonModule", imageId2);
    if (!sopCommonModule) {
      return;
    }
    const imageIdFrameNumber = Number(imageId2.split("frame=")[1]);
    return sopCommonModule.sopInstanceUID === sopInstanceUid && imageIdFrameNumber === frameNumber - 1;
  });
  return imageId;
}
function getValidOrientations2(iop) {
  const orientations = [];
  orientations[0] = iop;
  orientations[1] = flipImageOrientationPatient.h(iop);
  orientations[2] = flipImageOrientationPatient.v(iop);
  const iop90 = rotateDirectionCosinesInPlane_default(iop, Math.PI / 2);
  orientations[3] = iop90;
  orientations[4] = flipImageOrientationPatient.h(iop90);
  orientations[5] = flipImageOrientationPatient.v(iop90);
  orientations[6] = rotateDirectionCosinesInPlane_default(iop, Math.PI);
  orientations[7] = rotateDirectionCosinesInPlane_default(iop, 1.5 * Math.PI);
  return orientations;
}
function alignPixelDataWithSourceData2(pixelData2D, iop, orientations, tolerance) {
  if (compareArrays(iop, orientations[0], tolerance)) {
    return pixelData2D;
  } else if (compareArrays(iop, orientations[1], tolerance)) {
    return flipMatrix2D.v(pixelData2D);
  } else if (compareArrays(iop, orientations[2], tolerance)) {
    return flipMatrix2D.h(pixelData2D);
  } else if (compareArrays(iop, orientations[3], tolerance)) {
    return rotateMatrix902D_default(pixelData2D);
  } else if (compareArrays(iop, orientations[4], tolerance)) {
    return rotateMatrix902D_default(flipMatrix2D.h(pixelData2D));
  } else if (compareArrays(iop, orientations[5], tolerance)) {
    return rotateMatrix902D_default(flipMatrix2D.v(pixelData2D));
  } else if (compareArrays(iop, orientations[6], tolerance)) {
    return rotateMatrix902D_default(rotateMatrix902D_default(pixelData2D));
  } else if (compareArrays(iop, orientations[7], tolerance)) {
    return rotateMatrix902D_default(rotateMatrix902D_default(rotateMatrix902D_default(pixelData2D)));
  }
}
function compareArrays(array1, array2, tolerance) {
  if (array1.length != array2.length) {
    return false;
  }
  for (let i = 0; i < array1.length; ++i) {
    if (!nearlyEqual(array1[i], array2[i], tolerance)) {
      return false;
    }
  }
  return true;
}
function getSegmentMetadata2(multiframe, seriesInstanceUid) {
  const segmentSequence = multiframe.SegmentSequence;
  let data2 = [];
  if (Array.isArray(segmentSequence)) {
    data2 = [void 0, ...segmentSequence];
  } else {
    data2 = [void 0, segmentSequence];
  }
  return {
    seriesInstanceUid,
    data: data2
  };
}

// src/adapters/Cornerstone/Segmentation.js
var Segmentation4 = {
  generateSegmentation: generateSegmentation3,
  generateToolState: generateToolState3,
  fillSegmentation: fillSegmentation2
};
var Segmentation_default2 = Segmentation4;
function generateSegmentation3(images, labelmaps3DorBrushData, options = {includeSliceSpacing: true}, cornerstoneToolsVersion = 4) {
  if (cornerstoneToolsVersion === 4) {
    return Segmentation_4X_default.generateSegmentation(images, labelmaps3DorBrushData, options);
  }
  if (cornerstoneToolsVersion === 3) {
    return Segmentation_3X_default.generateSegmentation(images, labelmaps3DorBrushData, options);
  }
  console.warn(`No generateSegmentation adapater for cornerstone version ${cornerstoneToolsVersion}, exiting.`);
}
function generateToolState3(imageIds, arrayBuffer, metadataProvider, skipOverlapping = false, tolerance = 1e-3, cornerstoneToolsVersion = 4) {
  if (cornerstoneToolsVersion === 4) {
    return Segmentation_4X_default.generateToolState(imageIds, arrayBuffer, metadataProvider, skipOverlapping, tolerance);
  }
  if (cornerstoneToolsVersion === 3) {
    return Segmentation_3X_default.generateToolState(imageIds, arrayBuffer, metadataProvider);
  }
  console.warn(`No generateToolState adapater for cornerstone version ${cornerstoneToolsVersion}, exiting.`);
}
function fillSegmentation2(segmentation, inputLabelmaps3D, options = {includeSliceSpacing: true}, cornerstoneToolsVersion = 4) {
  if (cornerstoneToolsVersion === 4) {
    return Segmentation_4X_default.fillSegmentation(segmentation, inputLabelmaps3D, options);
  }
  console.warn(`No generateSegmentation adapater for cornerstone version ${cornerstoneToolsVersion}, exiting.`);
}

// src/utilities/TID300/CobbAngle.js
var CobbAngle = class extends TID300Measurement_default {
  contentItem() {
    const {
      point1,
      point2,
      point3,
      point4,
      rAngle,
      ReferencedSOPSequence
    } = this.props;
    return this.getMeasurement([
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "285285000",
          CodingSchemeDesignator: "SCT",
          CodeMeaning: "Cobb angle"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: {
            CodeValue: "deg",
            CodingSchemeDesignator: "UCUM",
            CodingSchemeVersion: "1.4",
            CodeMeaning: "\xB0"
          },
          NumericValue: rAngle
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData: [
            point1.x,
            point1.y,
            point2.x,
            point2.y,
            point3.x,
            point3.y,
            point4.x,
            point4.y
          ],
          ContentSequence: {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      }
    ]);
  }
};
var CobbAngle_default = CobbAngle;

// src/adapters/Cornerstone/CobbAngle.js
var COBB_ANGLE = "CobbAngle";
var CobbAngle2 = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup) {
    const {defaultState, NUMGroup, SCOORDGroup} = MeasurementReport_default.getSetupMeasurementData(MeasurementGroup);
    const state = {
      ...defaultState,
      rAngle: NUMGroup.MeasuredValueSequence.NumericValue,
      toolType: CobbAngle2.toolType,
      handles: {
        start: {},
        end: {},
        start2: {
          highlight: true,
          drawnIndependently: true
        },
        end2: {
          highlight: true,
          drawnIndependently: true
        },
        textBox: {
          hasMoved: false,
          movesIndependently: false,
          drawnIndependently: true,
          allowedOutsideImage: true,
          hasBoundingBox: true
        }
      }
    };
    [
      state.handles.start.x,
      state.handles.start.y,
      state.handles.end.x,
      state.handles.end.y,
      state.handles.start2.x,
      state.handles.start2.y,
      state.handles.end2.x,
      state.handles.end2.y
    ] = SCOORDGroup.GraphicData;
    return state;
  }
  static getTID300RepresentationArguments(tool) {
    const {handles, finding, findingSites} = tool;
    const point1 = handles.start;
    const point2 = handles.end;
    const point3 = handles.start2;
    const point4 = handles.end2;
    const rAngle = tool.rAngle;
    const trackingIdentifierTextValue7 = "cornerstoneTools@^4.0.0:CobbAngle";
    return {
      point1,
      point2,
      point3,
      point4,
      rAngle,
      trackingIdentifierTextValue: trackingIdentifierTextValue7,
      finding,
      findingSites: findingSites || []
    };
  }
};
CobbAngle2.toolType = COBB_ANGLE;
CobbAngle2.utilityToolType = COBB_ANGLE;
CobbAngle2.TID300Representation = CobbAngle_default;
CobbAngle2.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone4Tag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone4Tag !== cornerstone4Tag_default) {
    return false;
  }
  return toolType === COBB_ANGLE;
};
MeasurementReport_default.registerTool(CobbAngle2);
var CobbAngle_default2 = CobbAngle2;

// src/adapters/Cornerstone/Angle.js
var ANGLE = "Angle";
var Angle = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup) {
    const {defaultState, NUMGroup, SCOORDGroup} = MeasurementReport_default.getSetupMeasurementData(MeasurementGroup);
    const state = {
      ...defaultState,
      rAngle: NUMGroup.MeasuredValueSequence.NumericValue,
      toolType: Angle.toolType,
      handles: {
        start: {},
        middle: {},
        end: {},
        textBox: {
          hasMoved: false,
          movesIndependently: false,
          drawnIndependently: true,
          allowedOutsideImage: true,
          hasBoundingBox: true
        }
      }
    };
    [
      state.handles.start.x,
      state.handles.start.y,
      state.handles.middle.x,
      state.handles.middle.y,
      state.handles.middle.x,
      state.handles.middle.y,
      state.handles.end.x,
      state.handles.end.y
    ] = SCOORDGroup.GraphicData;
    return state;
  }
  static getTID300RepresentationArguments(tool) {
    const {handles, finding, findingSites} = tool;
    const point1 = handles.start;
    const point2 = handles.middle;
    const point3 = handles.middle;
    const point4 = handles.end;
    const rAngle = tool.rAngle;
    const trackingIdentifierTextValue7 = "cornerstoneTools@^4.0.0:Angle";
    return {
      point1,
      point2,
      point3,
      point4,
      rAngle,
      trackingIdentifierTextValue: trackingIdentifierTextValue7,
      finding,
      findingSites: findingSites || []
    };
  }
};
Angle.toolType = ANGLE;
Angle.utilityToolType = ANGLE;
Angle.TID300Representation = CobbAngle_default;
Angle.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone4Tag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone4Tag !== cornerstone4Tag_default) {
    return false;
  }
  return toolType === ANGLE;
};
MeasurementReport_default.registerTool(Angle);
var Angle_default = Angle;

// src/adapters/Cornerstone/RectangleRoi.js
var RectangleRoi = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup) {
    const {defaultState, SCOORDGroup, NUMGroup} = MeasurementReport_default.getSetupMeasurementData(MeasurementGroup);
    const state = {
      ...defaultState,
      toolType: RectangleRoi.toolType,
      handles: {
        start: {},
        end: {},
        textBox: {
          active: false,
          hasMoved: false,
          movesIndependently: false,
          drawnIndependently: true,
          allowedOutsideImage: true,
          hasBoundingBox: true
        },
        initialRotation: 0
      },
      cachedStats: {
        area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0
      },
      color: void 0,
      invalidated: true
    };
    const intermediate = {};
    [
      state.handles.start.x,
      state.handles.start.y,
      intermediate.x,
      intermediate.y,
      state.handles.end.x,
      state.handles.end.y
    ] = SCOORDGroup.GraphicData;
    return state;
  }
  static getTID300RepresentationArguments(tool) {
    const {finding, findingSites, cachedStats = {}, handles} = tool;
    console.log("getTID300 Rectangle", tool, cachedStats, handles);
    const {start, end} = handles;
    const points = [
      start,
      {x: start.x, y: end.y},
      end,
      {x: end.x, y: start.y}
    ];
    const {area, perimeter} = cachedStats;
    console.log("Point=", points, "cachedStats=", cachedStats);
    const trackingIdentifierTextValue7 = "cornerstoneTools@^4.0.0:RectangleRoi";
    return {
      points,
      area,
      perimeter,
      trackingIdentifierTextValue: trackingIdentifierTextValue7,
      finding,
      findingSites: findingSites || []
    };
  }
};
RectangleRoi.toolType = "RectangleRoi";
RectangleRoi.utilityToolType = "RectangleRoi";
RectangleRoi.TID300Representation = Polyline_default;
RectangleRoi.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone4Tag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone4Tag !== cornerstone4Tag_default) {
    return false;
  }
  return toolType === RectangleRoi.toolType;
};
MeasurementReport_default.registerTool(RectangleRoi);
var RectangleRoi_default = RectangleRoi;

// src/adapters/Cornerstone/index.js
var Cornerstone = {
  Length: Length_default2,
  FreehandRoi: FreehandRoi_default,
  Bidirectional: Bidirectional_default2,
  EllipticalRoi: EllipticalRoi_default,
  CircleRoi: CircleRoi_default,
  ArrowAnnotate: ArrowAnnotate_default,
  MeasurementReport: MeasurementReport_default,
  Segmentation: Segmentation_default2,
  CobbAngle: CobbAngle_default2,
  Angle: Angle_default,
  RectangleRoi: RectangleRoi_default
};
var Cornerstone_default = Cornerstone;

// src/adapters/Cornerstone3D/CodingScheme.js
var CORNERSTONEFREETEXT2 = "CORNERSTONEFREETEXT";
var CodingSchemeDesignator = "CORNERSTONEJS";
var CodingScheme = {
  CodingSchemeDesignator,
  codeValues: {
    CORNERSTONEFREETEXT: CORNERSTONEFREETEXT2
  }
};
var CodingScheme_default = CodingScheme;

// src/adapters/Cornerstone3D/MeasurementReport.js
var FINDING3 = {CodingSchemeDesignator: "DCM", CodeValue: "121071"};
var FINDING_SITE3 = {CodingSchemeDesignator: "SCT", CodeValue: "363698007"};
var FINDING_SITE_OLD2 = {CodingSchemeDesignator: "SRT", CodeValue: "G-C0E3"};
var codeValueMatch2 = (group, code, oldCode) => {
  const {ConceptNameCodeSequence} = group;
  if (!ConceptNameCodeSequence)
    return;
  const {CodingSchemeDesignator: CodingSchemeDesignator3, CodeValue} = ConceptNameCodeSequence;
  return CodingSchemeDesignator3 == code.CodingSchemeDesignator && CodeValue == code.CodeValue || oldCode && CodingSchemeDesignator3 == oldCode.CodingSchemeDesignator && CodeValue == oldCode.CodeValue;
};
function getTID300ContentItem2(tool, toolType, ReferencedSOPSequence, toolClass, worldToImageCoords) {
  const args = toolClass.getTID300RepresentationArguments(tool, worldToImageCoords);
  args.ReferencedSOPSequence = ReferencedSOPSequence;
  const TID300Measurement2 = new toolClass.TID300Representation(args);
  return TID300Measurement2;
}
function getMeasurementGroup2(toolType, toolData, ReferencedSOPSequence, worldToImageCoords) {
  const toolTypeData = toolData[toolType];
  const toolClass = MeasurementReport2.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolType];
  if (!toolTypeData || !toolTypeData.data || !toolTypeData.data.length || !toolClass) {
    return;
  }
  const Measurements = toolTypeData.data.map((tool) => {
    return getTID300ContentItem2(tool, toolType, ReferencedSOPSequence, toolClass, worldToImageCoords);
  });
  return new TID1501MeasurementGroup_default(Measurements);
}
var MeasurementReport2 = class {
  constructor() {
  }
  static getCornerstoneLabelFromDefaultState(defaultState) {
    const {findingSites = [], finding} = defaultState;
    const cornersoneFreeTextCodingValue = CodingScheme_default.codeValues.CORNERSTONEFREETEXT;
    let freeTextLabel = findingSites.find((fs) => fs.CodeValue === cornersoneFreeTextCodingValue);
    if (freeTextLabel) {
      return freeTextLabel.CodeMeaning;
    }
    if (finding && finding.CodeValue === cornersoneFreeTextCodingValue) {
      return finding.CodeMeaning;
    }
  }
  static generateDatasetMeta() {
    const fileMetaInformationVersionArray = new Uint8Array(2);
    fileMetaInformationVersionArray[1] = 1;
    const _meta = {
      FileMetaInformationVersion: {
        Value: [fileMetaInformationVersionArray.buffer],
        vr: "OB"
      },
      TransferSyntaxUID: {
        Value: ["1.2.840.10008.1.2.1"],
        vr: "UI"
      },
      ImplementationClassUID: {
        Value: [DicomMetaDictionary.uid()],
        vr: "UI"
      },
      ImplementationVersionName: {
        Value: ["dcmjs"],
        vr: "SH"
      }
    };
    return _meta;
  }
  static generateDerivationSourceDataset(StudyInstanceUID, SeriesInstanceUID) {
    const _vrMap = {
      PixelData: "OW"
    };
    const _meta = MeasurementReport2.generateDatasetMeta();
    const derivationSourceDataset = {
      StudyInstanceUID,
      SeriesInstanceUID,
      _meta,
      _vrMap
    };
    return derivationSourceDataset;
  }
  static getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, toolType) {
    const {ContentSequence: ContentSequence3} = MeasurementGroup;
    const contentSequenceArr = toArray(ContentSequence3);
    const findingGroup = contentSequenceArr.find((group) => codeValueMatch2(group, FINDING3));
    const findingSiteGroups = contentSequenceArr.filter((group) => codeValueMatch2(group, FINDING_SITE3, FINDING_SITE_OLD2)) || [];
    const NUMGroup = contentSequenceArr.find((group) => group.ValueType === "NUM");
    const SCOORDGroup = toArray(NUMGroup.ContentSequence).find((group) => group.ValueType === "SCOORD");
    const {ReferencedSOPSequence} = SCOORDGroup.ContentSequence;
    const {ReferencedSOPInstanceUID, ReferencedFrameNumber} = ReferencedSOPSequence;
    const referencedImageId = sopInstanceUIDToImageIdMap[ReferencedSOPInstanceUID];
    const imagePlaneModule = metadata.get("imagePlaneModule", referencedImageId);
    const finding = findingGroup ? addAccessors_default(findingGroup.ConceptCodeSequence) : void 0;
    const findingSites = findingSiteGroups.map((fsg) => {
      return addAccessors_default(fsg.ConceptCodeSequence);
    });
    const defaultState = {
      sopInstanceUid: ReferencedSOPInstanceUID,
      annotation: {
        annotationUID: DicomMetaDictionary.uid(),
        metadata: {
          toolName: toolType,
          referencedImageId,
          FrameOfReferenceUID: imagePlaneModule.frameOfReferenceUID,
          label: ""
        }
      },
      finding,
      findingSites
    };
    if (defaultState.finding) {
      defaultState.description = defaultState.finding.CodeMeaning;
    }
    defaultState.annotation.metadata.label = MeasurementReport2.getCornerstoneLabelFromDefaultState(defaultState);
    return {
      defaultState,
      NUMGroup,
      SCOORDGroup,
      ReferencedSOPSequence,
      ReferencedSOPInstanceUID,
      ReferencedFrameNumber
    };
  }
  static generateReport(toolState, metadataProvider, worldToImageCoords, options) {
    let allMeasurementGroups = [];
    const sopInstanceUIDsToSeriesInstanceUIDMap = {};
    const derivationSourceDatasets = [];
    const _meta = MeasurementReport2.generateDatasetMeta();
    Object.keys(toolState).forEach((imageId) => {
      const sopCommonModule = metadataProvider.get("sopCommonModule", imageId);
      const generalSeriesModule = metadataProvider.get("generalSeriesModule", imageId);
      const {sopInstanceUID, sopClassUID} = sopCommonModule;
      const {studyInstanceUID, seriesInstanceUID} = generalSeriesModule;
      sopInstanceUIDsToSeriesInstanceUIDMap[sopInstanceUID] = seriesInstanceUID;
      if (!derivationSourceDatasets.find((dsd) => dsd.SeriesInstanceUID === seriesInstanceUID)) {
        const derivationSourceDataset = MeasurementReport2.generateDerivationSourceDataset(studyInstanceUID, seriesInstanceUID);
        derivationSourceDatasets.push(derivationSourceDataset);
      }
      const frameNumber = metadataProvider.get("frameNumber", imageId);
      const toolData = toolState[imageId];
      const toolTypes = Object.keys(toolData);
      const ReferencedSOPSequence = {
        ReferencedSOPClassUID: sopClassUID,
        ReferencedSOPInstanceUID: sopInstanceUID
      };
      const instance = metadataProvider.get("instance", imageId);
      if (instance && instance.NumberOfFrames && instance.NumberOfFrames > 1 || Normalizer.isMultiframeSOPClassUID(sopClassUID)) {
        ReferencedSOPSequence.ReferencedFrameNumber = frameNumber;
      }
      const measurementGroups = [];
      toolTypes.forEach((toolType) => {
        const group = getMeasurementGroup2(toolType, toolData, ReferencedSOPSequence, worldToImageCoords);
        if (group) {
          measurementGroups.push(group);
        }
      });
      allMeasurementGroups = allMeasurementGroups.concat(measurementGroups);
    });
    const tid1500MeasurementReport = new TID1500MeasurementReport_default({TID1501MeasurementGroups: allMeasurementGroups}, options);
    const report = new StructuredReport_default(derivationSourceDatasets);
    const contentItem = tid1500MeasurementReport.contentItem(derivationSourceDatasets, {sopInstanceUIDsToSeriesInstanceUIDMap});
    report.dataset = Object.assign(report.dataset, contentItem);
    report.dataset._meta = _meta;
    return report;
  }
  static generateToolState(dataset, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata, hooks = {}) {
    if (dataset.ContentTemplateSequence.TemplateIdentifier !== "1500") {
      throw new Error("This package can currently only interpret DICOM SR TID 1500");
    }
    const REPORT = "Imaging Measurements";
    const GROUP = "Measurement Group";
    const TRACKING_IDENTIFIER = "Tracking Identifier";
    const imagingMeasurementContent = toArray(dataset.ContentSequence).find(codeMeaningEquals(REPORT));
    const measurementGroups = toArray(imagingMeasurementContent.ContentSequence).filter(codeMeaningEquals(GROUP));
    const measurementData = {};
    const cornerstoneToolClasses = MeasurementReport2.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE;
    const registeredToolClasses = [];
    Object.keys(cornerstoneToolClasses).forEach((key) => {
      registeredToolClasses.push(cornerstoneToolClasses[key]);
      measurementData[key] = [];
    });
    measurementGroups.forEach((measurementGroup, index) => {
      const measurementGroupContentSequence = toArray(measurementGroup.ContentSequence);
      const TrackingIdentifierGroup = measurementGroupContentSequence.find((contentItem) => contentItem.ConceptNameCodeSequence.CodeMeaning === TRACKING_IDENTIFIER);
      const TrackingIdentifierValue = TrackingIdentifierGroup.TextValue;
      const toolClass = hooks.getToolClass ? hooks.getToolClass(measurementGroup, dataset, registeredToolClasses) : registeredToolClasses.find((tc) => tc.isValidCornerstoneTrackingIdentifier(TrackingIdentifierValue));
      if (toolClass) {
        const measurement = toolClass.getMeasurementData(measurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata);
        console.log(`=== ${toolClass.toolType} ===`);
        console.log(measurement);
        measurementData[toolClass.toolType].push(measurement);
      }
    });
    return measurementData;
  }
  static registerTool(toolClass) {
    MeasurementReport2.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE[toolClass.utilityToolType] = toolClass;
    MeasurementReport2.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE[toolClass.toolType] = toolClass;
    MeasurementReport2.MEASUREMENT_BY_TOOLTYPE[toolClass.toolType] = toolClass.utilityToolType;
  }
};
var MeasurementReport_default2 = MeasurementReport2;
MeasurementReport2.MEASUREMENT_BY_TOOLTYPE = {};
MeasurementReport2.CORNERSTONE_TOOL_CLASSES_BY_UTILITY_TYPE = {};
MeasurementReport2.CORNERSTONE_TOOL_CLASSES_BY_TOOL_TYPE = {};

// src/adapters/Cornerstone3D/cornerstone3DTag.js
var cornerstone3DTag_default = "Cornerstone3DTools@^0.1.0";

// src/adapters/Cornerstone3D/Length.js
var LENGTH3 = "Length";
var trackingIdentifierTextValue = `${cornerstone3DTag_default}:${LENGTH3}`;
var Length3 = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {
    const {defaultState, NUMGroup, SCOORDGroup, ReferencedFrameNumber} = MeasurementReport_default2.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, Length3.toolType);
    const referencedImageId = defaultState.annotation.metadata.referencedImageId;
    const {GraphicData} = SCOORDGroup;
    const worldCoords = [];
    for (let i = 0; i < GraphicData.length; i += 2) {
      const point = imageToWorldCoords(referencedImageId, [
        GraphicData[i],
        GraphicData[i + 1]
      ]);
      worldCoords.push(point);
    }
    const state = defaultState;
    state.annotation.data = {
      handles: {
        points: [worldCoords[0], worldCoords[1]],
        activeHandleIndex: 0,
        textBox: {
          hasMoved: false
        }
      },
      cachedStats: {
        [`imageId:${referencedImageId}`]: {
          length: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0
        }
      },
      frameNumber: ReferencedFrameNumber
    };
    return state;
  }
  static getTID300RepresentationArguments(tool, worldToImageCoords) {
    const {data: data2, finding, findingSites, metadata} = tool;
    const {cachedStats = {}, handles} = data2;
    const {referencedImageId} = metadata;
    if (!referencedImageId) {
      throw new Error("Length.getTID300RepresentationArguments: referencedImageId is not defined");
    }
    const start = worldToImageCoords(referencedImageId, handles.points[0]);
    const end = worldToImageCoords(referencedImageId, handles.points[1]);
    const point1 = {x: start[0], y: start[1]};
    const point2 = {x: end[0], y: end[1]};
    const {length: distance} = cachedStats[`imageId:${referencedImageId}`] || {};
    return {
      point1,
      point2,
      distance,
      trackingIdentifierTextValue,
      finding,
      findingSites: findingSites || []
    };
  }
};
Length3.toolType = LENGTH3;
Length3.utilityToolType = LENGTH3;
Length3.TID300Representation = Length_default;
Length3.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone3DTag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone3DTag !== cornerstone3DTag_default) {
    return false;
  }
  return toolType === LENGTH3;
};
MeasurementReport_default2.registerTool(Length3);
var Length_default3 = Length3;

// src/adapters/Cornerstone3D/Bidirectional.js
var BIDIRECTIONAL2 = "Bidirectional";
var LONG_AXIS2 = "Long Axis";
var SHORT_AXIS2 = "Short Axis";
var trackingIdentifierTextValue2 = `${cornerstone3DTag_default}:${BIDIRECTIONAL2}`;
var Bidirectional3 = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {
    const {defaultState, ReferencedFrameNumber} = MeasurementReport_default2.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, Bidirectional3.toolType);
    const referencedImageId = defaultState.annotation.metadata.referencedImageId;
    const {ContentSequence: ContentSequence3} = MeasurementGroup;
    const longAxisNUMGroup = toArray(ContentSequence3).find((group) => group.ConceptNameCodeSequence.CodeMeaning === LONG_AXIS2);
    const longAxisSCOORDGroup = toArray(longAxisNUMGroup.ContentSequence).find((group) => group.ValueType === "SCOORD");
    const shortAxisNUMGroup = toArray(ContentSequence3).find((group) => group.ConceptNameCodeSequence.CodeMeaning === SHORT_AXIS2);
    const shortAxisSCOORDGroup = toArray(shortAxisNUMGroup.ContentSequence).find((group) => group.ValueType === "SCOORD");
    const worldCoords = [];
    [longAxisSCOORDGroup, shortAxisSCOORDGroup].forEach((group) => {
      const {GraphicData} = group;
      for (let i = 0; i < GraphicData.length; i += 2) {
        const point = imageToWorldCoords(referencedImageId, [
          GraphicData[i],
          GraphicData[i + 1]
        ]);
        worldCoords.push(point);
      }
    });
    const state = defaultState;
    state.annotation.data = {
      handles: {
        points: [
          worldCoords[0],
          worldCoords[1],
          worldCoords[2],
          worldCoords[3]
        ],
        activeHandleIndex: 0,
        textBox: {
          hasMoved: false
        }
      },
      cachedStats: {
        [`imageId:${referencedImageId}`]: {
          length: longAxisNUMGroup.MeasuredValueSequence.NumericValue,
          width: shortAxisNUMGroup.MeasuredValueSequence.NumericValue
        }
      },
      frameNumber: ReferencedFrameNumber
    };
    return state;
  }
  static getTID300RepresentationArguments(tool, worldToImageCoords) {
    const {data: data2, finding, findingSites, metadata} = tool;
    const {cachedStats = {}, handles} = data2;
    const {referencedImageId} = metadata;
    if (!referencedImageId) {
      throw new Error("Bidirectional.getTID300RepresentationArguments: referencedImageId is not defined");
    }
    const {length, width} = cachedStats[`imageId:${referencedImageId}`] || {};
    const {points} = handles;
    let firstPointPairs = [points[0], points[1]];
    let secondPointPairs = [points[2], points[3]];
    let firstPointPairsDistance = Math.sqrt(Math.pow(firstPointPairs[0][0] - firstPointPairs[1][0], 2) + Math.pow(firstPointPairs[0][1] - firstPointPairs[1][1], 2) + Math.pow(firstPointPairs[0][2] - firstPointPairs[1][2], 2));
    let secondPointPairsDistance = Math.sqrt(Math.pow(secondPointPairs[0][0] - secondPointPairs[1][0], 2) + Math.pow(secondPointPairs[0][1] - secondPointPairs[1][1], 2) + Math.pow(secondPointPairs[0][2] - secondPointPairs[1][2], 2));
    let shortAxisPoints;
    let longAxisPoints;
    if (firstPointPairsDistance > secondPointPairsDistance) {
      shortAxisPoints = firstPointPairs;
      longAxisPoints = secondPointPairs;
    } else {
      shortAxisPoints = secondPointPairs;
      longAxisPoints = firstPointPairs;
    }
    const longAxisStartImage = worldToImageCoords(referencedImageId, shortAxisPoints[0]);
    const longAxisEndImage = worldToImageCoords(referencedImageId, shortAxisPoints[1]);
    const shortAxisStartImage = worldToImageCoords(referencedImageId, longAxisPoints[0]);
    const shortAxisEndImage = worldToImageCoords(referencedImageId, longAxisPoints[1]);
    return {
      longAxis: {
        point1: {
          x: longAxisStartImage[0],
          y: longAxisStartImage[1]
        },
        point2: {
          x: longAxisEndImage[0],
          y: longAxisEndImage[1]
        }
      },
      shortAxis: {
        point1: {
          x: shortAxisStartImage[0],
          y: shortAxisStartImage[1]
        },
        point2: {
          x: shortAxisEndImage[0],
          y: shortAxisEndImage[1]
        }
      },
      longAxisLength: length,
      shortAxisLength: width,
      trackingIdentifierTextValue: trackingIdentifierTextValue2,
      finding,
      findingSites: findingSites || []
    };
  }
};
Bidirectional3.toolType = BIDIRECTIONAL2;
Bidirectional3.utilityToolType = BIDIRECTIONAL2;
Bidirectional3.TID300Representation = Bidirectional_default;
Bidirectional3.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone3DTag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone3DTag !== cornerstone3DTag_default) {
    return false;
  }
  return toolType === BIDIRECTIONAL2;
};
MeasurementReport_default2.registerTool(Bidirectional3);
var Bidirectional_default3 = Bidirectional3;

// src/adapters/Cornerstone3D/EllipticalROI.js
var import_gl_matrix = __toModule(require_cjs());
var ELLIPTICALROI2 = "EllipticalROI";
var EPSILON = 1e-4;
var trackingIdentifierTextValue3 = `${cornerstone3DTag_default}:${ELLIPTICALROI2}`;
var EllipticalROI = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {
    const {defaultState, NUMGroup, SCOORDGroup, ReferencedFrameNumber} = MeasurementReport_default2.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, EllipticalROI.toolType);
    const referencedImageId = defaultState.annotation.metadata.referencedImageId;
    const {GraphicData} = SCOORDGroup;
    const pointsWorld = [];
    for (let i = 0; i < GraphicData.length; i += 2) {
      const worldPos = imageToWorldCoords(referencedImageId, [
        GraphicData[i],
        GraphicData[i + 1]
      ]);
      pointsWorld.push(worldPos);
    }
    const majorAxisStart = import_gl_matrix.vec3.fromValues(...pointsWorld[0]);
    const majorAxisEnd = import_gl_matrix.vec3.fromValues(...pointsWorld[1]);
    const minorAxisStart = import_gl_matrix.vec3.fromValues(...pointsWorld[2]);
    const minorAxisEnd = import_gl_matrix.vec3.fromValues(...pointsWorld[3]);
    const majorAxisVec = import_gl_matrix.vec3.create();
    import_gl_matrix.vec3.sub(majorAxisVec, majorAxisEnd, majorAxisStart);
    import_gl_matrix.vec3.normalize(majorAxisVec, majorAxisVec);
    const minorAxisVec = import_gl_matrix.vec3.create();
    import_gl_matrix.vec3.sub(minorAxisVec, minorAxisEnd, minorAxisStart);
    import_gl_matrix.vec3.normalize(minorAxisVec, minorAxisVec);
    const imagePlaneModule = metadata.get("imagePlaneModule", referencedImageId);
    if (!imagePlaneModule) {
      throw new Error("imageId does not have imagePlaneModule metadata");
    }
    const {columnCosines} = imagePlaneModule;
    const columnCosinesVec = import_gl_matrix.vec3.fromValues(...columnCosines);
    const projectedMajorAxisOnColVec = import_gl_matrix.vec3.dot(columnCosinesVec, majorAxisVec);
    const projectedMinorAxisOnColVec = import_gl_matrix.vec3.dot(columnCosinesVec, minorAxisVec);
    const absoluteOfMajorDotProduct = Math.abs(projectedMajorAxisOnColVec);
    const absoluteOfMinorDotProduct = Math.abs(projectedMinorAxisOnColVec);
    let ellipsePoints = [];
    if (Math.abs(absoluteOfMajorDotProduct - 1) < EPSILON) {
      ellipsePoints = [
        pointsWorld[0],
        pointsWorld[1],
        pointsWorld[2],
        pointsWorld[3]
      ];
    } else if (Math.abs(absoluteOfMinorDotProduct - 1) < EPSILON) {
      ellipsePoints = [
        pointsWorld[2],
        pointsWorld[3],
        pointsWorld[0],
        pointsWorld[1]
      ];
    } else {
      console.warn("OBLIQUE ELLIPSE NOT YET SUPPORTED");
    }
    const state = defaultState;
    state.annotation.data = {
      handles: {
        points: [...ellipsePoints],
        activeHandleIndex: 0,
        textBox: {
          hasMoved: false
        }
      },
      cachedStats: {
        [`imageId:${referencedImageId}`]: {
          area: NUMGroup ? NUMGroup.MeasuredValueSequence.NumericValue : 0
        }
      },
      frameNumber: ReferencedFrameNumber
    };
    return state;
  }
  static getTID300RepresentationArguments(tool, worldToImageCoords) {
    const {data: data2, finding, findingSites, metadata} = tool;
    const {cachedStats = {}, handles} = data2;
    const {referencedImageId} = metadata;
    if (!referencedImageId) {
      throw new Error("EllipticalROI.getTID300RepresentationArguments: referencedImageId is not defined");
    }
    const top = worldToImageCoords(referencedImageId, handles.points[0]);
    const bottom = worldToImageCoords(referencedImageId, handles.points[1]);
    const left = worldToImageCoords(referencedImageId, handles.points[2]);
    const right = worldToImageCoords(referencedImageId, handles.points[3]);
    const topBottomLength = Math.abs(top[1] - bottom[1]);
    const leftRightLength = Math.abs(left[0] - right[0]);
    let points = [];
    if (topBottomLength > leftRightLength) {
      points.push({x: top[0], y: top[1]});
      points.push({x: bottom[0], y: bottom[1]});
      points.push({x: left[0], y: left[1]});
      points.push({x: right[0], y: right[1]});
    } else {
      points.push({x: left[0], y: left[1]});
      points.push({x: right[0], y: right[1]});
      points.push({x: top[0], y: top[1]});
      points.push({x: bottom[0], y: bottom[1]});
    }
    const {area} = cachedStats[`imageId:${referencedImageId}`] || {};
    return {
      area,
      points,
      trackingIdentifierTextValue: trackingIdentifierTextValue3,
      finding,
      findingSites: findingSites || []
    };
  }
};
EllipticalROI.toolType = ELLIPTICALROI2;
EllipticalROI.utilityToolType = ELLIPTICALROI2;
EllipticalROI.TID300Representation = Ellipse_default;
EllipticalROI.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone3DTag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone3DTag !== cornerstone3DTag_default) {
    return false;
  }
  return toolType.toLowerCase() === ELLIPTICALROI2.toLowerCase();
};
MeasurementReport_default2.registerTool(EllipticalROI);
var EllipticalROI_default = EllipticalROI;

// src/adapters/Cornerstone3D/ArrowAnnotate.js
var ARROW_ANNOTATE2 = "ArrowAnnotate";
var trackingIdentifierTextValue4 = `${cornerstone3DTag_default}:${ARROW_ANNOTATE2}`;
var {codeValues, CodingSchemeDesignator: CodingSchemeDesignator2} = CodingScheme_default;
var ArrowAnnotate2 = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {
    const {defaultState, SCOORDGroup, ReferencedFrameNumber} = MeasurementReport_default2.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, ArrowAnnotate2.toolType);
    const referencedImageId = defaultState.annotation.metadata.referencedImageId;
    const text = defaultState.annotation.metadata.label;
    const {GraphicData} = SCOORDGroup;
    const worldCoords = [];
    for (let i = 0; i < GraphicData.length; i += 2) {
      const point = imageToWorldCoords(referencedImageId, [
        GraphicData[i],
        GraphicData[i + 1]
      ]);
      worldCoords.push(point);
    }
    if (worldCoords.length === 1) {
      const imagePixelModule = metadata.get("imagePixelModule", referencedImageId);
      let xOffset = 10;
      let yOffset = 10;
      if (imagePixelModule) {
        const {columns, rows} = imagePixelModule;
        xOffset = columns / 10;
        yOffset = rows / 10;
      }
      const secondPoint = imageToWorldCoords(referencedImageId, [
        GraphicData[0] + xOffset,
        GraphicData[1] + yOffset
      ]);
      worldCoords.push(secondPoint);
    }
    const state = defaultState;
    state.annotation.data = {
      text,
      handles: {
        arrowFirst: true,
        points: [worldCoords[0], worldCoords[1]],
        activeHandleIndex: 0,
        textBox: {
          hasMoved: false
        }
      },
      frameNumber: ReferencedFrameNumber
    };
    return state;
  }
  static getTID300RepresentationArguments(tool, worldToImageCoords) {
    const {data: data2, metadata} = tool;
    let {finding, findingSites} = tool;
    const {referencedImageId} = metadata;
    if (!referencedImageId) {
      throw new Error("ArrowAnnotate.getTID300RepresentationArguments: referencedImageId is not defined");
    }
    const {points, arrowFirst} = data2.handles;
    let point;
    if (arrowFirst) {
      point = points[0];
    } else {
      point = points[1];
    }
    const pointImage = worldToImageCoords(referencedImageId, point);
    const TID300RepresentationArguments = {
      points: [
        {
          x: pointImage[0],
          y: pointImage[1]
        }
      ],
      trackingIdentifierTextValue: trackingIdentifierTextValue4,
      findingSites: findingSites || []
    };
    if (!finding || finding.CodeValue !== codeValues.CORNERSTONEFREETEXT) {
      finding = {
        CodeValue: codeValues.CORNERSTONEFREETEXT,
        CodingSchemeDesignator: CodingSchemeDesignator2,
        CodeMeaning: data2.text
      };
    }
    TID300RepresentationArguments.finding = finding;
    return TID300RepresentationArguments;
  }
};
ArrowAnnotate2.toolType = ARROW_ANNOTATE2;
ArrowAnnotate2.utilityToolType = ARROW_ANNOTATE2;
ArrowAnnotate2.TID300Representation = Point_default;
ArrowAnnotate2.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone3DTag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone3DTag !== cornerstone3DTag_default) {
    return false;
  }
  return toolType === ARROW_ANNOTATE2;
};
MeasurementReport_default2.registerTool(ArrowAnnotate2);
var ArrowAnnotate_default2 = ArrowAnnotate2;

// src/adapters/Cornerstone3D/Probe.js
var PROBE = "Probe";
var trackingIdentifierTextValue5 = `${cornerstone3DTag_default}:${PROBE}`;
var Probe = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {
    const {defaultState, SCOORDGroup, ReferencedFrameNumber} = MeasurementReport_default2.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, Probe.toolType);
    const referencedImageId = defaultState.annotation.metadata.referencedImageId;
    const {GraphicData} = SCOORDGroup;
    const worldCoords = [];
    for (let i = 0; i < GraphicData.length; i += 2) {
      const point = imageToWorldCoords(referencedImageId, [
        GraphicData[i],
        GraphicData[i + 1]
      ]);
      worldCoords.push(point);
    }
    const state = defaultState;
    state.annotation.data = {
      handles: {
        points: worldCoords,
        activeHandleIndex: null,
        textBox: {
          hasMoved: false
        }
      },
      frameNumber: ReferencedFrameNumber
    };
    return state;
  }
  static getTID300RepresentationArguments(tool, worldToImageCoords) {
    const {data: data2, metadata} = tool;
    let {finding, findingSites} = tool;
    const {referencedImageId} = metadata;
    if (!referencedImageId) {
      throw new Error("Probe.getTID300RepresentationArguments: referencedImageId is not defined");
    }
    const {points} = data2.handles;
    const pointsImage = points.map((point) => {
      const pointImage = worldToImageCoords(referencedImageId, point);
      return {
        x: pointImage[0],
        y: pointImage[1]
      };
    });
    const TID300RepresentationArguments = {
      points: pointsImage,
      trackingIdentifierTextValue: trackingIdentifierTextValue5,
      findingSites: findingSites || [],
      finding
    };
    return TID300RepresentationArguments;
  }
};
Probe.toolType = PROBE;
Probe.utilityToolType = PROBE;
Probe.TID300Representation = Point_default;
Probe.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone3DTag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone3DTag !== cornerstone3DTag_default) {
    return false;
  }
  return toolType === PROBE;
};
MeasurementReport_default2.registerTool(Probe);
var Probe_default = Probe;

// src/adapters/Cornerstone3D/PlanarFreehandROI.js
var import_gl_matrix2 = __toModule(require_cjs());
var PLANARFREEHANDROI = "PlanarFreehandROI";
var trackingIdentifierTextValue6 = `${cornerstone3DTag_default}:${PLANARFREEHANDROI}`;
var closedContourThreshold = 1e-5;
var PlanarFreehandROI = class {
  constructor() {
  }
  static getMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, imageToWorldCoords, metadata) {
    const {defaultState, SCOORDGroup, ReferencedFrameNumber} = MeasurementReport_default2.getSetupMeasurementData(MeasurementGroup, sopInstanceUIDToImageIdMap, metadata, PlanarFreehandROI.toolType);
    const referencedImageId = defaultState.annotation.metadata.referencedImageId;
    const {GraphicData} = SCOORDGroup;
    const worldCoords = [];
    for (let i = 0; i < GraphicData.length; i += 2) {
      const point = imageToWorldCoords(referencedImageId, [
        GraphicData[i],
        GraphicData[i + 1]
      ]);
      worldCoords.push(point);
    }
    const distanceBetweenFirstAndLastPoint = import_gl_matrix2.vec3.distance(worldCoords[worldCoords.length - 1], worldCoords[0]);
    let isOpenContour = true;
    if (distanceBetweenFirstAndLastPoint < closedContourThreshold) {
      worldCoords.pop();
      isOpenContour = false;
    }
    let points = [];
    if (isOpenContour) {
      points.push(worldCoords[0], worldCoords[worldCoords.length - 1]);
    }
    const state = defaultState;
    state.annotation.data = {
      polyline: worldCoords,
      isOpenContour,
      handles: {
        points,
        activeHandleIndex: null,
        textBox: {
          hasMoved: false
        }
      },
      frameNumber: ReferencedFrameNumber
    };
    return state;
  }
  static getTID300RepresentationArguments(tool, worldToImageCoords) {
    const {data: data2, finding, findingSites, metadata} = tool;
    const {isOpenContour, polyline} = data2;
    const {referencedImageId} = metadata;
    if (!referencedImageId) {
      throw new Error("PlanarFreehandROI.getTID300RepresentationArguments: referencedImageId is not defined");
    }
    const points = polyline.map((worldPos) => worldToImageCoords(referencedImageId, worldPos));
    if (!isOpenContour) {
      const firstPoint = points[0];
      points.push([firstPoint[0], firstPoint[1]]);
    }
    const area = 0;
    const perimeter = 0;
    return {
      points,
      area,
      perimeter,
      trackingIdentifierTextValue: trackingIdentifierTextValue6,
      finding,
      findingSites: findingSites || []
    };
  }
};
PlanarFreehandROI.toolType = PLANARFREEHANDROI;
PlanarFreehandROI.utilityToolType = PLANARFREEHANDROI;
PlanarFreehandROI.TID300Representation = Polyline_default;
PlanarFreehandROI.isValidCornerstoneTrackingIdentifier = (TrackingIdentifier2) => {
  if (!TrackingIdentifier2.includes(":")) {
    return false;
  }
  const [cornerstone3DTag, toolType] = TrackingIdentifier2.split(":");
  if (cornerstone3DTag !== cornerstone3DTag_default) {
    return false;
  }
  return toolType === PLANARFREEHANDROI;
};
MeasurementReport_default2.registerTool(PlanarFreehandROI);
var PlanarFreehandROI_default = PlanarFreehandROI;

// src/adapters/Cornerstone3D/index.js
var Cornerstone3D = {
  Length: Length_default3,
  Bidirectional: Bidirectional_default3,
  EllipticalROI: EllipticalROI_default,
  ArrowAnnotate: ArrowAnnotate_default2,
  Probe: Probe_default,
  PlanarFreehandROI: PlanarFreehandROI_default,
  MeasurementReport: MeasurementReport_default2,
  CodeScheme: CodingScheme_default,
  CORNERSTONE_3D_TAG: cornerstone3DTag_default
};
var Cornerstone3D_default = Cornerstone3D;

// src/adapters/VTKjs/Segmentation.js
function dicomlab2RGBA(cielab) {
  const rgba = colors_default.dicomlab2RGB(cielab).map((x) => Math.round(x * 255));
  rgba.push(255);
  return rgba;
}
function cross(x, y, out) {
  const Zx = x[1] * y[2] - x[2] * y[1];
  const Zy = x[2] * y[0] - x[0] * y[2];
  const Zz = x[0] * y[1] - x[1] * y[0];
  out[0] = Zx;
  out[1] = Zy;
  out[2] = Zz;
}
function norm(x, n = 3) {
  switch (n) {
    case 1:
      return Math.abs(x);
    case 2:
      return Math.sqrt(x[0] * x[0] + x[1] * x[1]);
    case 3:
      return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);
    default: {
      let sum = 0;
      for (let i = 0; i < n; i++) {
        sum += x[i] * x[i];
      }
      return Math.sqrt(sum);
    }
  }
}
function normalize(x) {
  const den = norm(x);
  if (den !== 0) {
    x[0] /= den;
    x[1] /= den;
    x[2] /= den;
  }
  return den;
}
function subtract(a, b, out) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
}
function geometryFromFunctionalGroups(dataset, PerFrameFunctionalGroups) {
  const geometry = {};
  const pixelMeasures = dataset.SharedFunctionalGroupsSequence.PixelMeasuresSequence;
  const planeOrientation = dataset.SharedFunctionalGroupsSequence.PlaneOrientationSequence;
  const firstFunctionalGroup = PerFrameFunctionalGroups[0];
  const lastFunctionalGroup = PerFrameFunctionalGroups[PerFrameFunctionalGroups.length - 1];
  const firstPosition = firstFunctionalGroup.PlanePositionSequence.ImagePositionPatient.map(Number);
  const lastPosition = lastFunctionalGroup.PlanePositionSequence.ImagePositionPatient.map(Number);
  geometry.origin = firstPosition;
  geometry.spacing = [
    pixelMeasures.PixelSpacing[1],
    pixelMeasures.PixelSpacing[0],
    pixelMeasures.SpacingBetweenSlices
  ].map(Number);
  geometry.dimensions = [
    dataset.Columns,
    dataset.Rows,
    PerFrameFunctionalGroups.length
  ].map(Number);
  const orientation = planeOrientation.ImageOrientationPatient.map(Number);
  const columnStepToPatient = orientation.slice(0, 3);
  const rowStepToPatient = orientation.slice(3, 6);
  geometry.planeNormal = [];
  cross(columnStepToPatient, rowStepToPatient, geometry.planeNormal);
  geometry.sliceStep = [];
  subtract(lastPosition, firstPosition, geometry.sliceStep);
  normalize(geometry.sliceStep);
  geometry.direction = columnStepToPatient.concat(rowStepToPatient).concat(geometry.sliceStep);
  return geometry;
}
var Segmentation5 = class {
  constructor() {
  }
  static generateSegments(dataset) {
    if (dataset.SegmentSequence.constructor.name !== "Array") {
      dataset.SegmentSequence = [dataset.SegmentSequence];
    }
    dataset.SegmentSequence.forEach((segment) => {
      const color = dicomlab2RGBA(segment.RecommendedDisplayCIELabValue);
      segments[segment.SegmentNumber] = {
        color,
        functionalGroups: [],
        offset: null,
        size: null,
        pixelData: null
      };
    });
    dataset.PerFrameFunctionalGroupsSequence.forEach((functionalGroup) => {
      const segmentNumber = functionalGroup.SegmentIdentificationSequence.ReferencedSegmentNumber;
      segments[segmentNumber].functionalGroups.push(functionalGroup);
    });
    const frameSize = Math.ceil(dataset.Rows * dataset.Columns / 8);
    let nextOffset = 0;
    Object.keys(segments).forEach((segmentNumber) => {
      const segment = segments[segmentNumber];
      segment.numberOfFrames = segment.functionalGroups.length;
      segment.size = segment.numberOfFrames * frameSize;
      segment.offset = nextOffset;
      nextOffset = segment.offset + segment.size;
      const packedSegment = dataset.PixelData.slice(segment.offset, nextOffset);
      segment.pixelData = bitArray_default.unpack(packedSegment);
      const geometry = geometryFromFunctionalGroups(dataset, segment.functionalGroups);
      segment.geometry = geometry;
    });
    return segments;
  }
};
var Segmentation_default3 = Segmentation5;

// src/adapters/VTKjs/index.js
var VTKjs = {
  Segmentation: Segmentation_default3
};
var VTKjs_default = VTKjs;

// src/adapters/DICOMMicroscopyViewer/MeasurementReport.js
function getTID300ContentItem3(tool, toolClass) {
  const args = toolClass.getTID300RepresentationArguments(tool);
  args.use3DSpatialCoordinates = true;
  return new toolClass.TID300Representation(args);
}
function getMeasurementGroup3(graphicType, measurements) {
  const toolClass = MeasurementReport3.MICROSCOPY_TOOL_CLASSES_BY_TOOL_TYPE[graphicType];
  const Measurements = measurements.map((tool) => {
    return getTID300ContentItem3(tool, toolClass);
  });
  return new TID1501MeasurementGroup_default(Measurements);
}
var MeasurementReport3 = class {
  constructor() {
  }
  static generateReport(rois, metadataProvider, options) {
    const measurementsByGraphicType = {};
    rois.forEach((roi) => {
      const graphicType = roi.scoord3d.graphicType;
      if (graphicType !== "POINT") {
        roi.scoord3d.graphicData.map((coord) => coord.push(0));
      }
      if (!measurementsByGraphicType[graphicType]) {
        measurementsByGraphicType[graphicType] = [];
      }
      measurementsByGraphicType[graphicType].push(roi.scoord3d);
    });
    let allMeasurementGroups = [];
    const measurementGroups = [];
    Object.keys(measurementsByGraphicType).forEach((graphicType) => {
      const measurements = measurementsByGraphicType[graphicType];
      const group = getMeasurementGroup3(graphicType, measurements);
      if (group) {
        measurementGroups.push(group);
      }
      allMeasurementGroups = allMeasurementGroups.concat(measurementGroups);
    });
    const MeasurementReport5 = new TID1500MeasurementReport_default({TID1501MeasurementGroups: allMeasurementGroups}, options);
    const fileMetaInformationVersionArray = new Uint8Array(2);
    fileMetaInformationVersionArray[1] = 1;
    const studyInstanceUID = "12.4";
    const seriesInstanceUID = "12.4";
    const derivationSourceDataset = {
      StudyInstanceUID: studyInstanceUID,
      SeriesInstanceUID: seriesInstanceUID
    };
    const _meta = {
      FileMetaInformationVersion: {
        Value: [fileMetaInformationVersionArray.buffer],
        vr: "OB"
      },
      TransferSyntaxUID: {
        Value: ["1.2.840.10008.1.2.1"],
        vr: "UI"
      },
      ImplementationClassUID: {
        Value: [DicomMetaDictionary.uid()],
        vr: "UI"
      },
      ImplementationVersionName: {
        Value: ["dcmjs"],
        vr: "SH"
      }
    };
    const _vrMap = {
      PixelData: "OW"
    };
    derivationSourceDataset._meta = _meta;
    derivationSourceDataset._vrMap = _vrMap;
    const report = new StructuredReport_default([derivationSourceDataset]);
    const contentItem = MeasurementReport5.contentItem(derivationSourceDataset);
    report.dataset = Object.assign(report.dataset, contentItem);
    report.dataset._meta = _meta;
    return report;
  }
  static generateToolState(dataset) {
    if (dataset.ContentTemplateSequence.TemplateIdentifier !== "1500") {
      throw new Error("This package can currently only interpret DICOM SR TID 1500");
    }
    const REPORT = "Imaging Measurements";
    const GROUP = "Measurement Group";
    const imagingMeasurementContent = toArray(dataset.ContentSequence).find(codeMeaningEquals(REPORT));
    const measurementGroups = toArray(imagingMeasurementContent.ContentSequence).filter(codeMeaningEquals(GROUP));
    const measurementData = {};
    measurementGroups.forEach((mg) => {
      Object.keys(MeasurementReport3.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE).forEach((measurementType) => {
        const measurementGroupContentSequence = toArray(mg.ContentSequence);
        let measurementContent = measurementGroupContentSequence.filter(graphicTypeEquals(measurementType.toUpperCase()));
        if (!measurementContent || measurementContent.length === 0) {
          return;
        }
        const toolClass = MeasurementReport3.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE[measurementType];
        const toolType = toolClass.toolType;
        if (!toolClass.getMeasurementData) {
          throw new Error("MICROSCOPY Tool Adapters must define a getMeasurementData static method.");
        }
        if (!measurementData[toolType]) {
          measurementData[toolType] = [];
        }
        measurementData[toolType] = [
          ...measurementData[toolType],
          ...toolClass.getMeasurementData(measurementContent)
        ];
      });
    });
    return measurementData;
  }
  static registerTool(toolClass) {
    MeasurementReport3.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE[toolClass.utilityToolType] = toolClass;
    MeasurementReport3.MICROSCOPY_TOOL_CLASSES_BY_TOOL_TYPE[toolClass.graphicType] = toolClass;
    MeasurementReport3.MEASUREMENT_BY_TOOLTYPE[toolClass.graphicType] = toolClass.utilityToolType;
  }
};
var MeasurementReport_default3 = MeasurementReport3;
MeasurementReport3.MEASUREMENT_BY_TOOLTYPE = {};
MeasurementReport3.MICROSCOPY_TOOL_CLASSES_BY_UTILITY_TYPE = {};
MeasurementReport3.MICROSCOPY_TOOL_CLASSES_BY_TOOL_TYPE = {};

// src/adapters/DICOMMicroscopyViewer/Polyline.js
var Polyline2 = class {
  constructor() {
  }
  static getMeasurementData(measurementContent) {
    const measurement = measurementContent.map((item) => item.GraphicData).filter(((s) => (a) => ((j) => !s.has(j) && s.add(j))(JSON.stringify(a)))(new Set()));
    return measurement.map((measurement2) => {
      return measurement2.reduce((all, one, i) => {
        const ch = Math.floor(i / 3);
        all[ch] = [].concat(all[ch] || [], one);
        return all;
      }, []);
    });
  }
  static getTID300RepresentationArguments(scoord3d) {
    if (scoord3d.graphicType !== "POLYLINE") {
      throw new Error("We expected a POLYLINE graphicType");
    }
    const points = scoord3d.graphicData;
    const lengths = 1;
    return {points, lengths};
  }
};
Polyline2.graphicType = "POLYLINE";
Polyline2.toolType = "Polyline";
Polyline2.utilityToolType = "Polyline";
Polyline2.TID300Representation = Polyline_default;
MeasurementReport_default3.registerTool(Polyline2);
var Polyline_default2 = Polyline2;

// src/utilities/TID300/Polygon.js
function expandPoints4(points) {
  const allPoints = [];
  points.forEach((point) => {
    allPoints.push(point[0]);
    allPoints.push(point[1]);
    if (point[2] !== void 0) {
      allPoints.push(point[2]);
    }
  });
  return allPoints;
}
var Polygon = class extends TID300Measurement_default {
  contentItem() {
    const {
      points,
      perimeter,
      unit = "mm",
      area,
      areaUnit,
      ReferencedSOPSequence,
      use3DSpatialCoordinates = false
    } = this.props;
    const GraphicData = expandPoints4(points);
    return this.getMeasurement([
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A197",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Perimeter"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: unit2CodingValue_default(unit),
          NumericValue: perimeter
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "POLYGON",
          GraphicData,
          ContentSequence: use3DSpatialCoordinates ? void 0 : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      },
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "G-A166",
          CodingSchemeDesignator: "SRT",
          CodeMeaning: "Area"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: unit2CodingValue_default(areaUnit),
          NumericValue: area
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: use3DSpatialCoordinates ? "SCOORD3D" : "SCOORD",
          GraphicType: "POLYGON",
          GraphicData,
          ContentSequence: use3DSpatialCoordinates ? void 0 : {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      }
    ]);
  }
};
var Polygon_default = Polygon;

// src/adapters/DICOMMicroscopyViewer/Polygon.js
var Polygon2 = class {
  constructor() {
  }
  static getMeasurementData(measurementContent) {
    const measurement = measurementContent.map((item) => item.GraphicData).filter(((s) => (a) => ((j) => !s.has(j) && s.add(j))(JSON.stringify(a)))(new Set()));
    return measurement.map((measurement2) => {
      return measurement2.reduce((all, one, i) => {
        const ch = Math.floor(i / 3);
        all[ch] = [].concat(all[ch] || [], one);
        return all;
      }, []);
    });
  }
  static getTID300RepresentationArguments(scoord3d) {
    if (scoord3d.graphicType !== "POLYGON") {
      throw new Error("We expected a POLYGON graphicType");
    }
    const points = scoord3d.graphicData;
    const lengths = 1;
    return {points, lengths};
  }
};
Polygon2.graphicType = "POLYGON";
Polygon2.toolType = "Polygon";
Polygon2.utilityToolType = "Polygon";
Polygon2.TID300Representation = Polygon_default;
MeasurementReport_default3.registerTool(Polygon2);
var Polygon_default2 = Polygon2;

// src/adapters/DICOMMicroscopyViewer/Point.js
var Point2 = class {
  constructor() {
  }
  static getMeasurementData(measurementContent) {
    const measurement = measurementContent.map((item) => item.GraphicData);
    return measurement.filter(((s) => (a) => ((j) => !s.has(j) && s.add(j))(JSON.stringify(a)))(new Set()));
  }
  static getTID300RepresentationArguments(scoord3d) {
    if (scoord3d.graphicType !== "POINT") {
      throw new Error("We expected a POINT graphicType");
    }
    const points = [scoord3d.graphicData];
    const lengths = 1;
    return {points, lengths};
  }
};
Point2.graphicType = "POINT";
Point2.toolType = "Point";
Point2.utilityToolType = "Point";
Point2.TID300Representation = Point_default;
MeasurementReport_default3.registerTool(Point2);
var Point_default2 = Point2;

// src/adapters/DICOMMicroscopyViewer/Circle.js
var Circle2 = class {
  constructor() {
  }
  static getMeasurementData(measurementContent) {
    const measurement = measurementContent.map((item) => item.GraphicData).filter(((s) => (a) => ((j) => !s.has(j) && s.add(j))(JSON.stringify(a)))(new Set()));
    return measurement.map((measurement2) => {
      return measurement2.reduce((all, one, i) => {
        const ch = Math.floor(i / 3);
        all[ch] = [].concat(all[ch] || [], one);
        return all;
      }, []);
    });
  }
  static getTID300RepresentationArguments(scoord3d) {
    if (scoord3d.graphicType !== "CIRCLE") {
      throw new Error("We expected a CIRCLE graphicType");
    }
    const points = scoord3d.graphicData;
    const lengths = 1;
    return {points, lengths};
  }
};
Circle2.graphicType = "CIRCLE";
Circle2.toolType = "Circle";
Circle2.utilityToolType = "Circle";
Circle2.TID300Representation = Circle_default;
MeasurementReport_default3.registerTool(Circle2);
var Circle_default2 = Circle2;

// src/adapters/DICOMMicroscopyViewer/Ellipse.js
var Ellipse2 = class {
  constructor() {
  }
  static getMeasurementData(measurementContent) {
    const measurement = measurementContent.map((item) => item.GraphicData).filter(((s) => (a) => ((j) => !s.has(j) && s.add(j))(JSON.stringify(a)))(new Set()));
    return measurement.map((measurement2) => {
      return measurement2.reduce((all, one, i) => {
        const ch = Math.floor(i / 3);
        all[ch] = [].concat(all[ch] || [], one);
        return all;
      }, []);
    });
  }
  static getTID300RepresentationArguments(scoord3d) {
    if (scoord3d.graphicType !== "Ellipse") {
      throw new Error("We expected a Ellipse graphicType");
    }
    const points = scoord3d.graphicData;
    const lengths = 1;
    return {points, lengths};
  }
};
Ellipse2.graphicType = "ELLIPSE";
Ellipse2.toolType = "Ellipse";
Ellipse2.utilityToolType = "Ellipse";
Ellipse2.TID300Representation = Ellipse_default;
MeasurementReport_default3.registerTool(Ellipse2);
var Ellipse_default2 = Ellipse2;

// src/adapters/DICOMMicroscopyViewer/index.js
var DICOMMicroscopyViewer = {
  Polyline: Polyline_default2,
  Polygon: Polygon_default2,
  Point: Point_default2,
  Circle: Circle_default2,
  Ellipse: Ellipse_default2,
  MeasurementReport: MeasurementReport_default3
};
var DICOMMicroscopyViewer_default = DICOMMicroscopyViewer;

// src/adapters/index.js
var adapters = {
  Cornerstone: Cornerstone_default,
  Cornerstone3D: Cornerstone3D_default,
  VTKjs: VTKjs_default,
  DICOMMicroscopyViewer: DICOMMicroscopyViewer_default
};
var adapters_default = adapters;

// src/utilities/TID1500/index.js
var TID1500 = {
  TID1500MeasurementReport: TID1500MeasurementReport_default,
  TID1501MeasurementGroup: TID1501MeasurementGroup_default
};
var TID1500_default = TID1500;

// src/utilities/TID300/Calibration.js
var Calibration = class extends TID300Measurement_default {
  contentItem() {
    const {
      point1,
      point2,
      unit = "mm",
      distance,
      ReferencedSOPSequence
    } = this.props;
    return this.getMeasurement([
      {
        RelationshipType: "CONTAINS",
        ValueType: "NUM",
        ConceptNameCodeSequence: {
          CodeValue: "102304005",
          CodingSchemeDesignator: "SCT",
          CodeMeaning: "Calibration Ruler"
        },
        MeasuredValueSequence: {
          MeasurementUnitsCodeSequence: unit2CodingValue_default(unit),
          NumericValue: distance
        },
        ContentSequence: {
          RelationshipType: "INFERRED FROM",
          ValueType: "SCOORD",
          GraphicType: "POLYLINE",
          GraphicData: [point1.x, point1.y, point2.x, point2.y],
          ContentSequence: {
            RelationshipType: "SELECTED FROM",
            ValueType: "IMAGE",
            ReferencedSOPSequence
          }
        }
      }
    ]);
  }
};
var Calibration_default = Calibration;

// src/utilities/TID300/index.js
var TID300 = {
  TID300Measurement: TID300Measurement_default,
  Point: Point_default,
  Length: Length_default,
  CobbAngle: CobbAngle_default,
  Bidirectional: Bidirectional_default,
  Polyline: Polyline_default,
  Polygon: Polygon_default,
  Ellipse: Ellipse_default,
  Circle: Circle_default,
  Calibration: Calibration_default,
  unit2CodingValue: unit2CodingValue_default
};
var TID300_default = TID300;

// src/utilities/Message.js
function uint8ArrayToString(arr, offset, limit) {
  offset = offset || 0;
  limit = limit || arr.length - offset;
  let str = "";
  for (let i = offset; i < offset + limit; i++) {
    str += String.fromCharCode(arr[i]);
  }
  return str;
}
function stringToUint8Array(str) {
  const arr = new Uint8Array(str.length);
  for (let i = 0, j = str.length; i < j; i++) {
    arr[i] = str.charCodeAt(i);
  }
  return arr;
}
function identifyBoundary(header) {
  const parts = header.split("\r\n");
  for (let i = 0; i < parts.length; i++) {
    if (parts[i].substr(0, 2) === "--") {
      return parts[i];
    }
  }
}
function containsToken(message2, token, offset = 0) {
  if (offset + token.length > message2.length) {
    return false;
  }
  let index = offset;
  for (let i = 0; i < token.length; i++) {
    if (token[i] !== message2[index++]) {
      return false;
    }
  }
  return true;
}
function findToken(message2, token, offset = 0, maxSearchLength) {
  let searchLength = message2.length;
  if (maxSearchLength) {
    searchLength = Math.min(offset + maxSearchLength, message2.length);
  }
  for (let i = offset; i < searchLength; i++) {
    if (message2[i] === token[0]) {
      if (containsToken(message2, token, i)) {
        return i;
      }
    }
  }
  return -1;
}
function multipartEncode(datasets, boundary = guid(), contentType = "application/dicom") {
  const contentTypeString = `Content-Type: ${contentType}`;
  const header = `\r
--${boundary}\r
${contentTypeString}\r
\r
`;
  const footer = `\r
--${boundary}--`;
  const headerArray = stringToUint8Array(header);
  const footerArray = stringToUint8Array(footer);
  const headerLength = headerArray.length;
  const footerLength = footerArray.length;
  let length = 0;
  const contentArrays = datasets.map((datasetBuffer) => {
    const contentArray = new Uint8Array(datasetBuffer);
    const contentLength = contentArray.length;
    length += headerLength + contentLength + footerLength;
    return contentArray;
  });
  const multipartArray = new Uint8Array(length);
  multipartArray.set(headerArray, 0);
  let position = 0;
  contentArrays.forEach((contentArray) => {
    const contentLength = contentArray.length;
    multipartArray.set(headerArray, position);
    multipartArray.set(contentArray, position + headerLength);
    position += headerLength + contentArray.length;
  });
  multipartArray.set(footerArray, position);
  return {
    data: multipartArray.buffer,
    boundary
  };
}
function multipartDecode(response) {
  const message2 = new Uint8Array(response);
  const maxSearchLength = 1e3;
  let separator = stringToUint8Array("\r\n\r\n");
  let headerIndex = findToken(message2, separator, 0, maxSearchLength);
  if (headerIndex === -1) {
    throw new Error("Response message has no multipart mime header");
  }
  const header = uint8ArrayToString(message2, 0, headerIndex);
  const boundaryString = identifyBoundary(header);
  if (!boundaryString) {
    throw new Error("Header of response message does not specify boundary");
  }
  const boundary = stringToUint8Array(boundaryString);
  const boundaryLength = boundary.length;
  const components = [];
  let offset = headerIndex + separator.length;
  let boundaryIndex;
  while (boundaryIndex !== -1) {
    boundaryIndex = findToken(message2, boundary, offset);
    if (boundaryIndex === -1) {
      break;
    }
    const spacingLength = 2;
    const length = boundaryIndex - offset - spacingLength;
    const data2 = response.slice(offset, offset + length);
    components.push(data2);
    var boundaryEnd = findToken(message2, separator, boundaryIndex + 1, maxSearchLength);
    if (boundaryEnd === -1)
      break;
    offset = boundaryEnd + separator.length;
  }
  return components;
}
function guid() {
  function s4() {
    return Math.floor((1 + Math.random()) * 65536).toString(16).substring(1);
  }
  return s4() + s4() + "-" + s4() + "-" + s4() + "-" + s4() + "-" + s4() + s4() + s4();
}
var message = {
  containsToken,
  findToken,
  identifyBoundary,
  uint8ArrayToString,
  stringToUint8Array,
  multipartEncode,
  multipartDecode,
  guid
};
var Message_default = message;

// src/utilities/index.js
var utilities = {
  TID1500: TID1500_default,
  TID300: TID300_default,
  message: Message_default,
  addAccessors: addAccessors_default,
  orientation: orientation_exports,
  compression: rleSingleSamplePerPixel_exports,
  dicomJson: dicomJson_default
};
var utilities_default = utilities;

// src/sr/coding.js
var coding_exports = {};
__export(coding_exports, {
  Code: () => Code,
  CodedConcept: () => CodedConcept
});
var Code = class {
  constructor(options) {
    this[_value] = options.value;
    this[_meaning] = options.meaning;
    this[_schemeDesignator] = options.schemeDesignator;
    this[_schemeVersion] = options.schemeVersion || null;
  }
  get value() {
    return this[_value];
  }
  get meaning() {
    return this[_meaning];
  }
  get schemeDesignator() {
    return this[_schemeDesignator];
  }
  get schemeVersion() {
    return this[_schemeVersion];
  }
};
var CodedConcept = class {
  constructor(options) {
    if (options.value === void 0) {
      throw new Error("Option 'value' is required for CodedConcept.");
    }
    if (options.meaning === void 0) {
      throw new Error("Option 'meaning' is required for CodedConcept.");
    }
    if (options.schemeDesignator === void 0) {
      throw new Error("Option 'schemeDesignator' is required for CodedConcept.");
    }
    this.CodeValue = options.value;
    this.CodeMeaning = options.meaning;
    this.CodingSchemeDesignator = options.schemeDesignator;
    if ("schemeVersion" in options) {
      this.CodingSchemeVersion = options.schemeVersion;
    }
  }
  equals(other) {
    if (other.value === this.value && other.schemeDesignator === this.schemeDesignator) {
      if (other.schemeVersion && this.schemeVersion) {
        return other.schemeVersion === this.schemeVersion;
      }
      return true;
    }
    return false;
  }
  get value() {
    return this.CodeValue;
  }
  get meaning() {
    return this.CodeMeaning;
  }
  get schemeDesignator() {
    return this.CodingSchemeDesignator;
  }
  get schemeVersion() {
    return this.CodingSchemeVersion;
  }
};

// src/sr/contentItems.js
var contentItems_exports = {};
__export(contentItems_exports, {
  FindingSite: () => FindingSite,
  ImageRegion: () => ImageRegion,
  ImageRegion3D: () => ImageRegion3D,
  LongitudinalTemporalOffsetFromEvent: () => LongitudinalTemporalOffsetFromEvent,
  ReferencedRealWorldValueMap: () => ReferencedRealWorldValueMap,
  ReferencedSegmentation: () => ReferencedSegmentation,
  ReferencedSegmentationFrame: () => ReferencedSegmentationFrame,
  SourceImageForRegion: () => SourceImageForRegion,
  SourceImageForSegmentation: () => SourceImageForSegmentation,
  SourceSeriesForSegmentation: () => SourceSeriesForSegmentation,
  VolumeSurface: () => VolumeSurface
});

// src/sr/valueTypes.js
var valueTypes_exports = {};
__export(valueTypes_exports, {
  CodeContentItem: () => CodeContentItem,
  CompositeContentItem: () => CompositeContentItem,
  ContainerContentItem: () => ContainerContentItem,
  ContentSequence: () => ContentSequence2,
  DateContentItem: () => DateContentItem,
  DateTimeContentItem: () => DateTimeContentItem,
  GraphicTypes: () => GraphicTypes,
  GraphicTypes3D: () => GraphicTypes3D,
  ImageContentItem: () => ImageContentItem,
  NumContentItem: () => NumContentItem,
  PNameContentItem: () => PNameContentItem,
  PixelOriginInterpretations: () => PixelOriginInterpretations,
  RelationshipTypes: () => RelationshipTypes,
  Scoord3DContentItem: () => Scoord3DContentItem,
  ScoordContentItem: () => ScoordContentItem,
  TcoordContentItem: () => TcoordContentItem,
  TemporalRangeTypes: () => TemporalRangeTypes,
  TextContentItem: () => TextContentItem,
  TimeContentItem: () => TimeContentItem,
  UIDRefContentItem: () => UIDRefContentItem,
  ValueTypes: () => ValueTypes
});
var ValueTypes = {
  CODE: "CODE",
  COMPOSITE: "COMPOSITE",
  CONTAINER: "CONTAINER",
  DATE: "DATE",
  DATETIME: "DATETIME",
  IMAGE: "IMAGE",
  NUM: "NUM",
  PNAME: "PNAME",
  SCOORD: "SCOORD",
  SCOORD3D: "SCOORD3D",
  TCOORD: "TCOORD",
  TEXT: "TEXT",
  TIME: "TIME",
  UIDREF: "UIDREF",
  WAVEFORM: "WAVEFORM"
};
Object.freeze(ValueTypes);
var GraphicTypes = {
  CIRCLE: "CIRCLE",
  ELLIPSE: "ELLIPSE",
  ELLIPSOID: "ELLIPSOID",
  MULTIPOINT: "MULTIPOINT",
  POINT: "POINT",
  POLYLINE: "POLYLINE"
};
Object.freeze(GraphicTypes);
var GraphicTypes3D = {
  ELLIPSE: "ELLIPSE",
  ELLIPSOID: "ELLIPSOID",
  MULTIPOINT: "MULTIPOINT",
  POINT: "POINT",
  POLYLINE: "POLYLINE",
  POLYGON: "POLYGON"
};
Object.freeze(GraphicTypes3D);
var TemporalRangeTypes = {
  BEGIN: "BEGIN",
  END: "END",
  MULTIPOINT: "MULTIPOINT",
  MULTISEGMENT: "MULTISEGMENT",
  POINT: "POINT",
  SEGMENT: "SEGMENT"
};
Object.freeze(TemporalRangeTypes);
var RelationshipTypes = {
  CONTAINS: "CONTAINS",
  HAS_ACQ_CONTENT: "HAS ACQ CONTENT",
  HAS_CONCEPT_MOD: "HAS CONCEPT MOD",
  HAS_OBS_CONTEXT: "HAS OBS CONTEXT",
  HAS_PROPERTIES: "HAS PROPERTIES",
  INFERRED_FROM: "INFERRED FROM",
  SELECTED_FROM: "SELECTED FROM"
};
Object.freeze(RelationshipTypes);
var PixelOriginInterpretations = {
  FRAME: "FRAME",
  VOLUME: "VOLUME"
};
Object.freeze(RelationshipTypes);
function isFloat(n) {
  return n === +n && n !== (n | 0);
}
function zeroPad(value) {
  return (value > 9 ? "" : "0") + value;
}
function TM(date) {
  const hours = date.getHours();
  const minutes = date.getMinutes();
  const seconds = date.getSeconds();
  const milliseconds = date.getMilliseconds();
  return zeroPad(hours) + zeroPad(minutes) + zeroPad(seconds) + milliseconds;
}
function DA(date) {
  const year = date.getFullYear();
  const month = date.getMonth() + 1;
  const day = date.getDate();
  return year + zeroPad(month) + zeroPad(day);
}
function DT(date) {
  return DA(date) + TM(date);
}
var ContentSequence2 = class extends Array {
  constructor(...args) {
    super(...args);
  }
};
var ContentItem = class {
  constructor(options) {
    if (options.name === void 0) {
      throw new Error("Option 'name' is required for ContentItem.");
    }
    if (options.name.constructor !== CodedConcept) {
      throw new Error("Option 'name' must have type CodedConcept.");
    }
    this.ConceptNameCodeSequence = [options.name];
    if (options.valueType === void 0) {
      throw new Error("Option 'valueType' is required for ContentItem.");
    }
    if (!(Object.values(ValueTypes).indexOf(options.valueType) !== -1)) {
      throw new Error(`Invalid value type ${options.valueType}`);
    }
    this.ValueType = options.valueType;
    if (options.relationshipType !== void 0) {
      if (!(Object.values(RelationshipTypes).indexOf(options.relationshipType) !== -1)) {
        throw new Error(`Invalid relationship type ${options.relationshipTypes}`);
      }
      this.RelationshipType = options.relationshipType;
    }
  }
};
var CodeContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.CODE
    });
    if (options.value === void 0) {
      throw new Error("Option 'value' is required for CodeContentItem.");
    }
    if (!(options.value || options.value.constructor === CodedConcept)) {
      throw new Error("Option 'value' must have type CodedConcept.");
    }
    this.ConceptCodeSequence = [options.value];
  }
};
var TextContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.TEXT
    });
    if (options.value === void 0) {
      throw new Error("Option 'value' is required for TextContentItem.");
    }
    if (!(typeof options.value === "string" || options.value instanceof String)) {
      throw new Error("Option 'value' must have type String.");
    }
    this.TextValue = options.value;
  }
};
var PNameContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.PNAME
    });
    if (options.value === void 0) {
      throw new Error("Option 'value' is required for PNameContentItem.");
    }
    if (!(typeof options.value === "string" || options.value instanceof String)) {
      throw new Error("Option 'value' must have type String.");
    }
    this.PersonName = options.value;
  }
};
var TimeContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.TIME
    });
    if (options.value === void 0) {
      throw new Error("Option 'value' is required for TimeContentItem.");
    }
    if (!(typeof options.value === "object" || options.value instanceof Date)) {
      throw new Error("Option 'value' must have type Date.");
    }
    this.Time = TM(options.value);
  }
};
var DateContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.DATE
    });
    if (options.value === void 0) {
      throw new Error("Option 'value' is required for DateContentItem.");
    }
    if (!(typeof options.value === "object" || options.value instanceof Date)) {
      throw new Error("Option 'value' must have type Date.");
    }
    this.Date = DA(options.value);
  }
};
var DateTimeContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.DATETIME
    });
    if (options.value === void 0) {
      throw new Error("Option 'value' is required for DateTimeContentItem.");
    }
    if (!(typeof options.value === "object" || options.value instanceof Date)) {
      throw new Error("Option 'value' must have type Date.");
    }
    this.DateTime = DT(otions.value);
  }
};
var UIDRefContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.UIDREF
    });
    if (options.value === void 0) {
      throw new Error("Option 'value' is required for UIDRefContentItem.");
    }
    if (!(typeof options.value === "string" || options.value instanceof String)) {
      throw new Error("Option 'value' must have type String.");
    }
    this.UID = options.value;
  }
};
var NumContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.NUM
    });
    if (options.value !== void 0) {
      if (!(typeof options.value === "number" || options.value instanceof Number)) {
        throw new Error("Option 'value' must have type Number.");
      }
      if (options.unit === void 0) {
        throw new Error("Option 'unit' is required for NumContentItem with 'value'.");
      }
      if (options.unit.constructor !== CodedConcept) {
        throw new Error("Option 'unit' must have type CodedConcept.");
      }
      const item = {};
      item.NumericValue = options.value;
      if (isFloat(options.value)) {
        item.FloatingPointValue = options.value;
      }
      item.MeasurementUnitsCodeSequence = [options.unit];
      this.MeasuredValueSequence = [item];
    } else if (options.qualifier !== void 0) {
      if (!(options.qualifier || options.qualifier.constructor === CodedConcept)) {
        throw new Error("Option 'qualifier' must have type CodedConcept.");
      }
      this.NumericValueQualifierCodeSequence = [options.qualifier];
    } else {
      throw new Error("Either option 'value' or 'qualifier' is required for NumContentItem.");
    }
  }
};
var ContainerContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.CONTAINER
    });
    if (options.isContentContinuous !== void 0) {
      this.ContinuityOfContent = "CONTINUOUS";
    } else {
      this.ContinuityOfContent = "SEPARATE";
    }
    if (options.templateID !== void 0) {
      if (!(typeof options.templateID === "string" || options.templateID instanceof String)) {
        throw new Error("Option 'templateID' must have type String.");
      }
      const item = {};
      item.MappingResource = "DCMR";
      item.TemplateIdentifier = options.templateID;
      this.ContentTemplateSequence = [item];
    }
  }
};
var CompositeContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.COMPOSITE
    });
    if (options.referencedSOPClassUID === void 0) {
      throw new Error("Option 'referencedSOPClassUID' is required for CompositeContentItem.");
    }
    if (options.referencedSOPInstanceUID === void 0) {
      throw new Error("Option 'referencedSOPInstanceUID' is required for CompositeContentItem.");
    }
    if (!(typeof options.referencedSOPClassUID === "string" || options.referencedSOPClassUID instanceof String)) {
      throw new Error("Option 'referencedSOPClassUID' must have type String.");
    }
    if (!(typeof options.referencedSOPInstanceUID === "string" || options.referencedSOPInstanceUID instanceof String)) {
      throw new Error("Option 'referencedSOPInstanceUID' must have type String.");
    }
    const item = {};
    item.ReferencedSOPClassUID = options.referencedSOPClassUID;
    item.ReferencedSOPInstanceUID = options.referencedSOPInstanceUID;
    this.ReferenceSOPSequence = [item];
  }
};
var ImageContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.IMAGE
    });
    if (options.referencedSOPClassUID === void 0) {
      throw new Error("Option 'referencedSOPClassUID' is required for ImageContentItem.");
    }
    if (options.referencedSOPInstanceUID === void 0) {
      throw new Error("Option 'referencedSOPInstanceUID' is required for ImageContentItem.");
    }
    if (!(typeof options.referencedSOPClassUID === "string" || options.referencedSOPClassUID instanceof String)) {
      throw new Error("Option 'referencedSOPClassUID' must have type String.");
    }
    if (!(typeof options.referencedSOPInstanceUID === "string" || options.referencedSOPInstanceUID instanceof String)) {
      throw new Error("Option 'referencedSOPInstanceUID' must have type String.");
    }
    const item = {};
    item.ReferencedSOPClassUID = options.referencedSOPClassUID;
    item.ReferencedSOPInstanceUID = options.referencedSOPInstanceUID;
    if (options.referencedFrameNumbers !== void 0) {
      if (!(typeof options.referencedFrameNumbers === "object" || options.referencedFrameNumbers instanceof Array)) {
        throw new Error("Option 'referencedFrameNumbers' must have type Array.");
      }
      item.ReferencedFrameNumber = options.referencedFrameNumbers;
    }
    if (options.referencedFrameSegmentNumber !== void 0) {
      if (!(typeof options.referencedSegmentNumbers === "object" || options.referencedSegmentNumbers instanceof Array)) {
        throw new Error("Option 'referencedSegmentNumbers' must have type Array.");
      }
      item.ReferencedSegmentNumber = options.referencedSegmentNumbers;
    }
    this.ReferencedSOPSequence = [item];
  }
};
var ScoordContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.SCOORD
    });
    if (options.graphicType === void 0) {
      throw new Error("Option 'graphicType' is required for ScoordContentItem.");
    }
    if (!(typeof options.graphicType === "string" || options.graphicType instanceof String)) {
      throw new Error("Option 'graphicType' of ScoordContentItem must have type String.");
    }
    if (options.graphicData === void 0) {
      throw new Error("Option 'graphicData' is required for ScoordContentItem.");
    }
    if (!(typeof options.graphicData === "object" || options.graphicData instanceof Array)) {
      throw new Error("Option 'graphicData' of ScoordContentItem must have type Array.");
    }
    if (Object.values(GraphicTypes).indexOf(options.graphicType) === -1) {
      throw new Error(`Invalid graphic type '${options.graphicType}'.`);
    }
    if (options.graphicData[0] instanceof Array) {
      options.graphicData = [].concat.apply([], options.graphicData);
    }
    this.GraphicData = options.graphicData;
    options.pixelOriginInterpretation = options.pixelOriginInterpretation || PixelOriginInterpretations.VOLUME;
    if (!(typeof options.pixelOriginInterpretation === "string" || options.pixelOriginInterpretation instanceof String)) {
      throw new Error("Option 'pixelOriginInterpretation' must have type String.");
    }
    if (Object.values(PixelOriginInterpretations).indexOf(options.pixelOriginInterpretation) === -1) {
      throw new Error(`Invalid pixel origin interpretation '${options.pixelOriginInterpretation}'.`);
    }
    if (options.fiducialUID !== void 0) {
      if (!(typeof options.fiducialUID === "string" || options.fiducialUID instanceof String)) {
        throw new Error("Option 'fiducialUID' must have type String.");
      }
      this.FiducialUID = options.fiducialUID;
    }
  }
};
var Scoord3DContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.SCOORD3D
    });
    if (options.graphicType === void 0) {
      throw new Error("Option 'graphicType' is required for Scoord3DContentItem.");
    }
    if (!(typeof options.graphicType === "string" || options.graphicType instanceof String)) {
      throw new Error("Option 'graphicType' must have type String.");
    }
    if (options.graphicData === void 0) {
      throw new Error("Option 'graphicData' is required for Scoord3DContentItem.");
    }
    if (!(typeof options.graphicData === "object" || options.graphicData instanceof Array)) {
      throw new Error("Option 'graphicData' must have type Array.");
    }
    if (Object.values(GraphicTypes3D).indexOf(options.graphicType) === -1) {
      throw new Error(`Invalid graphic type '${options.graphicType}'.`);
    }
    if (options.graphicData[0] instanceof Array) {
      options.graphicData = [].concat.apply([], options.graphicData);
    }
    this.GraphicType = options.graphicType;
    this.GraphicData = options.graphicData;
    if (options.frameOfReferenceUID === void 0) {
      throw new Error("Option 'frameOfReferenceUID' is required for Scoord3DContentItem.");
    }
    if (!(typeof options.frameOfReferenceUID === "string" || options.frameOfReferenceUID instanceof String)) {
      throw new Error("Option 'frameOfReferenceUID' must have type String.");
    }
    this.ReferencedFrameOfReferenceUID = options.frameOfReferenceUID;
    if ("fiducialUID" in options) {
      if (!(typeof options.fiducialUID === "string" || options.fiducialUID instanceof String)) {
        throw new Error("Option 'fiducialUID' must have type String.");
      }
      this.FiducialUID = fiducialUID;
    }
  }
};
var TcoordContentItem = class extends ContentItem {
  constructor(options) {
    super({
      name: options.name,
      relationshipType: options.relationshipType,
      valueType: ValueTypes.TCOORD
    });
    if (options.temporalRangeType === void 0) {
      throw new Error("Option 'temporalRangeType' is required for TcoordContentItem.");
    }
    if (Object.values(TemporalRangeTypes).indexOf(options.temporalRangeType) === -1) {
      throw new Error(`Invalid temporal range type '${options.temporalRangeType}'.`);
    }
    if (options.referencedSamplePositions === void 0) {
      if (!(typeof options.referencedSamplePositions === "object" || options.referencedSamplePositions instanceof Array)) {
        throw new Error("Option 'referencedSamplePositions' must have type Array.");
      }
      this.ReferencedSamplePositions = options.referencedSamplePositions;
    } else if (options.referencedTimeOffsets === void 0) {
      if (!(typeof options.referencedTimeOffsets === "object" || options.referencedTimeOffsets instanceof Array)) {
        throw new Error("Option 'referencedTimeOffsets' must have type Array.");
      }
      this.ReferencedTimeOffsets = options.referencedTimeOffsets;
    } else if (options.referencedDateTime === void 0) {
      if (!(typeof options.referencedDateTime === "object" || options.referencedDateTime instanceof Array)) {
        throw new Error("Option 'referencedDateTime' must have type Array.");
      }
      this.ReferencedDateTime = options.referencedDateTime;
    } else {
      throw new Error("One of the following options is required for TcoordContentItem: 'referencedSamplePositions', 'referencedTimeOffsets', or 'referencedDateTime'.");
    }
  }
};

// src/sr/contentItems.js
var LongitudinalTemporalOffsetFromEvent = class extends NumContentItem {
  constructor(options) {
    super({
      name: new CodedConcept({
        value: "128740",
        meaning: "Longitudinal Temporal Offset from Event",
        schemeDesignator: "DCM"
      }),
      value: options.value,
      unit: options.unit,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });
    this.ContentSequence = new ContentSequence2();
    const item = new CodeContentItem({
      name: new CodedConcept({
        value: "128741",
        meaning: "Longitudinal Temporal Event Type",
        schemeDesignator: "DCM"
      }),
      value: options.eventType,
      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
    });
    this.ContentSequence.push(item);
  }
};
var SourceImageForRegion = class extends ImageContentItem {
  constructor(options) {
    super({
      name: new CodedConcept({
        value: "121324",
        meaning: "Source Image",
        schemeDesignator: "DCM"
      }),
      referencedSOPClassUID: options.referencedSOPClassUID,
      referencedSOPInstanceUID: options.referencedSOPInstanceUID,
      referencedFrameNumbers: options.referencedFrameNumbers,
      relationshipType: RelationshipTypes.SELECTED_FROM
    });
  }
};
var SourceImageForSegmentation = class extends ImageContentItem {
  constructor(options) {
    super({
      name: new CodedConcept({
        value: "121233",
        meaning: "Source Image for Segmentation",
        schemeDesignator: "DCM"
      }),
      referencedSOPClassUID: options.referencedSOPClassUID,
      referencedSOPInstanceUID: options.referencedSOPInstanceUID,
      referencedFrameNumbers: options.referencedFrameNumbers,
      relationshipType: RelationshipTypes.SELECTED_FROM
    });
  }
};
var SourceSeriesForSegmentation = class extends UIDRefContentItem {
  constructor(options) {
    super({
      name: new CodedConcept({
        value: "121232",
        meaning: "Source Series for Segmentation",
        schemeDesignator: "DCM"
      }),
      value: options.referencedSeriesInstanceUID,
      relationshipType: RelationshipTypes.CONTAINS
    });
  }
};
var ImageRegion = class extends ScoordContentItem {
  constructor(options) {
    super({
      name: new CodedConcept({
        value: "111030",
        meaning: "Image Region",
        schemeDesignator: "DCM"
      }),
      graphicType: options.graphicType,
      graphicData: options.graphicData,
      pixelOriginInterpretation: options.pixelOriginInterpretation,
      relationshipType: RelationshipTypes.CONTAINS
    });
    if (options.graphicType === GraphicTypes.MULTIPOINT) {
      throw new Error("Graphic type 'MULTIPOINT' is not valid for region.");
    }
    if (options.sourceImage === void 0) {
      throw Error("Option 'sourceImage' is required for ImageRegion.");
    }
    if (!(options.sourceImage || options.sourceImage.constructor === SourceImageForRegion)) {
      throw new Error("Option 'sourceImage' of ImageRegion must have type SourceImageForRegion.");
    }
    this.ContentSequence = new ContentSequence2();
    this.ContentSequence.push(options.sourceImage);
  }
};
var ImageRegion3D = class extends Scoord3DContentItem {
  constructor(options) {
    super({
      name: new CodedConcept({
        value: "111030",
        meaning: "Image Region",
        schemeDesignator: "DCM"
      }),
      graphicType: options.graphicType,
      graphicData: options.graphicData,
      frameOfReferenceUID: options.frameOfReferenceUID,
      relationshipType: RelationshipTypes.CONTAINS
    });
    if (options.graphicType === GraphicTypes3D.MULTIPOINT) {
      throw new Error("Graphic type 'MULTIPOINT' is not valid for region.");
    }
    if (options.graphicType === GraphicTypes3D.ELLIPSOID) {
      throw new Error("Graphic type 'ELLIPSOID' is not valid for region.");
    }
  }
};
var VolumeSurface = class extends Scoord3DContentItem {
  constructor(options) {
    super({
      name: new CodedConcept({
        value: "121231",
        meaning: "Volume Surface",
        schemeDesignator: "DCM"
      }),
      graphicType: options.graphicType,
      graphicData: options.graphicData,
      frameOfFeferenceUID: options.frameOfFeferenceUID,
      relationshipType: RelationshipTypes.CONTAINS
    });
    if (options.graphicType !== GraphicTypes3D.ELLIPSOID) {
      throw new Error("Graphic type for volume surface must be 'ELLIPSOID'.");
    }
    this.ContentSequence = new ContentSequence2();
    if (options.sourceImages) {
      options.sourceImages.forEach((image) => {
        if (!(image || image.constructor === SourceImageForRegion)) {
          throw new Error("Items of option 'sourceImages' of VolumeSurface must have type SourceImageForRegion.");
        }
        this.ContentSequence.push(image);
      });
    } else if (options.sourceSeries) {
      if (!(options.sourceSeries || options.sourceSeries.constructor === SourceSeriesForRegion)) {
        throw new Error("Option 'sourceSeries' of VolumeSurface must have type SourceSeriesForRegion.");
      }
      this.ContentSequence.push(options.sourceSeries);
    } else {
      throw new Error("One of the following two options must be provided: 'sourceImage' or 'sourceSeries'.");
    }
  }
};
var ReferencedRealWorldValueMap = class extends CompositeContentItem {
  constructor(options) {
    super({
      name: new CodedConcept({
        value: "126100",
        meaning: "Real World Value Map used for measurement",
        schemeDesignator: "DCM"
      }),
      referencedSOPClassUID: option.referencedSOPClassUID,
      referencedSOPInstanceUID: options.referencedSOPInstanceUID,
      relationshipType: RelationshipTypes.CONTAINS
    });
  }
};
var FindingSite = class extends CodeContentItem {
  constructor(options) {
    super({
      name: new CodedConcept({
        value: "363698007",
        meaning: "Finding Site",
        schemeDesignator: "SCT"
      }),
      value: options.anatomicLocation,
      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
    });
    this.ContentSequence = new ContentSequence2();
    if (options.laterality) {
      const item = new CodeContentItem({
        name: new CodedConcept({
          value: "272741003",
          meaning: "Laterality",
          schemeDesignator: "SCT"
        }),
        value: options.laterality,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });
      this.ContentSequence.push(item);
    }
    if (options.topographicalModifier) {
      const item = new CodeContentItem({
        name: new CodedConcept({
          value: "106233006",
          meaning: "Topographical Modifier",
          schemeDesignator: "SCT"
        }),
        value: options.topographicalModifier,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });
      this.ContentSequence.push(item);
    }
  }
};
var ReferencedSegmentationFrame = class extends ContentSequence2 {
  constructor(options) {
    if (options.sopClassUID === void 0) {
      throw new Error("Option 'sopClassUID' is required for ReferencedSegmentationFrame.");
    }
    if (options.sopInstanceUID === void 0) {
      throw new Error("Option 'sopInstanceUID' is required for ReferencedSegmentationFrame.");
    }
    if (options.frameNumber === void 0) {
      throw new Error("Option 'frameNumber' is required for ReferencedSegmentationFrame.");
    }
    if (options.segmentNumber === void 0) {
      throw new Error("Option 'segmentNumber' is required for ReferencedSegmentationFrame.");
    }
    if (options.sourceImage === void 0) {
      throw new Error("Option 'sourceImage' is required for ReferencedSegmentationFrame.");
    }
    super();
    const segmentationItem = ImageContentItem({
      name: new CodedConcept({
        value: "121214",
        meaning: "Referenced Segmentation Frame",
        schemeDesignator: "DCM"
      }),
      referencedSOPClassUid: options.sopClassUid,
      referencedSOPInstanceUid: options.sopInstanceUid,
      referencedFrameNumber: options.frameNumber,
      referencedSegmentNumber: options.segmentNumber
    });
    this.push(segmentationItem);
    if (options.sourceImage.constructor !== SourceImageForSegmentation) {
      throw new Error("Option 'sourceImage' must have type SourceImageForSegmentation.");
    }
    this.push(sourceImage);
  }
};
var ReferencedSegmentation = class extends ContentSequence2 {
  constructor(options) {
    if (options.sopClassUID === void 0) {
      throw new Error("Option 'sopClassUID' is required for ReferencedSegmentation.");
    }
    if (options.sopInstanceUID === void 0) {
      throw new Error("Option 'sopInstanceUID' is required for ReferencedSegmentation.");
    }
    if (options.frameNumbers === void 0) {
      throw new Error("Option 'frameNumbers' is required for ReferencedSegmentation.");
    }
    if (options.segmentNumber === void 0) {
      throw new Error("Option 'segmentNumber' is required for ReferencedSegmentation.");
    }
    super();
    const segmentationItem = new ImageContentItem({
      name: new CodedConcept({
        value: "121191",
        meaning: "Referenced Segment",
        schemeDesignator: "DCM"
      }),
      referencedSOPClassUid: options.sopClassUid,
      referencedSOPInstanceUid: options.sopInstanceUid,
      referencedFrameNumber: options.frameNumbers,
      referencedSegmentNumber: options.segmentNumber
    });
    this.push(segmentationItem);
    if (options.sourceImages !== void 0) {
      options.sourceImages.forEach((image) => {
        if (!image || image.constructor !== SourceImageForSegmentation) {
          throw new Error("Items of option 'sourceImages' must have type SourceImageForSegmentation.");
        }
        this.push(image);
      });
    } else if (options.sourceSeries !== void 0) {
      if (options.sourceSeries.constructor !== SourceSeriesForSegmentation) {
        throw new Error("Option 'sourceSeries' must have type SourceSeriesForSegmentation.");
      }
      this.push(sourceSeries);
    } else {
      throw new Error("One of the following two options must be provided: 'sourceImages' or 'sourceSeries'.");
    }
  }
};

// src/sr/templates.js
var templates_exports = {};
__export(templates_exports, {
  AlgorithmIdentification: () => AlgorithmIdentification,
  DeviceObserverIdentifyingAttributes: () => DeviceObserverIdentifyingAttributes,
  ImageLibrary: () => ImageLibrary,
  LanguageOfContentItemAndDescendants: () => LanguageOfContentItemAndDescendants,
  Measurement: () => Measurement,
  MeasurementAndQualitativeEvaluationGroup: () => MeasurementAndQualitativeEvaluationGroup,
  MeasurementReport: () => MeasurementReport4,
  MeasurementsDerivedFromMultipleROIMeasurements: () => MeasurementsDerivedFromMultipleROIMeasurements,
  ObservationContext: () => ObservationContext,
  ObserverContext: () => ObserverContext,
  PersonObserverIdentifyingAttributes: () => PersonObserverIdentifyingAttributes,
  PlanarROIMeasurementsAndQualitativeEvaluations: () => PlanarROIMeasurementsAndQualitativeEvaluations,
  ROIMeasurements: () => ROIMeasurements,
  SubjectContext: () => SubjectContext,
  SubjectContextDevice: () => SubjectContextDevice,
  SubjectContextFetus: () => SubjectContextFetus,
  SubjectContextSpecimen: () => SubjectContextSpecimen,
  TimePointContext: () => TimePointContext,
  TrackingIdentifier: () => TrackingIdentifier,
  VolumetricROIMeasurementsAndQualitativeEvaluations: () => VolumetricROIMeasurementsAndQualitativeEvaluations
});
var Template = class extends ContentSequence2 {
  constructor(...args) {
    super(...args);
  }
};
var Measurement = class extends Template {
  constructor(options) {
    super();
    const valueItem = new NumContentItem({
      name: options.name,
      value: options.value,
      unit: options.unit,
      qualifier: options.qualifier,
      relationshipType: RelationshipTypes.CONTAINS
    });
    valueItem.ContentSequence = new ContentSequence2();
    if (options.trackingIdentifier === void 0) {
      throw new Error("Option 'trackingIdentifier' is required for Measurement.");
    }
    if (options.trackingIdentifier.constructor === TrackingIdentifier) {
      throw new Error("Option 'trackingIdentifier' must have type TrackingIdentifier.");
    }
    valueItem.ContentSequence.push(...options.trackingIdentifier);
    if (options.method !== void 0) {
      const methodItem = new CodeContentItem({
        name: new CodedConcept({
          value: "370129005",
          meaning: "Measurement Method",
          schemeDesignator: "SCT"
        }),
        value: options.method,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });
      valueItem.ContentSequence.push(methodItem);
    }
    if (options.derivation !== void 0) {
      const derivationItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121401",
          meaning: "Derivation",
          schemeDesignator: "DCM"
        }),
        value: options.derivation,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });
      valueItem.ContentSequence.push(derivationItem);
    }
    if (options.findingSites !== void 0) {
      if (!(typeof options.findingSites === "object" || options.findingSites instanceof Array)) {
        throw new Error("Option 'findingSites' must have type Array.");
      }
      options.findingSites.forEach((site) => {
        if (!site || site.constructor !== FindingSite) {
          throw new Error("Items of option 'findingSites' must have type FindingSite.");
        }
        valueItem.ContentSequence.push(site);
      });
    }
    if (options.properties !== void 0) {
      if (options.properties.constructor !== MeasurementProperties) {
        throw new Error("Option 'properties' must have type MeasurementProperties.");
      }
      valueItem.ContentSequence.push(...options.properties);
    }
    if (options.referencedRegions !== void 0) {
      if (!(typeof options.referencedRegions === "object" || options.referencedRegions instanceof Array)) {
        throw new Error("Option 'referencedRegions' must have type Array.");
      }
      options.referencedRegions.forEach((region) => {
        if (!region || region.constructor !== ImageRegion && region.constructor !== ImageRegion3D) {
          throw new Error("Items of option 'referencedRegion' must have type ImageRegion or ImageRegion3D.");
        }
        valueItem.ContentSequence.push(region);
      });
    } else if (options.referencedVolume !== void 0) {
      if (options.referencedVolume.constructor !== VolumeSurface) {
        throw new Error("Option 'referencedVolume' must have type VolumeSurface.");
      }
      valueItem.ContentSequence.push(options.referencedVolume);
    } else if (options.referencedSegmentation !== void 0) {
      if (options.referencedSegmentation.constructor !== ReferencedSegmentation && options.referencedSegmentation.constructor !== ReferencedSegmentationFrame) {
        throw new Error("Option 'referencedSegmentation' must have type ReferencedSegmentation or ReferencedSegmentationFrame.");
      }
      valueItem.ContentSequence.push(options.referencedSegmentation);
    }
    if (options.referencedRealWorldValueMap !== void 0) {
      if (options.referencedRealWorldValueMap.constructor !== ReferencedRealWorldValueMap) {
        throw new Error("Option 'referencedRealWorldValueMap' must have type ReferencedRealWorldValueMap.");
      }
      valueItem.ContentSequence.push(options.referencedRealWorldValueMap);
    }
    if (options.algorithmId !== void 0) {
      if (options.algorithmId.constructor !== AlgorithmIdentification) {
        throw new Error("Option 'algorithmId' must have type AlgorithmIdentification.");
      }
      valueItem.ContentSequence.push(...options.algorithmId);
    }
    this.push(valueItem);
  }
};
var MeasurementProperties = class extends Template {
  constructor(options) {
    super();
    if (options.normality !== void 0) {
      const normalityItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121402",
          schemeDesignator: "DCM",
          meaning: "Normality"
        }),
        value: options.normality,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });
      this.push(normalityItem);
    }
    if (options.measurementStatisticalProperties !== void 0) {
      if (options.measurementStatisticalProperties.constructor !== MeasurementStatisticalProperties) {
        throw new Error("Option 'measurmentStatisticalProperties' must have type MeasurementStatisticalProperties.");
      }
      this.push(...measurementStatisticalProperties);
    }
    if (options.normalRangeProperties !== void 0) {
      if (options.normalRangeProperties.constructor !== NormalRangeProperties) {
        throw new Error("Option 'normalRangeProperties' must have type NormalRangeProperties.");
      }
      this.push(...normalRangeProperties);
    }
    if (options.levelOfSignificance !== void 0) {
      const levelOfSignificanceItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121403",
          schemeDesignator: "DCM",
          meaning: "Level of Significance"
        }),
        value: options.levelOfSignificance,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });
      this.push(levelOfSignificanceItem);
    }
    if (options.selectionStatus !== void 0) {
      const selectionStatusItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121404",
          schemeDesignator: "DCM",
          meaning: "Selection Status"
        }),
        value: options.selectionStatus,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });
      this.push(selectionStatusItem);
    }
    if (options.upperMeasurementUncertainty !== void 0) {
      const upperMeasurementUncertaintyItem = new CodeContentItem({
        name: new CodedConcept({
          value: "R-00364",
          schemeDesignator: "SRT",
          meaning: "Range of Upper Measurement Uncertainty"
        }),
        value: options.upperMeasurementUncertainty,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });
      this.push(upperMeasurementUncertaintyItem);
    }
    if (options.lowerMeasurementUncertainty !== void 0) {
      const lowerMeasurementUncertaintyItem = new CodeContentItem({
        name: new CodedConcept({
          value: "R-00362",
          schemeDesignator: "SRT",
          meaning: "Range of Lower Measurement Uncertainty"
        }),
        value: options.lowerMeasurementUncertainty,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });
      this.push(lowerMeasurementUncertaintyItem);
    }
  }
};
var MeasurementStatisticalProperties = class extends Template {
  constructor(options) {
    super();
    if (options.values === void 0) {
      throw new Error("Option 'values' is required for MeasurementStatisticalProperties.");
    }
    if (!(typeof options.values === "object" || options.values instanceof Array)) {
      throw new Error("Option 'values' must have type Array.");
    }
    options.values.forEach((value) => {
      if (!options.concept || options.concept.constructor !== NumContentItem) {
        throw new Error("Items of option 'values' must have type NumContentItem.");
      }
      this.push(value);
    });
    if (options.description !== void 0) {
      const descriptionItem = new TextContentItem({
        name: new CodedConcept({
          value: "121405",
          schemeDesignator: "DCM",
          meaning: "Population Description"
        }),
        value: options.authority,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });
      this.push(authorityItem);
    }
    if (options.authority !== void 0) {
      const authorityItem2 = new TextContentItem({
        name: new CodedConcept({
          value: "121406",
          schemeDesignator: "DCM",
          meaning: "Population Authority"
        }),
        value: options.authority,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });
      this.push(authorityItem2);
    }
  }
};
var NormalRangeProperties = class extends Template {
  constructor(options) {
    super();
    if (options.values === void 0) {
      throw new Error("Option 'values' is required for NormalRangeProperties.");
    }
    if (!(typeof options.values === "object" || options.values instanceof Array)) {
      throw new Error("Option 'values' must have type Array.");
    }
    options.values.forEach((value) => {
      if (!options.concept || options.concept.constructor !== NumContentItem) {
        throw new Error("Items of option 'values' must have type NumContentItem.");
      }
      this.push(value);
    });
    if (options.description !== void 0) {
      const descriptionItem = new TextContentItem({
        name: new CodedConcept({
          value: "121407",
          schemeDesignator: "DCM",
          meaning: "Normal Range Description"
        }),
        value: options.authority,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });
      this.push(authorityItem);
    }
    if (options.authority !== void 0) {
      const authorityItem2 = new TextContentItem({
        name: new CodedConcept({
          value: "121408",
          schemeDesignator: "DCM",
          meaning: "Normal Range Authority"
        }),
        value: options.authority,
        relationshipType: RelationshipTypes.HAS_PROPERTIES
      });
      this.push(authorityItem2);
    }
  }
};
var ObservationContext = class extends Template {
  constructor(options) {
    super();
    if (options.observerPersonContext === void 0) {
      throw new Error("Option 'observerPersonContext' is required for ObservationContext.");
    }
    if (options.observerPersonContext.constructor !== ObserverContext) {
      throw new Error("Option 'observerPersonContext' must have type ObserverContext");
    }
    this.push(...options.observerPersonContext);
    if (options.observerDeviceContext !== void 0) {
      if (options.observerDeviceContext.constructor !== ObserverContext) {
        throw new Error("Option 'observerDeviceContext' must have type ObserverContext");
      }
      this.push(...options.observerDeviceContext);
    }
    if (options.subjectContext !== void 0) {
      if (options.subjectContext.constructor !== SubjectContext) {
        throw new Error("Option 'subjectContext' must have type SubjectContext");
      }
      this.push(...options.subjectContext);
    }
  }
};
var ObserverContext = class extends Template {
  constructor(options) {
    super();
    if (options.observerType === void 0) {
      throw new Error("Option 'observerType' is required for ObserverContext.");
    } else {
      if (options.observerType.constructor !== Code && options.observerType.constructor !== CodedConcept) {
        throw new Error("Option 'observerType' must have type Code or CodedConcept.");
      }
    }
    const observerTypeItem = new CodeContentItem({
      name: new CodedConcept({
        value: "121005",
        meaning: "Observer Type",
        schemeDesignator: "DCM"
      }),
      value: options.observerType,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });
    this.push(observerTypeItem);
    if (options.observerIdentifyingAttributes === void 0) {
      throw new Error("Option 'observerIdentifyingAttributes' is required for ObserverContext.");
    }
    const person = new CodedConcept({
      value: "121006",
      schemeDesignator: "DCM",
      meaning: "Person"
    });
    const device = new CodedConcept({
      value: "121007",
      schemeDesignator: "DCM",
      meaning: "Device"
    });
    if (person.equals(options.observerType)) {
      if (options.observerIdentifyingAttributes.constructor !== PersonObserverIdentifyingAttributes) {
        throw new Error("Option 'observerIdentifyingAttributes' must have type PersonObserverIdentifyingAttributes for 'Person' observer type.");
      }
    } else if (device.equals(options.observerType)) {
      if (options.observerIdentifyingAttributes.constructor !== DeviceObserverIdentifyingAttributes) {
        throw new Error("Option 'observerIdentifyingAttributes' must have type DeviceObserverIdentifyingAttributes for 'Device' observer type.");
      }
    } else {
      throw new Error("Option 'oberverType' must be either 'Person' or 'Device'.");
    }
    this.push(...options.observerIdentifyingAttributes);
  }
};
var PersonObserverIdentifyingAttributes = class extends Template {
  constructor(options) {
    super();
    if (options.name === void 0) {
      throw new Error("Option 'name' is required for PersonObserverIdentifyingAttributes.");
    }
    const nameItem = new PNameContentItem({
      name: new CodedConcept({
        value: "121008",
        meaning: "Person Observer Name",
        schemeDesignator: "DCM"
      }),
      value: options.name,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });
    this.push(nameItem);
    if (options.loginName !== void 0) {
      const loginNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "128774",
          meaning: "Person Observer's Login Name",
          schemeDesignator: "DCM"
        }),
        value: options.loginName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(loginNameItem);
    }
    if (options.organizationName !== void 0) {
      const organizationNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "121009",
          meaning: "Person Observer's Organization Name",
          schemeDesignator: "DCM"
        }),
        value: options.organizationName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(organizationNameItem);
    }
    if (options.roleInOrganization !== void 0) {
      const roleInOrganizationItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121010",
          meaning: "Person Observer's Role in the Organization",
          schemeDesignator: "DCM"
        }),
        value: options.roleInOrganization,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(roleInOrganizationItem);
    }
    if (options.roleInProcedure !== void 0) {
      const roleInProcedureItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121011",
          meaning: "Person Observer's Role in this Procedure",
          schemeDesignator: "DCM"
        }),
        value: options.roleInProcedure,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(roleInProcedureItem);
    }
  }
};
var DeviceObserverIdentifyingAttributes = class extends Template {
  constructor(options) {
    super();
    if (options.uid === void 0) {
      throw new Error("Option 'uid' is required for DeviceObserverIdentifyingAttributes.");
    }
    const deviceObserverItem = new UIDRefContentItem({
      name: new CodedConcept({
        value: "121012",
        meaning: "Device Observer UID",
        schemeDesignator: "DCM"
      }),
      value: options.uid,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });
    this.push(deviceObserverItem);
    if (options.manufacturerName !== void 0) {
      const manufacturerNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "121013",
          meaning: "Device Observer Manufacturer",
          schemeDesignator: "DCM"
        }),
        value: options.manufacturerName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(manufacturerNameItem);
    }
    if (options.modelName !== void 0) {
      const modelNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "121015",
          meaning: "Device Observer Model Name",
          schemeDesignator: "DCM"
        }),
        value: options.modelName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(modelNameItem);
    }
    if (options.serialNumber !== void 0) {
      const serialNumberItem = new TextContentItem({
        name: new CodedConcept({
          value: "121016",
          meaning: "Device Observer Serial Number",
          schemeDesignator: "DCM"
        }),
        value: options.serialNumber,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(serialNumberItem);
    }
    if (options.physicalLocation !== void 0) {
      const physicalLocationItem = new TextContentItem({
        name: new CodedConcept({
          value: "121017",
          meaning: "Device Observer Physical Location During Observation",
          schemeDesignator: "DCM"
        }),
        value: options.physicalLocation,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(physicalLocationItem);
    }
    if (options.roleInProcedure !== void 0) {
      const roleInProcedureItem = new CodeContentItem({
        name: new CodedConcept({
          value: "113876",
          meaning: "Device Role in Procedure",
          schemeDesignator: "DCM"
        }),
        value: options.roleInProcedure,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(roleInProcedureItem);
    }
  }
};
var SubjectContext = class extends Template {
  constructor(options) {
    super();
    if (options.subjectClass === void 0) {
      throw new Error("Option 'subjectClass' is required for SubjectContext.");
    }
    if (options.subjectClassSpecificContext === void 0) {
      throw new Error("Option 'subjectClassSpecificContext' is required for SubjectContext.");
    }
    const subjectClassItem = new CodeContentItem({
      name: new CodedConcept({
        value: "121024",
        meaning: "Subject Class",
        schemeDesignator: "DCM"
      }),
      value: options.subjectClass,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });
    this.push(subjectClassItem);
    const fetus = new CodedConcept({
      value: "121026 ",
      schemeDesignator: "DCM",
      meaning: "Fetus"
    });
    const specimen = new CodedConcept({
      value: "121027",
      schemeDesignator: "DCM",
      meaning: "Specimen"
    });
    const device = new CodedConcept({
      value: "121192",
      schemeDesignator: "DCM",
      meaning: "Device Subject"
    });
    if (fetus.equals(options.subjectClass)) {
      if (options.subjectClassSpecificContext.constructor !== SubjectContextFetus) {
        throw new Error("Option 'subjectClass' must have type SubjectContextFetus for 'Fetus' subject class.");
      }
    } else if (specimen.equals(options.subjectClass)) {
      if (options.subjectClassSpecificContext.constructor !== SubjectContextSpecimen) {
        throw new Error("Option 'subjectClass' must have type SubjectContextSpecimen for 'Specimen' subject class.");
      }
    } else if (device.equals(options.subjectClass)) {
      if (options.subjectClassSpecificContext.constructor !== SubjectContextDevice) {
        throw new Error("Option 'subjectClass' must have type SubjectContextDevice for 'Device' subject class.");
      }
    } else {
      throw new Error("Option 'subjectClass' must be either 'Fetus', 'Specimen', or 'Device'.");
    }
    this.push(...options.subjectClassSpecificContext);
  }
};
var SubjectContextFetus = class extends Template {
  constructor(options) {
    super();
    if (options.subjectID === void 0) {
      throw new Error("Option 'subjectID' is required for SubjectContextFetus.");
    }
    const subjectIdItem = new TextContentItem({
      name: new CodedConcept({
        value: "121030",
        meaning: "Subject ID",
        schemeDesignator: "DCM"
      }),
      value: options.subjectID,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });
    this.push(subjectIdItem);
  }
};
var SubjectContextSpecimen = class extends Template {
  constructor(options) {
    super();
    if (options.uid === void 0) {
      throw new Error("Option 'uid' is required for SubjectContextSpecimen.");
    }
    const specimenUidItem = new UIDRefContentItem({
      name: new CodedConcept({
        value: "121039",
        meaning: "Specimen UID",
        schemeDesignator: "DCM"
      }),
      value: options.uid,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });
    this.push(specimenUidItem);
    if (options.identifier !== void 0) {
      const specimenIdentifierItem = new TextContentItem({
        name: new CodedConcept({
          value: "121041",
          meaning: "Specimen Identifier",
          schemeDesignator: "DCM"
        }),
        value: options.identifier,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(specimenIdentifierItem);
    }
    if (options.containerIdentifier !== void 0) {
      const containerIdentifierItem = new TextContentItem({
        name: new CodedConcept({
          value: "111700",
          meaning: "Specimen Container Identifier",
          schemeDesignator: "DCM"
        }),
        value: options.containerIdentifier,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(containerIdentifierItem);
    }
    if (options.specimenType !== void 0) {
      const specimenTypeItem = new CodeContentItem({
        name: new CodedConcept({
          value: "R-00254",
          meaning: "Specimen Type",
          schemeDesignator: "DCM"
        }),
        value: options.specimenType,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(specimenTypeItem);
    }
  }
};
var SubjectContextDevice = class extends Template {
  constructor(options) {
    if (options.name === void 0) {
      throw new Error("Option 'name' is required for SubjectContextDevice.");
    }
    const deviceNameItem = new TextContentItem({
      name: new CodedConcept({
        value: "121193",
        meaning: "Device Subject Name",
        schemeDesignator: "DCM"
      }),
      value: options.name,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });
    this.push(deviceNameItem);
    if (options.uid !== void 0) {
      const deviceUidItem = new UIDRefContentItem({
        name: new CodedConcept({
          value: "121198",
          meaning: "Device Subject UID",
          schemeDesignator: "DCM"
        }),
        value: options.uid,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(deviceUidItem);
    }
    if (options.manufacturerName !== void 0) {
      const manufacturerNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "121194",
          meaning: "Device Subject Manufacturer",
          schemeDesignator: "DCM"
        }),
        value: options.manufacturerName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(manufacturerNameItem);
    }
    if (options.modelName !== void 0) {
      const modelNameItem = new TextContentItem({
        name: new CodedConcept({
          value: "121195",
          meaning: "Device Subject Model Name",
          schemeDesignator: "DCM"
        }),
        value: options.modelName,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(modelNameItem);
    }
    if (options.serialNumber !== void 0) {
      const serialNumberItem = new TextContentItem({
        name: new CodedConcept({
          value: "121196",
          meaning: "Device Subject Serial Number",
          schemeDesignator: "DCM"
        }),
        value: options.serialNumber,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(serialNumberItem);
    }
    if (options.physicalLocation !== void 0) {
      const physicalLocationItem = new TextContentItem({
        name: new CodedConcept({
          value: "121197",
          meaning: "Device Subject Physical Location During Observation",
          schemeDesignator: "DCM"
        }),
        value: options.physicalLocation,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(physicalLocationItem);
    }
  }
};
var LanguageOfContentItemAndDescendants = class extends Template {
  constructor(options) {
    super();
    if (options.language === void 0) {
      options.language = new CodedConcept({
        value: "en-US",
        schemeDesignator: "RFC5646",
        meaning: "English (United States)"
      });
    }
    const languageItem = new CodeContentItem({
      name: new CodedConcept({
        value: "121049",
        meaning: "Language of Content Item and Descendants",
        schemeDesignator: "DCM"
      }),
      value: options.language,
      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
    });
    this.push(languageItem);
  }
};
var _MeasurementsAndQualitatitiveEvaluations = class extends Template {
  constructor(options) {
    super();
    const groupItem = new ContainerContentItem({
      name: new CodedConcept({
        value: "125007",
        meaning: "Measurement Group",
        schemeDesignator: "DCM"
      }),
      relationshipType: RelationshipTypes.CONTAINS
    });
    groupItem.ContentSequence = new ContentSequence2();
    if (options.trackingIdentifier === void 0) {
      throw new Error("Option 'trackingIdentifier' is required for measurements group.");
    }
    if (options.trackingIdentifier.constructor !== TrackingIdentifier) {
      throw new Error("Option 'trackingIdentifier' must have type TrackingIdentifier.");
    }
    if (options.trackingIdentifier.length !== 2) {
      throw new Error("Option 'trackingIdentifier' must include a human readable tracking identifier and a tracking unique identifier.");
    }
    groupItem.ContentSequence.push(...options.trackingIdentifier);
    if (options.session !== void 0) {
      const sessionItem = new TextContentItem({
        name: new CodedConcept({
          value: "C67447",
          meaning: "Activity Session",
          schemeDesignator: "NCIt"
        }),
        value: options.session,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      groupItem.ContentSequence.push(sessionItem);
    }
    if (options.findingType !== void 0) {
      const findingTypeItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121071",
          meaning: "Finding",
          schemeDesignator: "DCM"
        }),
        value: options.findingType,
        relationshipType: RelationshipTypes.CONTAINS
      });
      groupItem.ContentSequence.push(findingTypeItem);
    }
    if (options.timePointContext !== void 0) {
      if (options.timePointContext.constructor !== TimePointContext) {
        throw new Error("Option 'timePointContext' must have type TimePointContext.");
      }
      groupItem.ContentSequence.push(...timePointContext);
    }
    if (options.referencedRealWorldValueMap !== void 0) {
      if (options.referencedRealWorldValueMap.constructor !== ReferencedRealWorldValueMap) {
        throw new Error("Option 'referencedRealWorldValleMap' must have type ReferencedRealWorldValueMap.");
      }
      groupItem.ContentSequence.push(options.referencedRealWorldValueMap);
    }
    if (options.measurements !== void 0) {
      if (!(typeof options.measurements === "object" || options.measurements instanceof Array)) {
        throw new Error("Option 'measurements' must have type Array.");
      }
      options.measurements.forEach((measurement) => {
        console.log(measurement);
        if (!measurement || measurement.constructor !== NumContentItem) {
          throw new Error("Items of option 'measurement' must have type NumContentItem.");
        }
        groupItem.ContentSequence.push(measurement);
      });
    }
    if (options.qualitativeEvaluations !== void 0) {
      if (!(typeof options.qualitativeEvaluations === "object" || options.qualitativeEvaluations instanceof Array)) {
        throw new Error("Option 'qualitativeEvaluations' must have type Array.");
      }
      options.qualitativeEvaluations.forEach((evaluation) => {
        if (!evaluation || evaluation.constructor !== CodeContentItem && evaluation.constructor !== TextContentItem) {
          throw new Error("Items of option 'qualitativeEvaluations' must have type CodeContentItem or TextContentItem.");
        }
        groupItem.ContentSequence.push(evaluation);
      });
    }
    this.push(groupItem);
  }
};
var _ROIMeasurementsAndQualitativeEvaluations = class extends _MeasurementsAndQualitatitiveEvaluations {
  constructor(options) {
    super({
      trackingIdentifier: options.trackingIdentifier,
      timePointContext: options.timePointContext,
      findingType: options.findingType,
      session: options.session,
      measurements: options.measurements,
      qualitativeEvaluations: options.qualitativeEvaluations
    });
    const groupItem = this[0];
    const wereReferencesProvided = [
      options.referencedRegions !== void 0,
      options.referencedVolume !== void 0,
      options.referencedSegmentation !== void 0
    ];
    const numReferences = wereReferencesProvided.reduce((a, b) => a + b);
    if (numReferences === 0) {
      throw new Error("One of the following options must be provided: 'referencedRegions', 'referencedVolume', or 'referencedSegmentation'.");
    } else if (numReferences > 1) {
      throw new Error("Only one of the following options should be provided: 'referencedRegions', 'referencedVolume', or 'referencedSegmentation'.");
    }
    if (options.referencedRegions !== void 0) {
      if (!(typeof options.referencedRegions === "object" || options.referencedRegions instanceof Array)) {
        throw new Error("Option 'referencedRegions' must have type Array.");
      }
      if (options.referencedRegions.length === 0) {
        throw new Error("Option 'referencedRegion' must have non-zero length.");
      }
      options.referencedRegions.forEach((region) => {
        if (region === void 0 || region.constructor !== ImageRegion && region.constructor !== ImageRegion3D) {
          throw new Error("Items of option 'referencedRegion' must have type ImageRegion or ImageRegion3D.");
        }
        groupItem.ContentSequence.push(region);
      });
    } else if (options.referencedVolume !== void 0) {
      if (options.referencedVolume.constructor !== VolumeSurface) {
        throw new Error("Items of option 'referencedVolume' must have type VolumeSurface.");
      }
      groupItem.ContentSequence.push(referencedVolume);
    } else if (options.referencedSegmentation !== void 0) {
      if (options.referencedSegmentation.constructor !== ReferencedSegmentation && options.referencedSegmentation.constructor !== ReferencedSegmentationFrame) {
        throw new Error("Option 'referencedSegmentation' must have type ReferencedSegmentation or ReferencedSegmentationFrame.");
      }
      groupItem.ContentSequence.push(referencedSegmentation);
    }
    this[0] = groupItem;
  }
};
var PlanarROIMeasurementsAndQualitativeEvaluations = class extends _ROIMeasurementsAndQualitativeEvaluations {
  constructor(options) {
    const wereReferencesProvided = [
      options.referencedRegion !== void 0,
      options.referencedSegmentation !== void 0
    ];
    const numReferences = wereReferencesProvided.reduce((a, b) => a + b);
    if (numReferences === 0) {
      throw new Error("One of the following options must be provided: 'referencedRegion', 'referencedSegmentation'.");
    } else if (numReferences > 1) {
      throw new Error("Only one of the following options should be provided: 'referencedRegion', 'referencedSegmentation'.");
    }
    super({
      trackingIdentifier: options.trackingIdentifier,
      referencedRegions: [options.referencedRegion],
      referencedSegmentation: options.referencedSegmentation,
      referencedRealWorldValueMap: options.referencedRealWorldValueMap,
      timePointContext: options.timePointContext,
      findingType: options.findingType,
      session: options.session,
      measurements: options.measurements,
      qualitativeEvaluations: options.qualitativeEvaluations
    });
  }
};
var VolumetricROIMeasurementsAndQualitativeEvaluations = class extends _ROIMeasurementsAndQualitativeEvaluations {
  constructor(options) {
    super({
      trackingIdentifier: options.trackingIdentifier,
      referencedRegions: options.referencedRegions,
      referencedSegmentation: options.referencedSegmentation,
      referencedRealWorldValueMap: options.referencedRealWorldValueMap,
      timePointContext: options.timePointContext,
      findingType: options.findingType,
      session: options.session,
      measurements: options.measurements,
      qualitativeEvaluations: options.qualitativeEvaluations
    });
  }
};
var MeasurementsDerivedFromMultipleROIMeasurements = class extends Template {
  constructor(options) {
    if (options.derivation === void 0) {
      throw new Error("Option 'derivation' is required for MeasurementsDerivedFromMultipleROIMeasurements.");
    }
    const valueItem = new NumContentItem({
      name: options.derivation
    });
    valueItem.ContentSequence = new ContentSequence2();
    if (options.measurementGroups === void 0) {
      throw new Error("Option 'measurementGroups' is required for MeasurementsDerivedFromMultipleROIMeasurements.");
    }
    if (!(typeof options.measurementGroups === "object" || options.measurementGroups instanceof Array)) {
      throw new Error("Option 'measurementGroups' must have type Array.");
    }
    options.measurementGroups.forEach((group) => {
      if (!group || group.constructor !== PlanarROIMeasurementsAndQualitativeEvaluations && group.constructor !== VolumetricROIMeasurementsAndQualitativeEvaluations) {
        throw new Error("Items of option 'measurementGroups' must have type PlanarROIMeasurementsAndQualitativeEvaluations or VolumetricROIMeasurementsAndQualitativeEvaluations.");
      }
      group[0].RelationshipType = "R-INFERRED FROM";
      valueItem.ContentSequence.push(...group);
    });
    if (options.measurementProperties !== void 0) {
      if (options.measurementProperties.constructor !== MeasurementProperties) {
        throw new Error("Option 'measurementProperties' must have type MeasurementProperties.");
      }
      valueItem.ContentSequence.push(...options.measurementProperties);
    }
    this.push(valueItem);
  }
};
var MeasurementAndQualitativeEvaluationGroup = class extends _MeasurementsAndQualitatitiveEvaluations {
  constructor(options) {
    super({
      trackingIdentifier: options.trackingIdentifier,
      referencedRealWorldValueMap: options.referencedRealWorldValueMap,
      timePointContext: options.timePointContext,
      findingType: options.findingType,
      session: options.session,
      measurements: options.measurements,
      qualitativeEvaluations: options.qualitativeEvaluations
    });
  }
};
var ROIMeasurements = class extends Template {
  constructor(options) {
    super();
    if (options.method !== void 0) {
      const methodItem = new CodeContentItem({
        name: new CodedConcept({
          value: "370129005",
          meaning: "Measurement Method",
          schemeDesignator: "SCT"
        }),
        value: options.method,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });
      this.push(methodItem);
    }
    if (options.findingSites !== void 0) {
      if (!(typeof options.findingSites === "object" || options.findingSites instanceof Array)) {
        throw new Error("Option 'findingSites' must have type Array.");
      }
      options.findingSites.forEach((site) => {
        if (!site || site.constructor !== FindingSite) {
          throw new Error("Items of option 'findingSites' must have type FindingSite.");
        }
        this.push(site);
      });
    }
    if (options.measurements === void 0) {
      throw new Error("Options 'measurements' is required ROIMeasurements.");
    }
    if (!(typeof options.measurements === "object" || options.measurements instanceof Array)) {
      throw new Error("Option 'measurements' must have type Array.");
    }
    if (options.measurements.length === 0) {
      throw new Error("Option 'measurements' must have non-zero length.");
    }
    options.measurements.forEach((measurement) => {
      if (!measurement || measurement.constructor !== Measurement) {
        throw new Error("Items of option 'measurements' must have type Measurement.");
      }
      this.push(measurement);
    });
  }
};
var MeasurementReport4 = class extends Template {
  constructor(options) {
    super();
    if (options.observationContext === void 0) {
      throw new Error("Option 'observationContext' is required for MeasurementReport.");
    }
    if (options.procedureReported === void 0) {
      throw new Error("Option 'procedureReported' is required for MeasurementReport.");
    }
    const item = new ContainerContentItem({
      name: new CodedConcept({
        value: "126000",
        schemeDesignator: "DCM",
        meaning: "Imaging Measurement Report"
      }),
      templateID: "1500"
    });
    item.ContentSequence = new ContentSequence2();
    if (options.languageOfContentItemAndDescendants === void 0) {
      throw new Error("Option 'languageOfContentItemAndDescendants' is required for MeasurementReport.");
    }
    if (options.languageOfContentItemAndDescendants.constructor !== LanguageOfContentItemAndDescendants) {
      throw new Error("Option 'languageOfContentItemAndDescendants' must have type LanguageOfContentItemAndDescendants.");
    }
    item.ContentSequence.push(...options.languageOfContentItemAndDescendants);
    item.ContentSequence.push(...options.observationContext);
    if (options.procedureReported.constructor === CodedConcept || options.procedureReported.constructor === Code) {
      options.procedureReported = [options.procedureReported];
    }
    if (!(typeof options.procedureReported === "object" || options.procedureReported instanceof Array)) {
      throw new Error("Option 'procedureReported' must have type Array.");
    }
    options.procedureReported.forEach((procedure) => {
      const procedureItem = new CodeContentItem({
        name: new CodedConcept({
          value: "121058",
          meaning: "Procedure reported",
          schemeDesignator: "DCM"
        }),
        value: procedure,
        relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
      });
      item.ContentSequence.push(procedureItem);
    });
    const imageLibraryItem = new ImageLibrary();
    item.ContentSequence.push(...imageLibraryItem);
    const wereOptionsProvided = [
      options.imagingMeasurements !== void 0,
      options.derivedImagingMeasurements !== void 0,
      options.qualitativeEvaluations !== void 0
    ];
    const numOptionsProvided = wereOptionsProvided.reduce((a, b) => a + b);
    if (numOptionsProvided > 1) {
      throw new Error("Only one of the following options should be provided: 'imagingMeasurements', 'derivedImagingMeasurement', 'qualitativeEvaluations'.");
    }
    if (options.imagingMeasurements !== void 0) {
      const containerItem = new ContainerContentItem({
        name: new CodedConcept({
          value: "126010",
          meaning: "Imaging Measurements",
          schemeDesignator: "DCM"
        }),
        relationshipType: RelationshipTypes.CONTAINS
      });
      containerItem.ContentSequence = new ContentSequence2(...options.imagingMeasurements);
      item.ContentSequence.push(containerItem);
    } else if (options.derivedImagingMeasurements !== void 0) {
      const containerItem = new ContainerContentItem({
        name: new CodedConcept({
          value: "126011",
          meaning: "Derived Imaging Measurements",
          schemeDesignator: "DCM"
        }),
        relationshipType: RelationshipTypes.CONTAINS
      });
      containerItem.ContentSequence = new ContentSequence2(...options.derivedImagingMeasurements);
      item.ContentSequence.push(containerItem);
    } else if (options.qualitativeEvaluations !== void 0) {
      const containerItem = new ContainerContentItem({
        name: new CodedConcept({
          value: "C0034375",
          meaning: "Qualitative Evaluations",
          schemeDesignator: "UMLS"
        }),
        relationshipType: RelationshipTypes.CONTAINS
      });
      containerItem.ContentSequence = new ContentSequence2(...options.qualitativeEvaluations);
      item.ContentSequence.push(containerItem);
    }
    this.push(item);
  }
};
var TimePointContext = class extends Template {
  constructor(options) {
    if (options.timePoint === void 0) {
      throw new Error("Option 'timePoint' is required for TimePointContext.");
    }
    const timePointItem = new TextContentItem({
      name: new CodedConcept({
        value: "C2348792",
        meaning: "Time Point",
        schemeDesignator: "UMLS"
      }),
      value: options.timePoint,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });
    this.push(timePointItem);
    if (options.timePointType !== void 0) {
      const timePointTypeItem = new CodeContentItem({
        name: new CodedConcept({
          value: "126072",
          meaning: "Time Point Type",
          schemeDesignator: "DCM"
        }),
        value: options.timePointType,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(timePointTypeItem);
    }
    if (options.timePointOrder !== void 0) {
      const timePointOrderItem = new NumContentItem({
        name: new CodedConcept({
          value: "126073",
          meaning: "Time Point Order",
          schemeDesignator: "DCM"
        }),
        value: options.timePointOrder,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(timePointOrderItem);
    }
    if (options.subjectTimePointIdentifier !== void 0) {
      const subjectTimePointIdentifierItem = new NumContentItem({
        name: new CodedConcept({
          value: "126070",
          meaning: "Subject Time Point Identifier",
          schemeDesignator: "DCM"
        }),
        value: options.subjectTimePointIdentifier,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(subjectTimePointIdentifierItem);
    }
    if (options.protocolTimePointIdentifier !== void 0) {
      const protocolTimePointIdentifierItem = new NumContentItem({
        name: new CodedConcept({
          value: "126071",
          meaning: "Protocol Time Point Identifier",
          schemeDesignator: "DCM"
        }),
        value: options.protocolTimePointIdentifier,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(protocolTimePointIdentifierItem);
    }
    if (options.temporalOffsetFromEvent !== void 0) {
      if (options.temporalOffsetFromEvent.constructor !== LongitudinalTemporalOffsetFromEventContentItem) {
        throw new Error("Option 'temporalOffsetFromEvent' must have type LongitudinalTemporalOffsetFromEventContentItem.");
      }
      this.push(temporalOffsetFromEvent);
    }
  }
};
var ImageLibrary = class extends Template {
  constructor(options) {
    super();
    const libraryItem = new ContainerContentItem({
      name: new CodedConcept({
        value: "111028",
        meaning: "Image Library",
        schemeDesignator: "DCM"
      }),
      relationshipType: RelationshipTypes.CONTAINS
    });
    this.push(libraryItem);
  }
};
var AlgorithmIdentification = class extends Template {
  constructor(options) {
    super();
    if (options.name === void 0) {
      throw new Error("Option 'name' is required for AlgorithmIdentification.");
    }
    if (options.version === void 0) {
      throw new Error("Option 'version' is required for AlgorithmIdentification.");
    }
    const nameItem = new TextContentItem({
      name: new CodedConcept({
        value: "111001",
        meaning: "Algorithm Name",
        schemeDesignator: "DCM"
      }),
      value: options.name,
      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
    });
    this.push(nameItem);
    const versionItem = new TextContentItem({
      name: new CodedConcept({
        value: "111003",
        meaning: "Algorithm Version",
        schemeDesignator: "DCM"
      }),
      value: options.version,
      relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
    });
    this.push(versionItem);
    if (options.parameters !== void 0) {
      if (!(typeof options.parameters === "object" || options.parameters instanceof Array)) {
        throw new Error("Option 'parameters' must have type Array.");
      }
      options.parameters.forEach((parameter) => {
        const parameterItem = new TextContentItem({
          name: new CodedConcept({
            value: "111002",
            meaning: "Algorithm Parameter",
            schemeDesignator: "DCM"
          }),
          value: param,
          relationshipType: RelationshipTypes.HAS_CONCEPT_MOD
        });
        this.push(parameterItem);
      });
    }
  }
};
var TrackingIdentifier = class extends Template {
  constructor(options) {
    super();
    if (options.uid === void 0) {
      throw new Error("Option 'uid' is required for TrackingIdentifier.");
    }
    if (options.identifier !== void 0) {
      const trackingIdentifierItem = new TextContentItem({
        name: new CodedConcept({
          value: "112039",
          meaning: "Tracking Identifier",
          schemeDesignator: "DCM"
        }),
        value: options.identifier,
        relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
      });
      this.push(trackingIdentifierItem);
    }
    const trackingUIDItem = new UIDRefContentItem({
      name: new CodedConcept({
        value: "112040",
        meaning: "Tracking Unique Identifier",
        schemeDesignator: "DCM"
      }),
      value: options.uid,
      relationshipType: RelationshipTypes.HAS_OBS_CONTEXT
    });
    this.push(trackingUIDItem);
  }
};

// src/sr/documents.js
var documents_exports = {};
__export(documents_exports, {
  Comprehensive3DSR: () => Comprehensive3DSR
});
var _attributesToInclude = [
  "00080054",
  "00080100",
  "00080102",
  "00080103",
  "00080104",
  "00080105",
  "00080106",
  "00080107",
  "0008010B",
  "0008010D",
  "0008010F",
  "00080117",
  "00080118",
  "00080119",
  "00080120",
  "00080121",
  "00080122",
  "00081120",
  "00081150",
  "00081155",
  "00081160",
  "00081190",
  "00081199",
  "00100010",
  "00100020",
  "00100021",
  "00100022",
  "00100024",
  "00100026",
  "00100027",
  "00100028",
  "00100030",
  "00100032",
  "00100033",
  "00100034",
  "00100035",
  "00100040",
  "00100200",
  "00100212",
  "00100213",
  "00100214",
  "00100215",
  "00100216",
  "00100217",
  "00100218",
  "00100219",
  "00100221",
  "00100222",
  "00100223",
  "00100229",
  "00101001",
  "00101002",
  "00101100",
  "00102160",
  "00102201",
  "00102202",
  "00102292",
  "00102293",
  "00102294",
  "00102295",
  "00102296",
  "00102297",
  "00102298",
  "00102299",
  "00104000",
  "00120062",
  "00120063",
  "00120064",
  "0020000D",
  "00400031",
  "00400032",
  "00400033",
  "00400035",
  "00400036",
  "00400039",
  "0040003A",
  "0040E001",
  "0040E010",
  "0040E020",
  "0040E021",
  "0040E022",
  "0040E023",
  "0040E024",
  "0040E025",
  "0040E030",
  "0040E031",
  "0062000B",
  "00880130",
  "00880140",
  "00080100",
  "00080102",
  "00080103",
  "00080104",
  "00080105",
  "00080106",
  "00080107",
  "0008010B",
  "0008010D",
  "0008010F",
  "00080117",
  "00080118",
  "00080119",
  "00080120",
  "00080121",
  "00080122",
  "00081080",
  "00081084",
  "00101010",
  "00101020",
  "00101021",
  "00101022",
  "00101023",
  "00101024",
  "00101030",
  "00102000",
  "00102110",
  "00102180",
  "001021A0",
  "001021B0",
  "001021C0",
  "001021D0",
  "00102203",
  "00380010",
  "00380014",
  "00380060",
  "00380062",
  "00380064",
  "00380500",
  "00400031",
  "00400032",
  "00400033",
  "00080020",
  "00080030",
  "00080050",
  "00080051",
  "00080080",
  "00080081",
  "00080082",
  "00080090",
  "00080096",
  "0008009C",
  "0008009D",
  "00080100",
  "00080102",
  "00080103",
  "00080104",
  "00080105",
  "00080106",
  "00080107",
  "0008010B",
  "0008010D",
  "0008010F",
  "00080117",
  "00080118",
  "00080119",
  "00080120",
  "00080121",
  "00080122",
  "00081030",
  "00081032",
  "00081048",
  "00081049",
  "00081060",
  "00081062",
  "00081110",
  "00081150",
  "00081155",
  "0020000D",
  "00200010",
  "00321034",
  "00400031",
  "00400032",
  "00400033",
  "00401012",
  "00401101",
  "00401102",
  "00401103",
  "00401104",
  "00120010",
  "00120020",
  "00120021",
  "00120030",
  "00120031",
  "00120040",
  "00120042",
  "00120081",
  "00120082",
  "00120020",
  "00120050",
  "00120051",
  "00120052",
  "00120053",
  "00120083",
  "00120084",
  "00120085"
];
var Comprehensive3DSR = class {
  constructor(options) {
    if (options.evidence === void 0) {
      throw new Error("Option 'evidence' is required for Comprehensive3DSR.");
    }
    if (!(typeof options.evidence === "object" || options.evidence instanceof Array)) {
      throw new Error("Option 'evidence' must have type Array.");
    }
    if (options.evidence.length === 0) {
      throw new Error("Option 'evidence' must have non-zero length.");
    }
    if (options.content === void 0) {
      throw new Error("Option 'content' is required for Comprehensive3DSR.");
    }
    if (options.seriesInstanceUID === void 0) {
      throw new Error("Option 'seriesInstanceUID' is required for Comprehensive3DSR.");
    }
    if (options.seriesNumber === void 0) {
      throw new Error("Option 'seriesNumber' is required for Comprehensive3DSR.");
    }
    if (options.seriesDescription === void 0) {
      throw new Error("Option 'seriesDescription' is required for Comprehensive3DSR.");
    }
    if (options.sopInstanceUID === void 0) {
      throw new Error("Option 'sopInstanceUID' is required for Comprehensive3DSR.");
    }
    if (options.instanceNumber === void 0) {
      throw new Error("Option 'instanceNumber' is required for Comprehensive3DSR.");
    }
    if (options.manufacturer === void 0) {
      throw new Error("Option 'manufacturer' is required for Comprehensive3DSR.");
    }
    this.SOPClassUID = "1.2.840.10008.5.1.4.1.1.88.34";
    this.SOPInstanceUID = options.sopInstanceUID;
    this.Modality = "SR";
    this.SeriesDescription = options.seriesDescription;
    this.SeriesInstanceUID = options.seriesInstanceUID;
    this.SeriesNumber = options.seriesNumber;
    this.InstanceNumber = options.instanceNumber;
    this.Manufacturer = options.manufacturer;
    if (options.institutionName !== void 0) {
      this.InstitutionName = options.institutionName;
      if (options.institutionalDepartmentName !== void 0) {
        this.InstitutionalDepartmentName = options.institutionDepartmentName;
      }
    }
    if (options.isComplete) {
      this.CompletionFlag = "COMPLETE";
    } else {
      this.CompletionFlag = "PARTIAL";
    }
    if (options.isVerified) {
      if (options.verifyingObserverName === void 0) {
        throw new Error("Verifying Observer Name must be specified if SR document has been verified.");
      }
      if (options.verifyingOrganization === void 0) {
        throw new Error("Verifying Organization must be specified if SR document has been verified.");
      }
      this.VerificationFlag = "VERIFIED";
      const ovserver_item = {};
      ovserver_item.VerifyingObserverName = options.verifyingObserverName;
      ovserver_item.VerifyingOrganization = options.verifyingOrganization;
      ovserver_item.VerificationDateTime = DicomMetaDictionary.dateTime();
      this.VerifyingObserverSequence = [observer_item];
    } else {
      this.VerificationFlag = "UNVERIFIED";
    }
    if (options.isFinal) {
      this.PreliminaryFlag = "FINAL";
    } else {
      this.PreliminaryFlag = "PRELIMINARY";
    }
    this.ContentDate = DicomMetaDictionary.date();
    this.ContentTime = DicomMetaDictionary.time();
    Object.keys(options.content).forEach((keyword) => {
      this[keyword] = options.content[keyword];
    });
    const evidenceCollection = {};
    options.evidence.forEach((evidence) => {
      if (evidence.StudyInstanceUID !== options.evidence[0].StudyInstanceUID) {
        throw new Error("Referenced data sets must all belong to the same study.");
      }
      if (!(evidence.SeriesInstanceUID in evidenceCollection)) {
        evidenceCollection[evidence.SeriesInstanceUID] = [];
      }
      const instanceItem = {};
      instanceItem.ReferencedSOPClassUID = evidence.SOPClassUID;
      instanceItem.ReferencedSOPInstanceUID = evidence.SOPInstanceUID;
      evidenceCollection[evidence.SeriesInstanceUID].push(instanceItem);
    });
    const evidenceStudyItem = {};
    evidenceStudyItem.StudyInstanceUID = options.evidence[0].StudyInstanceUID;
    evidenceStudyItem.ReferencedSeriesSequence = [];
    Object.keys(evidenceCollection).forEach((seriesInstanceUID) => {
      const seriesItem = {};
      seriesItem.SeriesInstanceUID = seriesInstanceUID;
      seriesItem.ReferencedSOPSequence = evidenceCollection[seriesInstanceUID];
      evidenceStudyItem.ReferencedSeriesSequence.push(seriesItem);
    });
    if (options.requestedProcedures !== void 0) {
      if (!(typeof options.requestedProcedures === "object" || options.requestedProcedures instanceof Array)) {
        throw new Error("Option 'requestedProcedures' must have type Array.");
      }
      this.ReferencedRequestSequence = new ContentSequence(...options.requestedProcedures);
      this.CurrentRequestedProcedureEvidenceSequence = [
        evidenceStudyItem
      ];
    } else {
      this.PertinentOtherEvidenceSequence = [evidenceStudyItem];
    }
    if (options.previousVersions !== void 0) {
      const preCollection = {};
      options.previousVersions.forEach((version) => {
        if (version.StudyInstanceUID != options.evidence[0].StudyInstanceUID) {
          throw new Error("Previous version data sets must belong to the same study.");
        }
        const instanceItem = {};
        instanceItem.ReferencedSOPClassUID = version.SOPClassUID;
        instanceItem.ReferencedSOPInstanceUID = version.SOPInstanceUID;
        preCollection[version.SeriesInstanceUID].push(instanceItem);
      });
      const preStudyItem = {};
      preStudyItem.StudyInstanceUID = options.previousVersions[0].StudyInstanceUID;
      preStudyItem.ReferencedSeriesSequence = [];
      Object.keys(preCollection).forEach((seriesInstanceUID) => {
        const seriesItem = {};
        seriesItem.SeriesInstanceUID = seriesInstanceUID;
        seriesItem.ReferencedSOPSequence = preCollection[seriesInstanceUID];
        preStudyItem.ReferencedSeriesSequence.push(seriesItem);
      });
      this.PredecessorDocumentsSequence = [preStudyItem];
    }
    if (options.performedProcedureCodes !== void 0) {
      if (!(typeof options.performedProcedureCodes === "object" || options.performedProcedureCodes instanceof Array)) {
        throw new Error("Option 'performedProcedureCodes' must have type Array.");
      }
      this.PerformedProcedureCodeSequence = new ContentSequence(...options.performedProcedureCodes);
    } else {
      this.PerformedProcedureCodeSequence = [];
    }
    this.ReferencedPerformedProcedureStepSequence = [];
    _attributesToInclude.forEach((tag) => {
      const key = DicomMetaDictionary.punctuateTag(tag);
      const element = DicomMetaDictionary.dictionary[key];
      if (element !== void 0) {
        const keyword = element.name;
        const value = options.evidence[0][keyword];
        if (value !== void 0) {
          this[keyword] = value;
        }
      }
    });
  }
};

// src/sr/index.js
var sr = {
  coding: coding_exports,
  contentItems: contentItems_exports,
  documents: documents_exports,
  templates: templates_exports,
  valueTypes: valueTypes_exports
};
var sr_default = sr;

// src/anonymizer.js
var tagNamesToEmpty = [
  "PatientID",
  "PatientName",
  "SeriesDate",
  "AccessionNumber",
  "SeriesDescription",
  "StudyTime",
  "ContentTime",
  "ReferringPhysicianName",
  "PatientBirthDate",
  "PatientSex",
  "ClinicalTrialSiteID",
  "ClinicalTrialSiteName",
  "ClinicalTrialSubjectID",
  "ClinicalTrialSubjectReadingID",
  "ClinicalTrialTimePointID",
  "ClinicalTrialTimePointDescription",
  "ContrastBolusAgent",
  "StudyID",
  "InstanceCreationDate",
  "StudyDate",
  "ContentDate",
  "DateOfSecondaryCapture",
  "DateOfLastCalibration",
  "DateOfLastDetectorCalibration",
  "FrameAcquisitionDatetime",
  "FrameReferenceDatetime",
  "StudyVerifiedDate",
  "StudyReadDate",
  "ScheduledStudyStartDate",
  "ScheduledStudyStopDate",
  "StudyArrivalDate",
  "StudyCompletionDate",
  "ScheduledAdmissionDate",
  "ScheduledDischargeDate",
  "DischargeDate",
  "SPSStartDate",
  "SPSEndDate",
  "PPSStartDate",
  "PPSEndDate",
  "IssueDateOfImagingServiceRequest",
  "VerificationDateTime",
  "ObservationDateTime",
  "DateTime",
  "Date",
  "RefDatetime",
  "AcquisitionDate",
  "OverlayDate",
  "CurveDate",
  "AcquisitionDatetime",
  "SeriesTime",
  "AcquisitionTime",
  "OverlayTime",
  "CurveTime",
  "InstitutionName",
  "InstitutionAddress",
  "ReferringPhysicianAddress",
  "ReferringPhysicianPhoneNumbers",
  "ReferringPhysiciansIDSeq",
  "TimezoneOffsetFromUTC",
  "StationName",
  "StudyDescription",
  "InstitutionalDepartmentName",
  "PhysicianOfRecord",
  "PhysicianOfRecordIdSeq",
  "PerformingPhysicianName",
  "PerformingPhysicianIdSeq",
  "NameOfPhysicianReadingStudy",
  "PhysicianReadingStudyIdSeq",
  "OperatorName",
  "OperatorsIdentificationSeq",
  "AdmittingDiagnosisDescription",
  "AdmittingDiagnosisCodeSeq",
  "RefStudySeq",
  "RefPPSSeq",
  "RefPatientSeq",
  "RefImageSeq",
  "DerivationDescription",
  "SourceImageSeq",
  "IdentifyingComments",
  "IssuerOfPatientID",
  "PatientBirthTime",
  "PatientInsurancePlanCodeSeq",
  "PatientPrimaryLanguageCodeSeq",
  "PatientPrimaryLanguageModifierCodeSeq",
  "OtherPatientIDs",
  "OtherPatientNames",
  "OtherPatientIDsSeq",
  "PatientBirthName",
  "PatientAge",
  "PatientSize",
  "PatientWeight",
  "PatientAddress",
  "InsurancePlanIdentification",
  "PatientMotherBirthName",
  "MilitaryRank",
  "BranchOfService",
  "MedicalRecordLocator",
  "MedicalAlerts",
  "ContrastAllergies",
  "CountryOfResidence",
  "RegionOfResidence",
  "PatientPhoneNumbers",
  "EthnicGroup",
  "Occupation",
  "SmokingStatus",
  "AdditionalPatientHistory",
  "PregnancyStatus",
  "LastMenstrualDate",
  "PatientReligiousPreference",
  "PatientSexNeutered",
  "ResponsiblePerson",
  "ResponsibleOrganization",
  "PatientComments",
  "DeviceSerialNumber",
  "PlateID",
  "GeneratorID",
  "CassetteID",
  "GantryID",
  "ProtocolName",
  "AcquisitionDeviceProcessingDescription",
  "AcquisitionComments",
  "DetectorID",
  "AcquisitionProtocolDescription",
  "ContributionDescription",
  "ModifyingDeviceID",
  "ModifyingDeviceManufacturer",
  "ModifiedImageDescription",
  "ImageComments",
  "ImagePresentationComments",
  "StudyIDIssuer",
  "ScheduledStudyLocation",
  "ScheduledStudyLocationAET",
  "ReasonforStudy",
  "RequestingPhysician",
  "RequestingService",
  "RequestedProcedureDescription",
  "RequestedContrastAgent",
  "StudyComments",
  "AdmissionID",
  "IssuerOfAdmissionID",
  "ScheduledPatientInstitutionResidence",
  "AdmittingDate",
  "AdmittingTime",
  "DischargeDiagnosisDescription",
  "SpecialNeeds",
  "ServiceEpisodeID",
  "IssuerOfServiceEpisodeId",
  "ServiceEpisodeDescription",
  "CurrentPatientLocation",
  "PatientInstitutionResidence",
  "PatientState",
  "ReferencedPatientAliasSeq",
  "VisitComments",
  "ScheduledStationAET",
  "ScheduledPerformingPhysicianName",
  "SPSDescription",
  "ScheduledStationName",
  "SPSLocation",
  "PreMedication",
  "PerformedStationAET",
  "PerformedStationName",
  "PerformedLocation",
  "PerformedStationNameCodeSeq",
  "PPSID",
  "PPSDescription",
  "RequestAttributesSeq",
  "PPSComments",
  "AcquisitionContextSeq",
  "PatientTransportArrangements",
  "RequestedProcedureLocation",
  "NamesOfIntendedRecipientsOfResults",
  "IntendedRecipientsOfResultsIDSequence",
  "PersonAddress",
  "PersonTelephoneNumbers",
  "RequestedProcedureComments",
  "ReasonForTheImagingServiceRequest",
  "OrderEnteredBy",
  "OrderEntererLocation",
  "OrderCallbackPhoneNumber",
  "ImagingServiceRequestComments",
  "ConfidentialityPatientData",
  "ScheduledStationNameCodeSeq",
  "ScheduledStationGeographicLocCodeSeq",
  "PerformedStationGeoLocCodeSeq",
  "ScheduledHumanPerformersSeq",
  "ActualHumanPerformersSequence",
  "HumanPerformersOrganization",
  "HumanPerformersName",
  "VerifyingOrganization",
  "VerifyingObserverName",
  "AuthorObserverSequence",
  "ParticipantSequence",
  "CustodialOrganizationSeq",
  "VerifyingObserverIdentificationCodeSeq",
  "PersonName",
  "ContentSeq",
  "OverlayData",
  "OverlayComments",
  "IconImageSequence",
  "TopicSubject",
  "TopicAuthor",
  "TopicKeyWords",
  "TextString",
  "Arbitrary",
  "TextComments",
  "ResultsIDIssuer",
  "InterpretationRecorder",
  "InterpretationTranscriber",
  "InterpretationText",
  "InterpretationAuthor",
  "InterpretationApproverSequence",
  "PhysicianApprovingInterpretation",
  "InterpretationDiagnosisDescription",
  "ResultsDistributionListSeq",
  "DistributionName",
  "DistributionAddress",
  "InterpretationIdIssuer",
  "Impressions",
  "ResultComments",
  "DigitalSignaturesSeq",
  "DataSetTrailingPadding"
];
function getTagsNameToEmpty() {
  return [...tagNamesToEmpty];
}
function cleanTags(dict, tagNamesToReplace = void 0, customTagNamesToEmpty = void 0) {
  if (tagNamesToReplace == void 0) {
    tagNamesToReplace = {
      "00100010": "ANON^PATIENT",
      "00100020": "ANON^ID"
    };
  }
  var tags = customTagNamesToEmpty != void 0 ? customTagNamesToEmpty : tagNamesToEmpty;
  tags.forEach(function(tag) {
    var tagInfo = DicomMetaDictionary.nameMap[tag];
    if (tagInfo && tagInfo.version != "PrivateTag") {
      var tagNumber = tagInfo.tag, tagString = Tag2.fromPString(tagNumber).toCleanString();
      if (dict[tagString]) {
        var newValue;
        if (tagString in tagNamesToReplace) {
          newValue = [tagNamesToReplace[tagString]];
        } else {
          newValue = [];
        }
        dict[tagString] = ValueRepresentation.addTagAccessors(dict[tagString]);
        dict[tagString].Value = newValue;
      }
    }
  });
}

// src/index.js
var data = {
  BitArray,
  ReadBufferStream,
  DeflatedReadBufferStream,
  WriteBufferStream,
  DicomDict,
  DicomMessage: DicomMessage4,
  DicomMetaDictionary,
  Tag: Tag2,
  ValueRepresentation,
  Colors,
  datasetToDict,
  datasetToBuffer,
  datasetToBlob
};
var derivations = {
  DerivedDataset: DerivedDataset_default,
  DerivedPixels: DerivedPixels_default,
  DerivedImage: DerivedImage_default,
  Segmentation: Segmentation_default,
  StructuredReport: StructuredReport_default,
  ParametricMap: ParametricMap_default
};
var normalizers = {
  Normalizer,
  ImageNormalizer,
  MRImageNormalizer,
  EnhancedMRImageNormalizer,
  EnhancedUSVolumeNormalizer,
  CTImageNormalizer,
  PETImageNormalizer,
  SEGImageNormalizer,
  DSRNormalizer
};
var anonymizer = {
  cleanTags,
  getTagsNameToEmpty
};
var dcmjs = {
  DICOMWEB,
  adapters: adapters_default,
  data,
  derivations,
  normalizers,
  sr: sr_default,
  utilities: utilities_default,
  log: log_default,
  anonymizer
};
DicomDict.setDicomMessageClass(DicomMessage4);
ValueRepresentation.setDicomMessageClass(DicomMessage4);
ValueRepresentation.setTagClass(Tag2);
Tag2.setDicomMessageClass(DicomMessage4);
export {
  DICOMWEB,
  adapters_default as adapters,
  anonymizer,
  data,
  dcmjs as default,
  derivations,
  log_default as log,
  normalizers,
  sr_default as sr,
  utilities_default as utilities
};
